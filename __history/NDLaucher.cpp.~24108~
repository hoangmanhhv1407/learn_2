//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop
#pragma comment(lib, "wbemuuid.lib")
#include "NDLaucher.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
#include "proc.h"
#include <ShellApi.h>
#include "exthook.h"
#include "Wisrd.h"
#include <Windows.h>
#include <vector>
#include <string>
#define _WIN32_DCOM
#include <comdef.h>
#include <Wbemidl.h>
#include "kernelinterface.h"
#include <fstream>
#include <sstream>
#include <iostream>
#include <TlHelp32.h>
#include <tchar.h>
TForm1 *Form1;
HINSTANCE PsGameGuard;
using namespace std;
//---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner)
	: TForm(Owner)
{
}
HANDLE grabHandle( const char* game)
{
    HWND gameWindow = FindWindowA(NULL, "NINEDRAGONS_Completed.exe");
    if (!gameWindow)
    {
		std::cout << "Not Found Game" << std::endl;
        return NULL;
    }
    DWORD procID;
    GetWindowThreadProcessId(gameWindow, &procID);
    if (!procID)
    {
        std::cout << "Faile to get ProcID" << std::endl;
    }

    HANDLE handle = OpenProcess(PROCESS_ALL_ACCESS, FALSE, procID);
    if (!handle)
    {
        std::cout << "Faile to get Hanlde" << std::endl;
    }
    return handle;
}
DWORD GetProcId(const wchar_t* procName)
{
	//Take a snapshot of all processes and store it on a Handle
	const HANDLE hSnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);

	if (hSnap == INVALID_HANDLE_VALUE)
	{
		return 0;
	}

	PROCESSENTRY32 procEntry;
	procEntry.dwSize = sizeof(procEntry);

	if (!Process32First(hSnap, &procEntry))
	{
		//Unsuccessful attempt to retrieve information from process
		CloseHandle(hSnap);
		return 0;
	}

	do
	{
		if (_wcsicmp(procEntry.szExeFile, procName) == 0)
		{
			const DWORD procId = procEntry.th32ProcessID;
			CloseHandle(hSnap);
			return procId;
		}
	} while (Process32Next(hSnap, &procEntry));

	CloseHandle(hSnap);
    Application->Terminate();
	return 0;
}
void suspend(DWORD processId)
{
    HANDLE hThreadSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPTHREAD, 0);

    THREADENTRY32 threadEntry;
    threadEntry.dwSize = sizeof(THREADENTRY32);

    Thread32First(hThreadSnapshot, &threadEntry);

    do
    {
        if (threadEntry.th32OwnerProcessID == processId)
        {
            HANDLE hThread = OpenThread(THREAD_ALL_ACCESS, FALSE,
                threadEntry.th32ThreadID);

            SuspendThread(hThread);
            CloseHandle(hThread);
        }
    } while (Thread32Next(hThreadSnapshot, &threadEntry));

    CloseHandle(hThreadSnapshot);
}
void __declspec(naked)ZoomMaps()
{
    _asm {
        push eax
        mov eax, 0x0155EC3C
        mov DWORD PTR SS : [eax] , 0x41F00000
        pop eax
        mov eax, [esp + 0x4]
        mov [ecx + 0xC], eax
        push 0x00736482
        ret
	}
}
void __declspec(naked)FunChangePatch()
{
	_asm {
        pushad
        lea edx, [esp + 0x40]
		add BYTE PTR SS : [edx + 0x7] , 0x4
		mov BYTE PTR SS : [edx + 0xA] , 0x75
        popad
        lea edx, [esp + 0x20]
        mov ecx, esi
        mov eax, 0x006A9389
        jmp eax
   }
}
__declspec(naked)void ourFunction1()
{
    __asm
    {
        push eax
        mov eax, 0x00000001
        mov[ebp + 0x5054], eax
        mov[ebp + 0x5058], eax
		mov[ebp + 0x505C], eax
        pop eax
        push 0x005A0AAE
        ret
    }
}
void resume(DWORD processId)
{
    HANDLE hThreadSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPTHREAD, 0);

    THREADENTRY32 threadEntry;
    threadEntry.dwSize = sizeof(THREADENTRY32);

    Thread32First(hThreadSnapshot, &threadEntry);

    do
    {
        if (threadEntry.th32OwnerProcessID == processId)
        {
            HANDLE hThread = OpenThread(THREAD_ALL_ACCESS, FALSE,
                threadEntry.th32ThreadID);

            ResumeThread(hThread);
            CloseHandle(hThread);
        }
    } while (Thread32Next(hThreadSnapshot, &threadEntry));

    CloseHandle(hThreadSnapshot);
}
void PatchEx(BYTE* dst, BYTE* src, unsigned int size, HANDLE hProcess)
{
    DWORD oldprotect;
    VirtualProtectEx(hProcess, dst, size, PAGE_EXECUTE_READWRITE, &oldprotect);
    WriteProcessMemory(hProcess, dst, src, size, nullptr);
    VirtualProtectEx(hProcess, dst, size, oldprotect, &oldprotect);
}

DWORD GetProcId2(const wchar_t* procName, int *CountClient)
{
    const char * DllPath = "PS.dll";
    int CountLienRunIngame = 0;
	DWORD TestByPass = 0x0040A8AA;
	DWORD TestByPass1 = 0x0040AA93;
	DWORD Test3 = 0x0040A7F0;
	DWORD Test4 = 0x006B114E;

    //Take a snapshot of all processes and store it on a Handle
    const HANDLE hSnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
    if (hSnap == INVALID_HANDLE_VALUE)
	{
        return 0;
    }

    PROCESSENTRY32 procEntry;
    procEntry.dwSize = sizeof(procEntry);

    if (!Process32First(hSnap, &procEntry))
    {
        //Unsuccessful attempt to retrieve information from process
        CloseHandle(hSnap);
        return 0;
    }

    do
	{
		BYTE valueBypass = 0;
		BYTE valueBypass2 = 235;
        if (_wcsicmp(procEntry.szExeFile, procName) == 0)
		{
        const DWORD procId = procEntry.th32ProcessID;
        HANDLE handlGame = OpenProcess(PROCESS_ALL_ACCESS, FALSE, procId);

			if (CountLienRunIngame < 5) {
				CountLienRunIngame++;

				ReadProcessMemory(handlGame, (LPVOID)0x00413B96, &valueBypass, sizeof(BYTE), NULL);
				if (valueBypass == 235) {

				}
				else
				{
					CloseHandle(hSnap);
					//ShowMessage(valueBypass);

					int i = 0;
					DWORD Address;
					BYTE AddressGG[5] = { 0xEB,0x4C };
					ReadProcessMemory(handlGame, (LPVOID)0x8BF144, &Address, sizeof(Address), NULL);
					while (!Address)
					{
						ReadProcessMemory(handlGame, (LPVOID)0x0177EA8D, &Address, sizeof(Address), NULL);
						i++;
					}


						if (valueBypass != valueBypass2) {
							(*CountClient) =  CountLienRunIngame;
							DWORD AddressCPrcessA;
							suspend(procId);
							return procId;
						}
				}
			}
            else
			{     //ShowMessage(valueBypass);
				  CloseHandle(hSnap);
                  return -1;
			}

        }
    } while (Process32Next(hSnap, &procEntry));

    CloseHandle(hSnap);
    return 0;
}
__declspec(naked) void LoadClass()
{
	__asm
    {
		nop
        nop
		nop
        nop
		nop
			xor ecx,ecx
			mov ecx,[eax]
			test ecx,ecx
			jz Default
			xor ecx,ecx
			mov ecx,[eax]
            lea eax,[eax+0x4]
            push eax // push variable
			cmp ecx,0x1
            jnz KiemTraRank2
			mov  DWORD PTR SS : [eax + 0x70] , 0x24E
            mov  DWORD PTR SS : [eax + 0x98] , 0x0
			mov  DWORD PTR SS : [eax + 0x9C] , 0x00
			mov  DWORD PTR SS : [eax + 0xA0] , 0x15
			mov  DWORD PTR SS : [eax + 0xA4] , 0x13
			jmp ProcessShowStar
            KiemTraRank2:
			cmp ecx,0x2
			jnz KiemTraRank3
			mov  DWORD PTR SS : [eax + 0x70] , 0x24E
			mov  DWORD PTR SS : [eax + 0x98] , 0x13
			mov  DWORD PTR SS : [eax + 0x9C] , 0x00
			mov  DWORD PTR SS : [eax + 0xA0] , 0x28
			mov  DWORD PTR SS : [eax + 0xA4] , 0x13
			jmp ProcessShowStar
            KiemTraRank3:
			cmp ecx,0x3
			jnz KiemTraRank4
			mov  DWORD PTR SS : [eax + 0x70] , 0x24E
			mov  DWORD PTR SS : [eax + 0x98] , 0x28
			mov  DWORD PTR SS : [eax + 0x9C] , 0x00
			mov  DWORD PTR SS : [eax + 0xA0] , 0x3D
			mov  DWORD PTR SS : [eax + 0xA4] , 0x13
			jmp ProcessShowStar
			KiemTraRank4:
			cmp ecx,0x4
			jnz KiemTraRank5
			mov  DWORD PTR SS : [eax + 0x70] , 0x24E
			mov  DWORD PTR SS : [eax + 0x98] , 0x3D
			mov  DWORD PTR SS : [eax + 0x9C] , 0x00
			mov  DWORD PTR SS : [eax + 0xA0] , 0x52
			mov  DWORD PTR SS : [eax + 0xA4] , 0x13
			jmp ProcessShowStar
			KiemTraRank5:
			mov  DWORD PTR SS : [eax + 0x70] , 0x24E
			mov  DWORD PTR SS : [eax + 0x98] , 0x52
			mov  DWORD PTR SS : [eax + 0x9C] , 0x00
			mov  DWORD PTR SS : [eax + 0xA0] , 0x64
			mov  DWORD PTR SS : [eax + 0xA4] , 0x13
            ProcessShowStar:
            push 0x00000000
			push 0x0089E914
			mov ecx, DWORD PTR SS : [0x10CC37C]
			mov edx,ebx
			add edx,0x11
			push edx
            push eax
			push 0x01107268
			mov ecx,DWORD PTR SS:[0x01733AC4]
			mov edx,[ecx]
			call dword ptr [edx+0x40]
            mov ecx, DWORD PTR SS : [0x10CC37C]
			mov edx,ecx
			add edx,eax
            pop eax
			add edx,0x53
			push edx
			mov ecx, eax
			mov eax, 0x7BA280
			call eax //Draw1
            pop eax
			push 0x1732CC8
            mov ecx, eax
            mov eax, 0x7B9850 // SetToolTipStringEx_Noresize1
			call eax
			/*mov eax, [esp + 0x18]
            mov ecx, DWORD PTR SS : [0x1733AC4]
            mov edi, eax
            shl edi, 0x5
            mov edx, [ecx]
            add edi, eax
            mov eax, DWORD PTR SS : [0x8CD0B4]
            shl edi, 4
            mov eax, DWORD PTR DS : [0x10D94A8]
			mov eax, [eax + 0x474]
			push eax
            mov eax, [eax * 0x4 + 0x010D7B78]
            push eax
            call DWORD PTR SS : [edx + 0x40]
            pop edx
            cmp edx, 0x1
            jnz CheckClass2
            sub eax, 0x25
            CheckClass2 :
            cmp edx, 0x2
            jnz CheckClass3
            sub  eax, 0x15
            CheckClass3 :
            cmp edx, 0x3
            jnz CheckClass4
            sub eax, 0xE
            CheckClass4 :
            cmp edx, 0x4
            jnz CheckClass5
            sub eax, 0xC
            CheckClass5 :
            cmp edx, 0x5
            jnz CheckClass6
            add eax, 0x6
            CheckClass6 :
            cmp edx, 0x6
            jnz CheckClass7
            sub eax, 0x26
            CheckClass7 :
            cmp edx, 0x7
            jnz CheckClass8
            sub eax, 0x5B
            CheckClass8 :
            cmp edx, 0x8
            jnz CheckClass9
            sub eax, 0x2
            CheckClass9 :
            mov[esp + 0x18], eax
            mov eax, DWORD PTR SS : [0x10CC3D8]
            cmp eax, 0xFFFFFFFF
			jnz loc_65FCEA
            mov edx, DWORD PTR SS : [0x10CC380]
            mov ecx, DWORD PTR SS : [0x10CC37C]
            mov[esp + 0x28], edx
            jmp  loc_65FD0C
            loc_65FCEA :
        FLD DWORD PTR DS : [0x10CC3EC]
            mov ecx, 0x0085C4F8
            call ecx
            FLD DWORD PTR DS : [0x10CC3F0]
            mov[esp + 0x24], eax
            call ecx
            mov ecx, [esp + 0x24]
            mov[esp + 0x28], eax
            loc_65FD0C :
        //load lenght Name
        push ecx
            mov edx, DWORD PTR DS : [0x10D94A8]
            lea edx, [edx + 0x10]
            mov ecx, DWORD PTR DS : [0x1733AC4]
            mov eax, [ecx]
            push edx
            call DWORD PTR DS : [eax + 0x40]
            mov edi, eax
			//End
            pop ecx
            pop eax
            push eax
            push 0
            push 0
            push 0x20
            //Get Type
			mov edx, DWORD PTR DS : [0x10D94A8]
			mov edx, [edx + 0x474]
            cmp edx,0x1
			jnz CheckClass12
			push 0xFF00FF00
			jmp RunprocessCn1
			CheckClass12:
			cmp edx,0x2
			jnz CheckClass13
			push 0xFFFF00FF
			jmp RunprocessCn1
			CheckClass13:
			cmp edx,0x3
			jnz CheckClass14
			push 0xFFFFFF00
			jmp RunprocessCn1
			CheckClass14:
			cmp edx,0x4
			jnz CheckClass15
			push 0xFFDE8200
			jmp RunprocessCn1
			CheckClass15:
			cmp edx,0x5
			jnz CheckClass16
			push 0xFF0000FF
			jmp RunprocessCn1
			CheckClass16:
			cmp edx,0x6
			jnz CheckClass17
			push 0xFFFF0000
			jmp RunprocessCn1
			CheckClass17:
			push 0xFFFFFFFF
			RunprocessCn1:
			push eax
			sub eax,0x4
			mov edx,[eax]
			cmp edx,0x1
			jnz Rank2
            push 0x161E
			jmp processfindtext
			Rank2:
			cmp edx,0x2
			jnz Rank3
			push 0x161F
			jmp processfindtext
			Rank3:
			cmp edx,0x3
			jnz Rank4
			push 0x1620
			jmp processfindtext
			Rank4:
			cmp edx,0x4
			jnz Rank5
			push 0x1621
			jmp processfindtext
			Rank5:
			push 0x1622
			processfindtext:
            push 0x19
			mov ecx,0x01733B30
			mov eax,0x007C2CF0
			call eax
            pop edx
			push eax
			mov eax,edx
            mov ecx, DWORD PTR SS : [0x10CC37C]
			jmp loc_65FDA0
            loc_65FDA0 :
			mov edx, [esp + 0x2C]
			push ebx
			mov edx, edi
			add edx, 0xc
			add ecx, edx
			push ecx
            mov ecx, eax
            mov eax, 0x7BA100
            call eax
            pop eax
            push 0x5
            mov ecx, eax
            mov eax, 0x7B9C30
			call eax*/
            mov eax, DWORD PTR DS : [0x010D94A8]
            mov ecx, 0x0065FDC3
            jmp ecx

			Default:
			mov eax, DWORD PTR DS : [0x010D94A8]
			push 0x0065FDC3
            ret
	}
}
/*__declspec(naked) void LoadNickIcon()
{
    __asm
    {
        //for
			nop
			nop
			nop
			nop
			nop
            add eax,0x20
			push eax
            mov eax, DWORD PTR SS : [0x10D94A8]
            mov ecx, [eax + 0x470]
            mov eax, [eax + ecx * 0x4 + 0x20]
			cmp eax, 0x279B
			jnz nCayKiem
			pop eax
			mov ecx, eax
			mov edx, eax
			mov  DWORD PTR SS : [ecx + 0x70] , 0x4F
			mov  DWORD PTR SS : [ecx + 0x9C] , 0x00
			mov  DWORD PTR SS : [ecx + 0xA0] , 0x82
			mov  DWORD PTR SS : [ecx + 0xA4] , 0x14
			jmp RunProcessDefault

            nCayKiem:
            cmp eax, 0x2858
			jnz nDaiTuongQuan
			pop eax
			mov ecx, eax
			mov edx, eax
			mov  DWORD PTR SS : [ecx + 0x70] , 0x51
			mov  DWORD PTR SS : [ecx + 0x9C] , 0xB4
			mov  DWORD PTR SS : [ecx + 0xA0] , 0x82
			mov  DWORD PTR SS : [ecx + 0xA4] , 0xC5
			mov ecx,0x10
			jmp RunProcessaDD

            nDaiTuongQuan:
            cmp eax, 0x6A6
			jnz nVanSuNhuY
			pop eax
			mov ecx, eax
			mov edx, eax
			mov  DWORD PTR SS : [ecx + 0x70] , 0x51
			mov  DWORD PTR SS : [ecx + 0x9C] , 0x9F
			mov  DWORD PTR SS : [ecx + 0xA0] , 0x82
			mov  DWORD PTR SS : [ecx + 0xA4] , 0xB3
            mov ecx,0xD
			jmp RunProcessaDD

			nVanSuNhuY:
			cmp eax, 0x2859
			jnz Top1PH
			pop eax
			mov ecx, eax
			mov edx, eax
			mov  DWORD PTR SS : [ecx + 0x70] , 0x222
			mov  DWORD PTR SS : [ecx + 0x9C] , 0x00
			mov  DWORD PTR SS : [ecx + 0xA0] , 0x82
			mov  DWORD PTR SS : [ecx + 0xA4] , 0x37
			mov ecx,0x16
			jmp RunProcessSub

			Top1PH:
			cmp eax, 0x2772
			jnz Top2PH
			pop eax
			mov ecx, eax
			mov edx, eax
			mov  DWORD PTR SS : [ecx + 0x70] , 0x220
			mov  DWORD PTR SS : [ecx + 0x9C] , 0x00
			mov  DWORD PTR SS : [ecx + 0xA0] , 0x82
			mov  DWORD PTR SS : [ecx + 0xA4] , 0x30
			mov ecx,0x10
			jmp RunProcessSub

            Top2PH:
			cmp eax, 0x2773
			jnz Top3PH
			pop eax
			mov ecx, eax
			mov edx, eax
			mov  DWORD PTR SS : [ecx + 0x70] , 0x220
			mov  DWORD PTR SS : [ecx + 0x9C] , 0x39
			mov  DWORD PTR SS : [ecx + 0xA0] , 0x82
			mov  DWORD PTR SS : [ecx + 0xA4] , 0x66
			mov ecx,0xC
			jmp RunProcessSub

			Top3PH:
			cmp eax, 0x2774
			jnz Top4PH
			pop eax
			mov ecx, eax
			mov edx, eax
			mov  DWORD PTR SS : [ecx + 0x70] , 0x220
			mov  DWORD PTR SS : [ecx + 0x9C] , 0x70
			mov  DWORD PTR SS : [ecx + 0xA0] , 0x82
			mov  DWORD PTR SS : [ecx + 0xA4] , 0x9D
			mov ecx,0xC
			jmp RunProcessSub

			Top4PH:
			cmp eax, 0x2775
			jnz nChucMungNamMoi
			pop eax
			mov ecx, eax
			mov edx, eax
			mov  DWORD PTR SS : [ecx + 0x70] , 0x220
			mov  DWORD PTR SS : [ecx + 0x9C] , 0xA6
			mov  DWORD PTR SS : [ecx + 0xA0] , 0x82
			mov  DWORD PTR SS : [ecx + 0xA4] , 0xD4
			mov ecx,0xC
			jmp RunProcessSub

            nChucMungNamMoi:
            cmp eax, 0x285A
			jnz AncuCaoThuZplay
			pop eax
			mov ecx, eax
			mov edx, eax
			mov  DWORD PTR SS : [ecx + 0x70] , 0x222
			mov  DWORD PTR SS : [ecx + 0x9C] , 0x42
			mov  DWORD PTR SS : [ecx + 0xA0] , 0x82
			mov  DWORD PTR SS : [ecx + 0xA4] , 0x6D
			jmp RunProcessDefault

			AncuCaoThuZplay:
			cmp eax, 0x2857
			jnz AoAnhPhucNhan
			pop eax
			mov ecx, eax
			mov edx, eax
			mov  DWORD PTR SS : [ecx + 0x70] , 0x53
			mov  DWORD PTR SS : [ecx + 0x9C] , 0x2D
			mov  DWORD PTR SS : [ecx + 0xA0] , 0x82
			mov  DWORD PTR SS : [ecx + 0xA4] , 0x45
            mov ecx,0x8
			jmp RunProcessaDD


			AoAnhPhucNhan:
			cmp eax, 0x2776
			jnz LuuNguyetCoTinh
			pop eax
			mov ecx, eax
			mov edx, eax
			mov  DWORD PTR SS : [ecx + 0x70] , 0x56
			mov  DWORD PTR SS : [ecx + 0x9C] , 0x3C
			mov  DWORD PTR SS : [ecx + 0xA0] , 0x82
			mov  DWORD PTR SS : [ecx + 0xA4] , 0x51
            mov ecx,0x9
			jmp RunProcessaDD

            LuuNguyetCoTinh:
			cmp eax, 0x2777
			jnz PhaCoTrangRam
			pop eax
			mov ecx, eax
			mov edx, eax
			mov  DWORD PTR SS : [ecx + 0x70] , 0x21F
			mov  DWORD PTR SS : [ecx + 0x9C] , 0x00
			mov  DWORD PTR SS : [ecx + 0xA0] , 0x82
			mov  DWORD PTR SS : [ecx + 0xA4] , 0x2B
            mov ecx,0xC
			jmp RunProcessSub

			PhaCoTrangRam:
			cmp eax, 0x2778
			jnz JumpOut
            pop eax
			mov ecx, eax
			mov edx, eax
			mov  DWORD PTR SS : [ecx + 0x70] , 0x21F
			mov  DWORD PTR SS : [ecx + 0x9C] , 0x2C
			mov  DWORD PTR SS : [ecx + 0xA0] , 0x82
			mov  DWORD PTR SS : [ecx + 0xA4] , 0x54
			mov ecx,0x7
			jmp RunProcessSub

			RunProcessaDD:
            push eax
            push 0x00000000
            push 0x0089E914
			lea  eax, [ebx - 0x14]
            add  eax, ecx
			push eax
			mov eax,ebp
			add  eax, 0x9
			push eax
			mov ecx, edx
			mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
			call eax
			pop eax
			push 0x1732CC8
			mov ecx, eax
			mov eax, 0x7B9850
			call eax //Draw1
            mov edx, 0x0065FFBF
            jmp edx
            JumpOut :
			pop eax
            mov ecx, DWORD PTR SS : [0x1733AC4]
            mov eax, 0x0065FF7E
			jmp eax

            RunProcessSub:
            push eax
            push 0x00000000
            push 0x0089E914
			lea  eax, [ebx - 0x14]
            sub eax,ecx
			push eax
			mov eax,ebp
			add  eax, 0x9
			push eax
			mov ecx, edx
			mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
			call eax
			pop eax
			push 0x1732CC8
			mov ecx, eax
			mov eax, 0x7B9850
			call eax //Draw1
            mov edx, 0x0065FFBF
			jmp edx

            RunProcessDefault:
            push eax
            push 0x00000000
            push 0x0089E914
			lea  eax, [ebx - 0x14]
            sub eax,0xD
			push eax
			mov eax,ebp
			add  eax, 0x9
			push eax
			mov ecx, edx
			mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
			call eax
			pop eax
			push 0x1732CC8
			mov ecx, eax
			mov eax, 0x7B9850
			call eax //Draw1
            mov edx, 0x0065FFBF
            jmp edx

			//PhuHo
            PhuhoProcess:
            push eax
            push 0x00000000
            push 0x0089E914
            lea  eax, [ebx - 0x14]
            sub  eax, 0xC
			push eax
            mov eax,ebp
			add  eax, 0x9
			push eax
            mov ecx, edx
			mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
            call eax
            pop eax
			push 0x1732CC8
            mov ecx, eax
            mov eax, 0x7B9850
			call eax //Draw1
            mov edx, 0x0065FFBF
			jmp edx


			LoadLayer1:
			mov eax,[esp+0x4]
			cmp eax,0x0
			jnz NextLayer11
			mov eax,0x26
			ret 0x4

			NextLayer11:
			cmp eax,0x26
			jnz NextLayer12
			mov eax,0x4D
			ret 0x4

			NextLayer12:
			cmp eax,0x4D
			jnz NextLayer13
			mov eax,0x74
			ret 0x4

			NextLayer13:
			cmp eax,0x74
			jnz NextLayer14
			mov eax,0x9A
			ret 0x4

			NextLayer14:
			cmp eax,0x9A
			jnz NextLayer15
			mov eax,0xC0
			ret 0x4

			NextLayer15:
			cmp eax,0xC0
			jnz NextLayer16
			mov eax,0xE8
			ret 0x4

			NextLayer16:
			cmp eax,0xE8
			jnz NextLayer17
			mov eax,0x10F
			ret 0x4

			NextLayer17:
			cmp eax,0x10F
			jnz NextLayer18
			mov eax,0x137
			ret 0x4

			NextLayer18:
			cmp eax,0x137
			jnz NextLayer19
			mov eax,0x15D
			ret 0x4

			NextLayer19:
			cmp eax,0x15D
			jnz NextLayer20
            mov eax,0x183
			ret 0x4

			NextLayer20:
			cmp eax,0x183
			jnz NextLayer21
            mov eax,0x0
			ret 0x4

			NextLayer21:
			mov eax,0x0
			ret 0x4

			//
			LoadLayer2:
			mov eax,[esp+0x4]
			cmp eax,0x0
			jnz NextLayer21A
			mov eax,0x25
			ret 0x4

			NextLayer21A:
			cmp eax,0x26
			jnz NextLayer22A
			mov eax,0x4C
			ret 0x4

			NextLayer22A:
			cmp eax,0x4D
			jnz NextLayer23
			mov eax,0x74
			ret 0x4

			NextLayer23:
			cmp eax,0x74
			jnz NextLayer24
			mov eax,0x99
			ret 0x4

			NextLayer24:
			cmp eax,0x9A
			jnz NextLayer25
			mov eax,0xBF
			ret 0x4

			NextLayer25:
			cmp eax,0xC0
			jnz NextLayer26
			mov eax,0xE7
			ret 0x4

			NextLayer26:
			cmp eax,0xE8
			jnz NextLayer27
			mov eax,0x10F
			ret 0x4

			NextLayer27:
			cmp eax,0x10F
			jnz NextLayer28
			mov eax,0x136
			ret 0x4

			NextLayer28:
			cmp eax,0x137
			jnz NextLayer29
			mov eax,0x15C
			ret 0x4

			NextLayer29:
			cmp eax,0x15D
			jnz NextLayer30
			mov eax,0x182
			ret 0x4

			NextLayer30:
			cmp eax,0x183
			jnz NextLayer31
            mov eax,0x1A8
			ret 0x4

			NextLayer31:
			mov eax,0x25
			ret 0x4

    }
}  */
__declspec(naked) void LoadNickIcon()
{
    __asm
    {
			nop
			nop
			nop
			nop
			nop
			push eax
			//call TangGiaTriByte

			//
			mov eax, DWORD PTR SS : [0x10D94A8]
            mov ecx, [eax + 0x470]
            mov eax, [eax + ecx * 0x4 + 0x20]
			push eax
			call GetIDNickIcon
			cmp eax,0xFF
            jz JumpOut
			mov ecx,[esp]
			push ecx
			push eax
			call ShowIconNick
			mov eax,[esp]
			add eax,0x20
			mov edx,eax
            push eax
            push 0x00000000
            push 0x0089E914
			lea  eax, [ebx - 0x7]
			push eax
			mov eax,ebp
			add  eax, 0x9
			push eax
			mov ecx, edx
			mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
			call eax
			pop eax
			push 0x1732CC8
			mov ecx, eax
			mov eax, 0x7B9850
			call eax //Draw1
            pop eax
			push 0x0065FFBF
			ret



            JumpOut :
			pop eax
            mov ecx, DWORD PTR SS : [0x1733AC4]
            push 0x0065FF7E
			ret


		   /* TangGiaTriByte:
			mov eax,[esp+0x4]
			xor ecx,ecx
			mov cl,[eax]
			add ecx,1
			cmp ecx,15
			ja LonHon10Lan
			mov [eax],cl
			ret

			LonHon10Lan:
			mov byte ptr [eax],0x0
			xor ecx,ecx
			mov cl,[eax+0x1]
			add ecx,0x1
			cmp ecx,9
			ja quaytrolaibandauchay
            mov byte ptr [eax+0x1],cl
			mov byte ptr [eax],0x0
			ret

			quaytrolaibandauchay:
            mov byte ptr [eax+0x1],0x0
			mov byte ptr [eax],0x0
			ret   */

			TangGiaTriByte:
            mov eax,[esp+0x4]
			mov edx,dword ptr [0x01733B04]
			mov ecx,[eax+0x4]
			sub edx,ecx
			cmp edx,100
			jna ContinueShowIconNick
            mov edx,dword ptr [0x01733B04]
			mov [eax+0x4],edx
            xor ecx,ecx
			mov cl,[eax+0x1]
			add ecx,1
			cmp ecx,9
			ja quaytrolaibandauchay
			mov byte ptr [eax+0x1],cl
			ret
            quaytrolaibandauchay:
			mov byte ptr [eax+0x1],0
			ret

			ContinueShowIconNick:
            ret


			GetIDNickIcon:
			sub esp,0x4
			xor ecx,ecx
			mov [esp],ecx
			BackLoopGetNickIconID:
			mov eax,[0x016A2178]
			xor edx,edx
			mov edx,[eax+ecx]
			mov ecx,[esp+0x8]
			cmp ecx,edx
			jnz KiemTraGiaTriTiepTheo
			mov eax,[0x016A2178]
			xor edx,edx
			mov ecx,[esp]
			mov dl,[eax+ecx+0x90]
			mov eax,edx
			add esp,0x4
			ret 0x4

			KiemTraGiaTriTiepTheo:
			mov ecx,[esp]
			add ecx,0xBC
			mov [esp],ecx
			cmp ecx,0x20154
			jl BackLoopGetNickIconID
			add esp,0x4
			ret 0x4


			ShowIconNick:
			mov eax,[esp+0x4]
			cmp eax,10
			jae KiemTraIDICon2
			push 6523
			push 25
			mov ecx,0x01733B30
			mov eax,0x007C2CF0
			call eax
			push eax
			mov ecx,0x015720C8
			mov eax,0x007B1EC0
			call eax
			mov ecx,[esp+0x8]
			mov  DWORD PTR SS : [ecx + 0x70+0x20] , eax
			mov  DWORD PTR SS : [ecx + 0xA0+0x20] , 0x82
			mov  DWORD PTR SS : [ecx + 0x98+0x20] , 0
			mov eax,[esp+0x4]
			imul eax,20
			mov  DWORD PTR SS : [ecx + 0x9C+0x20] , eax
			add eax,20
			mov  DWORD PTR SS : [ecx + 0xA4+0x20] , eax
			ret 0x8

			KiemTraIDICon2:
			cmp eax,20
			jae KiemTraIDICon3
			push 6524
			push 25
			mov ecx,0x01733B30
			mov eax,0x007C2CF0
			call eax
			push eax
			mov ecx,0x015720C8
			mov eax,0x007B1EC0
			call eax
			mov ecx,[esp+0x8]
			mov  DWORD PTR SS : [ecx + 0x70+0x20] , eax
			mov  DWORD PTR SS : [ecx + 0xA0+0x20] , 0x82
			mov  DWORD PTR SS : [ecx + 0x98+0x20] , 0
			mov eax,[esp+0x4]
			sub eax,10
			imul eax,20
			mov  DWORD PTR SS : [ecx + 0x9C+0x20] , eax
			add eax,20
			mov  DWORD PTR SS : [ecx + 0xA4+0x20] , eax
			ret 0x8

			KiemTraIDICon3:
			cmp eax,30
			jae KiemTraIDICon4
			push 6525
			push 25
			mov ecx,0x01733B30
			mov eax,0x007C2CF0
			call eax
			push eax
			mov ecx,0x015720C8
			mov eax,0x007B1EC0
			call eax
			mov ecx,[esp+0x8]
			mov  DWORD PTR SS : [ecx + 0x70+0x20] , eax
			mov  DWORD PTR SS : [ecx + 0xA0+0x20] , 0x82
			mov  DWORD PTR SS : [ecx + 0x98+0x20] , 0
			mov eax,[esp+0x4]
			sub eax,20
			imul eax,20
			mov  DWORD PTR SS : [ecx + 0x9C+0x20] , eax
			add eax,20
			mov  DWORD PTR SS : [ecx + 0xA4+0x20] , eax
			ret 0x8

			KiemTraIDICon4:
			cmp eax,40
			jae KiemTraIDICon5
			push 6526
			push 25
			mov ecx,0x01733B30
			mov eax,0x007C2CF0
			call eax
			push eax
			mov ecx,0x015720C8
			mov eax,0x007B1EC0
			call eax
			mov ecx,[esp+0x8]
			mov  DWORD PTR SS : [ecx + 0x70+0x20] , eax
			mov  DWORD PTR SS : [ecx + 0xA0+0x20] , 0x82
			mov  DWORD PTR SS : [ecx + 0x98+0x20] , 0
			mov eax,[esp+0x4]
			sub eax,30
			imul eax,20
			mov  DWORD PTR SS : [ecx + 0x9C+0x20] , eax
			add eax,20
			mov  DWORD PTR SS : [ecx + 0xA4+0x20] , eax
			ret 0x8

			KiemTraIDICon5:
			cmp eax,50
			jae KiemTraIDICon6
			push 6527
			push 25
			mov ecx,0x01733B30
			mov eax,0x007C2CF0
			call eax
			push eax
			mov ecx,0x015720C8
			mov eax,0x007B1EC0
			call eax
			mov ecx,[esp+0x8]
			mov  DWORD PTR SS : [ecx + 0x70+0x20] , eax
			mov  DWORD PTR SS : [ecx + 0xA0+0x20] , 0x82
			mov  DWORD PTR SS : [ecx + 0x98+0x20] , 0
			mov eax,[esp+0x4]
			sub eax,40
			imul eax,20
			mov  DWORD PTR SS : [ecx + 0x9C+0x20] , eax
			add eax,20
			mov  DWORD PTR SS : [ecx + 0xA4+0x20] , eax
			ret 0x8

			KiemTraIDICon6:
			cmp eax,60
			jae KiemTraIDICon7
			push 6528
			push 25
			mov ecx,0x01733B30
			mov eax,0x007C2CF0
			call eax
			push eax
			mov ecx,0x015720C8
			mov eax,0x007B1EC0
			call eax
			mov ecx,[esp+0x8]
			mov  DWORD PTR SS : [ecx + 0x70+0x20] , eax
			mov  DWORD PTR SS : [ecx + 0xA0+0x20] , 0x82
			mov  DWORD PTR SS : [ecx + 0x98+0x20] , 0
			mov eax,[esp+0x4]
			sub eax,50
			imul eax,20
			mov  DWORD PTR SS : [ecx + 0x9C+0x20] , eax
			add eax,20
			mov  DWORD PTR SS : [ecx + 0xA4+0x20] , eax
			ret 0x8

			KiemTraIDICon7:
			cmp eax,70
			jae KiemTraIDICon8
			push 6529
			push 25
			mov ecx,0x01733B30
			mov eax,0x007C2CF0
			call eax
			push eax
			mov ecx,0x015720C8
			mov eax,0x007B1EC0
			call eax
			mov ecx,[esp+0x8]
			mov  DWORD PTR SS : [ecx + 0x70+0x20] , eax
			mov  DWORD PTR SS : [ecx + 0xA0+0x20] , 0x82
			mov  DWORD PTR SS : [ecx + 0x98+0x20] , 0
			mov eax,[esp+0x4]
			sub eax,60
			imul eax,20
			mov  DWORD PTR SS : [ecx + 0x9C+0x20] , eax
			add eax,20
			mov  DWORD PTR SS : [ecx + 0xA4+0x20] , eax
			ret 0x8

			KiemTraIDICon8:
			cmp eax,80
			jae KiemTraIDICon9
			push 6530
			push 25
			mov ecx,0x01733B30
			mov eax,0x007C2CF0
			call eax
			push eax
			mov ecx,0x015720C8
			mov eax,0x007B1EC0
			call eax
			mov ecx,[esp+0x8]
			mov  DWORD PTR SS : [ecx + 0x70+0x20] , eax
			mov  DWORD PTR SS : [ecx + 0xA0+0x20] , 0x82
			mov  DWORD PTR SS : [ecx + 0x98+0x20] , 0
			mov eax,[esp+0x4]
			sub eax,70
			imul eax,20
			mov  DWORD PTR SS : [ecx + 0x9C+0x20] , eax
			add eax,20
			mov  DWORD PTR SS : [ecx + 0xA4+0x20] , eax
			ret 0x8

			KiemTraIDICon9:
			cmp eax,90
			jae KiemTraIDICon10
			push 6531
			push 25
			mov ecx,0x01733B30
			mov eax,0x007C2CF0
			call eax
			push eax
			mov ecx,0x015720C8
			mov eax,0x007B1EC0
			call eax
			mov ecx,[esp+0x8]
			mov  DWORD PTR SS : [ecx + 0x70+0x20] , eax
			mov  DWORD PTR SS : [ecx + 0xA0+0x20] , 0x82
			mov  DWORD PTR SS : [ecx + 0x98+0x20] , 0
			mov eax,[esp+0x4]
			sub eax,80
			imul eax,20
			mov  DWORD PTR SS : [ecx + 0x9C+0x20] , eax
			add eax,20
			mov  DWORD PTR SS : [ecx + 0xA4+0x20] , eax
			ret 0x8

			KiemTraIDICon10:
			cmp eax,100
			jae KiemTraIDICon11
			push 6532
			push 25
			mov ecx,0x01733B30
			mov eax,0x007C2CF0
			call eax
			push eax
			mov ecx,0x015720C8
			mov eax,0x007B1EC0
			call eax
			mov ecx,[esp+0x8]
			mov  DWORD PTR SS : [ecx + 0x70+0x20] , eax
			mov  DWORD PTR SS : [ecx + 0xA0+0x20] , 0x82
			mov  DWORD PTR SS : [ecx + 0x98+0x20] , 0
			mov eax,[esp+0x4]
			sub eax,90
			imul eax,20
			mov  DWORD PTR SS : [ecx + 0x9C+0x20] , eax
			add eax,20
			mov  DWORD PTR SS : [ecx + 0xA4+0x20] , eax
			ret 0x8

			KiemTraIDICon11:
			cmp eax,110
			jae KiemTraIDICon12
			push 6533
			push 25
			mov ecx,0x01733B30
			mov eax,0x007C2CF0
			call eax
			push eax
			mov ecx,0x015720C8
			mov eax,0x007B1EC0
			call eax
			mov ecx,[esp+0x8]
			mov  DWORD PTR SS : [ecx + 0x70+0x20] , eax
			mov  DWORD PTR SS : [ecx + 0xA0+0x20] , 0x82
			mov  DWORD PTR SS : [ecx + 0x98+0x20] , 0
			mov eax,[esp+0x4]
			sub eax,100
			imul eax,20
			mov  DWORD PTR SS : [ecx + 0x9C+0x20] , eax
			add eax,20
			mov  DWORD PTR SS : [ecx + 0xA4+0x20] , eax
			ret 0x8

            KiemTraIDICon12:
			cmp eax,120
			jae KiemTraIDICon13
			push 6534
			push 25
			mov ecx,0x01733B30
			mov eax,0x007C2CF0
			call eax
			push eax
			mov ecx,0x015720C8
			mov eax,0x007B1EC0
			call eax
			mov ecx,[esp+0x8]
			mov  DWORD PTR SS : [ecx + 0x70+0x20] , eax
			mov  DWORD PTR SS : [ecx + 0xA0+0x20] , 0x82
			mov  DWORD PTR SS : [ecx + 0x98+0x20] , 0
			mov eax,[esp+0x4]
			sub eax,110
			imul eax,20
			mov  DWORD PTR SS : [ecx + 0x9C+0x20] , eax
			add eax,20
			mov  DWORD PTR SS : [ecx + 0xA4+0x20] , eax
			ret 0x8


			//DanhHieuDong
			KiemTraIDICon13:
			sub eax,120
            add eax,6535
            push eax
			push 25
			mov ecx,0x01733B30
			mov eax,0x007C2CF0
			call eax
			push eax
			mov ecx,0x015720C8
			mov eax,0x007B1EC0
			call eax
			mov ecx,[esp+0x8]
			mov  DWORD PTR SS : [ecx + 0x70+0x20] , eax
			mov  DWORD PTR SS : [ecx + 0xA0+0x20] , 0x82
			mov  DWORD PTR SS : [ecx + 0x98+0x20] , 0
			xor edx,edx
			mov dl,[ecx+0x1]
            mov eax,edx
			imul eax,20
			mov  DWORD PTR SS : [ecx + 0x9C+0x20] , eax
			add eax,20
			mov  DWORD PTR SS : [ecx + 0xA4+0x20] , eax
			ret 0x8

    }
}
__declspec(naked) void LoadNickIconBangHoi()
{
    __asm
    {
        //for
        nop
        nop
        nop
        nop
		nop
			push eax
			mov eax, DWORD PTR SS : [0x0110F5E4]
			cmp eax, 0x17D
			jnz JumpOut
			pop eax
			mov ecx, eax
			mov edx, eax
			mov  DWORD PTR SS : [ecx + 0x70] , 0x160
			mov  DWORD PTR SS : [ecx + 0x9C] , 0x80
			mov  DWORD PTR SS : [ecx + 0x98] , 0x5D
			mov  DWORD PTR SS : [ecx + 0xA0] , 0x7C
			mov  DWORD PTR SS : [ecx + 0xA4] , 0x98

			RunProcess:
            push eax
            push 0x00000000
            push 0x0089E914
            lea  eax, [ebx - 0x14]
			add  eax, 0x1D
			push eax
            add  ebp, 0x1
            push ebp
            mov ecx, edx
			mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
            call eax
            pop eax
			push 0x1732CC8
            mov ecx, eax
            mov eax, 0x7B9850
			call eax //Draw1
            mov edx, 0x0065FFCB
            jmp edx
            JumpOut :
			pop eax
			mov edx,[0X010D94A8]
			mov eax,[edx+0X0000838C]
			push 0x0065FFCB
            ret
    }
}
__declspec(naked) void LoadTextVn()
{
    __asm
	{
		lea edi,[esp+0xDC]
        pushad
        repe stosd
        lea edi, [esp + 0x93C]//93C
        mov ecx, [edi]
        test ecx, ecx
        jle OutRead
        or ecx, 0xFFFFFFFF
        xor eax, eax
        repne scasw
        not ecx
        add ecx, ecx
        sub edi, ecx
		lea esi, [esp + 0xFC]//FC
        mov edx, 0x0
        mov ebp, 0x0 //default

        LoopBack:
        mov  al, [edi + edx] // c-a-c
            cmp al, 0x00
            je Loop1
            //Default
			mov bl, [edi + edx + 1]
			cmp bl, 0x1E  // FF
			je Jump1E

			cmp bl, 0x01  // FE
            je Jump01
            //end
        Default://0x00
        mov[esi + ebp], al
            add edx, 0x2
            inc ebp
            jmp LoopBack

            //Default
            Jump01 : //0x01
		mov BYTE PTR SS : [esi + ebp], 0xFE
			mov BYTE PTR SS :[esi + ebp + 1], al
            add edx, 0x2
            add ebp, 0x2
            jmp LoopBack

            Jump1E :
        mov BYTE PTR SS :[esi + ebp], 0xFF
			mov BYTE PTR SS :[esi + ebp + 1], al
            add edx, 0x2
            add ebp, 0x2
            jmp LoopBack
            //end
            Loop1 : //OutLoop
        popad
            mov ecx, 0x00000000
            xor ecx, 0xFFFFFFFF
            lea edi, [esp + 0xDC]//DC
            repne scasb
            not ecx
            mov eax, ecx
            mov ebp, 0x007C253B
            jmp ebp
            /*ret 0x20*/
            OutRead :
        popad
            mov eax, 0x0
            mov ebp, 0x007C253B
            jmp ebp
            /*ret 0x20*/
    }
}
__declspec(naked) void PrintOutText()
{
	__asm
	{
		pushad
        mov edi, esi
        mov ecx, [edi]
        cmp ecx, 0x0
        je OutRead
        or ecx, 0xFFFFFFFF
        xor eax, eax
        repne scasb
        not ecx
        sub edi, ecx
		mov esi, 0x01774788
        mov edx, 0x0
        mov ebp, 0x0

        LoopBack:
		mov al, [edi + edx] // c-a-c
			cmp al, 0x00
            jz Loop1
            //default
            cmp al, 0xFF
			je Default1E

			cmp al, 0xFE
            je Default01

            Default00 :
		mov BYTE PTR SS :[esi + ebp], al
			mov BYTE PTR SS :[esi + ebp + 1], 0x00
            inc edx
            add ebp, 0x2
            jmp LoopBack

            Default01 :
        mov al, [edi + edx + 1]
			mov BYTE PTR SS :[esi + ebp], al
			mov BYTE PTR SS :[esi + ebp + 1], 0x01
            add edx, 0x2
            add ebp, 0x2
            jmp LoopBack

            Default1E :
        mov al, [edi + edx + 1]
			mov BYTE PTR SS :[esi + ebp], al
            mov BYTE PTR SS :[esi + ebp + 1], 0x1E
            add edx, 0x2
            add ebp, 0x2
            jmp LoopBack

            Loop1 :
        popad
			mov ecx, 0x007CF18D
            jmp ecx
            /*ret 0x20*/
            OutRead :
        	popad
			mov ecx, 0x007CF18D
            jmp ecx
    }
}
__declspec(naked) void FunAddressEffect02()
{
    __asm
    {
        movsx eax, BYTE PTR SS : [esp + 0x18]
		push eax
        cmp eax, 20
        ja NewEffectInchant
        cmp eax, 0x12
        jnz JmpPlus19
        pop eax
        pop edi
        pop esi
		mov eax, 75501
        pop ebx
        retn

        JmpPlus19 :
        cmp eax, 0x13
            jnz JmpPlus20
            pop eax
            pop edi
            pop esi
			mov eax, 75502
            pop ebx
			retn

            JmpPlus20 :
        cmp eax, 0x14
			jnz JmpOut
            pop eax
            pop edi
            pop esi
			mov eax, 75503
            pop ebx
			retn


            JmpOut :
        	pop eax
            add eax, 0xFFFFFFFD
            mov ecx, 0x00676332
			jmp ecx

			NewEffectInchant:
			cmp esi,1    // Thuong
			jnz KiemTraEffectCon
            cmp eax,21
			jnz ThuongInchant22
            pop eax
			pop edi
			pop esi
			mov eax, 88895
			pop ebx
			ret
            ThuongInchant22:
			cmp eax,22
			jnz ThuongInchant23
            pop eax
			pop edi
			pop esi
			mov eax, 88905
			pop ebx
			ret
			ThuongInchant23:
			cmp eax,23
			jnz ThuongInchant24
            pop eax
			pop edi
			pop esi
			mov eax, 88915
			pop ebx
			ret
            ThuongInchant24:
			cmp eax,24
			jnz ThuongInchant25
            pop eax
			pop edi
			pop esi
			mov eax, 75507
			pop ebx
			ret
			ThuongInchant25:
            pop eax
			pop edi
			pop esi
			mov eax, 75508
			pop ebx
			ret

			KiemTraEffectCon:
			cmp esi,2    // Con
			jnz JmpOut
            cmp eax,21
			jnz ConInchant22
			pop eax
			pop edi
			pop esi
			mov eax, 88896
			pop ebx
			ret
            ConInchant22:
			cmp eax,22
			jnz ConInchant23
            pop eax
			pop edi
			pop esi
			mov eax, 88906
			pop ebx
			ret
			ConInchant23:
			cmp eax,23
			jnz ConInchant24
            pop eax
			pop edi
			pop esi
			mov eax, 88916
			pop ebx
			ret
            ConInchant24:
			cmp eax,24
			jnz ConInchant25
            pop eax
			pop edi
			pop esi
			mov eax, 75507
			pop ebx
			ret
			ConInchant25:
            pop eax
			pop edi
			pop esi
			mov eax, 75508
			pop ebx
			ret
    }
}
__declspec(naked) void FunAddressEffect03()
{
    __asm
    {
        movsx eax, BYTE PTR SS : [esp + 0x18]
		push eax
		cmp eax, 20
        ja NewEffectInchant
        cmp eax, 0x12
        jnz JmpPlus19
		pop eax
        pop edi
        pop esi
        mov eax, 0x12625
        pop ebx
        retn

        JmpPlus19 :
        cmp eax, 0x13
            jnz JmpPlus20
            pop eax
            pop edi
            pop esi
            mov eax, 0x12626
            pop ebx
            retn

			JmpPlus20 :
		cmp eax, 0x14
			jnz JmpOut
            pop eax
			pop edi
			pop esi
			mov eax, 0x12627
			pop ebx
			retn


            JmpOut :
        	pop eax
			add eax, 0xFFFFFFFD
            mov ecx, 0x0067651F
			jmp ecx

			NewEffectInchant:
            cmp eax,21
			jnz QuyenInchant22
            pop eax
			pop edi
			pop esi
			mov eax, 88891
			pop ebx
			ret
            QuyenInchant22:
			cmp eax,22
			jnz QuyenInchant23
            pop eax
			pop edi
			pop esi
			mov eax, 88901
			pop ebx
			ret
			QuyenInchant23:
			cmp eax,23
			jnz QuyenInchant24
            pop eax
			pop edi
			pop esi
			mov eax, 88911
			pop ebx
			ret
            QuyenInchant24:
			cmp eax,24
			jnz QuyenInchant25
            pop eax
			pop edi
			pop esi
			mov eax, 75307
			pop ebx
			ret
			QuyenInchant25:
            pop eax
			pop edi
			pop esi
			mov eax, 75308
			pop ebx
			ret
    }
}
__declspec(naked) void FunAddressEffect04()
{
    __asm
    {
        movsx eax, BYTE PTR SS : [esp + 0x18]
        push eax
		cmp eax, 20
        ja NewEffectInchant
        cmp eax, 0x12
        jnz JmpPlus19
		pop eax
		pop edi
        pop esi
		mov eax, 75601
        pop ebx
		ret

        JmpPlus19 :
        cmp eax, 0x13
            jnz JmpPlus20
            pop eax
            pop edi
			pop esi
			mov eax, 75602
            pop ebx
			ret

            JmpPlus20 :
        	cmp eax, 0x14
            jnz JmpOut
			pop eax
			pop edi
			pop esi
			mov eax, 75603
			pop ebx
			ret


            JmpOut :
        	pop eax
            add eax, 0xFFFFFFFD
			mov ecx, 0x006763E1
			jmp ecx

			NewEffectInchant:
			cmp esi,0 // Kiem
			jnz KiemTraEffectCon
			cmp eax,21
			jnz KiemInchant22
            pop eax
			pop edi
			pop esi
			mov eax, 88888
			pop ebx
			ret

            KiemInchant22:
			cmp eax,22
			jnz KiemInchant23
            pop eax
			pop edi
			pop esi
			mov eax, 88898
			pop ebx
			ret

			KiemInchant23:
			cmp eax,23
			jnz KiemInchant24
            pop eax
			pop edi
			pop esi
			mov eax, 88908
			pop ebx
			ret

            KiemInchant24:
			cmp eax,24
			jnz KiemInchant25
            pop eax
			pop edi
			pop esi
			mov eax, 75107
			pop ebx
			ret

			KiemInchant25:
            pop eax
			pop edi
			pop esi
			mov eax, 75108
			pop ebx
			ret


			KiemTraEffectCon:
			cmp esi,2 // Con
			jnz KiemTraEffectPhu
			cmp eax,21
			jnz ConInchant22
			pop eax
			pop edi
			pop esi
			mov eax, 88890
			pop ebx
			ret
            ConInchant22:
			cmp eax,22
			jnz ConInchant23
            pop eax
			pop edi
			pop esi
			mov eax, 88900
			pop ebx
			ret
			ConInchant23:
			cmp eax,23
			jnz ConInchant24
            pop eax
			pop edi
			pop esi
			mov eax, 88910
			pop ebx
			ret
            ConInchant24:
			cmp eax,24
			jnz ConInchant25
            pop eax
			pop edi
			pop esi
			mov eax, 75807
			pop ebx
			ret
			ConInchant25:
            pop eax
			pop edi
			pop esi
			mov eax, 75808
			pop ebx
			ret


			KiemTraEffectPhu:
			cmp esi,6 // Phu
			jnz KiemTraEffectDoankiem
            cmp eax,21
			jnz PhuInchant22
            pop eax
			pop edi
			pop esi
			mov eax, 88893
			pop ebx
			ret
            PhuInchant22:
			cmp eax,22
			jnz PhuInchant23
            pop eax
			pop edi
			pop esi
			mov eax, 88903
			pop ebx
			ret
			PhuInchant23:
			cmp eax,23
			jnz PhuInchant24
            pop eax
			pop edi
			pop esi
			mov eax, 88913
			pop ebx
			ret
            PhuInchant24:
			cmp eax,24
			jnz PhuInchant25
            pop eax
			pop edi
			pop esi
			mov eax, 75607
			pop ebx
			ret
			PhuInchant25:
            pop eax
			pop edi
			pop esi
			mov eax, 75608
			pop ebx
			ret


			KiemTraEffectDoankiem:
			cmp esi,5 // Doan kiem
            jnz JmpOut
            cmp eax,21
			jnz DoanKiemInchant22
            pop eax
			pop edi
			pop esi
			mov eax, 88892
			pop ebx
			ret
            DoanKiemInchant22:
			cmp eax,22
			jnz DoanKiemInchant23
            pop eax
			pop edi
			pop esi
			mov eax, 88902
			pop ebx
			ret
			DoanKiemInchant23:
			cmp eax,23
			jnz DoanKiemInchant24
            pop eax
			pop edi
			pop esi
			mov eax, 88912
			pop ebx
			ret
            DoanKiemInchant24:
			cmp eax,24
			jnz DoanKiemInchant25
            pop eax
			pop edi
			pop esi
			mov eax, 75607
			pop ebx
			ret
			DoanKiemInchant25:
            pop eax
			pop edi
			pop esi
			mov eax, 75608
			pop ebx
			ret
	}
}
__declspec(naked) void ShowIconSkillFunc()
{
    __asm
    {
		push eax
		//
        push 6616
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov [edi],eax
		//
        mov eax, [esp + 0x10]
        //Skill 1
        cmp ebx, 0x2328
		jnz Skill2
        mov     dword ptr[esi], 0x1 //khoang cach ngang 1
        mov     dword ptr[esi + 4], 0x1 //khoang cach top
        mov     dword ptr[esi + 8], 0x1F //khoang cach ngang 2
		mov    dword ptr[esi + 0xC], 0x1F // khoang cach bot
        pop eax
        mov     eax, 0x0055F25B
        jmp eax
        Skill2 :
        cmp ebx, 0x2329
			jnz Skill3
            mov     dword ptr[esi], 0x21
            mov     dword ptr[esi + 4], 0x1
            mov     dword ptr[esi + 8], 0x3F
			mov     dword ptr[esi + 0xC], 0x1F
            pop eax
            mov     eax, 0x0055F25B
            jmp eax

            Skill3 :
        cmp ebx, 0x232A
			jnz Skill4
            mov     dword ptr[esi], 0x40
            mov     dword ptr[esi + 4], 0x1
			mov     dword ptr[esi + 8], 0x5F
			mov     dword ptr[esi + 0xC], 0x1F
            pop eax
            mov     eax, 0x0055F25B
            jmp eax

            Skill4 :
        cmp ebx, 0x232B
			jnz Skill5
            mov     dword ptr[esi], 0x60
            mov     dword ptr[esi + 4], 0x1
			mov     dword ptr[esi + 8], 0x7F
			mov     dword ptr[esi + 0xC], 0x1F
            pop eax
            mov     eax, 0x0055F25B
            jmp eax

            Skill5 :
        cmp ebx, 0x232C
			jnz Skill6
            mov     dword ptr[esi], 0x80
            mov     dword ptr[esi + 4], 0x1
			mov     dword ptr[esi + 8], 0x9F
			mov     dword ptr[esi + 0xC], 0x1F
            pop eax
            mov     eax, 0x0055F25B
            jmp eax

            Skill6 :
        cmp ebx, 0x232D
			jnz Skill7
            mov     dword ptr[esi], 0xA1
            mov     dword ptr[esi + 4], 0x1
            mov     dword ptr[esi + 8], 0xBF
			mov     dword ptr[esi + 0xC], 0x1F
            pop eax
            mov     eax, 0x0055F25B
            jmp eax

            Skill7 :
        cmp ebx, 0x232E
			jnz Skill8
            mov     dword ptr[esi], 0xC1
            mov     dword ptr[esi + 4], 0x1
            mov     dword ptr[esi + 8], 0xDF
			mov     dword ptr[esi + 0xC], 0x1F
            pop eax
            mov     eax, 0x0055F25B
            jmp eax

            Skill8 :
        cmp ebx, 0x232F
			jnz Skill9
            mov     dword ptr[esi], 0xE1
            mov     dword ptr[esi + 4], 0x1
            mov     dword ptr[esi + 8], 0xFF
			mov     dword ptr[esi + 0xC], 0x1F
            pop eax
            mov     eax, 0x0055F25B
			jmp eax

			Skill9 :
        cmp ebx, 0x2330
			jnz Skill10
            mov     dword ptr[esi], 0x00
			mov     dword ptr[esi + 4], 0x20
			mov     dword ptr[esi + 8], 0x20
			mov     dword ptr[esi + 0xC], 0x3F
            pop eax
            mov     eax, 0x0055F25B
			jmp eax

			Skill10 :
        cmp ebx, 0x2331
			jnz Skill11
			mov     dword ptr[esi], 0x20
			mov     dword ptr[esi + 4], 0x20
			mov     dword ptr[esi + 8], 0x40
			mov     dword ptr[esi + 0xC], 0x3F
            pop eax
            mov     eax, 0x0055F25B
			jmp eax

			Skill11 :
        cmp ebx, 0x2332
			jnz NOSkillIn
			mov     dword ptr[esi], 0x40
			mov     dword ptr[esi + 4], 0x20
			mov     dword ptr[esi + 8], 0x60
			mov     dword ptr[esi + 0xC], 0x3F
            pop eax
            mov     eax, 0x0055F25B
			jmp eax

            NOSkillIn :
        pop eax
            mov[edi], eax
            mov dword ptr[esi], 0x81
            mov eax, 0x0055F246
            jmp eax
    }
}
__declspec(naked) void FunAddressEffect05()
{
    __asm
    {
        movsx eax, BYTE PTR SS : [esp + 0x18]
		push eax
        cmp eax,20
        ja NewEffectInchant
        cmp eax, 0x12
        jnz JmpPlus19
        pop eax
        pop edi
        pop esi
		mov eax, 75201
        pop ebx
        retn

        JmpPlus19 :
        cmp eax, 0x13
            jnz JmpPlus20
            pop eax
            pop edi
			pop esi
			mov eax, 75202
            pop ebx
            retn

            JmpPlus20 :
        	cmp eax, 0x14
            jnz JmpOut
            pop eax
            pop edi
            pop esi
			mov eax, 75203
            pop ebx
			retn

            JmpOut :
        pop eax
            add eax, 0xFFFFFFFD
            mov ecx, 0x00676480
			jmp ecx

			NewEffectInchant:
            cmp eax,21
			jnz DaoInchant22
            pop eax
			pop edi
			pop esi
			mov eax, 88889
			pop ebx
			ret
            DaoInchant22:
			cmp eax,22
			jnz DaoInchant23
            pop eax
			pop edi
			pop esi
			mov eax, 88899
			pop ebx
			ret
			DaoInchant23:
			cmp eax,23
			jnz DaoInchant24
            pop eax
			pop edi
			pop esi
			mov eax, 88909
			pop ebx
			ret
            DaoInchant24:
			cmp eax,24
			jnz DaoInchant25
            pop eax
			pop edi
			pop esi
			mov eax, 88919
			pop ebx
			ret
			DaoInchant25:
            pop eax
			pop edi
			pop esi
			mov eax, 88929
			pop ebx
			ret

    }

}
__declspec(naked) void FunAddressEffect06()
{
    __asm
    {
        movsx eax, BYTE PTR SS : [esp + 0x18]
		push eax
        cmp eax,20
        ja NewEffectInchant
        cmp eax, 0x12
        jnz JmpPlus19
        pop eax
        pop edi
        pop esi
		mov eax, 75401
        pop ebx
        retn

        JmpPlus19 :
        cmp eax, 0x13
            jnz JmpPlus20
            pop eax
            pop edi
            pop esi
			mov eax, 75402
            pop ebx
            retn

			JmpPlus20 :
		cmp eax, 0x14
			jnz JmpOut
			pop eax
			pop edi
            pop esi
			mov eax, 75403
			pop ebx
			retn


            JmpOut :
        pop eax
            add eax, 0xFFFFFFFD
            mov ecx, 0x006765BE
			jmp ecx

			NewEffectInchant:
            cmp eax,21
			jnz SongHoanInchant22
            pop eax
			pop edi
			pop esi
			mov eax, 88894
			pop ebx
			ret
            SongHoanInchant22:
			cmp eax,22
			jnz SongHoanInchant23
            pop eax
			pop edi
			pop esi
			mov eax, 88904
			pop ebx
			ret
			SongHoanInchant23:
			cmp eax,23
			jnz SongHoanInchant24
            pop eax
			pop edi
			pop esi
			mov eax, 88914
			pop ebx
			ret
            SongHoanInchant24:
			cmp eax,24
			jnz SongHoanInchant25
            pop eax
			pop edi
			pop esi
			mov eax, 75407
			pop ebx
			ret
			SongHoanInchant25:
            pop eax
			pop edi
			pop esi
			mov eax, 75408
			pop ebx
			ret
    }
}
__declspec(naked) void FunAddressEffect01()   // Chi Danh Cho Cuong
{
    __asm
    {
        movsx eax, BYTE PTR SS : [esp + 0x18]
		push eax
		cmp eax,20
        ja NewEffectInchant
        cmp eax, 0x12
        jnz JmpPlus19
        pop eax
        pop edi
        pop esi
		mov eax, 75301
        pop ebx
        retn

        JmpPlus19 :
        cmp eax, 0x13
            jnz JmpPlus20
            pop eax
            pop edi
			pop esi
			mov eax, 75302
            pop ebx
            retn

            JmpPlus20 :
        cmp eax, 0x14
			jnz JmpOut
            pop eax
            pop edi
            pop esi
			mov eax, 75303
            pop ebx
			retn


			JmpOut :
        	pop eax
			mov ecx, 0x00676301
			jmp ecx


			NewEffectInchant:
			cmp eax,21
			jnz CuongInchant22
            pop eax
			pop edi
			pop esi
			mov eax, 88897
			pop ebx
			ret
			CuongInchant22:
			cmp eax,22
			jnz CuongInchant23
            pop eax
			pop edi
			pop esi
			mov eax, 88907
			pop ebx
			ret
			CuongInchant23:
			cmp eax,23
			jnz CuongInchant24
            pop eax
			pop edi
			pop esi
			mov eax, 88917
			pop ebx
			ret
            CuongInchant24:
			cmp eax,24
			jnz CuongInchant25
            pop eax
			pop edi
			pop esi
			mov eax, 75307
			pop ebx
			ret
			CuongInchant25:
			pop eax
			pop edi
			pop esi
			mov eax, 75308
			pop ebx
			ret
    }
};
/*__declspec(naked) void LNickIconUser() //Set 1 : get value
{
 __asm
    {
        //for
       	nop
        nop
        nop
        nop
		nop
		add eax,0x20
		pushad
            push eax
            mov eax, esi
			mov eax, [eax + 0x470]
			mov edx, DWORD PTR SS : [0x16A2178]
			lea ecx, [eax + eax * 2]
			shl ecx, 4
            sub ecx, eax
            mov eax, [edx + ecx * 0x4]
			cmp eax, 0x279B
			jnz nCayKiem
			pop eax
			mov ecx, eax
			mov edx, eax
			mov  DWORD PTR SS : [ecx + 0x70] , 0x4F
			mov  DWORD PTR SS : [ecx + 0x9C] , 0x00
			mov  DWORD PTR SS : [ecx + 0xA0] , 0x82
			mov  DWORD PTR SS : [ecx + 0xA4] , 0x14
			jmp RunProcess

            nCayKiem:
            cmp eax, 0x2858
			jnz nDaiTuongQuan
			pop eax
			mov ecx, eax
			mov edx, eax
			mov  DWORD PTR SS : [ecx + 0x70] , 0x51
			mov  DWORD PTR SS : [ecx + 0x9C] , 0xB4
			mov  DWORD PTR SS : [ecx + 0xA0] , 0x82
			mov  DWORD PTR SS : [ecx + 0xA4] , 0xC5
			mov ecx,0x10
			jmp RunProcessaDD

            nDaiTuongQuan:
            cmp eax, 0x6A6
			jnz nVanSuNhuY
			pop eax
			mov ecx, eax
			mov edx, eax
			mov  DWORD PTR SS : [ecx + 0x70] , 0x51
			mov  DWORD PTR SS : [ecx + 0x9C] , 0x9F
			mov  DWORD PTR SS : [ecx + 0xA0] , 0x82
			mov  DWORD PTR SS : [ecx + 0xA4] , 0xB3
            mov ecx,0xD
			jmp RunProcessaDD

            nVanSuNhuY:
            cmp eax, 0x2859
			jnz Top1PH
			pop eax
			mov ecx, eax
			mov edx, eax
			mov  DWORD PTR SS : [ecx + 0x70] , 0x222
			mov  DWORD PTR SS : [ecx + 0x9C] , 0x00
			mov  DWORD PTR SS : [ecx + 0xA0] , 0x82
			mov  DWORD PTR SS : [ecx + 0xA4] , 0x37
            mov ecx,0x16
			jmp RunProcessSub

            Top1PH:
			cmp eax, 0x2772
			jnz Top2PH
			pop eax
			mov ecx, eax
			mov edx, eax
			mov  DWORD PTR SS : [ecx + 0x70] , 0x220
			mov  DWORD PTR SS : [ecx + 0x9C] , 0x00
			mov  DWORD PTR SS : [ecx + 0xA0] , 0x82
			mov  DWORD PTR SS : [ecx + 0xA4] , 0x30
			mov ecx,0x10
			jmp RunProcessSub

            Top2PH:
			cmp eax, 0x2773
			jnz Top3PH
			pop eax
			mov ecx, eax
			mov edx, eax
			mov  DWORD PTR SS : [ecx + 0x70] , 0x220
			mov  DWORD PTR SS : [ecx + 0x9C] , 0x39
			mov  DWORD PTR SS : [ecx + 0xA0] , 0x82
			mov  DWORD PTR SS : [ecx + 0xA4] , 0x66
			mov ecx,0xC
			jmp RunProcessSub

			Top3PH:
			cmp eax, 0x2774
			jnz Top4PH
			pop eax
			mov ecx, eax
			mov edx, eax
			mov  DWORD PTR SS : [ecx + 0x70] , 0x220
			mov  DWORD PTR SS : [ecx + 0x9C] , 0x70
			mov  DWORD PTR SS : [ecx + 0xA0] , 0x82
			mov  DWORD PTR SS : [ecx + 0xA4] , 0x9D
			mov ecx,0xC
			jmp RunProcessSub

			Top4PH:
			cmp eax, 0x2775
			jnz nChucMungNamMoi
			pop eax
			mov ecx, eax
			mov edx, eax
			mov  DWORD PTR SS : [ecx + 0x70] , 0x220
			mov  DWORD PTR SS : [ecx + 0x9C] , 0xA6
			mov  DWORD PTR SS : [ecx + 0xA0] , 0x82
			mov  DWORD PTR SS : [ecx + 0xA4] , 0xD4
			mov ecx,0xC
			jmp RunProcessSub

            nChucMungNamMoi:
            cmp eax, 0x285A
			jnz AncuCaoThuZplay
			pop eax
			mov ecx, eax
			mov edx, eax
			mov  DWORD PTR SS : [ecx + 0x70] , 0x222
			mov  DWORD PTR SS : [ecx + 0x9C] , 0x42
			mov  DWORD PTR SS : [ecx + 0xA0] , 0x82
			mov  DWORD PTR SS : [ecx + 0xA4] , 0x6D
            mov ecx,0xB
			jmp RunProcessSub

			AncuCaoThuZplay:
			cmp eax, 0x2857
			jnz AoAnhPhucNhan
			pop eax
			mov ecx, eax
			mov edx, eax
			mov  DWORD PTR SS : [ecx + 0x70] , 0x53
			mov  DWORD PTR SS : [ecx + 0x9C] , 0x2D
			mov  DWORD PTR SS : [ecx + 0xA0] , 0x82
			mov  DWORD PTR SS : [ecx + 0xA4] , 0x45
            mov ecx,0x8
			jmp RunProcessaDD


			AoAnhPhucNhan:
			cmp eax, 0x2776
			jnz LuuNguyetCoTinh
			pop eax
			mov ecx, eax
			mov edx, eax
			mov  DWORD PTR SS : [ecx + 0x70] , 0x56
			mov  DWORD PTR SS : [ecx + 0x9C] , 0x3C
			mov  DWORD PTR SS : [ecx + 0xA0] , 0x82
			mov  DWORD PTR SS : [ecx + 0xA4] , 0x51
            mov ecx,0x9
			jmp RunProcessaDD

            LuuNguyetCoTinh:
			cmp eax, 0x2777
			jnz PhaCoTrangRam
			pop eax
			mov ecx, eax
			mov edx, eax
			mov  DWORD PTR SS : [ecx + 0x70] , 0x21F
			mov  DWORD PTR SS : [ecx + 0x9C] , 0x00
			mov  DWORD PTR SS : [ecx + 0xA0] , 0x82
			mov  DWORD PTR SS : [ecx + 0xA4] , 0x2B
            mov ecx,0xC
			jmp RunProcessSub

			PhaCoTrangRam:
			cmp eax, 0x2778
			jnz Check3
            pop eax
			mov ecx, eax
			mov edx, eax
			mov  DWORD PTR SS : [ecx + 0x70] , 0x21F
			mov  DWORD PTR SS : [ecx + 0x9C] , 0x2C
			mov  DWORD PTR SS : [ecx + 0xA0] , 0x82
			mov  DWORD PTR SS : [ecx + 0xA4] , 0x54
			mov ecx,0x7
			jmp RunProcessSub

			Check3:
			cmp eax, 0x2859
			jnz Check4
            pop eax
			mov ecx, eax
			mov edx, eax
			mov  DWORD PTR SS : [ecx + 0x70] , 0x19E
			mov  DWORD PTR SS : [ecx + 0x9C] , 0x28
			mov  DWORD PTR SS : [ecx + 0xA0] , 0x82
			mov  DWORD PTR SS : [ecx + 0xA4] , 0x3C
			jmp RunProcess

			Check4:
			cmp eax, 0x279B
			jnz Check5
            pop eax
			mov ecx, eax
			mov edx, eax
			mov  DWORD PTR SS : [ecx + 0x70] , 0x197
			mov  DWORD PTR SS : [ecx + 0x9C] , 0x54
			mov  DWORD PTR SS : [ecx + 0xA0] , 0x82
			mov  DWORD PTR SS : [ecx + 0xA4] , 0x64
			jmp RunProcess


			Check5:
			cmp eax, 0x285F
			jnz Check6
            pop eax
			mov ecx, eax
			mov edx, eax
			mov  DWORD PTR SS : [ecx + 0x70] , 0x199
			mov  DWORD PTR SS : [ecx + 0x9C] , 0x78
			mov  DWORD PTR SS : [ecx + 0xA0] , 0x82
			mov  DWORD PTR SS : [ecx + 0xA4] , 0x8C
			jmp RunProcess

			Check6:
			cmp eax, 0x285E
			jnz Check7
			pop eax
			mov ecx, eax
			mov edx, eax
			mov  DWORD PTR SS : [ecx + 0x70] , 0x199
			mov  DWORD PTR SS : [ecx + 0x9C] , 0x78
			mov  DWORD PTR SS : [ecx + 0xA0] , 0x82
			mov  DWORD PTR SS : [ecx + 0xA4] , 0x8C
			jmp RunProcess

			Check7:
			cmp eax, 0x6A6
			jnz Check8
			pop eax
			mov ecx, eax
			mov edx, eax
			mov  DWORD PTR SS : [ecx + 0x70] , 0x197
			mov  DWORD PTR SS : [ecx + 0x9C] , 0xA0
			mov  DWORD PTR SS : [ecx + 0xA0] , 0x82
			mov  DWORD PTR SS : [ecx + 0xA4] , 0xB4
			jmp RunProcess

            Check8:
			cmp eax, 0x27C3
			jnz CheckPh1
			pop eax
			mov ecx, eax
			mov edx, eax
			mov  DWORD PTR SS : [ecx + 0x70] , 0x195
			mov  DWORD PTR SS : [ecx + 0x9C] , 0x00
			mov  DWORD PTR SS : [ecx + 0xA0] , 0x82
			mov  DWORD PTR SS : [ecx + 0xA4] , 0x14
			jmp RunProcess

            CheckPh1:
			cmp eax, 0x2772
			jnz CheckPh2
			pop eax
			mov ecx, eax
			mov edx, eax
			mov  DWORD PTR SS : [ecx + 0x70] , 0x24D
			mov  DWORD PTR SS : [ecx + 0x9C] , 0x00
			mov  DWORD PTR SS : [ecx + 0xA0] , 0x82
			mov  DWORD PTR SS : [ecx + 0xA4] , 0x2D
			jmp Phuho2Process

			CheckPh2:
			cmp eax, 0x2773
			jnz CheckPh3
			pop eax
			mov ecx, eax
			mov edx, eax
			mov  DWORD PTR SS : [ecx + 0x70] , 0x24D
			mov  DWORD PTR SS : [ecx + 0x9C] , 0x33
			mov  DWORD PTR SS : [ecx + 0xA0] , 0x82
			mov  DWORD PTR SS : [ecx + 0xA4] , 0x5C
			jmp Phuho2Process

			CheckPh3:
			cmp eax, 0x2774
			jnz CheckPh4
			pop eax
			mov ecx, eax
			mov edx, eax
			mov  DWORD PTR SS : [ecx + 0x70] , 0x24D
			mov  DWORD PTR SS : [ecx + 0x9C] , 0x5F
			mov  DWORD PTR SS : [ecx + 0xA0] , 0x82
			mov  DWORD PTR SS : [ecx + 0xA4] , 0x8B
			jmp Phuho2Process

			CheckPh4:
			cmp eax, 0x2775
			jnz JumpOut
			pop eax
			mov ecx, eax
			mov edx, eax
			mov  DWORD PTR SS : [ecx + 0x70] , 0x24D
			mov  DWORD PTR SS : [ecx + 0x9C] , 0x92
			mov  DWORD PTR SS : [ecx + 0xA0] , 0x82
			mov  DWORD PTR SS : [ecx + 0xA4] , 0xBF
			jmp Phuho2Process

			RunProcess:
			push edx
			push 0x00000000
			push 0x0089E914
			lea  eax, [ebp - 0x14]
			add  eax, 0xD
			push eax
            mov eax,ebx
			add  eax, 0x9
			push eax
			mov ecx, edx
			mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
			call eax
			pop ecx
			push 0x1732CC8
			//mov ecx, edx
			mov eax, 0x7B9850
			call eax //Draw1
			popad
			push 0x00660F57
			ret

			JumpOut :
            pop eax
            popad
			mov ecx, DWORD PTR SS : [0x1733AC4]
			push 0x00660F20
			ret

            RunProcessaDD:
			push edx
			push 0x00000000
			push 0x0089E914
			lea  eax, [ebp - 0x14]
			add  eax, ecx
			push eax
            mov eax,ebx
			add  eax, 0x9
			push eax
			mov ecx, edx
			mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
			call eax
			pop ecx
			push 0x1732CC8
			//mov ecx, edx
			mov eax, 0x7B9850
			call eax //Draw1
			popad
			push 0x00660F57
			ret

            RunProcessSub:
            push edx
			push 0x00000000
			push 0x0089E914
			lea  eax, [ebp - 0x14]
			sub  eax, ecx
			push eax
			mov eax,ebx
			add  eax, 0x9
			push eax
			mov ecx, edx
			mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
			call eax
			pop ecx
			push 0x1732CC8
			//mov ecx, edx
			mov eax, 0x7B9850
			call eax //Draw1
			popad
			push 0x00660F57
			ret

            RunProcess422:
			push edx
			push 0x00000000
			push 0x0089E914
			lea  eax, [ebp - 0x14]
			sub  eax, ecx
			push eax
			mov eax,ebx
			add  eax, 0x9
			push eax
			mov ecx, edx
			mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
			call eax
			pop ecx
			push 0x1732CC8
			//mov ecx, edx
			mov eax, 0x7B9850
			call eax //Draw1
			popad
			push 0x00660F57
			ret

			Phuho2Process:
			push edx
			push 0x00000000
			push 0x0089E914
			lea  eax, [ebp - 0x14]
			sub  eax, 0xC
			push eax
			mov eax,ebx
			add  eax, 0x9
			push eax
			mov ecx, edx
			mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
			call eax
			pop ecx
			push 0x1732CC8
			//mov ecx, edx
			mov eax, 0x7B9850
			call eax //Draw1
			popad
			push 0x00660F57
			ret
    }
} */
__declspec(naked) void LNickIconUser() //Set 1 : get value
{
 __asm
    {
        	nop
			nop
			nop
			nop
			nop
			push eax
			//
			mov eax, esi
			mov eax, [eax + 0x470]
			mov edx, DWORD PTR SS : [0x16A2178]
			lea ecx, [eax + eax * 2]
			shl ecx, 4
            sub ecx, eax
            mov eax, [edx + ecx * 0x4]
			push eax
			call GetIDNickIcon
			cmp eax,0xFF
            jz JumpOut
			mov ecx,[esp]
			push ecx
			push eax
			call ShowIconNick
			mov eax,[esp]
			add eax,0x20
			mov edx,eax
            push eax
            push 0x00000000
            push 0x0089E914
			lea  eax, [ebp - 0x7]
			push eax
			mov eax,ebx
			add  eax, 0x9
			push eax
			mov ecx, edx
			mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
			call eax
			pop eax
			push 0x1732CC8
			mov ecx, eax
			mov eax, 0x7B9850
			call eax //Draw1
            pop eax
			push 0x00660F57
			ret

            JumpOut :
			pop eax
            mov ecx, DWORD PTR SS : [0x1733AC4]
			push 0x00660F20
			ret


		  /*  TangGiaTriByte:
			mov eax,[esp+0x4]
			xor ecx,ecx
			mov cl,[eax]
			add ecx,1
			cmp ecx,20
			ja LonHon10Lan
			mov [eax],cl
			ret

			LonHon10Lan:
			mov byte ptr [eax],0x0
			xor ecx,ecx
			mov cl,[eax+0x1]
			add ecx,0x1
			cmp ecx,10
			ja quaytrolaibandauchay
            mov byte ptr [eax+0x1],cl
			mov byte ptr [eax],0x0
			ret

			quaytrolaibandauchay:
            mov byte ptr [eax+0x1],0x0
			mov byte ptr [eax],0x0
			ret   */

			GetIDNickIcon:
			sub esp,0x4
			xor ecx,ecx
			mov [esp],ecx
			BackLoopGetNickIconID:
			mov eax,[0x016A2178]
			xor edx,edx
			mov edx,[eax+ecx]
			mov ecx,[esp+0x8]
			cmp ecx,edx
			jnz KiemTraGiaTriTiepTheo
			mov eax,[0x016A2178]
			xor edx,edx
			mov ecx,[esp]
			mov dl,[eax+ecx+0x90]
			mov eax,edx
			add esp,0x4
			ret 0x4

			KiemTraGiaTriTiepTheo:
			mov ecx,[esp]
			add ecx,0xBC
			mov [esp],ecx
			cmp ecx,0x20154
			jl BackLoopGetNickIconID
			add esp,0x4
			ret 0x4


			ShowIconNick:
			mov eax,[esp+0x4]
			cmp eax,10
			jae KiemTraIDICon2
			push 6523
			push 25
			mov ecx,0x01733B30
			mov eax,0x007C2CF0
			call eax
			push eax
			mov ecx,0x015720C8
			mov eax,0x007B1EC0
			call eax
			mov ecx,[esp+0x8]
			mov  DWORD PTR SS : [ecx + 0x70+0x20] , eax
			mov  DWORD PTR SS : [ecx + 0xA0+0x20] , 0x82
			mov  DWORD PTR SS : [ecx + 0x98+0x20] , 0
			mov eax,[esp+0x4]
			imul eax,20
			mov  DWORD PTR SS : [ecx + 0x9C+0x20] , eax
			add eax,20
			mov  DWORD PTR SS : [ecx + 0xA4+0x20] , eax
			ret 0x8

			KiemTraIDICon2:
			cmp eax,20
			jae KiemTraIDICon3
			push 6524
			push 25
			mov ecx,0x01733B30
			mov eax,0x007C2CF0
			call eax
			push eax
			mov ecx,0x015720C8
			mov eax,0x007B1EC0
			call eax
			mov ecx,[esp+0x8]
			mov  DWORD PTR SS : [ecx + 0x70+0x20] , eax
			mov  DWORD PTR SS : [ecx + 0xA0+0x20] , 0x82
			mov  DWORD PTR SS : [ecx + 0x98+0x20] , 0
			mov eax,[esp+0x4]
			sub eax,10
			imul eax,20
			mov  DWORD PTR SS : [ecx + 0x9C+0x20] , eax
			add eax,20
			mov  DWORD PTR SS : [ecx + 0xA4+0x20] , eax
			ret 0x8

			KiemTraIDICon3:
			cmp eax,30
			jae KiemTraIDICon4
			push 6525
			push 25
			mov ecx,0x01733B30
			mov eax,0x007C2CF0
			call eax
			push eax
			mov ecx,0x015720C8
			mov eax,0x007B1EC0
			call eax
			mov ecx,[esp+0x8]
			mov  DWORD PTR SS : [ecx + 0x70+0x20] , eax
			mov  DWORD PTR SS : [ecx + 0xA0+0x20] , 0x82
			mov  DWORD PTR SS : [ecx + 0x98+0x20] , 0
			mov eax,[esp+0x4]
			sub eax,20
			imul eax,20
			mov  DWORD PTR SS : [ecx + 0x9C+0x20] , eax
			add eax,20
			mov  DWORD PTR SS : [ecx + 0xA4+0x20] , eax
			ret 0x8

			KiemTraIDICon4:
			cmp eax,40
			jae KiemTraIDICon5
			push 6526
			push 25
			mov ecx,0x01733B30
			mov eax,0x007C2CF0
			call eax
			push eax
			mov ecx,0x015720C8
			mov eax,0x007B1EC0
			call eax
			mov ecx,[esp+0x8]
			mov  DWORD PTR SS : [ecx + 0x70+0x20] , eax
			mov  DWORD PTR SS : [ecx + 0xA0+0x20] , 0x82
			mov  DWORD PTR SS : [ecx + 0x98+0x20] , 0
			mov eax,[esp+0x4]
			sub eax,30
			imul eax,20
			mov  DWORD PTR SS : [ecx + 0x9C+0x20] , eax
			add eax,20
			mov  DWORD PTR SS : [ecx + 0xA4+0x20] , eax
			ret 0x8

			KiemTraIDICon5:
			cmp eax,50
			jae KiemTraIDICon6
			push 6527
			push 25
			mov ecx,0x01733B30
			mov eax,0x007C2CF0
			call eax
			push eax
			mov ecx,0x015720C8
			mov eax,0x007B1EC0
			call eax
			mov ecx,[esp+0x8]
			mov  DWORD PTR SS : [ecx + 0x70+0x20] , eax
			mov  DWORD PTR SS : [ecx + 0xA0+0x20] , 0x82
			mov  DWORD PTR SS : [ecx + 0x98+0x20] , 0
			mov eax,[esp+0x4]
			sub eax,40
			imul eax,20
			mov  DWORD PTR SS : [ecx + 0x9C+0x20] , eax
			add eax,20
			mov  DWORD PTR SS : [ecx + 0xA4+0x20] , eax
			ret 0x8

			KiemTraIDICon6:
			cmp eax,60
			jae KiemTraIDICon7
			push 6528
			push 25
			mov ecx,0x01733B30
			mov eax,0x007C2CF0
			call eax
			push eax
			mov ecx,0x015720C8
			mov eax,0x007B1EC0
			call eax
			mov ecx,[esp+0x8]
			mov  DWORD PTR SS : [ecx + 0x70+0x20] , eax
			mov  DWORD PTR SS : [ecx + 0xA0+0x20] , 0x82
			mov  DWORD PTR SS : [ecx + 0x98+0x20] , 0
			mov eax,[esp+0x4]
			sub eax,50
			imul eax,20
			mov  DWORD PTR SS : [ecx + 0x9C+0x20] , eax
			add eax,20
			mov  DWORD PTR SS : [ecx + 0xA4+0x20] , eax
			ret 0x8

			KiemTraIDICon7:
			cmp eax,70
			jae KiemTraIDICon8
			push 6529
			push 25
			mov ecx,0x01733B30
			mov eax,0x007C2CF0
			call eax
			push eax
			mov ecx,0x015720C8
			mov eax,0x007B1EC0
			call eax
			mov ecx,[esp+0x8]
			mov  DWORD PTR SS : [ecx + 0x70+0x20] , eax
			mov  DWORD PTR SS : [ecx + 0xA0+0x20] , 0x82
			mov  DWORD PTR SS : [ecx + 0x98+0x20] , 0
			mov eax,[esp+0x4]
			sub eax,60
			imul eax,20
			mov  DWORD PTR SS : [ecx + 0x9C+0x20] , eax
			add eax,20
			mov  DWORD PTR SS : [ecx + 0xA4+0x20] , eax
			ret 0x8

			KiemTraIDICon8:
			cmp eax,80
			jae KiemTraIDICon9
			push 6530
			push 25
			mov ecx,0x01733B30
			mov eax,0x007C2CF0
			call eax
			push eax
			mov ecx,0x015720C8
			mov eax,0x007B1EC0
			call eax
			mov ecx,[esp+0x8]
			mov  DWORD PTR SS : [ecx + 0x70+0x20] , eax
			mov  DWORD PTR SS : [ecx + 0xA0+0x20] , 0x82
			mov  DWORD PTR SS : [ecx + 0x98+0x20] , 0
			mov eax,[esp+0x4]
			sub eax,70
			imul eax,20
			mov  DWORD PTR SS : [ecx + 0x9C+0x20] , eax
			add eax,20
			mov  DWORD PTR SS : [ecx + 0xA4+0x20] , eax
			ret 0x8

			KiemTraIDICon9:
			cmp eax,90
			jae KiemTraIDICon10
			push 6531
			push 25
			mov ecx,0x01733B30
			mov eax,0x007C2CF0
			call eax
			push eax
			mov ecx,0x015720C8
			mov eax,0x007B1EC0
			call eax
			mov ecx,[esp+0x8]
			mov  DWORD PTR SS : [ecx + 0x70+0x20] , eax
			mov  DWORD PTR SS : [ecx + 0xA0+0x20] , 0x82
			mov  DWORD PTR SS : [ecx + 0x98+0x20] , 0
			mov eax,[esp+0x4]
			sub eax,80
			imul eax,20
			mov  DWORD PTR SS : [ecx + 0x9C+0x20] , eax
			add eax,20
			mov  DWORD PTR SS : [ecx + 0xA4+0x20] , eax
			ret 0x8

			KiemTraIDICon10:
			cmp eax,100
			jae KiemTraIDICon11
			push 6532
			push 25
			mov ecx,0x01733B30
			mov eax,0x007C2CF0
			call eax
			push eax
			mov ecx,0x015720C8
			mov eax,0x007B1EC0
			call eax
			mov ecx,[esp+0x8]
			mov  DWORD PTR SS : [ecx + 0x70+0x20] , eax
			mov  DWORD PTR SS : [ecx + 0xA0+0x20] , 0x82
			mov  DWORD PTR SS : [ecx + 0x98+0x20] , 0
			mov eax,[esp+0x4]
			sub eax,90
			imul eax,20
			mov  DWORD PTR SS : [ecx + 0x9C+0x20] , eax
			add eax,20
			mov  DWORD PTR SS : [ecx + 0xA4+0x20] , eax
			ret 0x8

			KiemTraIDICon11:
			cmp eax,110
			jae KiemTraIDICon12
			push 6533
			push 25
			mov ecx,0x01733B30
			mov eax,0x007C2CF0
			call eax
			push eax
			mov ecx,0x015720C8
			mov eax,0x007B1EC0
			call eax
			mov ecx,[esp+0x8]
			mov  DWORD PTR SS : [ecx + 0x70+0x20] , eax
			mov  DWORD PTR SS : [ecx + 0xA0+0x20] , 0x82
			mov  DWORD PTR SS : [ecx + 0x98+0x20] , 0
			mov eax,[esp+0x4]
			sub eax,100
			imul eax,20
			mov  DWORD PTR SS : [ecx + 0x9C+0x20] , eax
			add eax,20
			mov  DWORD PTR SS : [ecx + 0xA4+0x20] , eax
			ret 0x8

            KiemTraIDICon12:
			cmp eax,120
			jae KiemTraIDICon13
			push 6534
			push 25
			mov ecx,0x01733B30
			mov eax,0x007C2CF0
			call eax
			push eax
			mov ecx,0x015720C8
			mov eax,0x007B1EC0
			call eax
			mov ecx,[esp+0x8]
			mov  DWORD PTR SS : [ecx + 0x70+0x20] , eax
			mov  DWORD PTR SS : [ecx + 0xA0+0x20] , 0x82
			mov  DWORD PTR SS : [ecx + 0x98+0x20] , 0
			mov eax,[esp+0x4]
			sub eax,110
			imul eax,20
			mov  DWORD PTR SS : [ecx + 0x9C+0x20] , eax
			add eax,20
			mov  DWORD PTR SS : [ecx + 0xA4+0x20] , eax
			ret 0x8


			//DanhHieuDong
			KiemTraIDICon13:
			sub eax,120
            add eax,6535
            push eax
			push 25
			mov ecx,0x01733B30
			mov eax,0x007C2CF0
			call eax
			push eax
			mov ecx,0x015720C8
			mov eax,0x007B1EC0
			call eax
			mov ecx,[esp+0x8]
			mov  DWORD PTR SS : [ecx + 0x70+0x20] , eax
			mov  DWORD PTR SS : [ecx + 0xA0+0x20] , 0x82
			mov  DWORD PTR SS : [ecx + 0x98+0x20] , 0
			xor edx,edx
			mov dl,[ecx+0x1]
            mov eax,edx
			imul eax,20
			mov  DWORD PTR SS : [ecx + 0x9C+0x20] , eax
			add eax,20
			mov  DWORD PTR SS : [ecx + 0xA4+0x20] , eax
			ret 0x8
    }
}
__declspec(naked) void LoadClassAnotherUser()
{
 __asm
    {
		nop
		nop
		nop
		nop
		nop
		pushad
		mov edi,[esi+0x9EBC]
		cmp edi,0x1
		jz TakeMask
            push eax
			mov   ecx, DWORD PTR DS : [0x10CC37C]
			mov   eax, esi
			mov   eax, [eax + 0x474]
			push 	ecx   //checktype
			mov     eax, [eax * 0x4 + 0x010D7B78]
			push eax
            mov     edx, esi
			lea     edx, [edx + 0x10]
			mov     ecx, DWORD PTR DS : [0x1733AC4]
			mov     eax, [ecx]
			push    edx
			call    DWORD PTR DS : [eax + 0x40]
			pop edx   //Get Name
			pop ecx   // get Address NickIcon
			pop ebx
            push 0
            push 0
			push 0x20
			mov edx, [esi + 0x474]
			cmp edx,0x1
			jnz CheckClass2
			push 0xFF00FF00
			jmp RunprocessCn
			CheckClass2:
			cmp edx,0x2
			jnz CheckClass3
			push 0xFFFF00FF
			jmp RunprocessCn
			CheckClass3:
			cmp edx,0x3
			jnz CheckClass4
			push 0xFFFFFF00
			jmp RunprocessCn
			CheckClass4:
			cmp edx,0x4
			jnz CheckClass5
			push 0xFFDE8200
			jmp RunprocessCn
			CheckClass5:
			cmp edx,0x5
			jnz CheckClass6
			push 0xFF0000FF
			jmp RunprocessCn
			CheckClass6:
			cmp edx,0x6
			jnz CheckClass7
			push 0xFFFF0000
			jmp RunprocessCn
			CheckClass7:
			push 0xFFFFFFFF
			RunprocessCn:
			mov edx, [edx * 0x4 + 0x010D7B78]
			push edx
            mov edi,eax
			add edi, 0xC
			add ecx, edi
            push ebp
            push ecx
            mov ecx, ebx
            mov eax, 0x7BA100
            call eax
            push 0x5
            mov ecx, ebx
            mov eax, 0x7B9C30
			call eax
            TakeMask:
            popad
			mov eax, [esi + 0x9F44]
            push 0x00660D1C
            ret
	}
}
__declspec(naked) void CheckAnti()
{
	__asm
	{
		nop
		nop
		nop
        nop
		nop
		mov edi,[esp+0x10]
		mov DWORD PTR SS :[esp+0x10],0x00000000
		pushad
		lea edi,[esp+0x30]
		push edi
		push 0x01615970
		push eax
		mov eax,0x005A0260
		call eax
        add esp,0xC
		mov edi,[esp+0x30]
		cmp edi,0x1
		jz JoumCheck
		popad
		mov eax,0x404B50
		call eax
        JoumCheck:
		popad
		mov [esp+0x10],edi
        mov ecx,0x015732C8
		push 0x0040404B
        ret
    }
}
__declspec(naked) void CheckAntiLoad()
{
	__asm
	{
		nop
		nop
		nop
        nop
		nop
		mov edi,[esp+0x10]
		mov DWORD PTR SS :[esp+0x10],0x00000000
		pushad
		lea edi,[esp+0x30]
		push edi
		push 0x01615970
		push eax
		mov eax,0x005A0260
		call eax
        add esp,0xC
		mov edi,[esp+0x30]
		cmp edi,0x1    //Out
		jz JoumCheck
		popad
		mov eax,0x404B50
		call eax
        JoumCheck:
		popad
		mov [esp+0x10],edi
		mov eax,0x696BC0
        call eax
		push 0x0072AB3A
        ret
    }
}
__declspec(naked)void WeaponSkill()
{
    __asm
    {
        pushad
        //Check Item
        mov edx, [esi + 0x5840]
        mov eax, [esi + 0x5844]
        cmp edx, 0x13
        jnz NotSkill

        cmp eax, 0x2F36
        jnz CheckWeapon2
		jmp SkillAdd

		CheckWeapon2:
		cmp eax, 0x2F37
        jnz CheckWeapon3
		jmp SkillAdd

		CheckWeapon3:
		cmp eax, 0x2F38
        jnz CheckWeapon4
		jmp SkillAdd

		CheckWeapon4:
		cmp eax, 0x2F39
        jnz CheckWeapon5
		jmp SkillAdd

		CheckWeapon5:
		cmp eax, 0x2F3A
        jnz CheckWeapon6
		jmp SkillAdd

		CheckWeapon6:
		cmp eax, 0x2F3B
        jnz CheckWeapon7
		jmp SkillAdd

		CheckWeapon7:
		cmp eax, 0x2F3C
        jnz CheckWeapon8
		jmp SkillAdd

		CheckWeapon8:
		cmp eax, 0x2F3D
        jnz CheckWeapon9
		jmp SkillAdd

		CheckWeapon9:
		cmp eax, 0x2F3E
        jnz CheckWeapon10
		jmp SkillAdd

		CheckWeapon10:
		cmp eax, 0x2F3F
        jnz Skill9
		jmp SkillAdd


		SkillAdd:
        mov edx, [esi + 0x18]
        mov eax, [esi + 0x214]
        add eax, 0x37
        mov ecx, [esi + 0x14]
        add eax, edx
        push 0xFF000000
        push ecx
        lea edx, [eax - 0x35]
        sub eax, 0xB
        mov[esp + 0x20], edx
        mov edx, [esi + 0x218]
        fild DWORD PTR SS : [esp + 0x20]
        lea edx, [ecx + edx - 0xB]
        mov[esp + 0x20], edx
        fstp DWORD PTR SS : [esp]
        fild DWORD PTR SS : [esp + 0x20]
        push ecx
        mov[esp + 0x24], eax
        fstp DWORD PTR SS : [esp + 0x0]
        fild DWORD PTR SS : [esp + 0x24]
        push ecx
        add ecx, 0x3A
        mov[esp + 0x28], ecx
        fstp DWORD PTR SS : [esp]
        fild DWORD PTR SS : [esp + 0x28]
        push ecx
        fstp DWORD PTR SS : [esp]
		mov eax, 0x007C7BB0
        call eax
        add esp, 0x14
        mov edx, [esi + 0x18]
        mov eax, [esi + 0x214]
        lea edx, [eax + edx - 0x31]
        mov eax, [esi + 0x14]
        push edx // Push 1 X
        lea ecx, [eax + 0x12]
		push ecx // Push 2 Y
        push 1
        push edx
        mov edx, ecx
		push edx
		push 0x2328
		mov ecx, DWORD PTR SS : [0x1616230]
        mov eax, 0x0055F550 //DrawSkillIcon
        call eax
        //Load Name of Skill
		push 0x2328
        push 0x14
        mov ecx, 0x1733B30
        mov eax, 0x007C2CF0
        call eax
		//End
        pop ecx //Get 2 Y
        pop edx // Get 2 X
        push 0
        push eax
        push 1
        mov eax, edx
        add eax, 0x9
        push eax
        mov eax, ecx
        add eax, 0xCA
        push eax
        mov ecx, DWORD PTR SS : [0x01733AC4]
        mov eax, [ecx]
        call DWORD PTR SS : [eax + 0x24]
        popad
        mov eax, [esi + 0x18]
        mov ecx, [esi + 0x214]
        mov edi, 0x004C199A
        jmp edi

        Skill9 :
        cmp eax, 0x2F40
        jnz CheckWeapon22
		jmp SkillAdd2

		CheckWeapon22:
		cmp eax, 0x2F41
        jnz CheckWeapon33
		jmp SkillAdd2

		CheckWeapon33:
		cmp eax, 0x2F42
        jnz CheckWeapon44
		jmp SkillAdd2

		CheckWeapon44:
		cmp eax, 0x2F43
        jnz CheckWeapon55
		jmp SkillAdd2

		CheckWeapon55:
		cmp eax, 0x2F44
        jnz CheckWeapon66
		jmp SkillAdd2

		CheckWeapon66:
		cmp eax, 0x2F45
        jnz CheckWeapon77
		jmp SkillAdd2

		CheckWeapon77:
		cmp eax, 0x2F46
        jnz CheckWeapon88
		jmp SkillAdd2

		CheckWeapon88:
		cmp eax, 0x2F47
        jnz CheckWeapon99
		jmp SkillAdd2

		CheckWeapon99:
		cmp eax, 0x2F48
        jnz Skill10
		jmp SkillAdd2

		SkillAdd2:

            mov edx, [esi + 0x18]
            mov eax, [esi + 0x214]
            add eax, 0x37
            mov ecx, [esi + 0x14]
            add eax, edx
            push 0xFF000000
            push ecx
            lea edx, [eax - 0x35]
            sub eax, 0xB
            mov[esp + 0x20], edx
            mov edx, [esi + 0x218]
            fild DWORD PTR SS : [esp + 0x20]
            lea edx, [ecx + edx - 0xB]
            mov[esp + 0x20], edx
            fstp DWORD PTR SS : [esp]
            fild DWORD PTR SS : [esp + 0x20]
            push ecx
            mov[esp + 0x24], eax
            fstp DWORD PTR SS : [esp + 0x0]
            fild DWORD PTR SS : [esp + 0x24]
            push ecx
            add ecx, 0x3A
            mov[esp + 0x28], ecx
            fstp DWORD PTR SS : [esp]
            fild DWORD PTR SS : [esp + 0x28]
            push ecx
            fstp DWORD PTR SS : [esp]
            mov eax, 0x007C7BB0
            call eax
            add esp, 0x14
            mov edx, [esi + 0x18]
            mov eax, [esi + 0x214]
            lea edx, [eax + edx - 0x31]
            mov eax, [esi + 0x14]
            push edx // Push 1 X
            lea ecx, [eax + 0x12]
            push ecx // Push 2 Y
			push 1
            push edx
            mov edx, ecx
            push edx
			push 0x2329
            mov ecx, DWORD PTR SS : [0x1616230]
            mov eax, 0x0055F550
            call eax
            //Load Name of Skill
			push 0x2329
            push 0x14
            mov ecx, 0x1733B30
            mov eax, 0x007C2CF0
            call eax
            //End
            pop ecx //Get 2 Y
            pop edx // Get 2 X
			push 0
            push eax
            push 1
            mov eax, edx
            add eax, 0xA
            push eax
            mov eax, ecx
			add eax, 0xCA
            push eax
			mov ecx, DWORD PTR SS : [0x01733AC4]
            mov eax, [ecx]
            call DWORD PTR SS : [eax + 0x24]
            popad
            mov eax, [esi + 0x18]
            mov ecx, [esi + 0x214]
			mov edi, 0x004C199A
            jmp edi
			Skill10 :
		cmp eax, 0x2F49
			jnz NewSkill
            mov edx, [esi + 0x18]
            mov eax, [esi + 0x214]
            add eax, 0x37
            mov ecx, [esi + 0x14]
            add eax, edx
            push 0xFF000000
            push ecx
            lea edx, [eax - 0x35]
            sub eax, 0xB
            mov[esp + 0x20], edx
            mov edx, [esi + 0x218]
            fild DWORD PTR SS : [esp + 0x20]
            lea edx, [ecx + edx - 0xB]
            mov[esp + 0x20], edx
            fstp DWORD PTR SS : [esp]
            fild DWORD PTR SS : [esp + 0x20]
            push ecx
            mov[esp + 0x24], eax
            fstp DWORD PTR SS : [esp + 0x0]
            fild DWORD PTR SS : [esp + 0x24]
            push ecx
            add ecx, 0x3A
            mov[esp + 0x28], ecx
            fstp DWORD PTR SS : [esp]
            fild DWORD PTR SS : [esp + 0x28]
            push ecx
            fstp DWORD PTR SS : [esp]
            mov eax, 0x007C7BB0
            call eax
            add esp, 0x14
            mov edx, [esi + 0x18]
            mov eax, [esi + 0x214]
            lea edx, [eax + edx - 0x31]
            mov eax, [esi + 0x14]
            push edx // Push 1 X
            lea ecx, [eax + 0x12]
            push ecx // Push 2 Y
            push 1
            push edx
            mov edx, ecx
            push edx
			push 0x232E
            mov ecx, DWORD PTR SS : [0x1616230]
            mov eax, 0x0055F550
            call eax
            //Load Name of Skill
			push 0x1F
			push 0x232E
            mov ecx, 0x1733B30
            mov eax, 0x007C2CF0
            call eax
            //End
            pop ecx //Get 2 Y
            pop edx // Get 2 X
            push 0
            push eax
            push 1
            mov eax, edx
            add eax, 0xA
            push eax
			mov eax, ecx
			add eax, 0xCA
            push eax
            mov ecx, DWORD PTR SS : [0x01733AC4]
            mov eax, [ecx]
            call DWORD PTR SS : [eax + 0x24]
            popad
            mov eax, [esi + 0x18]
            mov ecx, [esi + 0x214]
            mov edi, 0x004C199A
			jmp edi

			NewSkill:
			cmp eax, 0x3072
			jl NotSkill
			cmp eax, 0x307B
			jg NewSKill2
			mov edx, [esi + 0x18]
			mov eax, [esi + 0x214]
			add eax, 0x37
			mov ecx, [esi + 0x14]
			add eax, edx
			push 0xFF000000
			push ecx
			lea edx, [eax - 0x35]
			sub eax, 0xB
			mov[esp + 0x20], edx
			mov edx, [esi + 0x218]
			fild DWORD PTR SS : [esp + 0x20]
			lea edx, [ecx + edx - 0xB]
			mov[esp + 0x20], edx
			fstp DWORD PTR SS : [esp]
            fild DWORD PTR SS : [esp + 0x20]
            push ecx
            mov[esp + 0x24], eax
            fstp DWORD PTR SS : [esp + 0x0]
            fild DWORD PTR SS : [esp + 0x24]
            push ecx
            add ecx, 0x3A
            mov[esp + 0x28], ecx
            fstp DWORD PTR SS : [esp]
            fild DWORD PTR SS : [esp + 0x28]
            push ecx
            fstp DWORD PTR SS : [esp]
            mov eax, 0x007C7BB0
            call eax
            add esp, 0x14
            mov edx, [esi + 0x18]
            mov eax, [esi + 0x214]
            lea edx, [eax + edx - 0x31]
            mov eax, [esi + 0x14]
            push edx // Push 1 X
            lea ecx, [eax + 0x12]
            push ecx // Push 2 Y
            push 1
            push edx
            mov edx, ecx
            push edx
			push 0x2330
            mov ecx, DWORD PTR SS : [0x1616230]
            mov eax, 0x0055F550
            call eax
            //Load Name of Skill
			push 0x2330
			push 0x14
            mov ecx, 0x1733B30
            mov eax, 0x007C2CF0
            call eax
            //End
            pop ecx //Get 2 Y
            pop edx // Get 2 X
            push 0
            push eax
            push 1
            mov eax, edx
            add eax, 0xA
            push eax
            mov eax, ecx
			add eax, 0xCA
            push eax
            mov ecx, DWORD PTR SS : [0x01733AC4]
            mov eax, [ecx]
            call DWORD PTR SS : [eax + 0x24]
            popad
            mov eax, [esi + 0x18]
            mov ecx, [esi + 0x214]
            mov edi, 0x004C199A
			jmp edi

			NewSKill2:
            cmp eax, 0x3106
			jl NotSkill
			cmp eax, 0x310E
			jg NewSkill3
			mov edx, [esi + 0x18]
			mov eax, [esi + 0x214]
			add eax, 0x37
			mov ecx, [esi + 0x14]
			add eax, edx
			push 0xFF000000
			push ecx
			lea edx, [eax - 0x35]
			sub eax, 0xB
			mov[esp + 0x20], edx
			mov edx, [esi + 0x218]
			fild DWORD PTR SS : [esp + 0x20]
			lea edx, [ecx + edx - 0xB]
			mov[esp + 0x20], edx
			fstp DWORD PTR SS : [esp]
            fild DWORD PTR SS : [esp + 0x20]
            push ecx
            mov[esp + 0x24], eax
            fstp DWORD PTR SS : [esp + 0x0]
            fild DWORD PTR SS : [esp + 0x24]
            push ecx
            add ecx, 0x3A
            mov[esp + 0x28], ecx
            fstp DWORD PTR SS : [esp]
            fild DWORD PTR SS : [esp + 0x28]
            push ecx
            fstp DWORD PTR SS : [esp]
            mov eax, 0x007C7BB0
            call eax
            add esp, 0x14
            mov edx, [esi + 0x18]
            mov eax, [esi + 0x214]
            lea edx, [eax + edx - 0x31]
            mov eax, [esi + 0x14]
            push edx // Push 1 X
            lea ecx, [eax + 0x12]
            push ecx // Push 2 Y
            push 1
            push edx
            mov edx, ecx
            push edx
			push 0x2331
            mov ecx, DWORD PTR SS : [0x1616230]
            mov eax, 0x0055F550
            call eax
            //Load Name of Skill
			push 0x2331
            push 0x14
            mov ecx, 0x1733B30
            mov eax, 0x007C2CF0
            call eax
            //End
            pop ecx //Get 2 Y
            pop edx // Get 2 X
            push 0
            push eax
            push 1
            mov eax, edx
            add eax, 0xA
            push eax
            mov eax, ecx
			add eax, 0xCA
            push eax
            mov ecx, DWORD PTR SS : [0x01733AC4]
            mov eax, [ecx]
            call DWORD PTR SS : [eax + 0x24]
            popad
            mov eax, [esi + 0x18]
            mov ecx, [esi + 0x214]
            mov edi, 0x004C199A
			jmp edi

			NewSkill3:
			cmp eax,0x310F
			jnz NotSkill
            mov edx, [esi + 0x18]
			mov eax, [esi + 0x214]
			add eax, 0x37
			mov ecx, [esi + 0x14]
			add eax, edx
			push 0xFF000000
			push ecx
			lea edx, [eax - 0x35]
			sub eax, 0xB
			mov[esp + 0x20], edx
			mov edx, [esi + 0x218]
			fild DWORD PTR SS : [esp + 0x20]
			lea edx, [ecx + edx - 0xB]
			mov[esp + 0x20], edx
			fstp DWORD PTR SS : [esp]
            fild DWORD PTR SS : [esp + 0x20]
            push ecx
            mov[esp + 0x24], eax
            fstp DWORD PTR SS : [esp + 0x0]
            fild DWORD PTR SS : [esp + 0x24]
            push ecx
            add ecx, 0x3A
            mov[esp + 0x28], ecx
            fstp DWORD PTR SS : [esp]
            fild DWORD PTR SS : [esp + 0x28]
            push ecx
            fstp DWORD PTR SS : [esp]
            mov eax, 0x007C7BB0
            call eax
            add esp, 0x14
            mov edx, [esi + 0x18]
            mov eax, [esi + 0x214]
            lea edx, [eax + edx - 0x31]
            mov eax, [esi + 0x14]
            push edx // Push 1 X
            lea ecx, [eax + 0x12]
            push ecx // Push 2 Y
            push 1
            push edx
            mov edx, ecx
			push edx
			push 0x2332
            mov ecx, DWORD PTR SS : [0x1616230]
            mov eax, 0x0055F550
            call eax
            //Load Name of Skill
			push 0x2332
            push 0x14
            mov ecx, 0x1733B30
            mov eax, 0x007C2CF0
            call eax
            //End
            pop ecx //Get 2 Y
            pop edx // Get 2 X
            push 0
            push eax
            push 1
            mov eax, edx
            add eax, 0xA
            push eax
            mov eax, ecx
			add eax, 0xCA
            push eax
            mov ecx, DWORD PTR SS : [0x01733AC4]
            mov eax, [ecx]
            call DWORD PTR SS : [eax + 0x24]
            popad
            mov eax, [esi + 0x18]
            mov ecx, [esi + 0x214]
            mov edi, 0x004C199A
			jmp edi

			NotSkill :
        	popad
            mov eax, [esi + 0x18]
			mov ecx, [esi + 0x214]
            mov edi, 0x004C199A
			jmp edi
	}
}
__declspec(naked) void ChangePackedHeader1() // 007B679E
{
	__asm
	{
        cmp word ptr [esp+0x66],0xD50A
		push 0x007B67A5
		ret
	}
}
__declspec(naked) void ChangePackedHeader() // 007B678A
{
	__asm
	{
		cmp word ptr ss:[esp+0x64], 0xAC9F
		push 0x007B6791
		ret
    }
}
__declspec(naked) void CheckAntiInGame()
{
	__asm
	{
		nop
		nop
		nop
        nop
		nop
		mov edi,[esp+0x10]
		mov DWORD PTR SS :[esp+0x10],0x00000000
		pushad
		lea edi,[esp+0x30]
		push edi
		push 0x01615970
		push eax
		mov eax,0x005A0260
		call eax
        add esp,0xC
		mov edi,[esp+0x30]
		cmp edi,0x1    //Out
		jz JoumCheck
		popad
		mov eax,0x404B50
		call eax
        JoumCheck:
		popad
		mov [esp+0x10],edi
		mov eax,[0x016158E4]
		push 0x0065FE2A
        ret
    }
}
__declspec(naked) void LockChange()
{
      __asm {
        push eax
        mov eax, [0x110FE5C]
        cmp eax, 0x02
		je LockChangeWeap
        pop eax
        mov ecx, 0x19
        push 0x006B3E62
        ret
        LockChangeWeap :
        pop eax
		push 0x006B3EFB
		ret
	}
}
__declspec(naked) void OptionRefine2()
{
	  __asm {
	    nop
		nop
		nop
		nop
		nop
		pushad
		mov edi,eax
        mov eax,0x00000000
        mov al,[edi+0x50]
		cmp al,0x1
		jnz JumOutLoad
		//
		mov eax,0x00000000
		mov ecx,0x00000000
		mov cl,[edi+0x51]
		push ecx //value of sprinf

		// Show Line Refine
		push 0x12B9
		push 0x19
		mov ecx,0x1733B30
		mov eax,0x007C2CF0
		call eax
		//
		push eax
		push 0x100
		push edi
		mov eax,0x0085C538
		call [eax] //sprintf
		//
        add esp,0x10
		push 0x0
		push edi
		push 0x2
		mov eax,[esi+0x18]
		mov ecx,[edi+0x53]
		add eax,ecx
        push eax
		mov ecx,[esi+0x14]
		add ecx,0x5D
		push ecx
        mov ecx,[0x01733AC4]
		mov edx,[ecx]
		call dword ptr[edx+0x24]
		//Check type
		mov cl,[edi+0x52]
		cmp cl,0x00 //************************
		jnz CheckQuan
		//Func Load Option
        //lOAD Mau      --------------Option 1
		mov eax,0x00000000
        mov ecx,0x00000000
		mov al,0x64
		mov cl,byte ptr[edi+0x51]
        mul cl
		push eax //value of sprinf

		// Show Line Refine
		push 0x12BA
		push 0x19
		mov ecx,0x1733B30
		mov eax,0x007C2CF0
		call eax
		//
		push eax
		push 0x100
		push edi
		mov eax,0x0085C538
		call [eax] //sprintf
		//
        add esp,0x10
		push 0x0
		push edi
		push 0x2
		mov eax,[esi+0x18]
		mov ecx,[edi+0x53]
		add eax,ecx
        add eax,0x10
        push eax
		mov ecx,[esi+0x14]
		add ecx,0x5D
		push ecx
        mov ecx,[0x01733AC4]
		mov edx,[ecx]
		call dword ptr[edx+0x24]
		//Load Def  -------------------------- Option2
        mov eax,0x00000000
		mov ecx,0x00000000
		mov eax,0x32
		mov cl,[edi+0x51]
        mul cl
		push eax //value of sprinf

		// Show Line Refine
		push 0x12BC
		push 0x19
		mov ecx,0x1733B30
		mov eax,0x007C2CF0
		call eax
		//
		push eax
		push 0x100
		push edi
		mov eax,0x0085C538
		call [eax] //sprintf
		//
        add esp,0x10
		push 0x0
		push edi
		push 0x2
		mov eax,[esi+0x18]
		mov ecx,[edi+0x53]
		add eax,ecx
        add eax,0x20
        push eax
		mov ecx,[esi+0x14]
		add ecx,0x5D
		push ecx
        mov ecx,[0x01733AC4]
		mov edx,[ecx]
		call dword ptr[edx+0x24]
        jmp JmpEnd
        //
		CheckQuan://**********************************
		cmp cl,0x01
		jnz Tay
		mov eax,0x00000000
        mov ecx,0x00000000
		mov eax,0x64  //----------------Option 1
		mov cl,[edi+0x51]
        mul cl
		push eax //value of sprinf

		// Show Line Refine
		push 0x12BB
		push 0x19
		mov ecx,0x1733B30
		mov eax,0x007C2CF0
		call eax
		//
		push eax
		push 0x100
		push edi
		mov eax,0x0085C538
		call [eax] //sprintf
		//
        add esp,0x10
		push 0x0
		push edi
		push 0x2
		mov eax,[esi+0x18]
		mov ecx,[edi+0x53]
		add eax,ecx
        add eax,0x10
        push eax
		mov ecx,[esi+0x14]
		add ecx,0x5D
		push ecx
        mov ecx,[0x01733AC4]
		mov edx,[ecx]
		call dword ptr[edx+0x24]
		//Load Def    -------------- Option 2
		mov eax,0x00000000
        mov ecx,0x00000000
		mov eax,0x32
		mov cl,[edi+0x51]
        mul cl
		push eax //value of sprinf

		// Show Line Refine
		push 0x12BD
		push 0x19
		mov ecx,0x1733B30
		mov eax,0x007C2CF0
		call eax
		//
		push eax
		push 0x100
		push edi
		mov eax,0x0085C538
		call [eax] //sprintf
		//
        add esp,0x10
		push 0x0
		push edi
		push 0x2
		mov eax,[esi+0x18]
		mov ecx,[edi+0x53]
		add eax,ecx
        add eax,0x20
        push eax
		mov ecx,[esi+0x14]
		add ecx,0x5D
		push ecx
        mov ecx,[0x01733AC4]
		mov edx,[ecx]
		call dword ptr[edx+0x24]
        jmp JmpEnd

        Tay:
		cmp cl,0x02
		jnz Chan
 		mov eax,0x00000000
        mov ecx,0x00000000
		mov eax,0x64 //-------------Option 1
		mov cl,[edi+0x51]
        mul cl
		push eax //value of sprinf

		// Show Line Refine
		push 0x12BE
		push 0x19
		mov ecx,0x1733B30
		mov eax,0x007C2CF0
		call eax
		//
		push eax
		push 0x100
		push edi
		mov eax,0x0085C538
		call [eax] //sprintf
		//
        add esp,0x10
		push 0x0
		push edi
		push 0x2
		mov eax,[esi+0x18]
		mov ecx,[edi+0x53]
		add eax,ecx
        add eax,0x10
        push eax
		mov ecx,[esi+0x14]
		add ecx,0x5D
		push ecx
        mov ecx,[0x01733AC4]
		mov edx,[ecx]
		call dword ptr[edx+0x24]
		//Load Def  ---------------Option 2
 		mov eax,0x00000000
        mov ecx,0x00000000
		mov eax,0x64
		mov cl,[edi+0x51]
        mul cl
		push eax //value of sprinf

		// Show Line Refine
		push 0x12BF
		push 0x19
		mov ecx,0x1733B30
		mov eax,0x007C2CF0
		call eax
		//
		push eax
		push 0x100
		push edi
		mov eax,0x0085C538
		call [eax] //sprintf
		//
        add esp,0x10
		push 0x0
		push edi
		push 0x2
		mov eax,[esi+0x18]
		mov ecx,[edi+0x53]
		add eax,ecx
		add eax,0x20
        push eax
		mov ecx,[esi+0x14]
		add ecx,0x5D
		push ecx
        mov ecx,[0x01733AC4]
		mov edx,[ecx]
		call dword ptr[edx+0x24]
        //Load Def  ---------------Option 3
		mov eax,0x00000000
        mov ecx,0x00000000
		mov eax,0x64
		mov cl,[edi+0x51]
        mul cl
		push eax //value of sprinf

		// Show Line Refine
		push 0x12C5
		push 0x19
		mov ecx,0x1733B30
		mov eax,0x007C2CF0
		call eax
		//
		push eax
		push 0x100
		push edi
		mov eax,0x0085C538
		call [eax] //sprintf
		//
        add esp,0x10
		push 0x0
		push edi
		push 0x2
		mov eax,[esi+0x18]
		mov ecx,[edi+0x53]
		add eax,ecx
        add eax,0x30
        push eax
		mov ecx,[esi+0x14]
		add ecx,0x5D
		push ecx
        mov ecx,[0x01733AC4]
		mov edx,[ecx]
		call dword ptr[edx+0x24]
        jmp JmpEnd

        Chan:
		cmp cl,0x03
		jnz Mu
		mov eax,0x00000000
        mov ecx,0x00000000
		mov eax,0x2 //-------------Option 1
		mov cl,[edi+0x51]
        mul cl
		push eax //value of sprinf

		// Show Line Refine
		push 0x12C0
		push 0x19
		mov ecx,0x1733B30
		mov eax,0x007C2CF0
		call eax
		//
		push eax
		push 0x100
		push edi
		mov eax,0x0085C538
		call [eax] //sprintf
		//
        add esp,0x10
		push 0x0
		push edi
		push 0x2
		mov eax,[esi+0x18]
		mov ecx,[edi+0x53]
		add eax,ecx
        add eax,0x10
        push eax
		mov ecx,[esi+0x14]
		add ecx,0x5D
		push ecx
        mov ecx,[0x01733AC4]
		mov edx,[ecx]
		call dword ptr[edx+0x24]
		//Load Def  ---------------Option 2
		mov eax,0x00000000
		mov ecx,0x00000000
		mov eax,0x32
		mov cl,[edi+0x51]
        mul cl
		push eax //value of sprinf

		// Show Line Refine
		push 0x12C1
		push 0x19
		mov ecx,0x1733B30
		mov eax,0x007C2CF0
		call eax
		//
		push eax
		push 0x100
		push edi
		mov eax,0x0085C538
		call [eax] //sprintf
		//
        add esp,0x10
		push 0x0
		push edi
		push 0x2
		mov eax,[esi+0x18]
		mov ecx,[edi+0x53]
		add eax,ecx
        add eax,0x20
        push eax
		mov ecx,[esi+0x14]
		add ecx,0x5D
		push ecx
        mov ecx,[0x01733AC4]
		mov edx,[ecx]
		call dword ptr[edx+0x24]
        //Load Def  ---------------Option 3
		mov eax,0x00000000
		mov ecx,0x00000000
		mov eax,0x32
		mov cl,[edi+0x51]
        mul cl
		push eax //value of sprinf

		// Show Line Refine
		push 0x12C2
		push 0x19
		mov ecx,0x1733B30
		mov eax,0x007C2CF0
		call eax
		//
		push eax
		push 0x100
		push edi
		mov eax,0x0085C538
		call [eax] //sprintf
		//
        add esp,0x10
		push 0x0
		push edi
		push 0x2
		mov eax,[esi+0x18]
		mov ecx,[edi+0x53]
		add eax,ecx
        add eax,0x30
        push eax
		mov ecx,[esi+0x14]
		add ecx,0x5D
		push ecx
        mov ecx,[0x01733AC4]
		mov edx,[ecx]
		call dword ptr[edx+0x24]
        jmp JmpEnd

        Mu:
		cmp cl,0x04
		jnz JumOutLoad
		mov eax,0x00000000
		mov ecx,0x00000000
		mov eax,0x32 //-------------Option 1
		mov cl,[edi+0x51]
        mul cl
		push eax //value of sprinf

		// Show Line Refine
		push 0x12C3
		push 0x19
		mov ecx,0x1733B30
		mov eax,0x007C2CF0
		call eax
		//
		push eax
		push 0x100
		push edi
		mov eax,0x0085C538
		call [eax] //sprintf
		//
        add esp,0x10
		push 0x0
		push edi
		push 0x2
		mov eax,[esi+0x18]
		mov ecx,[edi+0x53]
		add eax,ecx
        add eax,0x10
        push eax
		mov ecx,[esi+0x14]
		add ecx,0x5D
		push ecx
        mov ecx,[0x01733AC4]
		mov edx,[ecx]
		call dword ptr[edx+0x24]
		//Load Def  ---------------Option 2
		mov eax,0x00000000
		mov ecx,0x00000000
		mov eax,0x32
		mov cl,[edi+0x51]
        mul cl
		push eax //value of sprinf

		// Show Line Refine
		push 0x12C4
		push 0x19
		mov ecx,0x1733B30
		mov eax,0x007C2CF0
		call eax
		//
		push eax
		push 0x100
		push edi
		mov eax,0x0085C538
		call [eax] //sprintf
		//
        add esp,0x10
		push 0x0
		push edi
		push 0x2
		mov eax,[esi+0x18]
		mov ecx,[edi+0x53]
		add eax,ecx
        add eax,0x20
        push eax
		mov ecx,[esi+0x14]
		add ecx,0x5D
		push ecx
        mov ecx,[0x01733AC4]
		mov edx,[ecx]
		call dword ptr[edx+0x24]
        //Load Def  ---------------Option 3
		mov eax,0x00000000
        mov ecx,0x00000000
		mov eax,0x2
		mov cl,[edi+0x51]
        mul cl
		push eax //value of sprinf

		// Show Line Refine
		push 0x12C6
		push 0x19
		mov ecx,0x1733B30
		mov eax,0x007C2CF0
		call eax
		//
		push eax
		push 0x100
		push edi
		mov eax,0x0085C538
		call [eax] //sprintf
		//
        add esp,0x10
		push 0x0
		push edi
		push 0x2
		mov eax,[esi+0x18]
		mov ecx,[edi+0x53]
		add eax,ecx
        add eax,0x30
        push eax
		mov ecx,[esi+0x14]
		add ecx,0x5D
		push ecx
        mov ecx,[0x01733AC4]
		mov edx,[ecx]
		call dword ptr[edx+0x24]
        jmp JmpEnd



        //
		//Flush and Disable Mode
        JmpEnd:
		mov ecx,[0x01733AC4]
		mov edx,[ecx]
		call dword ptr[edx+0x38]
        mov ecx,[0x01733AC4]
		mov edx,[ecx]
		call dword ptr[edx+0x5C]
		//
		JumOutLoad:
		popad
		mov ebx, [esi+0x214]
		push 0x004C1872
        ret
	}
}
__declspec(naked) void DecVoDich()
{
      __asm {
		mov cx,[esi+0x6]
		cmp cx,0x3C
		jnz LoadDefault
        mov cx,0x0F
		LoadDefault:
        mov     dx, [esi+0x4]
		push 0x006C9065
		ret
	}
}
__declspec(naked) void GetValuePickItem()
{
	  __asm {
	    nop
		nop
		nop
		nop
		nop
        pushad
		//  Run Get Value
		mov cl,[esp+0x172]
		xor cl,0x1F
		cmp cl,0x01
		jnz JumOutGet
		// Check Type Item 1
		mov bl,[esp+0x16C]
		xor bl,0xC5
		cmp bl,0x00
		jz JumOutGet
		// Check Inchant Item
		mov dl,[esp+0x173]
		xor dl,0x1F
		mov [eax+0x50],cl  //Get Type ID 1
		mov [eax+0x51],bl  //Get Inchant
		mov [eax+0x52],dl
        popad
		push ebp
		mov ebp, ecx
		push esi
		push edi
		push 0x004C7342
		ret
        //
		JumOutGet:
        mov ecx,0x00000000
		mov [eax+0x50],cl  //Mov Value
		mov [eax+0x51],cl  //Mov Value
		mov [eax+0x52],cl  //Mov Value
        mov [eax+0x53],cx

		popad
		push ebp
		mov ebp, ecx
		push esi
		push edi
		push 0x004C7342
		ret
	}
}
__declspec(naked) void IncCloth()
{
	  __asm {
		add esp, 0x4
		cmp al,0x1
		jz ShowInc
        test al,al
        push 0x004917B3
		ret
		ShowInc:
	   /*	mov eax,[esp+0x40]
		mov al,[eax+0x10]
		xor al,0xC5
		cmp al,0x1
		jge InchClth
		mov al,0x01
        test al,al
		push 0x004917B3
		ret
		InchClth:  */
		mov al,0x00
		test al,al
		push 0x004917B3
		ret
	}
}
__declspec(naked) void ChangeSizePack()  //006DC383
{
	  __asm {
		xor ecx,ecx
		mov cl,[esi+0x1]
		cmp ecx,0x9
		jnz Default
		xor ecx,ecx
		mov cl,[esi+0x9]
		test ecx,ecx
		jnz Add5A
		mov ecx,[0x010D94A8]
		add eax,0x53
		push 0x006DC38C
		ret
		Add5A:
		mov ecx,[0x010D94A8]
		add eax,0x5A
		push 0x006DC4BA
		ret
		Default:
		mov ecx,[0x010D94A8]
		push 0x006DC389
		ret
	}
}
__declspec(naked) void ChangeSizePack1() //006DC4B1
{
	  __asm {
		xor ecx,ecx
		mov cl,[esi+0x1]
		cmp ecx,0x9
		jnz Default
		xor ecx,ecx
		mov cl,[esi+0x9]
		test ecx,ecx
        jnz Add5A
		mov ecx,[0x010D94A8]
		add eax,0x53
		push 0x006DC4BA
		ret
		Add5A:
		mov ecx,[0x010D94A8]
		add eax,0x5A
		push 0x006DC4BA
		ret
		Default:
		mov ecx,[0x010D94A8]
		push 0x006DC4B7
		ret
	}
}
__declspec(naked) void GetPackSv()
{
	  __asm {
		pushad
		mov eax,[0x010D94A8]
		mov dl,[esi+0x1]
		cmp dl,0x1
		jz Cloth
		popad
		mov eax,[0x010D94A8]
		push 0x006DC615
		ret
		Cloth:
		mov dl,[esi+0x12]
		cmp dl,0x00
		jg InchantClth
		popad
		mov eax,[0x010D94A8]
		push 0x006DC615
		ret

		InchantClth:
		xor dl,0xC5
		mov [edi+eax+0x22DD8],dl
		xor edx,edx
		mov dl,[esi+0x13]
        mov [edi+eax+0x22DC8+0x28],dl
		mov dx,[esi+0x17]
		xor dx,0xCE43
		mov [edi+eax+0x22DF2],dx
		mov dx,[esi+0x19]
		xor dx,0xCE43
		mov [edi+eax+0x22DF4],dx
        xor edx,edx
		mov dl,[esi+0x1B]
		cmp edx,0x2
		jl NotCuongDoCloth
        sub edx,0x1
		add edx,0x60
        mov [edi+eax+0x22DC8+0x74],dl
		NotCuongDoCloth:
        xor edx,edx
		mov dl,[esi+0x1B]
        xor dl,0xC5
		mov [edi+eax+0x22DC8+0x2E],dl

		mov dx,[esi+0x1C]
		xor dx,0xCE43
		mov [edi+eax+0x22DF8],dx
		mov dx,[esi+0x1E]
		xor dx,0xCE43
		mov [edi+eax+0x22DFA],dx

		mov dx,[esi+0x21]
		xor dx,0xCE43
		mov [edi+eax+0x22DFE],dx
		mov dx,[esi+0x23]
		xor dx,0xCE43
		mov [edi+eax+0x22E00],dx

        mov dx,[esi+0x26]
		xor dx,0xCE43
		mov [edi+0x1107258+0x22E04],dx
		mov dx,[esi+0x28]
		xor dx,0xCE43
		mov [edi+0x1107258+0x22E06],dx

		mov dx,[esi+0x2B]
		xor dx,0xCE43
		mov [edi+0x1107258+0x22DC8+0x42],dx
		mov dx,[esi+0x2D]
		xor dx,0xCE43
		mov [edi+0x1107258+0x22DC8+0x44],dx
		mov byte ptr [edi+0x1107258+0x22DC8+0x46],0xC4

		popad
        mov eax,[0x010D94A8]
		push 0x006DC615
		ret
	}
}
__declspec(naked) void GetPackSv2()
{
	  __asm {
		pushad
		mov eax,[0x010D94A8]
		mov dl,[esi+0x1]
		cmp dl,0x1
		jz Cloth
		popad
        mov eax,[0x010D94A8]
		push 0x006DC8AC
		ret
		Cloth:
		mov dl,[esi+0x12]
		cmp dl,0x00
		jg InchantClth
		popad
		mov eax,[0x010D94A8]
		push 0x006DC8AC
		ret

        InchantClth:
		xor dl,0xC5
		mov [edi+eax+0x22DD8],dl
        xor edx,edx
		mov dl,[esi+0x13]
        mov [edi+eax+0x22DC8+0x28],dl
		mov dx,[esi+0x17]
		xor dx,0xCE43
		mov [edi+eax+0x22DF2],dx
		mov dx,[esi+0x19]
		xor dx,0xCE43
		mov [edi+eax+0x22DF4],dx
        xor edx,edx
		mov dl,[esi+0x1B]
		cmp edx,0x2
		jl NotCuongDoCloth
        sub edx,0x1
		add edx,0x60
        mov [edi+eax+0x22DC8+0x74],dl
		NotCuongDoCloth:
        xor edx,edx
		mov dl,[esi+0x1B]
        xor dl,0xC5
		mov [edi+eax+0x22DC8+0x2E],dl

		mov dx,[esi+0x1C]
		xor dx,0xCE43
		mov [edi+eax+0x22DF8],dx
		mov dx,[esi+0x1E]
		xor dx,0xCE43
		mov [edi+eax+0x22DFA],dx

		mov dx,[esi+0x21]
		xor dx,0xCE43
		mov [edi+eax+0x22DFE],dx
		mov dx,[esi+0x23]
		xor dx,0xCE43
		mov [edi+eax+0x22E00],dx

		mov dx,[esi+0x26]
		xor dx,0xCE43
		mov [edi+0x1107258+0x22E04],dx
		mov dx,[esi+0x28]
		xor dx,0xCE43
		mov [edi+0x1107258+0x22E06],dx

        mov dx,[esi+0x2B]
		xor dx,0xCE43
		mov [edi+0x1107258+0x22DC8+0x42],dx
		mov dx,[esi+0x2D]
		xor dx,0xCE43
		mov [edi+0x1107258+0x22DC8+0x44],dx
		mov byte ptr [edi+0x1107258+0x22DC8+0x46],0xC4

		popad
        mov eax,[0x010D94A8]
		push 0x006DC8AC
		ret
	}
}
__declspec(naked) void GetPackSvRelics()   //006DC358
{
	  __asm {
		movsx eax,al
		add esp,0x4
		push eax
		cmp eax,0x9
		jnz Default
		push esi
        call GetValuePackageRelics
        Default:
		pop eax
		push 0x006DC35E
		ret

		GetValuePackageRelics:
		sub esp,0x4
		xor ecx,ecx
		mov [esp],ecx
        LoopBackCheckOption:
        mov ecx,[esp]
		mov eax,[esp+0x8]
        //Option 1
		xor edx,edx
		imul ecx,0x5
		mov dx,[eax+0x17+ecx]
		xor dx,0xCE43
		xor ecx,ecx
		mov cl,[eax]
		imul ecx,0x90
		mov eax,ecx
		mov ecx,[esp]
        imul ecx,0x6
		mov [0x1107258+eax+0x22DC8+0x2A+ecx],dx
        // Value 1
		xor edx,edx
		mov eax,[esp+0x8]
		mov ecx,[esp]
		imul ecx,0x5
		mov dx,[eax+0x19+ecx]
		xor dx,0xCE43
		xor ecx,ecx
		mov cl,[eax]
		imul ecx,0x90
		mov eax,ecx
		mov ecx,[esp]
		imul ecx,0x6
		mov [0x1107258+eax+0x22DC8+0x2C+ecx],dx
        // Rank 1
		xor edx,edx
		mov eax,[esp+0x8]
		mov ecx,[esp]
		imul ecx,0x5
		mov dl,[eax+0x1B+ecx]
		and dl,0xF
		xor dl,0xC5
		xor ecx,ecx
		mov cl,[eax]
		imul ecx,0x90
		mov eax,ecx
		mov ecx,[esp]
		imul ecx,0x6
		mov [0x1107258+eax+0x22DC8+0x2E+ecx],dl
		//
        xor edx,edx
		mov eax,[esp+0x8]
        mov ecx,[esp]
		imul ecx,0x5
		mov dl,[eax+0x1B+ecx]
        shr dl,0x4
		xor dl,0xC5
		xor ecx,ecx
		mov cl,[eax]
		imul ecx,0x90
		mov eax,ecx
		mov ecx,[esp]
		imul ecx,0x6
		mov [0x1107258+eax+0x22DC8+0x2F+ecx],dl
        EndloopCheckValue:
		mov ecx,[esp]
		add ecx,0x1
        mov [esp],ecx
		cmp ecx,0x6
		jl LoopBackCheckOption
		add esp,0x4
		ret 0x4
	}
}
__declspec(naked) void AddEffect()
{
    __asm {
		mov edi,[esp+0xC]
		mov ax,[edi+0x3]
		cmp ax,[ecx+0x83C8]
		jnz JmpOut
        pushad
		mov al,[edi+0x6]
		cmp al,0x00
		jz TakeOut
		mov al,[edi+0x9]
		cmp al,0x05
		jl CheckOut
        // Process Add Effect
		mov al,[edi+0x05]
		cmp al,0x00
		jnz CheckType3
		mov al,[edi+0x09]
		cmp al,0x08
		jl EffectLow
		//EffectHigh
		cmp al,0x8
		jnz CheckInc11
		mov eax,0x3E9
		jmp InsertEffect
        //
		CheckInc11:
		cmp al,0x9
		jnz CheckInc12
        mov eax,0x3F3
		jmp InsertEffect
        //
		CheckInc12:
		cmp al,0xA
		jnz CheckInc13
        mov eax,0x3FD
		jmp InsertEffect
		//
		CheckInc13:
		cmp al,0xB
		jnz CheckInc14
		mov eax,0x407
		jmp InsertEffect
		//
		CheckInc14:
		cmp al,0xC
		jnz CheckInc15
		mov eax,0x411
		jmp InsertEffect
		//
		CheckInc15:
		cmp al,0xD
		jnz CheckInc16
		mov eax,0x41B
		jmp InsertEffect
		//
		CheckInc16:
		cmp al,0xE
		jnz CheckInc17
		mov eax,0x425
		jmp InsertEffect
		//
		CheckInc17:
		cmp al,0xF
		jnz CheckOut
		mov eax,0x42F
		jmp InsertEffect
        //End


		EffectLow:
		mov eax,0x3EA
        jmp InsertEffect
		//
		CheckType3:
		cmp al,0x01
		jnz CheckType4
		mov al,[edi+0x09]
		cmp al,0x08
		jl EffectLow1
		//EffectHigh
		cmp al,0x8
		jnz CheckInc111
		mov eax,0x515
		jmp InsertEffect
        //
		CheckInc111:
		cmp al,0x9
		jnz CheckInc121
		mov eax,0x51F
		jmp InsertEffect
        //
		CheckInc121:
		cmp al,0xA
		jnz CheckInc131
		mov eax,0x529
		jmp InsertEffect
		//
		CheckInc131:
		cmp al,0xB
		jnz CheckInc141
		mov eax,0x533
		jmp InsertEffect
		//
		CheckInc141:
		cmp al,0xC
		jnz CheckInc151
		mov eax,0x53D
		jmp InsertEffect
		//
		CheckInc151:
		cmp al,0xD
		jnz CheckInc161
		mov eax,0x547
		jmp InsertEffect
		//
		CheckInc161:
		cmp al,0xE
		jnz CheckInc171
		mov eax,0x551
		jmp InsertEffect
		//
		CheckInc171:
		cmp al,0xF
		jnz CheckOut
		mov eax,0x55B
		jmp InsertEffect

		EffectLow1:
		mov eax,0x517
		jmp InsertEffect

		CheckType4:
		cmp al,0x02
		jnz CheckType5
		mov al,[edi+0x09]
		cmp al,0x08
		jl EffectLow11
		//EffectHigh
		cmp al,0x8
		jnz CheckInc1111
		mov eax,0x516
		jmp InsertEffect
		//
		CheckInc1111:
		cmp al,0x9
		jnz CheckInc1211
		mov eax,0x520
		jmp InsertEffect
		//
		CheckInc1211:
		cmp al,0xA
		jnz CheckInc1311
		mov eax,0x52A
		jmp InsertEffect
		//
		CheckInc1311:
		cmp al,0xB
		jnz CheckInc1411
		mov eax,0x534
		jmp InsertEffect
		//
		CheckInc1411:
		cmp al,0xC
		jnz CheckInc1511
		mov eax,0x53E
		jmp InsertEffect
		//
		CheckInc1511:
		cmp al,0xD
		jnz CheckInc1611
		mov eax,0x548
		jmp InsertEffect
		//
		CheckInc1611:
		cmp al,0xE
		jnz CheckInc1711
		mov eax,0x552
		jmp InsertEffect
		//
		CheckInc1711:
		cmp al,0xF
		jnz CheckOut
		mov eax,0x55C
		jmp InsertEffect

		EffectLow11:
		mov eax,0x518
		jmp InsertEffect

		CheckType5:
		cmp al,0x03
		jnz CheckType6
		mov al,[edi+0x09]
		cmp al,0x08
		jl EffectLow1211
		//EffectHigh
		cmp al,0x8
		jnz CheckInc11112
		mov eax,0x579
		jmp InsertEffect
		//
		CheckInc11112:
		cmp al,0x9
		jnz CheckInc12112
		mov eax,0x583
		jmp InsertEffect
		//
		CheckInc12112:
		cmp al,0xA
		jnz CheckInc13112
		mov eax,0x58D
		jmp InsertEffect
		//
		CheckInc13112:
		cmp al,0xB
		jnz CheckInc14112
		mov eax,0x597
		jmp InsertEffect
		//
		CheckInc14112:
		cmp al,0xC
		jnz CheckInc15112
		mov eax,0x5A1
		jmp InsertEffect
		//
		CheckInc15112:
		cmp al,0xD
		jnz CheckInc16112
		mov eax,0x5AB
		jmp InsertEffect
		//
		CheckInc16112:
		cmp al,0xE
		jnz CheckInc17112
		mov eax,0x5B5
		jmp InsertEffect
		//
		CheckInc17112:
		cmp al,0xF
		jnz CheckOut
		mov eax,0x5BF
		jmp InsertEffect

		EffectLow1211:
		mov eax,0x57B
		jmp InsertEffect

		CheckType6:
		cmp al,0x04
		jnz CheckType7
		mov al,[edi+0x09]
		cmp al,0x08
		jl EffectLow12112
		//EffectHigh
		cmp al,0x8
		jnz CheckInc111121
		mov eax,0x57A
		jmp InsertEffect
        //
		CheckInc111121:
		cmp al,0x9
		jnz CheckInc121121
		mov eax,0x584
		jmp InsertEffect
		//
		CheckInc121121:
		cmp al,0xA
		jnz CheckInc131121
        mov eax,0x58E
		jmp InsertEffect
		//
		CheckInc131121:
		cmp al,0xB
		jnz CheckInc141121
        mov eax,0x598
		jmp InsertEffect
		//
		CheckInc141121:
		cmp al,0xC
		jnz CheckInc151121
        mov eax,0x5A2
		jmp InsertEffect
		//
		CheckInc151121:
		cmp al,0xD
		jnz CheckInc161121
        mov eax,0x5AC
		jmp InsertEffect
		//
		CheckInc161121:
		cmp al,0xE
		jnz CheckInc171121
		mov eax,0x5B6
		jmp InsertEffect
		//
		CheckInc171121:
		cmp al,0xF
		jnz CheckOut
		mov eax,0x5C0
		jmp InsertEffect

		EffectLow12112:
		mov eax,0x57C
		jmp InsertEffect

		CheckType7:
		jmp CheckOut
		//
		InsertEffect:
		mov edi,eax
		mov esi,[0x10D94A8]
		mov ecx,[esi+0x00008924]
		push eax
		mov eax,0x00782360
		call eax
		test eax,eax
		jne CheckOut
		mov ecx,[esi+0x00008924]
		push 0xBF800000
		push 01
		push eax
		lea eax,[esi+0x00008500]
		push eax
		push edi
		push 0x01571B88
		mov eax,0x007817E0
		call eax
		jmp CheckOut

		//
		TakeOut:
		mov ebx,0x0
		TakeOut1:
		mov al,[edi+0x5]
		cmp al,0x00
		jnz CheckTypeOut
		cmp ebx,0x00
		jnz Effect1
		mov eax,0x3E9
		jmp DeleteEffect

		Effect1:
		cmp ebx,0x01
		jnz Effect2
		mov eax,0x3F3
		jmp DeleteEffect

		Effect2:
		cmp ebx,0x02
		jnz Effect3
		mov eax,0x3FD
		jmp DeleteEffect

		Effect3:
		cmp ebx,0x03
		jnz Effect4
		mov eax,0x407
		jmp DeleteEffect

		Effect4:
		cmp ebx,0x04
		jnz Effect5
		mov eax,0x411
		jmp DeleteEffect

		Effect5:
		cmp ebx,0x05
		jnz Effect6
		mov eax,0x41B
		jmp DeleteEffect

		Effect6:
		cmp ebx,0x06
		jnz Effect7
		mov eax,0x425
		jmp DeleteEffect

		Effect7:
		cmp ebx,0x07
		jnz Effect8
		mov eax,0x42F
		jmp DeleteEffect

		Effect8:
		mov eax,0x3EA
		jmp DeleteEffect

		CheckTypeOut:
		cmp al,0x01
		jnz CheckTypeOut1
		cmp ebx,0x00
		jnz Effect11
		mov eax,0x515
		jmp DeleteEffect

		Effect11:
		cmp ebx,0x01
		jnz Effect12
		mov eax,0x51F
		jmp DeleteEffect

		Effect12:
		cmp ebx,0x02
		jnz Effect13
		mov eax,0x529
		jmp DeleteEffect

		Effect13:
		cmp ebx,0x03
		jnz Effect14
		mov eax,0x533
		jmp DeleteEffect

		Effect14:
		cmp ebx,0x04
		jnz Effect15
		mov eax,0x53D
		jmp DeleteEffect

		Effect15:
		cmp ebx,0x05
		jnz Effect16
		mov eax,0x547
		jmp DeleteEffect

		Effect16:
		cmp ebx,0x06
		jnz Effect17
		mov eax,0x551
		jmp DeleteEffect

		Effect17:
		cmp ebx,0x07
		jnz Effect18
		mov eax,0x55B
		jmp DeleteEffect

		Effect18:
		mov eax,0x517
		jmp DeleteEffect

        //
		CheckTypeOut1:
		cmp al,0x02
		jnz CheckTypeOut2
		cmp ebx,0x00
		jnz Effect112
		mov eax,0x516
		jmp DeleteEffect

		Effect112:
		cmp ebx,0x01
		jnz Effect122
		mov eax,0x520
		jmp DeleteEffect

		Effect122:
		cmp ebx,0x02
		jnz Effect132
		mov eax,0x52A
		jmp DeleteEffect

		Effect132:
		cmp ebx,0x03
		jnz Effect142
		mov eax,0x534
		jmp DeleteEffect

		Effect142:
		cmp ebx,0x04
		jnz Effect152
		mov eax,0x53E
		jmp DeleteEffect

		Effect152:
		cmp ebx,0x05
		jnz Effect162
		mov eax,0x548
		jmp DeleteEffect

		Effect162:
		cmp ebx,0x06
		jnz Effect172
		mov eax,0x552
		jmp DeleteEffect

		Effect172:
		cmp ebx,0x07
		jnz Effect182
		mov eax,0x55C
		jmp DeleteEffect

		Effect182:
		mov eax,0x518
		jmp DeleteEffect

		CheckTypeOut2:
		cmp al,0x03
		jnz CheckTypeOut3
		cmp ebx,0x00
		jnz Effect1121
		mov eax,0x579
		jmp DeleteEffect

		Effect1121:
		cmp ebx,0x01
		jnz Effect1221
		mov eax,0x583
		jmp DeleteEffect

		Effect1221:
		cmp ebx,0x02
		jnz Effect1321
		mov eax,0x58D
		jmp DeleteEffect

		Effect1321:
		cmp ebx,0x03
		jnz Effect1421
		mov eax,0x597
		jmp DeleteEffect

		Effect1421:
		cmp ebx,0x04
		jnz Effect1521
		mov eax,0x5A1
		jmp DeleteEffect

		Effect1521:
		cmp ebx,0x05
		jnz Effect1621
		mov eax,0x5AB
		jmp DeleteEffect

		Effect1621:
		cmp ebx,0x06
		jnz Effect1721
		mov eax,0x5B5
		jmp DeleteEffect

		Effect1721:
		cmp ebx,0x07
		jnz Effect1821
		mov eax,0x5BF
		jmp DeleteEffect

		Effect1821:
		mov eax,0x57B
		jmp DeleteEffect


		CheckTypeOut3:
		cmp al,0x04
		jnz CheckOut
		cmp ebx,0x00
		jnz Effect11211
		mov eax,0x57A
		jmp DeleteEffect

		Effect11211:
		cmp ebx,0x01
		jnz Effect12211
		mov eax,0x584
		jmp DeleteEffect

		Effect12211:
		cmp ebx,0x02
		jnz Effect13211
		mov eax,0x58E
		jmp DeleteEffect

		Effect13211:
		cmp ebx,0x03
		jnz Effect14211
		mov eax,0x598
		jmp DeleteEffect

		Effect14211:
		cmp ebx,0x04
		jnz Effect15211
		mov eax,0x5A2
		jmp DeleteEffect

		Effect15211:
		cmp ebx,0x05
		jnz Effect16211
		mov eax,0x5AC
		jmp DeleteEffect

		Effect16211:
		cmp ebx,0x06
		jnz Effect17211
		mov eax,0x5B6
		jmp DeleteEffect

		Effect17211:
		cmp ebx,0x07
		jnz Effect18211
		mov eax,0x5C0
		jmp DeleteEffect

		Effect18211:
		mov eax,0x57C
		jmp DeleteEffect

		DeleteEffect:
		mov esi,[0x10D94A8]
		mov ecx,[esi+0x8924]
		push eax
		mov eax,0x7821A0
		call eax
		cmp ebx,0x8
		inc ebx
		jb TakeOut1
		//
		CheckOut:
		popad
		push 0x006E1F8E
        ret
		//
		JmpOut:
		push 0x006E1D9D
		ret
	}
}
__declspec(naked) void AddEffect1()
{
    __asm {
        pushad
		mov esi,eax
		mov al,[edi+0x6]
		cmp al,0x00
		jz TakeOut
		mov al,[edi+0x9]
		cmp al,0x05
		jl CheckOut
        // Process Add Effect
		mov al,[edi+0x05]
		cmp al,0x00
		jnz CheckType3
		mov al,[edi+0x09]
		cmp al,0x08
		jl EffectLow
		//EffectHigh
		cmp al,0x8
		jnz CheckInc11
		mov eax,0x3E9
		jmp InsertEffect
        //
		CheckInc11:
		cmp al,0x9
		jnz CheckInc12
        mov eax,0x3F3
		jmp InsertEffect
        //
		CheckInc12:
		cmp al,0xA
		jnz CheckInc13
        mov eax,0x3FD
		jmp InsertEffect
		//
		CheckInc13:
		cmp al,0xB
		jnz CheckInc14
		mov eax,0x407
		jmp InsertEffect
		//
		CheckInc14:
		cmp al,0xC
		jnz CheckInc15
		mov eax,0x411
		jmp InsertEffect
		//
		CheckInc15:
		cmp al,0xD
		jnz CheckInc16
		mov eax,0x41B
		jmp InsertEffect
		//
		CheckInc16:
		cmp al,0xE
		jnz CheckInc17
		mov eax,0x425
		jmp InsertEffect
		//
		CheckInc17:
		cmp al,0xF
		jnz CheckOut
		mov eax,0x42F
		jmp InsertEffect
        //End


		EffectLow:
		mov eax,0x3EA
        jmp InsertEffect
		//
		CheckType3:
		cmp al,0x01
		jnz CheckType4
		mov al,[edi+0x09]
		cmp al,0x08
		jl EffectLow1
		//EffectHigh
		cmp al,0x8
		jnz CheckInc111
		mov eax,0x515
		jmp InsertEffect
        //
		CheckInc111:
		cmp al,0x9
		jnz CheckInc121
		mov eax,0x51F
		jmp InsertEffect
        //
		CheckInc121:
		cmp al,0xA
		jnz CheckInc131
		mov eax,0x529
		jmp InsertEffect
		//
		CheckInc131:
		cmp al,0xB
		jnz CheckInc141
		mov eax,0x533
		jmp InsertEffect
		//
		CheckInc141:
		cmp al,0xC
		jnz CheckInc151
		mov eax,0x53D
		jmp InsertEffect
		//
		CheckInc151:
		cmp al,0xD
		jnz CheckInc161
		mov eax,0x547
		jmp InsertEffect
		//
		CheckInc161:
		cmp al,0xE
		jnz CheckInc171
		mov eax,0x551
		jmp InsertEffect
		//
		CheckInc171:
		cmp al,0xF
		jnz CheckOut
		mov eax,0x55B
		jmp InsertEffect

		EffectLow1:
		mov eax,0x517
		jmp InsertEffect

		CheckType4:
		cmp al,0x02
		jnz CheckType5
		mov al,[edi+0x09]
		cmp al,0x08
		jl EffectLow11
		//EffectHigh
		cmp al,0x8
		jnz CheckInc1111
		mov eax,0x516
		jmp InsertEffect
		//
		CheckInc1111:
		cmp al,0x9
		jnz CheckInc1211
		mov eax,0x520
		jmp InsertEffect
		//
		CheckInc1211:
		cmp al,0xA
		jnz CheckInc1311
		mov eax,0x52A
		jmp InsertEffect
		//
		CheckInc1311:
		cmp al,0xB
		jnz CheckInc1411
		mov eax,0x534
		jmp InsertEffect
		//
		CheckInc1411:
		cmp al,0xC
		jnz CheckInc1511
		mov eax,0x53E
		jmp InsertEffect
		//
		CheckInc1511:
		cmp al,0xD
		jnz CheckInc1611
		mov eax,0x548
		jmp InsertEffect
		//
		CheckInc1611:
		cmp al,0xE
		jnz CheckInc1711
		mov eax,0x552
		jmp InsertEffect
		//
		CheckInc1711:
		cmp al,0xF
		jnz CheckOut
		mov eax,0x55C
		jmp InsertEffect

		EffectLow11:
		mov eax,0x518
		jmp InsertEffect

		CheckType5:
		cmp al,0x03
		jnz CheckType6
		mov al,[edi+0x09]
		cmp al,0x08
		jl EffectLow1211
		//EffectHigh
		cmp al,0x8
		jnz CheckInc11112
		mov eax,0x579
		jmp InsertEffect
		//
		CheckInc11112:
		cmp al,0x9
		jnz CheckInc12112
		mov eax,0x583
		jmp InsertEffect
		//
		CheckInc12112:
		cmp al,0xA
		jnz CheckInc13112
		mov eax,0x58D
		jmp InsertEffect
		//
		CheckInc13112:
		cmp al,0xB
		jnz CheckInc14112
		mov eax,0x597
		jmp InsertEffect
		//
		CheckInc14112:
		cmp al,0xC
		jnz CheckInc15112
		mov eax,0x5A1
		jmp InsertEffect
		//
		CheckInc15112:
		cmp al,0xD
		jnz CheckInc16112
		mov eax,0x5AB
		jmp InsertEffect
		//
		CheckInc16112:
		cmp al,0xE
		jnz CheckInc17112
		mov eax,0x5B5
		jmp InsertEffect
		//
		CheckInc17112:
		cmp al,0xF
		jnz CheckOut
		mov eax,0x5BF
		jmp InsertEffect

		EffectLow1211:
		mov eax,0x57B
		jmp InsertEffect

		CheckType6:
		cmp al,0x04
		jnz CheckType7
		mov al,[edi+0x09]
		cmp al,0x08
		jl EffectLow12112
		//EffectHigh
		cmp al,0x8
		jnz CheckInc111121
		mov eax,0x57A
		jmp InsertEffect
        //
		CheckInc111121:
		cmp al,0x9
		jnz CheckInc121121
		mov eax,0x584
		jmp InsertEffect
		//
		CheckInc121121:
		cmp al,0xA
		jnz CheckInc131121
        mov eax,0x58E
		jmp InsertEffect
		//
		CheckInc131121:
		cmp al,0xB
		jnz CheckInc141121
        mov eax,0x598
		jmp InsertEffect
		//
		CheckInc141121:
		cmp al,0xC
		jnz CheckInc151121
        mov eax,0x5A2
		jmp InsertEffect
		//
		CheckInc151121:
		cmp al,0xD
		jnz CheckInc161121
        mov eax,0x5AC
		jmp InsertEffect
		//
		CheckInc161121:
		cmp al,0xE
		jnz CheckInc171121
		mov eax,0x5B6
		jmp InsertEffect
		//
		CheckInc171121:
		cmp al,0xF
		jnz CheckOut
		mov eax,0x5C0
		jmp InsertEffect

		EffectLow12112:
		mov eax,0x57C
		jmp InsertEffect

		CheckType7:
		jmp CheckOut
		//
		InsertEffect:
		mov edi,eax
		mov ecx,[esi+0x00008924]
		push eax
		mov eax,0x00782360
		call eax
		test eax,eax
		jne CheckOut
		mov ecx,[esi+0x00008924]
		push 0xBF800000
		push 01
		push eax
		lea eax,[esi+0x00008500]
		push eax
		push edi
		push 0x01571B88
		mov eax,0x007817E0
		call eax
		jmp CheckOut

		//
		TakeOut:
		mov ebx,0x0
		TakeOut1:
		mov al,[edi+0x5]
		cmp al,0x00
		jnz CheckTypeOut
		cmp ebx,0x00
		jnz Effect1
		mov eax,0x3E9
		jmp DeleteEffect

		Effect1:
		cmp ebx,0x01
		jnz Effect2
		mov eax,0x3F3
		jmp DeleteEffect

		Effect2:
		cmp ebx,0x02
		jnz Effect3
		mov eax,0x3FD
		jmp DeleteEffect

		Effect3:
		cmp ebx,0x03
		jnz Effect4
		mov eax,0x407
		jmp DeleteEffect

		Effect4:
		cmp ebx,0x04
		jnz Effect5
		mov eax,0x411
		jmp DeleteEffect

		Effect5:
		cmp ebx,0x05
		jnz Effect6
		mov eax,0x41B
		jmp DeleteEffect

		Effect6:
		cmp ebx,0x06
		jnz Effect7
		mov eax,0x425
		jmp DeleteEffect

		Effect7:
		cmp ebx,0x07
		jnz Effect8
		mov eax,0x42F
		jmp DeleteEffect

		Effect8:
		mov eax,0x3EA
		jmp DeleteEffect

		CheckTypeOut:
		cmp al,0x01
		jnz CheckTypeOut1
		cmp ebx,0x00
		jnz Effect11
		mov eax,0x515
		jmp DeleteEffect

		Effect11:
		cmp ebx,0x01
		jnz Effect12
		mov eax,0x51F
		jmp DeleteEffect

		Effect12:
		cmp ebx,0x02
		jnz Effect13
		mov eax,0x529
		jmp DeleteEffect

		Effect13:
		cmp ebx,0x03
		jnz Effect14
		mov eax,0x533
		jmp DeleteEffect

		Effect14:
		cmp ebx,0x04
		jnz Effect15
		mov eax,0x53D
		jmp DeleteEffect

		Effect15:
		cmp ebx,0x05
		jnz Effect16
		mov eax,0x547
		jmp DeleteEffect

		Effect16:
		cmp ebx,0x06
		jnz Effect17
		mov eax,0x551
		jmp DeleteEffect

		Effect17:
		cmp ebx,0x07
		jnz Effect18
		mov eax,0x55B
		jmp DeleteEffect

		Effect18:
		mov eax,0x517
		jmp DeleteEffect

        //
		CheckTypeOut1:
		cmp al,0x02
		jnz CheckTypeOut2
		cmp ebx,0x00
		jnz Effect112
		mov eax,0x516
		jmp DeleteEffect

		Effect112:
		cmp ebx,0x01
		jnz Effect122
		mov eax,0x520
		jmp DeleteEffect

		Effect122:
		cmp ebx,0x02
		jnz Effect132
		mov eax,0x52A
		jmp DeleteEffect

		Effect132:
		cmp ebx,0x03
		jnz Effect142
		mov eax,0x534
		jmp DeleteEffect

		Effect142:
		cmp ebx,0x04
		jnz Effect152
		mov eax,0x53E
		jmp DeleteEffect

		Effect152:
		cmp ebx,0x05
		jnz Effect162
		mov eax,0x548
		jmp DeleteEffect

		Effect162:
		cmp ebx,0x06
		jnz Effect172
		mov eax,0x552
		jmp DeleteEffect

		Effect172:
		cmp ebx,0x07
		jnz Effect182
		mov eax,0x55C
		jmp DeleteEffect

		Effect182:
		mov eax,0x518
		jmp DeleteEffect

		CheckTypeOut2:
		cmp al,0x03
		jnz CheckTypeOut3
		cmp ebx,0x00
		jnz Effect1121
		mov eax,0x579
		jmp DeleteEffect

		Effect1121:
		cmp ebx,0x01
		jnz Effect1221
		mov eax,0x583
		jmp DeleteEffect

		Effect1221:
		cmp ebx,0x02
		jnz Effect1321
		mov eax,0x58D
		jmp DeleteEffect

		Effect1321:
		cmp ebx,0x03
		jnz Effect1421
		mov eax,0x597
		jmp DeleteEffect

		Effect1421:
		cmp ebx,0x04
		jnz Effect1521
		mov eax,0x5A1
		jmp DeleteEffect

		Effect1521:
		cmp ebx,0x05
		jnz Effect1621
		mov eax,0x5AB
		jmp DeleteEffect

		Effect1621:
		cmp ebx,0x06
		jnz Effect1721
		mov eax,0x5B5
		jmp DeleteEffect

		Effect1721:
		cmp ebx,0x07
		jnz Effect1821
		mov eax,0x5BF
		jmp DeleteEffect

		Effect1821:
		mov eax,0x57B
		jmp DeleteEffect


		CheckTypeOut3:
		cmp al,0x04
		jnz CheckOut
		cmp ebx,0x00
		jnz Effect11211
		mov eax,0x57A
		jmp DeleteEffect

		Effect11211:
		cmp ebx,0x01
		jnz Effect12211
		mov eax,0x584
		jmp DeleteEffect

		Effect12211:
		cmp ebx,0x02
		jnz Effect13211
		mov eax,0x58E
		jmp DeleteEffect

		Effect13211:
		cmp ebx,0x03
		jnz Effect14211
		mov eax,0x598
		jmp DeleteEffect

		Effect14211:
		cmp ebx,0x04
		jnz Effect15211
		mov eax,0x5A2
		jmp DeleteEffect

		Effect15211:
		cmp ebx,0x05
		jnz Effect16211
		mov eax,0x5AC
		jmp DeleteEffect

		Effect16211:
		cmp ebx,0x06
		jnz Effect17211
		mov eax,0x5B6
		jmp DeleteEffect

		Effect17211:
		cmp ebx,0x07
		jnz Effect18211
		mov eax,0x5C0
		jmp DeleteEffect

		Effect18211:
		mov eax,0x57C
		jmp DeleteEffect

		DeleteEffect:
		mov ecx,[esi+0x8924]
		push eax
		mov eax,0x7821A0
		call eax
		cmp ebx,0x8
		inc ebx
		jb TakeOut1
		//
		CheckOut:
		popad
		movsx eax,byte ptr [edi+0x5]
		cmp eax,0x17
		push 0x006E1DB9
        ret
	}
}
__declspec(naked) void SortRefine()
{
	  __asm {
		nop
		nop
		nop
		nop
		nop
		pushad
		mov edi,eax
        mov eax,0x00000000
		mov al,[edi+0x50]
		cmp al,0x01
		jnz JumOutLoad
		mov al,[edi+0x52]
		cmp al,0x0
        jne LoadOther
		mov eax,[ebp+0x214]
        mov [edi+0x53],ax
		add eax,0x40
        mov [ebp+0x214],eax
        popad
		pop ebp
		pop ebx
		add esp,0x4C
		ret
		LoadOther:
		cmp al,0x1
        jne LoadOther1
		mov eax,[ebp+0x214]
        mov [edi+0x53],ax
		add eax,0x40
        mov [ebp+0x214],eax
        popad
		pop ebp
		pop ebx
		add esp,0x4C
		ret
        LoadOther1:
		mov eax,[ebp+0x214]
        mov [edi+0x53],ax
		add eax,0x50
        mov [ebp+0x214],eax
        popad
		pop ebp
		pop ebx
		add esp,0x4C
		ret
		JumOutLoad:
		popad
		pop ebp
		pop ebx
		add esp,0x4C
		ret
	}
}
__declspec(naked) void ShowInforCloth()
{
	  __asm {
		pushad
		mov ecx,ebp
		mov eax,0x4D92C0
		call eax
		test eax,eax
		jle JumOutLoad
		push eax
		push 0x7E6
		push 0x19
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax //GettextString
		lea ecx,[ebp+0x102C]
		push eax
		push ecx
		mov eax,0x0085C538
		call [eax]
        add esp,0xC
        JumOutLoad:
		popad
		mov ecx, [ebp+0x5844]
		push 0x004917AE
		ret
	}
}
__declspec(naked) void LoadInctClt()
{
	  __asm {
        push ebx
		mov  bl,[ecx+0x10]
		cmp bl,0xC5
		jz JoumOut
		pop ebx
		mov [ecx+0x28], al
		push 0x0067915D
        ret
		JoumOut:
		pop ebx
        mov [ecx+0x10], dl
		mov [ecx+0x28], al
		push 0x0067915D
		ret
	}
}
__declspec(naked) void LoopLoad()
{
	  __asm {
	  	nop
        nop
		nop
        nop
		nop
		pushad
        push eax
		mov ecx,0x00000000
		LoopCheck2:
		mov esi, DWORD PTR SS : [0x10D94A8]
		mov eax,0x90
		push ecx
		mul ecx
		mov ax,[eax+esi+0x2349C]
		//
        movsx ebx,ax
		xor ebx,0xFFFFCE43
		cmp bx,0x0000
		jz checksecon
		lea eax,[ebx*8+00000000]
		sub eax,ebx
		lea eax,[eax+eax*2]
		shl eax,0x3
		mov ebp,[0x016DFA10]
		cmp BYTE PTR SS :[ebp+eax+0x1],0x00
		jnz checksecon
		//
        xor ebx,0xCE43
		lea ebp,[ecx+0x1]
		LoopCheck:
		mov eax,0x90
		mov edx,ebp
		mul edx
		mov di,[eax+esi+0x2349C]
		cmp bx,di
		jz OutLoop
		cmp ebp,0x7  //Check 2
		lea ebp,[ebp+0x1]
		jnz LoopCheck
        checksecon:
		pop ecx
		cmp ecx,0x06    //Check 1
		lea ecx,[ecx+0x1]
		jz Jumout
		jmp LoopCheck2
		LoopCheck3:
		//OutGame
		OutLoop:
		cmp bx,0xCE43
		jnz OuGame
		cmp ebp,0x07
		jnz LoopCheck23
		pop ecx
		cmp ecx,0x06
		lea ecx,[ecx+0x1]
        jz Jumout
		jmp LoopCheck2
		LoopCheck23:
		lea ebp,[ebp+0x1]
		jmp LoopCheck
		OuGame:
        pop eax
		popad
		mov eax,[esp]
        push eax
		mov eax,0x007C4190
		call eax
		//
		Jumout:
		mov esi, DWORD PTR SS : [0x10D94A8]
		mov ax,[esi+0x9EA8]
		xor ax,0xCE43
		cmp ax,0x64
		jg OutGame
		pop eax
		popad
		mov eax, [edx+0x9D88]

		push 0x0065F9A6
		ret

		OutGame:
		push 0x0089B8CC
		mov eax,0x007C4190
		call eax


	}
}
__declspec(naked) void CheckProcessName()
{
	  __asm {
        push edi
		mov ecx,0x00000000
        or ecx, 0xFFFFFFFF
        xor eax,eax
		lea edi,[esp+0x34]
		repne scasb
		not ecx
		sub edi,ecx
		push edi
		push ebx
		mov eax,0x0085C488
		call [eax]
		add esp,0x8
		cmp eax,0x00
		jne JumOut
        pop edi
		mov dword ptr [edi], 0x1
		push 0x005A02E4
        ret
		JumOut:
        pop edi
		push 0x005A02D5
		ret
	}
}
__declspec(naked) void ChangenNameDis()
{
	  __asm
	{
		lea ecx,[esp+0x0]
		push 0x0089DC78
		push ecx
		mov eax,0x0085C528
		call [eax]
        add esp,0x8
		test eax,eax
		jz CheckName2
		push 0x008B1028
		mov eax,0x7918E0
		call eax
		mov eax,0x00404B50
		call eax

		CheckName2:
        lea ecx,[esp+0x0]
		push 0x0089F660
		push ecx
		mov eax,0x0085C528
		call [eax]
		add esp,0x8
		test eax,eax
		jz Checknam3
		push 0x008B1028
		mov eax,0x7918E0
		call eax
		mov eax,0x00404B50
		call eax

		Checknam3:
        lea ecx,[esp+0x0]
		push 0x0089FB9C
		push ecx
		mov eax,0x0085C528
		call [eax]
		add esp,0x8
		test eax,eax
		jz Checknam4
		push 0x008B1028
		mov eax,0x7918E0
		call eax
		mov eax,0x00404B50
		call eax

		Checknam4:
        lea ecx,[esp+0x0]
        push 0x0089F5EC
		push ecx
		mov eax,0x0085C528
		call [eax]
		add esp,0x8
		test eax,eax
		jz NotFind
		push 0x008B1028
		mov eax,0x7918E0
		call eax
		mov eax,0x00404B50
		call eax

		NotFind:
		lea ecx, [esp+0x0]
		push 0x10
		push 0x007C41CC
		ret
	}
}
__declspec(naked) void ChangenNameDis2()
{
	__asm
	{
        mov edx, [esp+0x81C]
		push 0x007919A1
		ret
	}
}
__declspec(naked) void LoadInforClass()
{
	  __asm {
        nop
        nop
		nop
        nop
		nop
        lea eax,[eax+0x4]
        pushad
        mov ebp, 0x0
        LoopLoad2:
		mov ecx, 0x010CC088
            mov edi, ebp
			mov ecx, [ecx + edi]
            mov[eax + edi], ecx
            add ebp, 0x4
            cmp ebp, 0xB8
			jnz LoopLoad2
        popad
		mov ecx,0x015720C8
		push 0x005E1F2E
		ret
	}
}
__declspec(naked) void LoadInfoPhongAn()
{
	  __asm {
        nop
        nop
		nop
        nop
		nop
		mov ebx,0x000000AA
        add eax,0x10
		pushad
        mov ebp, 0x0
        LoopLoad2:
		mov ecx, 0x010CC088
            mov edi, ebp
			mov ecx, [ecx + edi]
            mov[eax + edi], ecx
            add ebp, 0x4
            cmp ebp, 0xB8
			jnz LoopLoad2
			mov dword ptr [eax+0x10],0x0
		popad
		push 0x005EA2FB
		ret
	}
}
__declspec(naked) void LoadInfoTinhNangMoi()//005EA2E7
{
	  __asm {
        nop
        nop
		nop
        nop
		nop
		mov ebx,0x000000AA
        add eax,0x10
		pushad
        mov ebp, 0x0
        LoopLoad2:
		mov ecx, 0x010CC088
            mov edi, ebp
			mov ecx, [ecx + edi]
            mov[eax + edi], ecx
            add ebp, 0x4
            cmp ebp, 0xB8
			jnz LoopLoad2
			mov dword ptr [eax+0x10],0x0
		popad
		mov ecx,[esp+0x24]
		push 0x005EA2ED
		ret
	}
}
__declspec(naked) void LoadInforShowClass()
{
	  __asm {
		nop
		nop
		nop
		nop
		nop
		add eax,0x20
		pushad
		mov ebp, 0x0
		LoopLoad2:
		mov ecx, 0x010CC088
			mov edi, ebp
			mov ecx, [ecx + edi]
			mov[eax + edi], ecx
			add ebp, 0x4
			cmp ebp, 0xB8
			jnz LoopLoad2
		popad
		mov  eax,0x20
		push 0x005E1F24
		ret
	}
}
__declspec(naked) void LoadInforIConBangHoi()
{
	 __asm {
		nop
		nop
		nop
		nop
		nop
		pushad
		mov ebp, 0
		LoopLoad2:
		mov ecx, 0x010CC088
			mov edi, ebp
			mov ecx, [ecx + edi]
			mov[eax + edi], ecx
			add ebp, 0x4
			cmp ebp, 0xB8
			jnz LoopLoad2
		popad
		push 0x0089B638
		push 0x005E1F29
		ret
	}
}
__declspec(naked) void LoadInforClass2()
{
	  __asm {
        nop
        nop
		nop
        nop
		nop
        pushad
        mov ebp, 0
        LoopLoad2:
		mov ecx, 0x10CBDA8
            mov edi, ebp
            mov ecx, [ecx + edi]
            mov[eax + edi], ecx
            add ebp, 0x4
            cmp ebp, 0xB8
			jnz LoopLoad2
        popad
		mov eax,0xC8
		push 0x005E1FAF
		ret
	}
}
__declspec(naked) void LoadInforShowClass2()
{
	  __asm {
        nop
        nop
		nop
        nop
		nop
        pushad
        mov ebp, 0
        LoopLoad2:
		mov ecx, 0x010CC088
            mov edi, ebp
            mov ecx, [ecx + edi]
            mov[eax + edi], ecx
            add ebp, 0x4
            cmp ebp, 0xB8
			jnz LoopLoad2
        popad
		mov  ecx,0x10C6A68
		push 0x005E1E36
		ret
	}
}
__declspec(naked) void DucSlotCloth()
{
	  __asm {
		mov [esp+0x20], eax
		cmp byte ptr [eax+01],0x4
		jle AllowCombie
		cmp byte ptr [eax+01],0x8
		jz AllowCombie
		push 0x0051C1A8
        ret
		AllowCombie:
		push 0x0051B902
		ret
	}
}
__declspec(naked) void ShowSpeed()
{
	  __asm {
		nop
		nop
		nop
		nop
		nop
		mov edi,eax
		mov eax,0x00000000
		mov ax,[0x1107258+0x9EA8]
		xor ax,0xCE43
		push eax //value of sprinf

		//
		push 0x10D9
		push 0x19
		mov ecx,0x1733B30
		mov eax,0x007C2CF0
		call eax
		//
		push eax
		push 0x100
		push edi
		mov eax,0x0085C538
		call [eax] //sprintf
		//
        add esp,0x10
        push 0x0
		push edi
        push 0x2
		mov eax,[esi+0x18]
        push eax
		mov ecx,[esi+0x14]
		add ecx,0xFA
		push ecx
        mov ecx,[0x01733AC4]
		mov edx,[ecx]
		call dword ptr[edx+0x24]
		mov eax,[esi+0x54C]
		push 0x00051EFED
		ret
	}
}
void Engine(Wirsd obj,DWORD ProID,int CountClientRunProcess);
void LoadProcessGame()
{
	const wchar_t* namegame = L"NineDragons.exe";
	DWORD procId = 0;
    int CountClientRun = 0;
	while (!procId)
	{
		 procId = GetProcId2(namegame,&CountClientRun) ;
		 if (procId == -1) {
                   Application->Terminate();
		 }
	}

	//This just grabs the handle for me
	Wirsd obj("Nine Dragons");
	//Because I can
	Engine(obj,procId,CountClientRun);
   /*	if(FileExists(L"Data\\Script\\SCR_BASE.XP"))
	{
	   DeleteFile(L"Data\\Script\\SCR_BASE.XP");
	}  */
	//Sleep(3000);
	resume(procId);
	/*PsGameGuard = LoadLibraryA("PS.dll");
	if (!PsGameGuard) {
	   ShowMessage("Not Found PS");
	}
	FreeLibrary(PsGameGuard); */


}
//---------------------------------------------------------------------------
void __fastcall TForm1::Button1Click(TObject *Sender)
{
	/*int patchserver = ADOStoredProc1->FieldByName("patchclientversion")->AsInteger;
	ifstream myfile;
	int line;
	myfile.open("Patch.txt");
	myfile >> line;
    myfile.close();
			if (line == patchserver)
			   {
					   	String NdLaucher = "NDLAUNCHER.EXE";
						HINSTANCE r = ShellExecuteW(NULL, L"open", NdLaucher.c_str(), NULL, NULL, SW_SHOWNORMAL);
					   //	if ( (int)r > 32) {
						LoadProcessGame();
						Application->Terminate();
						//}


			   }
			   else
			   {
					String Update = "Update.exe";
					ofstream writefile;
					writefile.open("Patch.txt");
					writefile << patchserver;
					HINSTANCE r = ShellExecuteW(NULL, L"open", Update.c_str(), NULL, NULL, SW_SHOWNORMAL);
					Application->Terminate();
                    writefile.close();
			   }  */

}
__declspec(naked) void GMCommand()
{
	__asm
	{
        pushad
        push 0x2768
        mov ecx, 0x017323A8
        mov eax, 0x7D8550
        call eax
        test eax,eax
        jz OutFunc
        mov ecx,eax
        mov eax, [esp + 0x4]

        cmp eax,0x14B4
        jne _XDEFLOSEBTN
            mov eax,[ecx+0x208]
            test eax,eax
            jz UnOpenCommand
                push 0x0
                mov eax,0x455470
                call eax
				jmp OutFunc
            UnOpenCommand:
                push 0x1
                mov eax, 0x455470
				call eax
                jmp OutFunc

        _XDEFLOSEBTN:
        cmp eax, 0x14C9
            jne _XDEFLOSEBTN0
            push 0x2769
            mov ecx, 0x017323A8
            mov eax, 0x7D8550
            call eax
            push    0
            push    0
            push    1
            push    9
            push    0xFA
            mov     ecx, 0x0155EE60
            mov     eax, 0x6B3170
            call    eax
			jmp OutFunc
         _XDEFLOSEBTN0:
         cmp eax, 0x1468
             jne _XDEFLOSEBTN1
            push 0x2769
            mov ecx, 0x017323A8
             mov eax, 0x7D8550
             call eax
            mov esi, eax
            mov  edi, [esi]
            mov  ecx, esi
            call dword ptr[edi + 0x3C]
            neg  eax
            sbb  eax, eax
            mov  ecx, esi
            inc  eax
            push eax
            call dword ptr[edi + 0x30]
			 jmp OutFunc
        _XDEFLOSEBTN1:
        cmp eax, 0x1469
            jne _XDEFLOSEBTN5
            push 0x276A
            mov ecx, 0x017323A8
            mov eax, 0x7D8550
            call eax
            mov esi, eax
            mov  edi, [esi]
            mov  ecx, esi
            call dword ptr[edi + 0x3C]
            neg  eax
            sbb  eax, eax
            mov  ecx, esi
            inc  eax
            push eax
            call dword ptr[edi + 0x30]
            jmp OutFunc
        _XDEFLOSEBTN5:
        cmp eax, 0x146D
            jne _XDEFCHARACTERCOORDSETTIClose
            push 0x276E
            mov ecx, 0x017323A8
            mov eax, 0x7D8550
            call eax
            mov esi, eax
            mov  edi, [esi]
            mov  ecx, esi
            call dword ptr[edi + 0x3C]
            neg  eax
            sbb  eax, eax
            mov  ecx, esi
            inc  eax
            push eax
            call dword ptr[edi + 0x30]
			jmp OutFunc
		_XDEFCHARACTERCOORDSETTIClose:
        cmp eax, 0x14D2
            jne GMCHARACTERCOORDSETTINGGMMOVE
            push 0x276A
            mov ecx, 0x017323A8
            mov eax, 0x7D8550
            call eax
            mov  edx, [eax]
            push 0
            mov  ecx, eax
            call dword ptr[edx + 0x30]
			jmp OutFunc
        GMCHARACTERCOORDSETTINGGMMOVE:
        cmp eax, 0x14D4
            jne GMCHARACTERCOORDSETTINGGMMOVETOUSER
            push 0x276A
            mov ecx, 0x017323A8
            mov eax, 0x7D8550
            call eax
            push    0
            push    0
            push    0
            push    1
            push    0xFC
            mov     ecx, 0x0155EE60
            mov     eax, 0x6B3170
            call    eax
			jmp OutFunc
        GMCHARACTERCOORDSETTINGGMMOVETOUSER:
        cmp eax, 0x14D5
            jne GMWINDOW_COMMANDBUTTON6
            push 0x276A
            mov ecx, 0x017323A8
            mov eax, 0x7D8550
            call eax
            push    0
            push    0
            push    0
            push    0
            push    0xFC
            mov     ecx, 0x0155EE60
            mov     eax, 0x6B3170
            call    eax
			jmp OutFunc
        GMWINDOW_COMMANDBUTTON6:
        cmp eax, 0x146E
            jne GMWINDOW_COMMANDBUTTON7
            push 0x276F
            mov ecx, 0x017323A8
            mov eax, 0x7D8550
            call eax
            mov esi, eax
            mov  edi, [esi]
            mov  ecx, esi
            call dword ptr[edi + 0x3C]
            neg  eax
            sbb  eax, eax
            mov  ecx, esi
            inc  eax
            push eax
            call dword ptr[edi + 0x30]
			jmp OutFunc
        GMWINDOW_COMMANDBUTTON7:
        cmp eax, 0x146F
            jne GMMONSTERSPAWNBUTTON
            push 0x2770
            mov ecx, 0x017323A8
            mov eax, 0x7D8550
            call eax
            mov esi, eax
            mov  edi, [esi]
            mov  ecx, esi
            call dword ptr[edi + 0x3C]
            neg  eax
            sbb  eax, eax
            mov  ecx, esi
            inc  eax
            push eax
            call dword ptr[edi + 0x30]
			jmp OutFunc
        GMMONSTERSPAWNBUTTON:
        cmp eax, 0x1505
            jne OutFunc
            push 0x276F
            mov ecx, 0x017323A8
            mov eax, 0x7D8550
            call eax
            mov esi, eax
            lea ecx, [esi + 0x208]
            mov eax,0x7DA6F0
			call eax
            push eax
            mov eax, 0x0085C520
            call dword ptr[eax]
            add esp, 0x4
            push    0
            push    0
            push    eax
            mov     eax, [esi + 0x4AA0]
            push    eax
            push    0xF8
            mov     ecx, 0x0155EE60
            mov eax, 0x6B3170
            call    eax

		OutFunc:
		popad
		pop ecx
        pop ecx
		push 0x005A9BAA
        ret
    }
}
__declspec(naked)void SendPackedNetWord()
{
		__asm
		{
		 cmp ecx,0xF0
		 jz RunSendGM
		 cmp ecx,0xF2
		 jz Invisibility
		 pop edi
		 pop esi
		 pop ebp
		 pop ebx
		 mov eax, 0x06B3FFD
		 jmp eax
		 RunSendGM:
		 mov ecx,[esp+0x8E4]
		 xor edx, edx
		 mov eax, edx
		 mov [esp + 0x18], eax
		 xor eax, 0xE
		 mov [esp + 0x1C], edx
		 mov [esp + 0x18], ax
		 mov eax, [0x10D94A8]
		 mov [esp + 0x20], edx
		 mov byte ptr[esp + 0x1A], 0xF8
		 mov [esp + 0x24], dx
		 mov edx, [eax + 0x83D4]
		 mov [esp + 0x1D], edx
		 mov eax, [0x10D94A8]
		 mov eax, [eax + 0x83DC]
		 mov [esp + 0x21], eax
		 add ecx, 0xFA0
		 mov [esp + 0x1B], cx
		 mov byte ptr[esp + 0x25], 0x1
		 lea ecx, [esp + 0x18]
		 push ecx
		 mov ecx, ebp
		 mov eax,0x6B2F60
		 call eax
		 pop edi
		 pop esi
		 pop ebp
		 pop ebx
		 mov eax, 0x06B3FFD
		 jmp eax

		 Invisibility:
		 mov edx, [esp + 0x8E4]
		 xor edx, edx
		 mov eax, edx
		 mov[esp + 0x18], eax
		 xor eax, 0x23
		 mov [esp + 0x1C], edx
		 mov [esp + 0x18], ax
		 mov byte ptr[esp + 0x1A], 0xFA
		 mov byte ptr[esp + 0x1B], 0x9
		 push 0x2769
		 mov ecx, 0x017323A8
		 mov eax, 0x7D8550
		 call eax
		 test eax,eax
		 jz KhongTimThayGMForm
		 mov eax,[eax+0x208]
		 mov cl,[eax+0x30]
		 test cl,cl
		 jz TatCheDoTangHinh
		 mov cl,1
		 mov [esp + 0x1C],cl
         jmp ProcessHienThi
		 TatCheDoTangHinh:
		 mov cl,0
		 mov [esp + 0x1C],cl
         jmp ProcessHienThi
         KhongTimThayGMForm:
		 mov dword ptr [esp + 0x1C], 0
         ProcessHienThi:
		 lea ecx, [esp + 0x18]
		 push ecx
		 mov ecx, ebp
		 mov eax,0x6B2F60
		 call eax
		 pop edi
		 pop esi
		 pop ebp
		 pop ebx
		 mov eax, 0x06B3FFD
		 jmp eax

	 }
}
__declspec(naked)void TestDamage()
{
__asm
	{
	  lea edx,[esp+0x14]
	  push 0x00
	  mov eax,0xF423F
	  mov [edx],eax
	  push 0x00631C98
	  ret


	 }
}
__declspec(naked)void TestDamage2()
{
__asm
	{
	  lea eax, [eax+eax*2]
	  mov edx, [ecx]
	  shl eax,0x3
	  push eax
	  push 04
	  cmp esi,00000005
	  jne JumOut
	  mov di,0014
	  push 0x0077E94C
	  ret
	  JumOut:
	  mov di,[eax*2+0x171D740]
	  push 0x0077E94C
	  ret
	 }
}
__declspec(naked)void BlockUsedItem()
{
	__asm {
    	lea eax, [esp+0x18]
        push eax
        mov ecx, [0x110FE5C]
        cmp ecx, 0x02
		je LockUsed
        pop eax
        mov ecx, ebp
		push 0x006B46C5
		ret
        LockUsed :
		pop eax
		mov ecx,[eax+0x4]
		cmp ecx,0x00
		jz ChangeKey
		mov byte ptr [eax+0x4],0x03
        mov ecx, ebp
		push 0x006B46C5
		ret
		ChangeKey:
		mov byte ptr [eax+0x4],0x02
        mov ecx, ebp
		push 0x006B46C5
		ret
	}
}
__declspec(naked)void BlockUsedItem2()
{
	__asm {
    	lea eax, [esp+0x18]
        push eax
        mov ecx, [0x110FE5C]
        cmp ecx, 0x02
		je LockUsed
		push 0x006B46A6
		ret
		LockUsed :
		mov ecx,[eax+0x4]
		cmp ecx,0x00
		jz ChangeKey
		mov byte ptr [eax+0x4],0x03
		push 0x006B46A6
		ret
		ChangeKey:
		mov byte ptr [eax+0x4],0x02
		push 0x006B46A6
		ret
	}
}
__declspec(naked)void LoadgNumericParticleIndex()
{
__asm
	{
	  cmp eax,0x3B4
	  mov [ecx-0x2], dx
	  jl jmpback
	  mov dx,0x0014
	  add dx,[0x0171D780]
	  add ecx,0x2
      mov [ecx-0x2],dx

	  mov dx,0x0015
	  add dx,[0x0171D780]
	  add ecx,0x2
	  mov [ecx-0x2],dx

	  mov dx,0x0017
	  add dx,[0x0171D780]
	  add ecx,0x2
	  mov [ecx-0x2],dx

	  mov dx,0x0014
	  add dx,[0x0171D780]
	  add ecx,0x2
	  mov [ecx-0x2],dx

	  mov dx,0x0017
	  add dx,[0x0171D780]
	  add ecx,0x2
	  mov [ecx-0x2],dx

	  mov dx,0x0016
	  add dx,[0x0171D780]
	  add ecx,0x2
	  mov [ecx-0x2],dx

	  push 0x0077E866
	  ret

	  jmpback:
	  push 0x0077E847
	  ret


	 }
}
__declspec(naked)void LoadDamage()
{
__asm
	{
	  cmp ecx,0x6
	  jz Load6
      cmp ecx,0x7
	  jz Load7
	  xor eax,eax
	  mov [esi+0xF4],eax
	  push 0x0077C35F
	  ret
	  Load6:
	  mov dl,[esp+0x4]
	  mov al,[esp+0x5]
	  mov [esi+0x000000F8],ecx
	  mov cl,[esp+0x6]
	  sub cl,0x30
	  sub dl,0x30
	  mov [esi+0x000000EC],dl
	  mov [esi+0x000000EE],cl
	  mov cl,[esp+0x7]
	  mov dl,[esp+0x8]
	  sub al,0x30
	  sub cl,0x30
	  sub dl,0x30
	  mov dword ptr[esi+0x000000F4],0x00000000
	  mov [esi+0x000000ED],al
	  mov [esi+0x000000EF],cl
	  mov [esi+0x000000F0],dl
	  mov dl,[esp+0x9]
	  sub dl,0x30
      mov [esi+0x000000F1],dl
	  pop esi
	  add esp,0x20
	  ret 0004

	  Load7:
      mov dl,[esp+0x4]
	  mov al,[esp+0x5]
	  mov [esi+0x000000F8],ecx
	  mov cl,[esp+0x6]
	  sub cl,0x30
	  sub dl,0x30
	  mov [esi+0x000000EC],dl
	  mov [esi+0x000000EE],cl
	  mov cl,[esp+0x7]
	  mov dl,[esp+0x8]
	  sub al,0x30
	  sub cl,0x30
	  sub dl,0x30
	  mov dword ptr[esi+0x000000F4],0x00000000
	  mov [esi+0x000000ED],al
	  mov [esi+0x000000EF],cl
	  mov [esi+0x000000F0],dl
	  mov dl,[esp+0x9]
	  sub dl,0x30
	  mov [esi+0x000000F1],dl
	  //
      mov dl,[esp+0xA]
	  sub dl,0x30
      mov [esi+0x000000F2],dl
	  //
	  pop esi
	  add esp,0x20
	  ret 0004
	}
}
__declspec(naked)void GetDamage()
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  push ecx
	  mov ecx,0x00000000
	  mov [eax],ecx
      xor ecx,ecx
	  mov cl, [edi+0x15]
      test ecx,ecx
	  jz notOver
	  imul ecx,0xFFFF
	  xor edx,edx
	  mov dx, [edi+0x11]
	  add edx,ecx
	  mov [eax],edx
	  pop ecx
	  push 0x006C4AB3
	  ret


	  notOver:
	  mov [eax],dx
	  pop ecx
	  push 0x006C4AB3
	  ret

	}
}
__declspec(naked)void GetTargetAnotherNuker()
{
__asm
	{
		xor ecx,ecx
		mov cl,[esi+0x13]
		cmp ecx,0x32
		jl Check22
		mov byte ptr [edi+0x8C68],0x01
		push 0x006C6BB2
		ret

		Check22:
		cmp ecx,0x2
		jl Default
		mov byte ptr [edi+0x8C68],0x00
		push 0x006C6BB2
		ret

		Default:
        mov [edi+0x8C68],cl
		push 0x006C6BB2
		ret
	}
}
__declspec(naked)void GetTargetAnotherNuker2()
{
__asm
	{
		xor ecx,ecx
		mov cl,[esi+0x13]
		cmp ecx,0x32
		jl Check22
		mov byte ptr [eax+0x8C68],0x01
		push 0x006C606F
		ret

		Check22:
		cmp ecx,0x2
		jl Default
		mov byte ptr [eax+0x8C68],0x00
		push 0x006C606F
		ret

		Default:
		mov [eax+0x8C68],cl
		push 0x006C606F
		ret
	}
}
__declspec(naked)void GetTargetAnotherTanker()
{
__asm
	{
		xor ecx,ecx
		mov cl,[edi+0x13]
		cmp ecx,0x32
		jl Check22
		mov byte ptr [esi+0x8C68],0x01
		push 0x006C4CC5
		ret

		Check22:
		cmp ecx,0x2
		jl Default
		mov byte ptr [esi+0x8C68],0x00
		push 0x006C4CC5
		ret

		Default:
        mov [esi+0x8C68],cl
		push 0x006C4CC5
		ret
	}
}
__declspec(naked)void GetDamageCk()
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  mov ecx,0x00000000
	  mov [eax],ecx
	  xor ecx,ecx
	  mov cl,[esi]
	  cmp ecx,0x14
	  jz notOver
	  mov cl,[esi+0x14]
	  test ecx,ecx
	  jz notOver
	  xor ecx,ecx
	  mov cl, [esi+0x14]
	  imul ecx,0xFFFF
	  xor edx,edx
	  mov dx, [esi+0x11]
	  add edx,ecx
	  mov [eax],edx
	  mov edx,[0x010D94A8]
	  mov [edx+0x00008C52],cx
	  push 0x006C6A40
	  ret

	  notOver:
      mov cx,[esi+0x11]
	  mov [eax],cx
	  mov edx,[0x010D94A8]
      mov [edx+0x00008C52],cx
	  push 0x006C6A40
	  ret

	}
}
__declspec(naked)void GetDamageCk2()//Fix diss
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  mov ecx,0x00000000
	  mov [eax],ecx
	  xor ecx,ecx
	  mov cl,[esi+0x14]
	  test ecx,ecx
	  jz notOver
      xor ecx,ecx
	  mov cl, [esi+0x14]
	  imul ecx,0xFFFF
	  xor edx,edx
	  mov dx, [esi+0x11]
	  add ecx,edx
	  mov [eax],ecx
	  mov [0x1107258+0x00008C52],dx
	  mov edx,[0x010D94A8]
	  push 0x006C5F03
	  ret

	  notOver:
      mov cx, [esi+0x11]
	  mov [eax],cx
	  mov edx,[0x010D94A8]
      mov [edx+0x00008C52],cx
	  push 0x006C5F03
	  ret

	}
}
__declspec(naked)void GetDamageMax()
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  mov ecx,0x00000000
	  mov [eax],ecx
	  mov cx, [edi+0x13]
	  cmp cx,0x1
	  jnz notOver
	  mov edx,0x00000000
	  mov dx, [edi+0x10]
	  add edx,0xFFFF
	  mov [eax],edx
	  mov byte ptr[edi+0x13],0x00
	  push 0x006C5306
	  ret

	  notOver:
      mov eax,[0x010D94A8]
	  mov  dx, [edi+0x10]
	  mov  [eax+0x8C52], dx
	  push 0x006C5306
	  ret
	}
}
__declspec(naked)void ShowDamage2() //00631C7D
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  push ecx
	  mov ecx,0x00000000
	  mov ecx,[eax]
	  mov eax,ecx
	  pop ecx
	  push 0x00631C85
      ret
	}
}
__declspec(naked)void ShowDamage22() //00631B92
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  push ecx
	  mov ecx,0x00000000
	  mov ecx,[eax]
	  mov eax,ecx
	  pop ecx
	  push 0x00631B9A
      ret
	}
}
__declspec(naked)void ShowDamageCk1() //00636B04
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  push ecx
	  mov ecx,0x00000000
	  mov ecx,[eax]
	  mov eax,ecx
	  pop ecx
	  push 0x00636B0B
      ret
	}
}
__declspec(naked)void ShowDamageCk2() //0643BF0
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
      push ecx
	  mov ecx,0x00000000
	  mov ecx,[eax]
	  mov eax,ecx
	  pop ecx
	  push 0x00643BF7
      ret
	}
}
__declspec(naked)void ShowDamageCk3()   //   06369F5
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
      push ecx
	  mov ecx,0x00000000
	  mov ecx,[eax]
	  mov eax,ecx
	  pop ecx
	  push 0x006369FC
	  ret
	}
}
__declspec(naked)void ShowDamageCk4() //00643AE1
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
      push ecx
	  mov ecx,0x00000000
	  mov ecx,[eax]
	  mov eax,ecx
      pop ecx
	  push 0x00643AE8
	  ret
	}
}
__declspec(naked)void ShowDamageSkill()
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  xor ecx,ecx
	  mov ecx,[eax]
	  test ecx,ecx
	  jle Notmax
	  mov eax,ecx
	  push 0x0063EAE1
	  ret
	  Notmax:
	  push 0x0063EB26
      ret
	}
}
__declspec(naked)void ShowDamage()
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  mov edx,eax
	  mov eax,[eax]
	  mov ecx,0x00000000
	  mov [edx],ecx
	  push 0x0063ECD3
	  ret
	}
}

__declspec(naked)void AcceptItem()
{
__asm
	{
	  xor di,0xCE43
	  cmp di,0x4D
	  jz Accept
	  cmp di,0x4E
	  jz Accept
	  cmp di,0x4B
	  jz Accept
	  cmp di,0x70
	  jz Accept
      cmp di,0x59
	  jz Accept
	  cmp di,0x71
	  jz Accept
	  cmp di,0x72
	  jz Accept
	  cmp di,0x73
	  jz Accept
      cmp di,0x4EA
	  jz Accept
	  cmp di,0x74
	  jz Accept
	  cmp di,0x6D
	  jz Accept
	  cmp di,0x75
	  jz Accept
	  cmp di,0x76
	  jz Accept
	  cmp di,0x77
	  jz Accept
	  cmp di,0x78
	  jz Accept
	  cmp di,0x79
	  jz Accept
	  cmp di,0x7A
	  jz Accept
	  cmp di,0x7B
	  jz Accept
	  cmp di,0x7C
	  jz Accept
	  cmp di,0x7D
	  jz Accept
      cmp di,0x7E
	  jz Accept
      cmp di,0x2F6
	  jl Runout
	  cmp di,0x453
	  jg Runout
	  jmp Accept
	  push 0x004F530A
	  ret
	  Accept:
	  mov eax,0x01
	  pop     edi
	  pop     esi
	  push 0x004F53DC
	  ret
	  Runout:
      push 0x004F530A
	  ret
	}
}
__declspec(naked)void BlockSort()
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  xor ecx,ecx
	  mov ecx,[eax+0x20]
	  test ecx,ecx
	  jnz LockSort
	  mov al,[0x1129DD8]
	  cmp al,0x01
	  jz LockSort
	  push 0x00002754
	  mov ecx,0x017323A8
	  mov eax,0x007D8550
	  call eax
	  test eax,eax
	  jz KhongdiQuyet
	  xor ecx,ecx
	  mov cl,[eax+0x10]
	  test ecx,ecx
	  jnz LockSort
	  KhongdiQuyet:
      push 0x0000284D
	  mov ecx,0x017323A8
	  mov eax,0x007D8550
	  call eax
	  test eax,eax
	  jz KhongTimThayFormTinhNangMoi
      xor ecx,ecx
	  mov cl,[eax+0x10]
	  test ecx,ecx
      jnz LockSort
	  KhongTimThayFormTinhNangMoi:
      mov ecx,0x0155EE60
	  push ecx
	  lea eax,[esp+0x00]
	  push 0x006EC0D5
	  ret
	  LockSort:
	  push 0x006EC0ED
	  ret
	}
}
__declspec(naked)void SeteffectAnotherUser()
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  pushad
	  xor ecx,ecx
	  mov esi,ebx
      LoopBack:
	  push ecx
	  push eax
	  xor ebx,ebx
	  mov bl,[esi+ecx+0x1E]
	  cmp bl,0x1
	  jle Default
	  mov byte ptr [esi+ecx+0x1E],0x1
	  push ecx
      push eax
	  imul ecx,ecx,0x2C
	  lea ecx,[ecx+ebx*4]
	  xor edx,edx
	  mov edx,[eax+ecx]
	  mov ecx,[ebp+0x8924]
	  push edx
	  mov edx,0x00782360
	  call edx
	  test eax,eax
	  pop eax
	  pop ecx
	  jnz Default
	  imul ecx,ecx,0x2C
	  lea ecx,[ecx+ebx*4]
	  //add ebx,ecx
      xor ebx,ebx
	  mov ebx,[eax+ecx]
	  mov ecx,[ebp+0x8924]
	  push 0xBF800000
	  push 0x1
	  push 0x0
	  lea eax,[ebp+0x8500]
	  push eax
	  push ebx
	  push 0x01571B88
	  mov eax,0x007817E0
	  call eax

	  Default:
      pop eax
	  pop ecx
	  add ecx,0x01
	  cmp ecx,0x05
	  jz LoopOut
      jmp LoopBack
	  LoopOut:
	  popad
	/*  xor eax,eax
	  mov al,[ebx+0x5C]
	  xor ax,0xCE43
	  mov [ebp+0x9EAA],ax    */
	  lea  edi, [ebx+0x3]
	  or   ecx, 0xFFFFFFFF
	  push 0x006BA6E7
	  ret
	}
}
__declspec(naked)void ShowReset()
{
__asm
	{
	  xor eax,eax
	  mov al,[esi+0x4]
	  cmp al,0x8
	  jnz Check2
	  push 0xFFFAE6AA
	  push ebx
	  push 0xC
	  push 0x10E4
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x155EE60
	  mov eax,0x006A9800
	  call eax
	  push 0x006EA369
	  ret
	  Check2:
	  cmp al,0x9
	  jnz Check3
	  xor eax,eax
	  mov al,[esi+0x7]
	  lea eax,[eax+eax*0x8]
	  shl eax,0x4
	  lea eax,[eax+0x1107258+0x22E3C]
	  mov dword ptr[eax],0x60
	  push 0xFFFAE6AA
	  push ebx
	  push 0xC
	  push 0x10E5
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x155EE60
	  mov eax,0x006A9800
	  call eax
	  push 0x006EA369
	  ret

      Check3:
      cmp al,0xA
	  jnz Default
      xor eax,eax
	  mov al,[esi+0x7]
	  lea eax,[eax+eax*0x8]
	  shl eax,0x4
      xor ecx,ecx
	  mov cl,[eax+0x1107258+0x22DC8+0x2E]
	  xor cl,0xC5
	  add ecx,0x1
	  xor cl,0xC5
	  mov [eax+0x1107258+0x22DC8+0x2E],cl
      xor ecx,ecx
	  mov cl,[eax+0x1107258+0x22DC8+0x2E]
      xor cl,0xC5
      sub ecx,0x1
      add ecx,0x60
	  mov [eax+0x1107258+0x22DC8+0x74],cl
	  push 0xFFFAE6AA
	  push ebx
	  push 0xC
	  push 0x10E6
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x155EE60
	  mov eax,0x006A9800
	  call eax
	  push 0x006EA369
	  ret

	  Default:
	  push 0x006EA30F
	  ret
	}
}
__declspec(naked)void BlockShowResource()
{
__asm
	{
	  mov  dword ptr [esi+0x228], 0x9
	  cmp eax,0x10
	  jnz Check2
      mov dword ptr [esi+0x583C],0xFFFFFFFF
	  jmp Default

	  Check2:
	  cmp eax,0x11
	  jnz Check3
	  mov dword ptr [esi+0x583C],0xFFFFFFFF
	  jmp Default

	  Check3:
	  cmp eax,0x12
	  jnz Check4
	  mov dword ptr [esi+0x583C],0xFFFFFFFF
	  jmp Default

	  Check4:
	  cmp eax,0x13
	  jnz Check5
	  mov dword ptr [esi+0x583C],0xFFFFFFFF
	  jmp Default

	  Check5:
	  cmp eax,0x15
	  jnz Default
	  mov dword ptr [esi+0x583C],0xFFFFFFFF
	  jmp Default

	  Default:
	  push 0x004C42DC
	  ret
	}
}
__declspec(naked)void ShowOptionRelic()
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  pushad
      mov ebx,eax
	  mov dl, [esi+0x5840]
	  push edx
	  mov eax,0x00679C80
	  call eax
	  add esp,0x4
	  cmp al,0x1
	  jnz Default
	  //
	  mov ecx,[esi+0x583C]
      cmp ecx,0xFFFFFFFF
	  jz Default
	  mov ecx,[0x01733AC4]
	  push 0xFFFFFF00
	  mov edx,[ecx]
	  mov eax,[edx+0xC]
	  call eax  //SetColor
	  mov edx,[esi+0x210]
	  mov eax,[esi+0x583C]
	  mov ecx,[0x010D94A8]
	  lea eax,[eax+eax*0x8]
	  shl eax,0x4
	  mov al,[eax+ecx+0x22DD8]
	  xor al,0xC5
	  and ax,0x00FF
	  cmp al,0x1
	  jl Default
	  push 0x3
	  sub edx,10
	  push 0x3F800000
	  push edx
	  push eax
      mov eax,ebx
      push eax
	  push 0x1307
	  push 0x19
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax    // _XGETINTERFACETEXT
	  pop edx
      mov ebx,edx
	  push eax
	  push edx
	  mov eax,dword ptr [0x0085C564]
	  call eax  //__imp__snprintf
	  add esp,0xC
	  push ebx
	  mov edx,[esi+0x228]
	  mov edi,[esi+0x18]
	  add edx, edi
	  push edx
	  mov edx, [esi+0x14]
	  add edx, 0xA
	  push edx
	  mov ecx,[0x01733AC4]
	  mov eax,[ecx]
	  mov eax,[eax+0x18]
	  call eax        //PutsAlign
	  mov edx, [esi+0x210]
	  mov ecx,[0x01733AC4]
	  sub edx, 0x10
	  mov  eax, [ecx]
	  push edx
	  push ebx
	  mov eax,[eax+0x48]
	  call eax
	  imul eax,[0x008970EC]
      add [esi+0x228], eax
	  //
	  mov ecx,[0x01733AC4]
	  push 0xFFE64C4C
	  mov edx,[ecx]
	  mov eax,[edx+0xC]
	  call eax
	  mov eax,ebx
      mov edx, [esi+0x210]
	  push 0x3
	  sub edx,10
	  push 0x3F800000
	  push edx
	  //
      xor eax,eax
      mov eax,[esi+0x583C]
	  mov ecx,[0x010D94A8]
	  lea edx,[eax+eax*0x8]
	  shl edx,0x4
	  mov ax,[edx+ecx+0x22DF4]
	  xor ax,0xCE43
	  //
	  push eax
	  push ebx
	  //
      xor eax,eax
	  mov ax,[edx+ecx+0x22DF2]
	  xor ax,0xCE43
      //
	  push eax
	  push 0xB
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  pop edx
      mov ebx,edx
	  push eax
	  push edx
	  mov eax,dword ptr [0x0085C564]
	  call eax
	  add esp,0xC
	  push ebx
	  mov edx,[esi+0x228]
	  mov edi,[esi+0x18]
	  add edx, edi
	  push edx
	  mov edx, [esi+0x14]
	  add edx, 0xA
	  push edx
	  mov ecx,[0x01733AC4]
	  mov eax,[ecx]
	  mov eax,[eax+0x18]
	  call eax
	  mov edx, [esi+0x210]
	  mov ecx,[0x01733AC4]
	  sub edx, 0x10
	  mov  eax, [ecx]
	  push edx
	  push ebx
	  mov eax,[eax+0x48]
	  call eax
	  imul eax,[0x008970EC]
	  add [esi+0x228], eax
	  //
      mov eax,ebx
      mov edx, [esi+0x210]
	  push 0x3
	  sub edx,10
	  push 0x3F800000
	  push edx
      //
	  xor eax,eax
      mov eax,[esi+0x583C]
	  mov ecx,[0x010D94A8]
	  lea edx,[eax+eax*0x8]
	  shl edx,0x4
	  mov ax,[edx+ecx+0x22E00]
	  xor ax,0xCE43
	  //
	  push eax
	  push ebx
	  //
      xor eax,eax
	  mov ax,[edx+ecx+0x22DFE]
	  xor ax,0xCE43
      //
	  push eax
	  push 0xB
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  pop edx
      mov ebx,edx
	  push eax
	  push edx
	  mov eax,dword ptr [0x0085C564]
	  call eax
	  add esp,0xC
	  push ebx
	  mov edx,[esi+0x228]
	  mov edi,[esi+0x18]
	  add edx, edi
	  push edx
	  mov edx, [esi+0x14]
	  add edx, 0xA
	  push edx
	  mov ecx,[0x01733AC4]
	  mov eax,[ecx]
	  mov eax,[eax+0x18]
	  call eax
	  mov edx, [esi+0x210]
	  mov ecx,[0x01733AC4]
	  sub edx, 0x10
	  mov  eax, [ecx]
	  push edx
	  push ebx
	  mov eax,[eax+0x48]
	  call eax
	  imul eax,[0x008970EC]
      add [esi+0x228], eax
	  //
      mov eax,ebx
      mov edx, [esi+0x210]
	  push 0x3
	  sub edx,10
	  push 0x3F800000
	  push edx
	  //
	  xor eax,eax
      mov eax,[esi+0x583C]
	  mov ecx,[0x010D94A8]
	  lea edx,[eax+eax*0x8]
	  shl edx,0x4
	  mov ax,[edx+ecx+0x22DFA]
	  xor ax,0xCE43
	  //
	  push eax
	  push ebx
	  //
      xor eax,eax
	  mov ax,[edx+ecx+0x22DF8]
	  xor ax,0xCE43
      //
	  push eax
	  push 0xB
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  pop edx
      mov ebx,edx
	  push eax
	  push edx
	  mov eax,dword ptr [0x0085C564]
	  call eax
	  add esp,0xC
	  push ebx
	  mov edx,[esi+0x228]
	  mov edi,[esi+0x18]
	  add edx, edi
	  push edx
	  mov edx, [esi+0x14]
	  add edx, 0xA
	  push edx
	  mov ecx,[0x01733AC4]
	  mov eax,[ecx]
	  mov eax,[eax+0x18]
	  call eax
	  mov edx, [esi+0x210]
	  mov ecx,[0x01733AC4]
	  sub edx, 0x10
	  mov  eax, [ecx]
	  push edx
	  push ebx
	  mov eax,[eax+0x48]
	  call eax
	  imul eax,[0x008970EC]
      add [esi+0x228], eax
	  //
      Default:
	  popad
	  mov eax,0x00000000
      mov al, [esi+0x5840]
	  push 0x004C56A9
	  ret
	}
}
__declspec(naked)void ShowOptionCloth()
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  push eax
	  mov ecx,[eax+0x80]
	  test ecx,ecx
	  jnz DaCoThongTinHinhAnhNV
      add eax,0x80
	  push eax
	  call AddOptionImage
      DaCoThongTinHinhAnhNV:
	  mov ecx,[esi+0x228]
	  mov [eax+0x70],ecx
	  xor ecx,ecx
	  mov ecx,[esi+0x20C]
	  cmp ecx,0x1
	  jz ShowItemClothInInventory
	  cmp ecx,0x2
	  jz ShowItemClothInInventory
      cmp ecx,0x6 //Giao Dich Doi Phuong
	  jz ShowItemTradeAnotherUser
      cmp ecx,0x7 //Giao Dich Local User
	  jz ShowItemTradeUser
	  cmp ecx,0xA //Shop
	  jz ShowItemInShopUser
	  cmp ecx,0x10 //Shop
	  jz ShowItemUserWear
      jmp Default

	  ShowItemUserWear:
	  mov eax,[esi+0x0000583C]
	  mov edx,[esi+0x00005B04]
	  lea ecx,[eax+eax*0x8]
	  shl ecx,0x4
	  lea eax,[ecx+edx+0x000005CC]
	  xor edx,edx
	  mov dl,[eax+0x17]
	  xor dl,0x1F
	  cmp dl,4
      ja Default
	  push eax
	  mov eax,[esp+0x4]
	  push eax
	  call ProcessShowInc
	  jmp Default

	  //
	  ShowItemTradeAnotherUser:
	  mov eax,[esi+0x0000583C]
	  lea ecx,[eax+eax*0x8]
	  lea edx,[eax+ecx*0x2]
	  mov eax,[esi+0x00005AE4]
	  lea ecx,[eax+edx*0x8+0x00000240]
      xor edx,edx
	  mov dl,[ecx+0x17]
	  xor dl,0x1F
	  cmp dl,4
      ja Default
	  push ecx
	  mov eax,[esp+0x4]
	  push eax
      call ProcessShowInc
	  jmp Default
	  //
	  ShowItemTradeUser:
	  mov eax,[esi+0x0000583C]
	  lea ecx,[eax+eax*0x8]
	  lea edx,[eax+ecx*0x2]
	  mov eax,[esi+0x00005AE4]
	  lea ecx,[eax+edx*0x8+0x00000834]
      xor edx,edx
	  mov dl,[ecx+0x17]
	  xor dl,0x1F
	  cmp dl,4
      ja Default
	  push ecx
	  mov eax,[esp+0x4]
	  push eax
      call ProcessShowInc
	  jmp Default
      //
	  ShowItemInShopUser:
	  mov eax,[esi+0x0000583C]
	  lea ecx,[eax+eax*0x8]
	  lea edx,[eax+ecx*0x2]
	  mov eax,[esi+0x00005AFC]
	  lea ecx,[eax+edx*0x8+0x000002CC]
	  xor edx,edx
	  mov dl,[ecx+0x17]
	  xor dl,0x1F
	  cmp dl,4
      ja Default
	  push ecx
	  mov eax,[esp+0x4]
	  push eax
	  call ProcessShowInc
	  jmp Default
	  //
      ShowItemClothInInventory:
	  xor eax,eax
	  mov eax,[esi+0x5840]
	  test eax,eax
	  jz Default
	  cmp eax,0x1
	  jnz Default
	  mov eax,[esi+0x583C]
	  cmp eax,0x0
	  jb Default
	  cmp eax,0x96
	  ja Default
      xor eax,eax
	  mov eax,[esi+0x583C]
	  imul eax,0x90
	  lea edx,[eax+0x1107258+0x22DC8]
	  xor ecx,ecx
	  mov cl,[edx+0x17]
	  xor cl,0x1F
	  cmp cl,4
      ja Default
	  push edx
	  mov eax,[esp+0x4]
      push eax
	  call ProcessShowInc
	  //
	  Default:
      pop esi
      pop esi
	  pop ebp
	  add esp,0xC
	  push 0x004D693B
	  ret

	  GetRankOption:
	  mov ecx,[esp+0x4]
	  cmp ecx,0
	  jnz KiemTraRankOption1
	  mov eax,4136
	  ret 0x4

	  KiemTraRankOption1:
	  cmp ecx,1
	  jnz KiemTraRankOption2
	  mov eax,4137
	  ret 0x4

	  KiemTraRankOption2:
	  cmp ecx,2
	  jnz KiemTraRankOption3
	  mov eax,4138
	  ret 0x4

	  KiemTraRankOption3:
	  cmp ecx,3
	  jnz KiemTraRankOption4
	  mov eax,4139
	  ret 0x4

	  KiemTraRankOption4:
      mov eax,4140
	  ret 0x4

	  GetlenghtCapDo:
      mov ecx,[esp+0x4]
	  cmp ecx,0
	  jnz GetlenghtCapDo1
	  mov eax,0x72
	  ret 0x4

	  GetlenghtCapDo1:
	  cmp ecx,1
	  jnz GetlenghtCapDo2
	  mov eax,0x58
	  ret 0x4

	  GetlenghtCapDo2:
	  cmp ecx,2
	  jnz GetlenghtCapDo3
	  mov eax,0x7B
	  ret 0x4

	  GetlenghtCapDo3:
	  cmp ecx,3
	  jnz GetlenghtCapDo4
	  mov eax,0x55
	  ret 0x4

	  GetlenghtCapDo4:
      mov eax,0x71
	  ret 0x4


	  ProcessShowInc:
	  sub esp,0x4
	  xor ecx,ecx
	  mov [esp],ecx
	  BackLoopOptionClothRanDom:
	  xor ecx,ecx
	  mov ecx,[esp]
	  cmp ecx,3
      jnz KhongHienThiOptAn
	  imul ecx,6
	  xor edx,edx
	  mov eax,[esp+0xC]
      xor edx,edx
	  mov dx,[eax+0x2A+ecx]
	  xor dx,0xCE43
	  test edx,edx
      jz KhongHienThiOptAn
	  push 0xFF00FFFF
      mov ecx,DWORD PTR SS :[0x01733AC4]
	  mov eax,[ecx]
	  call dword ptr [eax+0xC]
	  push 4258
      push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
      push 0x0
	  push 0x3F800000
	  mov eax,DWORD PTR [0x01733AC4]
	  mov edi,[eax]
	  mov edx,[esi+0x18]
	  add edx,86
	  mov ecx,[esp+0xC]
	  imul ecx,0x26
	  add edx,ecx
	  push edx
	  mov edx,[esi+0x14]
	  sub edx,309
	  push edx
	  push eax
	  mov ecx,DWORD PTR [0x01733AC4]
	  call dword ptr [edi+0x30]
	  add esp,0x18
      KhongHienThiOptAn:
	  // Hien THi level
	  push 0xFFffff1a
	  mov ecx,DWORD PTR SS :[0x01733AC4]
	  mov eax,[ecx]
	  call dword ptr [eax+0xC]
      //
	  xor ecx,ecx
	  mov ecx,[esp]
	  imul ecx,6
	  xor edx,edx
	  mov eax,[esp+0xC]
      xor edx,edx
	  mov dx,[eax+0x2A]
	  xor dx,0xCE43
	  test edx,edx
      jz KhongHienThiLoaiOpt
	  cmp edx,19
	  jnz HienThiKhiCong
	  push 4256
	  jmp HienThiThongTinLoai

      HienThiKhiCong:
	  push 4257
      HienThiThongTinLoai:
      push 25
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
      push 0x1
	  push 0x3F800000
	  mov eax,DWORD PTR [0x01733AC4]
	  mov edi,[eax]
	  mov edx,[esi+0x18]
	  add edx,86
	  mov ecx,[esp+0xC]
	  imul ecx,0x26
	  add edx,ecx
	  push edx
	  mov edx,[esi+0x14]
	  sub edx,0x8
	  push edx
	  push eax
	  mov ecx,DWORD PTR [0x01733AC4]
	  call dword ptr [edi+0x30]
	  add esp,0x18
	  //
      KhongHienThiLoaiOpt:
      xor ecx,ecx
	  mov ecx,[esp]
	  imul ecx,6
	  xor edx,edx
	  mov eax,[esp+0xC]
	  mov dx,[eax+0x2A+ecx]
	  xor dx,0xCE43
	  test edx,edx
	  jz EndShowOptionClothRandom
      xor ecx,ecx
	  mov ecx,[esp]
	  cmp ecx,2
	  ja HienThiOptMoi
	  push 0xFF00EE00
	  jmp ProcessShowOptItemInc

	  HienThiOptMoi:
	  push 0xFF00FFFF
	  ProcessShowOptItemInc:
	  // Hien Thi Opt
	  mov ecx,DWORD PTR SS :[0x01733AC4]
	  mov eax,[ecx]
	  call dword ptr [eax+0xC]
	  xor ecx,ecx
	  mov ecx,[esp]
	  imul ecx,6
	  xor edx,edx
	  mov eax,[esp+0xC]
	  mov dx,[eax+0x2A+ecx+0x2]
	  xor dx,0xCE43
	  push edx // Value
      xor edx,edx
      mov dx,[eax+0x2A+ecx]
	  xor dx,0xCE43
	  push edx // Get NDText String
      push 11
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  push 0x2
	  push 0x3F800000
	  mov eax,DWORD PTR [0x01733AC4]
	  mov edi,[eax]
	  mov edx,[esi+0x18]
	  add edx,107
	  mov ecx,[esp+0x10]
	  imul ecx,0x26
	  add edx,ecx
	  push edx
	  mov edx,[esi+0x14]
	  sub edx,149
	  push edx
      mov eax,DWORD PTR [0x01733AC4]
	  push eax
	  mov ecx,DWORD PTR [0x01733AC4]
	  call dword ptr [edi+0x30]
	  add esp,0x1C
	  mov ecx,[esp]
	  add ecx,1
      mov [esp],ecx
	  cmp ecx,6
	  jl BackLoopOptionClothRanDom
	  EndShowOptionClothRandom:
      mov eax,[esi+0x18]
	  add eax,80
	  push eax
	  mov eax,[esi+0x14]
	  sub eax,248
      push eax
	  mov eax,[esp+0x10]
	  add eax,0x80
	  push eax
	  call GetImageClass
      KhongHienThiOptionForm:
	  add esp,0x4
      ret 0x8


      AddOptionImage:
	  sub esp,0x4
	  xor ecx,ecx
	  mov [esp],ecx
	  BackGetOptionImage:
	  mov ecx,[esp]
	  mov eax, 0x010CC088
	  mov edx,[eax+ecx]
	  mov eax,[esp+0x8]
	  mov [eax+ecx],edx
	  add ecx,4
	  mov [esp],ecx
	  cmp ecx,0xB8
	  jl BackGetOptionImage
	  add esp,0x4
	  ret 0x4

      GetImageClass:
	  push 53
	  push 82
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
	  mov  DWORD PTR SS : [ecx + 0x9C] , 33
	  mov  DWORD PTR SS : [ecx + 0xA0] , 359
	  mov  DWORD PTR SS : [ecx + 0x98] , 40
	  mov  DWORD PTR SS : [ecx + 0xA4] , 260
	  push 0xFF7F0000
	  push 5188
	  push 25
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,[esp+0x14]
	  mov edx,[esp+0x10]
	  push ecx
	  push edx
	  mov ecx, [esp+0x14]
	  mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
	  call eax
	  mov ecx,[esp+0x4]
	  push 0x1732CC8
	  mov eax, 0x7B9850
	  call eax //Draw1
	  ret 0xC
	}
}
__declspec(naked)void LoadLine()
{
__asm
	{
	  mov eax, [ebp+0x583C]
	  lea edx, [eax+eax*0x8]
	  mov eax,[0x010D94A8]
	  shl edx, 4
	  add eax,edx
	  mov cl, [eax+0x22DD8]
      xor cl,0xC5
	  cmp cl,0x01
      jl Default
	  mov edx,[0x008970F0]
	  mov edi,[ebp+0x00000214]
	  lea ecx,[edx+edx]
	  add edi,ecx
	  mov esi,0x4
	  mov [ebp+0x00000214],edi
	  imul esi,[0x008970EC]
	  mov ecx,edi
	  add esi,ecx
	  mov [ebp+0x00000214],esi
      mov eax,0x00000000
	  mov ax, [ebp+0x5844]
	  push 0x004CEC65
	  ret
	  Default:
      mov eax,0x00000000
      mov ax, [ebp+0x5844]
	  push 0x004CEC65
	  ret
	}
}
__declspec(naked)void AnotherEffect()
{
__asm
	{
	  pushad
	  xor ecx,ecx
	  mov esi,ebx
      LoopBack:
	  push ecx
	  push eax
	  xor ebx,ebx
	  mov bl,[esi+ecx+0x1E]
	  cmp bl,0x1
	  jz Default
      mov byte ptr [esi+ecx+0x1E],0x1
	  Default:
      pop eax
	  pop ecx
	  add ecx,0x01
	  cmp ecx,0x05
	  jz LoopOut
      jmp LoopBack
      LoopOut:
	  popad
	  fld dword ptr [ebx+0x34]
	  fstp dword ptr [esp+0x00000094]
	  push 0x006BB2E1
	  ret
	}
}
/*__declspec(naked)void Addline()
{
__asm
	{
	  cmp edx,0x9
	  jnz CheckAnother
	  add []

      CheckAnother:
	  mov edi,[esp+0x000000AC]
	  push 0x004C6631
	  ret
	}
}   */
__declspec(naked)void AcceptInchantCloth()
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
      push eax
	  OldFunc:
      xor eax,eax
	  mov al, [ecx+0x22DDE]
	  xor al, 0x1F
	  cmp al,0x1
	  jz AcceptCloth
	  cmp al,0xA
      jz KiemTraNLHuyetLong
	  DefaultGame:
	  pop eax
      xor eax,eax
      mov al, [ecx+0x22DDE]
	  xor al, 0x1F
	  push eax
	  push 0x00488E1C
      ret
	  AcceptCloth:
	  mov al,[ecx+0x22DDF]
	  xor al,0x1F
	  cmp al,0x04
	  jg DefaultGame
      pop eax
	  push 0x00488E28
	  ret

	  KiemTraNLHuyetLong:
	  xor eax,eax
	  mov ax,[ecx+0x14+0x22DC8]
	  xor ax,0xCE43
	  cmp eax,0x62
	  jnz DefaultGame
      mov ecx,[ebx]
	  mov eax,[esp]
	  mov [eax],ecx
      pop eax
	  push 0x4890F9
      ret

	}
}
__declspec(naked)void AcceptInchantClothType8()
{
__asm
	{
	  and eax, 0xFF
	  cmp eax,0x8
	  jnz Check2
	  mov eax,0x5
	  jmp Default
	  Check2:
	  cmp eax,0x3
      jnz Default
	  mov eax,0x5
	  Default:
	  push 0x004F5416
	  ret
	}
}
__declspec(naked)void AddmoreNumber()
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  mov edx,eax
	  mov eax, [esp+0x1C]
	  cmp eax,0x04
	  jnz Default
	  mov edi,edx
	  add edi,0x18

	  Default:
	  dec eax
	  mov [esp+0x1C], eax
	  push 0x0077E82F
	  ret
	}
}
__declspec(naked)void AddmoreNumber2()
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  mov edi,eax
	  pop eax
	  push eax
      push 0x4
	  mov di,[eax*2+edi]
	  push 0x0077E94C
	  ret
	}
}
__declspec(naked)void AddOptionRelicsItem() //00627E5D
{
__asm
	{
	nop
	nop
	nop
	nop
	nop
	pushad
	xor eax,eax
	xor ecx,ecx
	xor ebx,ebx
	mov ecx,0x0
	BackCheckOtherRelicsItemNewSlotIncClth:
    xor ebx,ebx
	push ecx
	imul ecx,0x90
	BackCheckOtherOptionNewSlotIncClth:
    xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx]
	xor ax,0xCE43
	test eax,eax
	jz NotFoundValue2NewSlotIncClth
    pushad
	cmp ax,0x30 //Tang Noi Cong
	jnz en_eff_where_avoid_rateNewSlotIncClth
	xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx+0x2]
	xor ax,0xCE43
	push eax
	xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx]
	xor ax,0xCE43
	push eax
	mov ecx,edi
	mov eax,0x00602B30
	call eax
	jmp NotFoundValueNewSlotIncClth


	en_eff_where_avoid_rateNewSlotIncClth:    //Tang Speed
	cmp ax,0x3D
	jnz en_eff_where_attack_damageNewSlotIncClth
    xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx+0x2]
	xor ax,0xCE43
	push eax
	xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx]
	xor ax,0xCE43
	push eax
	mov ecx,edi
	mov eax,0x00602DB0
	call eax
	jmp NotFoundValueNewSlotIncClth

	en_eff_where_attack_damageNewSlotIncClth:
	cmp ax,0x3  //Tang Chinh Xac
	jnz en_eff_where_defenceNewSlotIncClth
    xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx+0x2]
	xor ax,0xCE43
	push eax
	xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx]
	xor ax,0xCE43
	push eax
	mov ecx,edi
	mov eax,0x00601FC0
	call eax
	jmp NotFoundValueNewSlotIncClth

	en_eff_where_defenceNewSlotIncClth: //Tang Chan Khi
	cmp ax,0x33
	jnz en_eff_where_m_attack_rateNewSlotIncClth
    xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx+0x2]
	xor ax,0xCE43
	push eax
	xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx]
	xor ax,0xCE43
	push eax
	mov ecx,edi
	mov eax,0x006014C0
	call eax
	jmp NotFoundValueNewSlotIncClth

	en_eff_where_m_attack_rateNewSlotIncClth: //Tang Can Luc
	cmp ax,0x32
	jnz TangNguKhi
    xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx+0x2]
	xor ax,0xCE43
	push eax
	xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx]
	xor ax,0xCE43
	push eax
	mov ecx,edi
	mov eax,0x006012B0
	call eax
	jmp NotFoundValueNewSlotIncClth

    TangNguKhi: //Tang Can Luc
	cmp ax,63
	jnz en_eff_where_m_avoid_rateNewSlotIncClth
    xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx+0x2]
	xor ax,0xCE43
	push eax
	xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx]
	xor ax,0xCE43
	push eax
	mov ecx,edi
	mov eax,0x006012B0
	call eax
	//
	mov ecx,[esp+0x18]
    xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx+0x2]
	xor ax,0xCE43
	push eax
	xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx]
	xor ax,0xCE43
	push eax
	mov ecx,edi
	mov eax,0x006014C0
	call eax

	//
	mov ecx,[esp+0x18]
    xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx+0x2]
	xor ax,0xCE43
	push eax
	xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx]
	xor ax,0xCE43
	push eax
	mov ecx,edi
	mov eax,0x006017D0
	call eax
	//
	mov ecx,[esp+0x18]
    xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx+0x2]
	xor ax,0xCE43
	push eax
	xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx]
	xor ax,0xCE43
	push eax
	mov ecx,edi
	mov eax,0x00601AB0
	call eax
	//
	mov ecx,[esp+0x18]
    xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx+0x2]
	xor ax,0xCE43
	push eax
	xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx]
	xor ax,0xCE43
	push eax
	mov ecx,edi
	mov eax,0x00601DB0
	call eax
	jmp NotFoundValueNewSlotIncClth

	en_eff_where_m_avoid_rateNewSlotIncClth: //Tang Tri Tue
	cmp ax,0x34
	jnz en_eff_where_m_attack_damageNewSlotIncClth
    xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx+0x2]
	xor ax,0xCE43
	push eax
	xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx]
	xor ax,0xCE43
	push eax
	mov ecx,edi
	mov eax,0x006017D0
	call eax
	jmp NotFoundValueNewSlotIncClth

	en_eff_where_m_attack_damageNewSlotIncClth:  //Tang SInh Luc
	cmp ax,0x35
	jnz en_eff_where_m_defenceNewSlotIncClth
    xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx+0x2]
	xor ax,0xCE43
	push eax
	xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx]
	xor ax,0xCE43
	push eax
	mov ecx,edi
	mov eax,0x00601AB0
	call eax
	jmp NotFoundValueNewSlotIncClth

	en_eff_where_m_defenceNewSlotIncClth:  //Tang Man Tiep
	cmp ax,0x36
	jnz en_eff_where_max_lifeNewSlotIncClth
    xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx+0x2]
	xor ax,0xCE43
	push eax
	xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx]
	xor ax,0xCE43
	push eax
	mov ecx,edi
	mov eax,0x00601DB0
	call eax
	jmp NotFoundValueNewSlotIncClth

	en_eff_where_max_lifeNewSlotIncClth:   //Suc Sat thuong tang %
	cmp ax,0xF
	jnz OptionSatThuongKhiCong
    xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx+0x2]
	xor ax,0xCE43
	push eax
	xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx]
	xor ax,0xCE43
	push eax
	mov ecx,edi
	mov eax,0x00602220
	call eax
	jmp NotFoundValueNewSlotIncClth

    OptionSatThuongKhiCong:   //Suc Sat thuong tang %
	cmp ax,0x10
	jnz en_eff_where_max_concentrationNewSlotIncClth
    xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx+0x2]
	xor ax,0xCE43
	push eax
	xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx]
	xor ax,0xCE43
	push eax
	mov ecx,edi
	mov eax,0x006028C0
	call eax
	jmp NotFoundValueNewSlotIncClth

	en_eff_where_max_concentrationNewSlotIncClth:   //Tang Sm %
	cmp ax,0x2F
	jnz en_eff_where_move_speedNewSlotIncClth
    xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx+0x2]
	xor ax,0xCE43
	push eax
	xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx]
	xor ax,0xCE43
	push eax
	mov ecx,edi
	mov eax,0x006029F0
	call eax
	jmp NotFoundValueNewSlotIncClth

	en_eff_where_move_speedNewSlotIncClth://Tang sat thuong toi thieu cua vk
	cmp ax,0x5D
	jnz en_eff_where_weapon_damNewSlotIncClth
    xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx+0x2]
	xor ax,0xCE43
	push eax
	xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx]
	xor ax,0xCE43
	push eax
	mov ecx,edi
	mov eax,0x00602F80
	call eax
	jmp NotFoundValueNewSlotIncClth

	en_eff_where_weapon_damNewSlotIncClth: //Tang sat thuong toi da cua vk
	cmp ax,0x5F
	jnz en_eff_where_weapon_min_damNewSlotIncClth
    xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx+0x2]
	xor ax,0xCE43
	push eax
	xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx]
	xor ax,0xCE43
	push eax
	mov ecx,edi
	mov eax,0x00603040
	call eax
	jmp NotFoundValueNewSlotIncClth

	en_eff_where_weapon_min_damNewSlotIncClth:  //chinh xac khi cong
	cmp ax,0x8A
	jnz AddDeffCloth
    xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx+0x2]
	xor ax,0xCE43
	push eax
	xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx]
	xor ax,0xCE43
	push eax
	mov ecx,edi
	mov eax,0x00602530
	call eax
	jmp NotFoundValueNewSlotIncClth

	//AddMore
     AddDeffCloth:
	cmp ax,0x13
	jnz AddMoreOptionNew
	xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx+0x2]
    xor ax,0xCE43
	push eax
	push 0x13
	mov ecx,edi
	mov eax,0x00602400
	call eax
	jmp NotFoundValueNewSlotIncClth

	AddMoreOptionNew:
	   cmp ax,0x82
	   jnz AddMoreOptionNew1
	   xor eax,eax
	   mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx+0x2]
	   xor ax,0xCE43
	   push eax
	   push 0x82
	   mov ecx,edi
	   mov eax,0x006029F0
	   call eax
	   jmp NotFoundValueNewSlotIncClth


	   AddMoreOptionNew1:
	   cmp ax,0x80
	   jnz AddMoreOptionNew2
	   xor eax,eax
	   mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx+0x2]
	   xor ax,0xCE43
	   push eax
	   push 0x80
	   mov ecx,edi
	   mov eax,0x00602660
	   call eax
	   jmp NotFoundValueNewSlotIncClth

	   AddMoreOptionNew2:
	   cmp ax,0x83
	   jnz AddMoreOptionNew3
	   xor eax,eax
	   mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx+0x2]
	   xor ax,0xCE43
	   push eax
	   push 0x83
	   mov ecx,edi
	   mov eax,0x00602B30
	   call eax
	   jmp NotFoundValueNewSlotIncClth

	   AddMoreOptionNew3:
	   cmp ax,0x2
	   jnz AddMoreOptionNew4
	   xor eax,eax
	   mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx+0x2]
	   xor ax,0xCE43
	   push eax
	   push 0x1
	   mov ecx,edi
	   mov eax,0x006020F0
	   call eax
	   jmp NotFoundValueNewSlotIncClth

	   AddMoreOptionNew4:
	   cmp ax,0x1
	   jnz AddMoreOptionNew6
	   xor eax,eax
	   mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx+0x2]
	   xor ax,0xCE43
       push eax
	   push 0x1
	   mov ecx,edi
	   mov eax,0x00601FC0
	   call eax
	   jmp NotFoundValueNewSlotIncClth


	AddMoreOptionNew6:
	   cmp ax,0x89
	   jnz AddMoreOptionNew7
	   xor eax,eax
	   mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx+0x2]
	   xor ax,0xCE43
       push eax
	   push 0x1
	   mov ecx,edi
	   mov eax,0x00602790
	   call eax
	   jmp NotFoundValueNewSlotIncClth

	   AddMoreOptionNew7:
	   cmp ax,0x88
	   jnz AddMoreOptionNew8
	   xor eax,eax
	   mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx+0x2]
	   xor ax,0xCE43
	   push eax
	   push 0xA
	   mov ecx,edi
	   mov eax,0x00602530
	   call eax
	   jmp NotFoundValueNewSlotIncClth

	   AddMoreOptionNew8:
	   cmp ax,0xA
	   jnz AddMoreOptionNew9
	   xor eax,eax
	   mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx+0x2]
	   xor ax,0xCE43
	   push eax
	   push 0xA
	   mov ecx,edi
	   mov eax,0x006028C0
	   call eax
	   jmp NotFoundValueNewSlotIncClth

	   AddMoreOptionNew9:
	   cmp ax,0x9
	   jnz NotFoundValueNewSlotIncClth
	   xor eax,eax
	   mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx+0x2]
	   xor ax,0xCE43
	   push eax
	   push 0x9
	   mov ecx,edi
	   mov eax,0x00602220
	   call eax
	//
	NotFoundValueNewSlotIncClth:
	popad
    NotFoundValue2NewSlotIncClth:
	add ebx,0x6
	cmp ebx,0x23
    jg CheckOtherRelicNewSlotIncClth
    jmp BackCheckOtherOptionNewSlotIncClth
	CheckOtherRelicNewSlotIncClth:
	pop ecx
	add ecx,0x1
	cmp ecx,0x4
	jg GetOutCheckNewSlotIncClth
	jmp BackCheckOtherRelicsItemNewSlotIncClth
	GetOutCheckNewSlotIncClth:
	//  Load Opt Them Kinh Mach
	mov eax,[esp+0x1C]
	add eax,0x10
	push eax
	call AddOptionFromKM
    //
	popad
	mov ecx,esi
	mov eax,0x00627F60
    call eax
	push 0x00627E62
	ret

	AddOptionFromKM:
	sub esp,0x4
	xor ecx,ecx
	mov [esp],ecx
	BackLoopAddOptionFromKM:
	mov ecx,[esp]
	mov eax,[esp+0x8]
	imul ecx,0xA
	xor edx,edx
	mov dx,[eax+ecx+0x2]
	test edx,edx
	jz KhongCoGiTriAddOptionFromKM
	mov ecx,[esp]
	cmp ecx,0
	jnz KiemTraKinhMach2
    push edx
	push 0x82
	mov ecx,edi
	mov eax,0x006029F0
	call eax
	jmp KhongCoGiTriAddOptionFromKM

	KiemTraKinhMach2:
	cmp ecx,1
	jnz KiemTraKinhMach3
    push edx
	push 0x30
	mov ecx,edi
	mov eax,0x00602B30
	call eax
	jmp KhongCoGiTriAddOptionFromKM


	KiemTraKinhMach3:
	cmp ecx,2
	jnz KiemTraKinhMach4
    push edx
	push 0x35
	mov ecx,edi
	mov eax,0x00601AB0
	call eax
	jmp KhongCoGiTriAddOptionFromKM

	KiemTraKinhMach4:
	cmp ecx,4
	jnz KiemTraKinhMach5
	push edx
	push 0x13
	mov ecx,edi
	mov eax,0x00602400
	call eax
	jmp KhongCoGiTriAddOptionFromKM

	KiemTraKinhMach5:
	cmp ecx,5
	jnz KiemTraKinhMach6
    push edx
	push 0x32
	mov ecx,edi
	mov eax,0x006012B0
	call eax
	jmp KhongCoGiTriAddOptionFromKM

	KiemTraKinhMach6:
	cmp ecx,7
	jnz KiemTraKinhMach7
    push edx
	push 0x9
	mov ecx,edi
	mov eax,0x00602220
	call eax
	jmp KhongCoGiTriAddOptionFromKM

	KiemTraKinhMach7:
	cmp ecx,8
	jnz KiemTraKinhMach8
    push edx
	push 0x36
	mov ecx,edi
	mov eax,0x00601DB0
	call eax
	jmp KhongCoGiTriAddOptionFromKM

	KiemTraKinhMach8:
	cmp ecx,9
	jnz KiemTraKinhMach9
    push edx
	push 0x3
	mov ecx,edi
	mov eax,0x00601FC0
	call eax
	jmp KhongCoGiTriAddOptionFromKM

	KiemTraKinhMach9:
	cmp ecx,10
	jnz KiemTraKinhMach10
    push edx
	push 0x80
	mov ecx,edi
	mov eax,0x00602660
	call eax
	jmp KhongCoGiTriAddOptionFromKM

	KiemTraKinhMach10:
	cmp ecx,11
	jnz KiemTraKinhMach11
    push edx
	push 0x33
	mov ecx,edi
	mov eax,0x006014C0
	call eax
	jmp KhongCoGiTriAddOptionFromKM

	KiemTraKinhMach11:
	cmp ecx,13
	jnz KiemTraKinhMach12
    push edx
	push 0xA
	mov ecx,edi
	mov eax,0x006028C0
	call eax
	jmp KhongCoGiTriAddOptionFromKM

	KiemTraKinhMach12:
	cmp ecx,14
	jnz KiemTraKinhMach13
    push edx
	push 0x34
	mov ecx,edi
	mov eax,0x006017D0
	call eax
	jmp KhongCoGiTriAddOptionFromKM

	KiemTraKinhMach13:
	cmp ecx,15
	jnz KiemTraKinhMach14
    push edx
	push 0x8A
	mov ecx,edi
	mov eax,0x00602530
	call eax
	jmp KhongCoGiTriAddOptionFromKM

	KiemTraKinhMach14:
	cmp ecx,16
	jnz KiemTraKinhMach15
    push edx
	push edx
	push 63
	mov ecx,edi
	mov eax,0x006012B0
	call eax
    mov edx,[esp]
    push edx
	push 63
	mov ecx,edi
	mov eax,0x006014C0
	call eax
	mov edx,[esp]
    push edx
	push 63
	mov ecx,edi
	mov eax,0x006017D0
	call eax
	mov edx,[esp]
    push edx
	push 63
	mov ecx,edi
	mov eax,0x00601AB0
	call eax
	mov edx,[esp]
    push edx
	push 63
	mov ecx,edi
	mov eax,0x00601DB0
	call eax
    pop edx
	jmp KhongCoGiTriAddOptionFromKM

	KiemTraKinhMach15:
	cmp ecx,18
	jnz KhongCoGiTriAddOptionFromKM
    push edx
	push 0x3D
	mov ecx,edi
	mov eax,0x00602DB0
	call eax
	KhongCoGiTriAddOptionFromKM:
	mov ecx,[esp]
	add ecx,1
	mov [esp],ecx
	cmp ecx,19
	jl BackLoopAddOptionFromKM
	add esp,0x4
	ret 0x4
	}
};
__declspec(naked)void AddOptionInc()
{
__asm
	{
	   pushad
	   mov [esi+0x2DA98], eax
	   mov eax,[0x010D94A8]
	   xor ecx,ecx
       xor edx,edx
	   LoopRun:
	   mov bl,[eax+0x22DD8+ecx]
       xor bl,0xC5
	   cmp bl,0x1
	   jl NotInc
	   xor esi,esi
	   LoopRun2:
	   push esi
	   lea esi,[esi+ecx]
       xor ebx,ebx
	   mov bx,[eax+0x22DD8+esi+0x1A]
       xor bx,0xCE43
	   cmp bx,0x13
	   jnz Checktyp2
       xor ebx,ebx
	   mov edx,[eax+0x2D9D0]
	   xor edx,0xAE1CDB23
	   mov bx,[eax+esi+0x1C+0x22DD8]
	   xor bx,0xCE43
	   add edx,ebx
	   xor edx,0xAE1CDB23
	   mov [eax+0x2D9D0],edx
	   jmp NotFound

       //
	   Checktyp2:
	   cmp bx,0x82
	   jnz Checktyp21
	   xor ebx,ebx
	   mov edx,[eax+0x2DB90]
	   xor edx,0xAE1CDB23
	   mov bx,[eax+esi+0x1C+0x22DD8]
	   xor bx,0xCE43
	   add edx,ebx
	   xor edx,0xAE1CDB23
	   mov [eax+0x2DB90],edx
	   jmp NotFound
		//
	   Checktyp21:
	   cmp bx,0x80
	   jnz Checktyp3
	   xor ebx,ebx
	   mov edx,[eax+0x2DA70]
	   xor edx,0xAE1CDB23
	   mov bx,[eax+esi+0x1C+0x22DD8]
	   xor bx,0xCE43
	   add edx,ebx
	   xor edx,0xAE1CDB23
	   mov [eax+0x2DA70],edx
	   jmp NotFound

	   //
	   Checktyp3:
	   cmp bx,0x83
	   jnz Checktyp4
       xor ebx,ebx
	   mov edx,[eax+0x2DBB8]
	   xor edx,0xAE1CDB23
	   mov bx,[eax+esi+0x1C+0x22DD8]
	   xor bx,0xCE43
	   add edx,ebx
	   xor edx,0xAE1CDB23
	   mov [eax+0x2DBB8],edx
	   jmp NotFound

	   //
	   Checktyp4:
	   cmp bx,0x32
	   jnz Checktyp5
       xor ebx,ebx
	   mov edx,[eax+0x2DAC0]
	   xor edx,0xAE1CDB23
	   mov bx,[eax+esi+0x1C+0x22DD8]
	   xor bx,0xCE43
	   add edx,ebx
	   xor edx,0xAE1CDB23
	   mov [eax+0x2DAC0],edx
	   jmp NotFound

	   //
	   Checktyp5:
	   cmp bx,0x2
	   jnz Checktyp6
       xor ebx,ebx
	   mov edx,[eax+0x2D9F8]
	   xor edx,0xAE1CDB23
	   mov bx,[eax+esi+0x1C+0x22DD8]
	   xor bx,0xCE43
	   add edx,ebx
	   xor edx,0xAE1CDB23
	   mov [eax+0x2D9F8],edx
	   jmp NotFound

	   //
	   Checktyp6:
	   cmp bx,0x1
	   jnz Checktyp7
       xor ebx,ebx
	   mov edx,[eax+0x2D9A8]
	   xor edx,0xAE1CDB23
	   mov bx,[eax+esi+0x1C+0x22DD8]
	   xor bx,0xCE43
	   add edx,ebx
	   xor edx,0xAE1CDB23
	   mov [eax+0x2D9A8],edx
	   jmp NotFound

	   //
	   Checktyp7:
	   cmp bx,0x34
	   jnz Checktyp8
       xor ebx,ebx
	   mov edx,[eax+0x2DB10]
	   xor edx,0xAE1CDB23
	   mov bx,[eax+esi+0x1C+0x22DD8]
	   xor bx,0xCE43
	   add edx,ebx
	   xor edx,0xAE1CDB23
	   mov [eax+0x2DB10],edx
	   jmp NotFound

	   //
	   Checktyp8:
	   cmp bx,0x89
	   jnz Checktyp9
       xor ebx,ebx
	   mov edx,[eax+0x2DA98]
	   xor edx,0xAE1CDB23
	   mov bx,[eax+esi+0x1C+0x22DD8]
	   xor bx,0xCE43
	   add edx,ebx
	   xor edx,0xAE1CDB23
	   mov [eax+0x2DA98],edx
	   jmp NotFound

	   //
	   Checktyp9:
	   cmp bx,0x88
	   jnz Checktyp10
	   xor ebx,ebx
	   mov edx,[eax+0x2DA48]
	   xor edx,0xAE1CDB23
	   mov bx,[eax+esi+0x1C+0x22DD8]
	   xor bx,0xCE43
	   add edx,ebx
	   xor edx,0xAE1CDB23
	   mov [eax+0x2DA48],edx
	   jmp NotFound

	   //
	   Checktyp10:
	   cmp bx,0xA
	   jnz Checktyp11
	   xor ebx,ebx
       xor edx,edx
	   mov dx,[eax+0x2DB88]
	   mov bx,[eax+esi+0x1C+0x22DD8]
	   xor bx,0xCE43
	   add edx,ebx
	   mov [eax+0x2DB88],dx
	   //
	   xor ebx,ebx
       xor edx,edx
	   mov dx,[eax+0x2DB8A]
	   mov bx,[eax+esi+0x1C+0x22DD8]
	   xor bx,0xCE43
	   add edx,ebx
	   mov [eax+0x2DB8A],dx
       jmp NotFound

	   //

	   //
	   Checktyp11:
	   cmp bx,0x9
	   jnz MauPhanTram
       push ecx
	   mov bx,[eax+esi+0x1C+0x22DD8]
	   xor bx,0xCE43



       pop ecx
	   jmp NotFound

	   MauPhanTram:  //
		cmp bx,0x2F
		jnz en_eff_where_attack_damage
		push ecx
		xor ebx,ebx
		mov bx,[eax+0x22DD8+esi+0x1C]
		xor bx,0xCE43
		push ebx
		xor ebx,ebx
		mov bx,[eax+0x22DD8+esi+0x1A]
		xor bx,0xCE43
		push ebx
		mov ecx,0x111100C
		mov eax,0x006029F0
		call eax
        pop ecx
		jmp NotFound

		en_eff_where_attack_damage:
		cmp bx,0x3  //Tang Chinh Xac
		jnz enChinhxac
		push ecx
		xor ebx,ebx
		mov bx,[eax+0x22DD8+esi+0x1C]
		xor ax,0xCE43
		push ebx
		xor ebx,ebx
		mov bx,[eax+0x22DD8+esi+0x1A]
		xor bx,0xCE43
		push ebx
		mov ecx,0x111100C
		mov eax,0x00601FC0
		call eax
		pop ecx
		jmp NotFound

		enChinhxac:  //chinh xac khi cong
		cmp bx,0x8A
		jnz enSucSatthuong
		push ecx
		xor ebx,ebx
		mov bx,[eax+0x22DD8+esi+0x1C]
		xor ax,0xCE43
		push ebx
		xor ebx,ebx
		mov bx,[eax+0x22DD8+esi+0x1A]
		xor bx,0xCE43
		push ebx
		mov ecx,0x111100C
		mov eax,0x00602530
		call eax
		pop ecx
		jmp NotFound

		enSucSatthuong:   //Suc Sat thuong tang %
		cmp bx,0xF
		jnz SucSTKhiCong
		push ecx
		xor ebx,ebx
		mov bx,[eax+0x22DD8+esi+0x1C]
		xor ax,0xCE43
		push ebx
		xor ebx,ebx
		mov bx,[eax+0x22DD8+esi+0x1A]
		xor bx,0xCE43
		push ebx
		mov ecx,0x111100C
		mov eax,0x00602220
		call eax
		pop ecx
		jmp NotFound

		SucSTKhiCong:  //
		cmp bx,0x10
		jnz en_eff_where_max_force
		push ecx
		xor ebx,ebx
		mov bx,[eax+0x22DD8+esi+0x1C]
		xor ax,0xCE43
		push ebx
		xor ebx,ebx
		mov bx,[eax+0x22DD8+esi+0x1A]
		xor bx,0xCE43
		push ebx
		mov ecx,0x111100C
		mov eax,0x006028C0
		call eax
		pop ecx
		jmp NotFound

        en_eff_where_max_force:    //Tang noi cong %
		cmp bx,0x30
		jnz NotFound
		push ecx
		xor ebx,ebx
		mov bx,[eax+0x22DD8+esi+0x1C]
		xor ax,0xCE43
		push ebx
		xor ebx,ebx
		mov bx,[eax+0x22DD8+esi+0x1A]
		xor bx,0xCE43
		push ebx
		mov ecx,0x111100C
		mov eax,0x00602B30
		call eax
        pop ecx
        jmp NotFound

	   //
	   NotFound:
       pop esi
	   add esi,0x06
       cmp esi,0x12
	   jz NotInc
	   jmp LoopRun2
	   NotInc:
	   add ecx,0x90
	   cmp ecx,0x2D0
	   jz Outloop
       jmp LoopRun

       Outloop:
	   popad
	/*pushad
	xor eax,eax
	xor ecx,ecx
	xor ebx,ebx
	mov ecx,0x0
	BackCheckOtherRelicsItem:
    xor ebx,ebx
	push ecx
	imul ecx,0x90
    BackCheckOtherOption:
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx]
	xor ax,0xCE43
	test eax,eax
	jz NotFoundValue2
    pushad
	cmp ax,0x30 //Tang Noi Cong
	jnz en_eff_where_avoid_rate
	xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx+0x2]
	xor ax,0xCE43
	push eax
	xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx]
	xor ax,0xCE43
	push eax
	mov ecx,edi
	mov eax,0x00602B30
	call eax
	jmp NotFoundValue


	en_eff_where_avoid_rate:    //Tang Speed
	cmp ax,0x3D
	jnz en_eff_where_attack_damage
    xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx+0x2]
	xor ax,0xCE43
	push eax
	xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx]
	xor ax,0xCE43
	push eax
	mov ecx,edi
	mov eax,0x00602DB0
	call eax
	jmp NotFoundValue

	en_eff_where_attack_damage:
	cmp ax,0x3  //Tang Chinh Xac
	jnz en_eff_where_defence
    xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx+0x2]
	xor ax,0xCE43
	push eax
	xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx]
	xor ax,0xCE43
	push eax
	mov ecx,edi
	mov eax,0x00601FC0
	call eax
	jmp NotFoundValue

	en_eff_where_defence: //Tang Chan Khi
	cmp ax,0x33
	jnz en_eff_where_m_attack_rate
    xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx+0x2]
	xor ax,0xCE43
	push eax
	xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx]
	xor ax,0xCE43
	push eax
	mov ecx,edi
	mov eax,0x006014C0
	call eax
	jmp NotFoundValue

	en_eff_where_m_attack_rate: //Tang Can Luc
	cmp ax,0x32
	jnz en_eff_where_m_avoid_rate
    xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx+0x2]
	xor ax,0xCE43
	push eax
	xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx]
	xor ax,0xCE43
	push eax
	mov ecx,edi
	mov eax,0x006012B0
	call eax
	jmp NotFoundValue

	en_eff_where_m_avoid_rate: //Tang Tri Tue
	cmp ax,0x34
	jnz en_eff_where_m_attack_damage
    xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx+0x2]
	xor ax,0xCE43
	push eax
	xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx]
	xor ax,0xCE43
	push eax
	mov ecx,edi
	mov eax,0x006017D0
	call eax
	jmp NotFoundValue

	en_eff_where_m_attack_damage:  //Tang SInh Luc
	cmp ax,0x35
	jnz en_eff_where_m_defence
    xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx+0x2]
	xor ax,0xCE43
	push eax
	xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx]
	xor ax,0xCE43
	push eax
	mov ecx,edi
	mov eax,0x00601AB0
	call eax
	jmp NotFoundValue

	en_eff_where_m_defence:  //Tang Man Tiep
	cmp ax,0x36
	jnz en_eff_where_max_life
    xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx+0x2]
	xor ax,0xCE43
	push eax
	xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx]
	xor ax,0xCE43
	push eax
	mov ecx,edi
	mov eax,0x00601DB0
	call eax
	jmp NotFoundValue

	en_eff_where_max_life:   //Suc Sat thuong tang %
	cmp ax,0xF
	jnz en_eff_where_max_force
    xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx+0x2]
	xor ax,0xCE43
	push eax
	xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx]
	xor ax,0xCE43
	push eax
	mov ecx,edi
	mov eax,0x00602220
	call eax
	jmp NotFoundValue

	en_eff_where_max_force:    //Tang noi cong %
	cmp ax,0x30
	jnz en_eff_where_max_concentration
    xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx+0x2]
	xor ax,0xCE43
	push eax
	xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx]
	xor ax,0xCE43
	push eax
	mov ecx,edi
	mov eax,0x00602B30
	call eax
	jmp NotFoundValue

	en_eff_where_max_concentration:   //Tang Sm %
	cmp ax,0x2F
	jnz en_eff_where_move_speed
    xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx+0x2]
	xor ax,0xCE43
	push eax
	xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx]
	xor ax,0xCE43
	push eax
	mov ecx,edi
	mov eax,0x006029F0
	call eax
	jmp NotFoundValue

	en_eff_where_move_speed://Tang sat thuong toi thieu cua vk
	cmp ax,0x5D
	jnz en_eff_where_weapon_dam
    xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx+0x2]
	xor ax,0xCE43
	push eax
	xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx]
	xor ax,0xCE43
	push eax
	mov ecx,edi
	mov eax,0x00602F80
	call eax
	jmp NotFoundValue

	en_eff_where_weapon_dam: //Tang sat thuong toi da cua vk
	cmp ax,0x5F
	jnz en_eff_where_weapon_min_dam
    xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx+0x2]
	xor ax,0xCE43
	push eax
	xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx]
	xor ax,0xCE43
	push eax
	mov ecx,edi
	mov eax,0x00603040
	call eax
	jmp NotFoundValue

	en_eff_where_weapon_min_dam:  //chinh xac khi cong
	cmp ax,0x8A
	jnz SucSTKhiCong
	xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx+0x2]
	xor ax,0xCE43
	push eax
	xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx]
	xor ax,0xCE43
	push eax
	mov ecx,edi
	mov eax,0x00602530
	call eax
	jmp NotFoundValue

	SucSTKhiCong:  //
	cmp ax,0x10
	jnz MauPhanTram
	xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx+0x2]
	xor ax,0xCE43
	push eax
	xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx]
	xor ax,0xCE43
	push eax
	mov ecx,edi
	mov eax,0x006028C0
	call eax
	jmp NotFoundValue

    MauPhanTram:  //
	cmp ax,0x2F
	jnz NotFoundValue
    xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx+0x2]
	xor ax,0xCE43
	push eax
	xor eax,eax
	mov ax,[0x1107258+0x22DC8+ecx+0x2A+ebx]
	xor ax,0xCE43
	push eax
	mov ecx,edi
	mov eax,0x006029F0
	call eax
	jmp NotFoundValue


	NotFoundValue:
	popad
    NotFoundValue2:
	add ebx,0x6
	cmp ebx,0x23
    jg CheckOtherRelic
    jmp BackCheckOtherOption
	CheckOtherRelic:
	pop ecx
	add ecx,0x1
	cmp ecx,0x4
	jg GetOutCheck
	jmp BackCheckOtherRelicsItem
	GetOutCheck:
	popad   */
	  mov [esi+0x2DA98], eax
	  push 0x00600C60
	  ret
	}
}
__declspec(naked)void DrawIncCloth()
{
__asm
	{
      pushad
	  mov eax,0x00000000
	  mov ebx, [esp+0x60]
	  mov al,[ebx+0x10]
	  xor al,0xC5
	  cmp al,0x01
      jl NotInct
	  mov ecx,[0x01733AC8]
	  push 0xFF000000
	  push 0x1
	  mov eax,[ecx]
	  mov eax,dword ptr[eax+0x58]
	  call eax
	  mov ecx,[0x01733AC8]
	  push 0xFFFFD901
	  mov edx,[ecx]
	  mov eax,[edx+0xC]
      call eax
	  mov ecx,[0x01733AC8]
	  xor eax,eax
	  mov al,[ebx+0x10]
	  mov esi,[ecx]
	  xor eax,0x000000C5
	  push eax
	  push 0x00896854
	  push 0x01
	  push 0x3F800000
	  mov eax,dword ptr[esi+0x44]
	  call eax
	  mov edx,[esp+0x68]
	  mov ecx,edi
	  sub ecx,eax
	  mov eax,[0x01733AC8]
	  add ecx,0x20
	  add edx,0x1E
	  push ecx
	  push edx
	  push eax
	  mov eax,dword ptr[esi+0x30]
	  call eax
	  mov ecx,[0x01733AC8]
	  add esp,0x1C
	  mov edx,[ecx]
	  mov eax,dword ptr[edx+0x38]
	  call eax
	  mov ecx,[0x01733AC8]
	  mov eax,[ecx]
	  mov eax,dword ptr [eax+0x5C]
	  call eax

	  NotInct:
      popad
	  push 0x1
	  mov eax,0x00679CD0
      call eax
	  push 0x00491698
	  ret
	}
}
__declspec(naked)void GetInforInc()
{
__asm
	{
	  pushad
	  mov al,[ebp+0x5]
	  cmp al,0x1
	  jnz CheckRelic
	  xor ecx,ecx
	  mov cl,[ebp+0x4]
	  lea ecx, [ecx+ecx*8]
	  shl ecx,0x4
	  mov edx,[0x010D94A8]
	  //Get Option 1
      xor ebx,ebx
	  mov bx,[ebp+0x1B]
	  xor bx,0xCE43
	  mov [edx+ecx+0x22DF2],bx
	  //Get Value 1
      xor ebx,ebx
	  mov bx,[ebp+0x1D]
	  xor bx,0xCE43
	  mov [edx+ecx+0x22DF2+0x2],bx
      xor ebx,ebx
	  mov bl,[ebp+0x1F]
	  cmp ebx,0x2
	  jl NotCuongDoCloth
      sub ebx,0x1
	  add ebx,0x60
	  mov [edx+ecx+0x22DC8+0x74],bl
      xor ebx,ebx
	  mov bl,[ebp+0x1F]
	  xor bl,0xC5
	  mov [edx+ecx+0x22DF2+0x2+0x2],bl
	  jmp GetOpt2Value
	  NotCuongDoCloth:
      mov byte ptr[edx+ecx+0x22DC8+0x74],0x00
      xor ebx,ebx
	  mov bl,[ebp+0x1F]
	  xor bl,0xC5
	  mov [edx+ecx+0x22DF2+0x2+0x2],bl
	  GetOpt2Value:
	  //Get Option 1
      xor ebx,ebx
	  mov bx,[ebp+0x20]
	  xor bx,0xCE43
	  mov [edx+ecx+0x22DF2+0x6],bx
	  //Get Value 1
	  xor ebx,ebx
	  mov bx,[ebp+0x22]
	  xor bx,0xCE43
	  mov [edx+ecx+0x22DF2+0x8],bx

	 //Get Option 1
	  xor ebx,ebx
	  mov bx,[ebp+0x25]
	  xor bx,0xCE43
	  mov [edx+ecx+0x22DF2+0xC],bx
	  //Get Value 1
	  xor ebx,ebx
	  mov bx,[ebp+0x27]
	  xor bx,0xCE43
	  mov [edx+ecx+0x22DF2+0xE],bx

	  //Get Option 4
	  xor ebx,ebx
	  mov bx,[ebp+0x2A]
	  xor bx,0xCE43
	  mov [edx+ecx+0x22DC8+0x3C],bx
	  //Get Value 4
	  xor ebx,ebx
	  mov bx,[ebp+0x2C]
	  xor bx,0xCE43
	  mov [edx+ecx+0x22DC8+0x3E],bx
	  popad
	  push 0x006B21F7
	  ret

	  CheckRelic:
	  cmp al,0x9
	  jnz WeaponInfor
	  xor ecx,ecx
	  mov cl,[ebp+0x4]
	  lea ecx, [ecx+ecx*8]
	  shl ecx,0x4
	  mov edx,[0x010D94A8]
	  xor ebx,ebx
	  mov bl,[ebp+0x19]
	  xor bl,0xC5
	  mov [edx+ecx+0x22DC8+0x10],bl
	  //Get Option 1
	  xor ebx,ebx
	  mov bx,[ebp+0x1B]
	  xor bx,0xCE43
	  mov [edx+ecx+0x22DF2],bx
	  //Get Value 1
	  xor ebx,ebx
	  mov bx,[ebp+0x1D]
	  xor bx,0xCE43
	  mov [edx+ecx+0x22DF2+0x2],bx

	  xor ebx,ebx
	  mov bl,[ebp+0x1F]
	  call GetTwoValue
	  xor bl,0xC5
	  xor al,0xC5
	  mov [edx+ecx+0x22DC8+0x2E],al
	  mov [edx+ecx+0x22DC8+0x2F],bl

	  //Get Option 2
      xor ebx,ebx
	  mov bx,[ebp+0x20]
	  xor bx,0xCE43
	  mov [edx+ecx+0x22DC8+0x30],bx
	  //Get Value 2
	  xor ebx,ebx
	  mov bx,[ebp+0x22]
	  xor bx,0xCE43
	  mov [edx+ecx+0x22DC8+0x32],bx

	  xor ebx,ebx
	  mov bl,[ebp+0x24]
	  call GetTwoValue
	  xor bl,0xC5
	  xor al,0xC5
	  mov [edx+ecx+0x22DC8+0x34],al
	  mov [edx+ecx+0x22DC8+0x35],bl

	 //Get Option 3
	  xor ebx,ebx
	  mov bx,[ebp+0x25]
	  xor bx,0xCE43
	  mov [edx+ecx+0x22DC8+0x36],bx
	  //Get Value 3
	  xor ebx,ebx
	  mov bx,[ebp+0x27]
	  xor bx,0xCE43
	  mov [edx+ecx+0x22DC8+0x38],bx

	  xor ebx,ebx
	  mov bl,[ebp+0x29]
	  call GetTwoValue
	  xor bl,0xC5
	  xor al,0xC5
	  mov [edx+ecx+0x22DC8+0x3A],al
	  mov [edx+ecx+0x22DC8+0x3B],bl

	  //Get Option 4
	  xor ebx,ebx
	  mov bx,[ebp+0x2A]
	  xor bx,0xCE43
	  mov [edx+ecx+0x22DC8+0x3C],bx
	  //Get Value 4
	  xor ebx,ebx
	  mov bx,[ebp+0x2C]
	  xor bx,0xCE43
	  mov [edx+ecx+0x22DC8+0x3E],bx

	  xor ebx,ebx
	  mov bl,[ebp+0x2E]
	  call GetTwoValue
	  xor bl,0xC5
	  xor al,0xC5
	  mov [edx+ecx+0x22DC8+0x40],al
	  mov [edx+ecx+0x22DC8+0x41],bl

	  //Get Option 5
	  xor ebx,ebx
	  mov bx,[ebp+0x2F]
	  xor bx,0xCE43
	  mov [edx+ecx+0x22DC8+0x42],bx
	  //Get Value 5
	  xor ebx,ebx
	  mov bx,[ebp+0x31]
	  xor bx,0xCE43
	  mov [edx+ecx+0x22DC8+0x44],bx

	  xor ebx,ebx
	  mov bl,[ebp+0x33]
	  call GetTwoValue
	  xor bl,0xC5
	  xor al,0xC5
	  mov [edx+ecx+0x22DC8+0x46],al
	  mov [edx+ecx+0x22DC8+0x47],bl

	  //Get Option 6
	  xor ebx,ebx
	  mov bx,[ebp+0x34]
	  xor bx,0xCE43
	  mov [edx+ecx+0x22DC8+0x48],bx
	  //Get Value 6
	  xor ebx,ebx
	  mov bx,[ebp+0x36]
	  xor bx,0xCE43
	  mov [edx+ecx+0x22DC8+0x4A],bx

	  xor ebx,ebx
	  mov bl,[ebp+0x38]
	  call GetTwoValue
	  xor bl,0xC5
	  xor al,0xC5
	  mov [edx+ecx+0x22DC8+0x4C],al
	  mov [edx+ecx+0x22DC8+0x4D],bl
	  popad
	  push 0x006B21F7
	  ret

	  WeaponInfor:
	  mov al,[ebp+0x1A]
	  cmp al,0xFF
	  jnz Default
	  xor ecx,ecx
	  mov cl,[ebp+0x4]
	  lea ecx, [ecx+ecx*8]
	  shl ecx,0x4
	  mov edx,[0x010D94A8]
	  xor ebx,ebx
	  mov bl,[ebp+0x19]
	  xor bl,0xC5
	  mov [edx+ecx+0x22DC8+0x10],bl
	  //Get Option 1
	  xor ebx,ebx
	  mov bx,[ebp+0x1B]
	  xor bx,0xCE43
	  mov [edx+ecx+0x22DF2],bx
	  //Get Value 1
	  xor ebx,ebx
	  mov bx,[ebp+0x1D]
	  xor bx,0xCE43
	  mov [edx+ecx+0x22DF2+0x2],bx

	  xor ebx,ebx
	  mov bl,[ebp+0x1F]
	  call GetTwoValue
	  xor bl,0xC5
	  xor al,0xC5
	  mov [edx+ecx+0x22DC8+0x2E],al
	  mov [edx+ecx+0x22DC8+0x2F],bl

	  //Get Option 2
      xor ebx,ebx
	  mov bx,[ebp+0x20]
	  xor bx,0xCE43
	  mov [edx+ecx+0x22DC8+0x30],bx
	  //Get Value 2
	  xor ebx,ebx
	  mov bx,[ebp+0x22]
	  xor bx,0xCE43
	  mov [edx+ecx+0x22DC8+0x32],bx

	  xor ebx,ebx
	  mov bl,[ebp+0x24]
	  call GetTwoValue
	  xor bl,0xC5
	  xor al,0xC5
	  mov [edx+ecx+0x22DC8+0x34],al
	  mov [edx+ecx+0x22DC8+0x35],bl

	 //Get Option 3
	  xor ebx,ebx
	  mov bx,[ebp+0x25]
	  xor bx,0xCE43
	  mov [edx+ecx+0x22DC8+0x36],bx
	  //Get Value 3
	  xor ebx,ebx
	  mov bx,[ebp+0x27]
	  xor bx,0xCE43
	  mov [edx+ecx+0x22DC8+0x38],bx

	  xor ebx,ebx
	  mov bl,[ebp+0x29]
	  call GetTwoValue
	  xor bl,0xC5
	  xor al,0xC5
	  mov [edx+ecx+0x22DC8+0x3A],al
	  mov [edx+ecx+0x22DC8+0x3B],bl

	  //Get Option 4
	  xor ebx,ebx
	  mov bx,[ebp+0x2A]
	  xor bx,0xCE43
	  mov [edx+ecx+0x22DC8+0x3C],bx
	  //Get Value 4
	  xor ebx,ebx
	  mov bx,[ebp+0x2C]
	  xor bx,0xCE43
	  mov [edx+ecx+0x22DC8+0x3E],bx

	  xor ebx,ebx
	  mov bl,[ebp+0x2E]
	  call GetTwoValue
	  xor bl,0xC5
	  xor al,0xC5
	  mov [edx+ecx+0x22DC8+0x40],al
	  mov [edx+ecx+0x22DC8+0x41],bl

	  //Get Option 5
	  xor ebx,ebx
	  mov bx,[ebp+0x2F]
	  xor bx,0xCE43
	  mov [edx+ecx+0x22DC8+0x42],bx
	  //Get Value 5
	  xor ebx,ebx
	  mov bx,[ebp+0x31]
	  xor bx,0xCE43
	  mov [edx+ecx+0x22DC8+0x44],bx

	  xor ebx,ebx
	  mov bl,[ebp+0x33]
	  call GetTwoValue
	  xor bl,0xC5
	  xor al,0xC5
	  mov [edx+ecx+0x22DC8+0x46],al
	  mov [edx+ecx+0x22DC8+0x47],bl

	  //Get Option 6
	  xor ebx,ebx
	  mov bx,[ebp+0x34]
	  xor bx,0xCE43
	  mov [edx+ecx+0x22DC8+0x48],bx
	  //Get Value 6
	  xor ebx,ebx
	  mov bx,[ebp+0x36]
	  xor bx,0xCE43
	  mov [edx+ecx+0x22DC8+0x4A],bx

	  xor ebx,ebx
	  mov bl,[ebp+0x38]
	  call GetTwoValue
	  xor bl,0xC5
	  xor al,0xC5
	  mov [edx+ecx+0x22DC8+0x4C],al
	  mov [edx+ecx+0x22DC8+0x4D],bl
	  popad
	  push 0x006B21F7
	  ret

      Default:
	  popad
	  mov     al, [ebp+0x3]
	  cmp     al, 0xA
	  push 0x006ACB64
	  ret

	  GetTwoValue:
	  cmp ebx,0x10
	  jge Uprade2
			mov eax,ebx
			mov ebx,0x00
			ret
			Uprade2:
			cmp ebx, 0x20
			jge Uprade3
			sub ebx,0x10
			mov eax,ebx
			mov ebx,0x01
			ret
                Uprade3 :
			cmp ebx, 0x30
                jge Uprade4
			sub ebx,0x20
			mov eax,ebx
			mov ebx,0x02
			ret

                Uprade4 :
			cmp ebx, 0x40
                jge Uprade5
			sub ebx,0x30
			mov eax,ebx
			mov ebx,0x03
			ret

                Uprade5 :
			cmp ebx, 0x50
				jge Uprade6
			sub ebx,0x40
			mov eax,ebx
			mov ebx,0x04
			ret

                Uprade6 :
			cmp ebx, 0x60
                jge Uprade7
			sub ebx,0x50
			mov eax,ebx
			mov ebx,0x05
			ret

                Uprade7 :
			cmp ebx, 0x70
				jge Uprade8
			sub ebx,0x60
			mov eax,ebx
			mov ebx,0x06
			ret

                Uprade8 :
			cmp ebx, 0x80
                jge Uprade9
			sub ebx,0x70
			mov eax,ebx
			mov ebx,0x07
			ret
				Uprade9 :
			cmp ebx, 0x90
				jge Uprade10
			sub ebx,0x80
			mov eax,ebx
			mov ebx,0x08
			ret

				Uprade10 :
			cmp ebx, 0xA0
			jge Uprade11
			sub ebx,0x90
			mov eax,ebx
			mov ebx,0x9
			ret

			Uprade11 :
			sub ebx,0xA0
			mov eax,ebx
			mov ebx,0xA
			ret

	}
}
__declspec(naked)void GetInforSort()
{
__asm
	{
	  pushad
	  xor ecx,ecx
	  add ecx,0x19
	  lea eax,[ebp+0x6]
	  LooBack:
	  xor ebx,ebx
	  mov bl,[eax+0x1]
	  cmp bl,0x1
	  jnz NotCloth
	  mov bl,[eax+0x12]
	  cmp bl,0x1
	  jl NotCloth
	  //

	  push ecx
	  lea ecx, [ecx+ecx*8]
	  shl ecx,0x4
	  mov edx,[0x010D94A8]
      xor bl,0xC5
	  mov [edx+ecx+0x22DD8],bl
      xor ebx,ebx
	  mov bl,[eax+0x13]
	  mov [edx+ecx+0x22DC8+0x28],bl
	  //Get Option 1
	  xor ebx,ebx
	  mov bx,[eax+0x17]
	  xor bx,0xCE43
	  mov [edx+ecx+0x22DF2],bx
	  //Get Value 1
      xor ebx,ebx
	  mov bx,[eax+0x19]
	  xor bx,0xCE43
	  mov [edx+ecx+0x22DF2+0x2],bx
	  //Cuong Do
      xor ebx,ebx
	  mov bl,[eax+0x1B]
      cmp ebx,0x2
	  jl NotCuongDoCloth
      sub ebx,0x1
	  add ebx,0x60
	  mov [edx+ecx+0x22DC8+0x74],bl
	  NotCuongDoCloth:
      xor ebx,ebx
	  mov bl,[eax+0x1B]
	  xor bl,0xC5
	  mov [edx+ecx+0x22DC8+0x2E],bl

	  //Get Option 1
      xor ebx,ebx
	  mov bx,[eax+0x1C]
	  xor bx,0xCE43
	  mov [edx+ecx+0x22DF2+0x6],bx
	  //Get Value 1
	  xor ebx,ebx
	  mov bx,[eax+0x1E]
	  xor bx,0xCE43
	  mov [edx+ecx+0x22DF2+0x8],bx

	 //Get Option 1
	  xor ebx,ebx
	  mov bx,[eax+0x21]
	  xor bx,0xCE43
	  mov [edx+ecx+0x22DF2+0xC],bx
	  //Get Value 1
	  xor ebx,ebx
	  mov bx,[eax+0x23]
	  xor bx,0xCE43
	  mov [edx+ecx+0x22DF2+0xE],bx

      //Get Option 1
	  xor ebx,ebx
	  mov bx,[eax+0x26]
	  xor bx,0xCE43
	  mov [0x1107258+ecx+0x22DC8+0x3C],bx
	  //Get Value 4
	  xor ebx,ebx
	  mov bx,[eax+0x28]
	  xor bx,0xCE43
	  mov [0x1107258+ecx+0x22DC8+0x3E],bx

      //Get Option 1
	  xor ebx,ebx
	  mov bx,[eax+0x2B]
	  xor bx,0xCE43
	  mov [0x1107258+ecx+0x22DC8+0x42],bx
	  //Get Value 4
	  xor ebx,ebx
	  mov bx,[eax+0x2D]
	  xor bx,0xCE43
	  mov [0x1107258+ecx+0x22DC8+0x44],bx
      mov byte ptr [0x1107258+ecx+0x22DC8+0x46],0xC5

	  pop ecx
      jmp CheckOptStoreAgain
	  //
	  NotCloth:
	  cmp bl,0x9
	  jz AddOptForRelic
      CheckOptStoreAgain:
      add ecx,0x01
	  lea eax,[eax+0x5A]
	  mov dl,[eax]
	  cmp cl,dl
	  jnz JumOut
	  jmp LooBack
	  JumOut:
	  xor ecx,ecx
	  mov cl,[eax]
	  cmp ecx,0x8C
	  jge EndofSlot
      OutEndofSlot:
	  popad
	  mov eax,0x1
	  push 0x006ACB52
	  ret

	  AddOptForRelic:
	  pushad
	  xor ecx,ecx
	  mov cl,[eax+0x1B]
	  test ecx,ecx
	  jz CheckItemPet
	  xor edx,edx
	  xor ecx,ecx
	  xor ebx,ebx
      BackLoopCheckInceRelic:
	  mov dl,[eax+0x1B+ebx]
	  test edx,edx
	  jz CompelteCheckIncRelic
	  add ecx,0x1
	  add ebx,0x5
	  cmp ebx,0x19
	  jle BackLoopCheckInceRelic
	  CompelteCheckIncRelic:
      xor ebx,ebx
	  mov bl,[eax]
	  lea ebx, [ebx+ebx*8]
	  shl ebx,0x4
	  xor cl,0xC5
      mov [0x1107258+ebx+0x22DC8+0x10],cl
      mov ecx,ebx

	  //Get Option 1
	  xor ebx,ebx
	  mov bx,[eax+0x17]
	  xor bx,0xCE43
	  mov [0x1107258+ecx+0x22DF2],bx
	  //Get Value 1
	  xor ebx,ebx
	  mov bx,[eax+0x19]
	  xor bx,0xCE43
	  mov [0x1107258+ecx+0x22DF2+0x2],bx

	  xor ebx,ebx
	  mov bl,[eax+0x1B]
	  call GetTwoValue
	  xor bl,0xC5
	  xor dl,0xC5
	  mov [0x1107258+ecx+0x22DC8+0x2E],dl
	  mov [0x1107258+ecx+0x22DC8+0x2F],bl

	  //Get Option 2
      xor ebx,ebx
	  mov bx,[eax+0x1C]
	  xor bx,0xCE43
	  mov [0x1107258+ecx+0x22DC8+0x30],bx
	  //Get Value 2
	  xor ebx,ebx
	  mov bx,[eax+0x1E]
	  xor bx,0xCE43
	  mov [0x1107258+ecx+0x22DC8+0x32],bx

	  xor ebx,ebx
	  mov bl,[eax+0x20]
	  call GetTwoValue
	  xor bl,0xC5
	  xor dl,0xC5
	  mov [0x1107258+ecx+0x22DC8+0x34],dl
	  mov [0x1107258+ecx+0x22DC8+0x35],bl

	 //Get Option 3
	  xor ebx,ebx
	  mov bx,[eax+0x21]
	  xor bx,0xCE43
	  mov [0x1107258+ecx+0x22DC8+0x36],bx
	  //Get Value 3
	  xor ebx,ebx
	  mov bx,[eax+0x23]
	  xor bx,0xCE43
	  mov [0x1107258+ecx+0x22DC8+0x38],bx

	  xor ebx,ebx
	  mov bl,[eax+0x25]
	  call GetTwoValue
	  xor bl,0xC5
	  xor dl,0xC5
	  mov [0x1107258+ecx+0x22DC8+0x3A],dl
	  mov [0x1107258+ecx+0x22DC8+0x3B],bl

	  //Get Option 4
	  xor ebx,ebx
	  mov bx,[eax+0x26]
	  xor bx,0xCE43
	  mov [0x1107258+ecx+0x22DC8+0x3C],bx
	  //Get Value 4
	  xor ebx,ebx
	  mov bx,[eax+0x28]
	  xor bx,0xCE43
	  mov [0x1107258+ecx+0x22DC8+0x3E],bx

	  xor ebx,ebx
	  mov bl,[eax+0x2A]
	  call GetTwoValue
	  xor bl,0xC5
	  xor dl,0xC5
	  mov [0x1107258+ecx+0x22DC8+0x40],dl
	  mov [0x1107258+ecx+0x22DC8+0x41],bl

	  //Get Option 5
	  xor ebx,ebx
	  mov bx,[eax+0x2B]
	  xor bx,0xCE43
	  mov [0x1107258+ecx+0x22DC8+0x42],bx
	  //Get Value 5
	  xor ebx,ebx
	  mov bx,[eax+0x2D]
	  xor bx,0xCE43
	  mov [0x1107258+ecx+0x22DC8+0x44],bx

	  xor ebx,ebx
	  mov bl,[eax+0x2F]
	  call GetTwoValue
	  xor bl,0xC5
	  xor dl,0xC5
	  mov [0x1107258+ecx+0x22DC8+0x46],dl
	  mov [0x1107258+ecx+0x22DC8+0x47],bl

	  //Get Option 6
	  xor ebx,ebx
	  mov bx,[eax+0x30]
	  xor bx,0xCE43
	  mov [0x1107258+ecx+0x22DC8+0x48],bx
	  //Get Value 6
	  xor ebx,ebx
	  mov bx,[eax+0x32]
	  xor bx,0xCE43
	  mov [0x1107258+ecx+0x22DC8+0x4A],bx

	  xor ebx,ebx
	  mov bl,[eax+0x34]
	  call GetTwoValue
	  xor bl,0xC5
	  xor dl,0xC5
	  mov [0x1107258+ecx+0x22DC8+0x4C],dl
	  mov [0x1107258+ecx+0x22DC8+0x4D],bl
      NotHaveValueForRelic:
	  popad
      jmp CheckOptStoreAgain


	  GetTwoValue:
	  cmp ebx,0x00
	  jnz BeginCheckOpt
	  mov edx,0x00
	  mov ebx,0x00
	  ret
      BeginCheckOpt:
	  cmp ebx,0x10
	  jge Uprade2
			mov edx,ebx
			mov ebx,0x00
			ret
			Uprade2:
			cmp ebx, 0x20
			jge Uprade3
			sub ebx,0x10
			mov edx,ebx
			mov ebx,0x01
			ret
                Uprade3 :
			cmp ebx, 0x30
                jge Uprade4
			sub ebx,0x20
			mov edx,ebx
			mov ebx,0x02
			ret

                Uprade4 :
			cmp ebx, 0x40
                jge Uprade5
			sub ebx,0x30
			mov edx,ebx
			mov ebx,0x03
			ret

                Uprade5 :
			cmp ebx, 0x50
				jge Uprade6
			sub ebx,0x40
			mov edx,ebx
			mov ebx,0x04
			ret

                Uprade6 :
			cmp ebx, 0x60
                jge Uprade7
			sub ebx,0x50
			mov edx,ebx
			mov ebx,0x05
			ret

                Uprade7 :
			cmp ebx, 0x70
				jge Uprade8
			sub ebx,0x60
			mov edx,ebx
			mov ebx,0x06
			ret

                Uprade8 :
			cmp ebx, 0x80
                jge Uprade9
			sub ebx,0x70
			mov edx,ebx
			mov ebx,0x07
			ret
				Uprade9 :
			cmp ebx, 0x90
				jge Uprade10
			sub ebx,0x80
			mov edx,ebx
			mov ebx,0x08
			ret

				Uprade10 :
			cmp ebx, 0xA0
			jge Uprade11
			sub ebx,0x90
			mov edx,ebx
			mov ebx,0x9
			ret

			Uprade11 :
			sub ebx,0xA0
			mov edx,ebx
			mov ebx,0xA
			ret

			EndofSlot:
            xor ecx,ecx
			mov cl,[eax]
			cmp ecx,0x94
			jge NotNewRelic
            EndofSlot22:
			add eax,0x5A
			xor ecx,ecx
			mov cl,[eax]
            NotNewRelic:
			cmp ecx,0x94
			jz AddOptItemPet94
			cmp ecx,0x95
			jnz OutEndofSlot
			xor ebx,ebx
			mov bx,[eax+0x3]
			sub ebx,0x1DF
			xor bl,0xC5
			mov [0x1107258+0x22DC8+0x53d0+0x10],bl
			jmp OutEndofSlot
            AddOptItemPet94:
			imul ecx,0x90
			xor ebx,ebx
			mov bx,[eax+0x17]
			xor bx,0xCE43
			mov [0x1107258+ecx+0x22DF2],bx
			  //Get Value 1
			xor ebx,ebx
			mov bx,[eax+0x19]
			xor bx,0xCE43
			mov [0x1107258+ecx+0x22DF2+0x2],bx
            jmp EndofSlot22

			CheckItemPet:
			xor ecx,ecx
			mov cl,[eax+0x17]
			test ecx,ecx
			jz NotItemForPet
			xor edx,edx
            mov dl,[eax]
			imul edx,0x90
            xor ebx,ebx
			mov bx,[eax+0x17]
			xor bx,0xCE43
			mov [0x1107258+edx+0x22DF2],bx
			  //Get Value 1
			xor ebx,ebx
			mov bx,[eax+0x19]
			xor bx,0xCE43
			mov [0x1107258+edx+0x22DF2+0x2],bx
            NotItemForPet:
            jmp NotHaveValueForRelic
	}
}
__declspec(naked)void GetEffectLoadGame()
{
__asm
	{
	  pushad
	  xor ecx,ecx
      Loopback:
      push ecx
	  lea ecx,[ecx+ecx*8]
	  shl ecx,0x4
	  mov eax,[0x010D94A8]
      xor edx,edx
	  mov dl,[eax+ecx+0x22DD8]
	  xor dl,0xC5
      cmp dl,0x05
	  jl NotFound
		mov dl,[eax+ecx+0x22DDF]
        xor dl,0x1F
		cmp dl,0x00
		jnz CheckType3
		mov dl,[eax+ecx+0x22DD8]
		xor dl,0xC5
		cmp dl,0x05
		jl NotFound
		cmp dl,0x08
		jl EffectLow
		//EffectHigh
		cmp dl,0x8
		jnz CheckInc11
		mov edi,0x3E9
		jmp InsertEffect
        //
		CheckInc11:
		cmp dl,0x9
		jnz CheckInc12
		mov edi,0x3F3
		jmp InsertEffect
        //
		CheckInc12:
		cmp dl,0xA
		jnz CheckInc13
		mov edi,0x3FD
		jmp InsertEffect
		//
		CheckInc13:
		cmp dl,0xB
		jnz CheckInc14
		mov edi,0x407
		jmp InsertEffect
		//
		CheckInc14:
		cmp dl,0xC
		jnz CheckInc15
		mov edi,0x411
		jmp InsertEffect
		//
		CheckInc15:
		cmp dl,0xD
		jnz CheckInc16
		mov edi,0x41B
		jmp InsertEffect
		//
		CheckInc16:
		cmp dl,0xE
		jnz CheckInc17
		mov edi,0x425
		jmp InsertEffect
		//
		CheckInc17:
		cmp dl,0xF
		jnz NotFound
		mov edi,0x42F
		jmp InsertEffect
        //End


		EffectLow:
		mov edi,0x3EA
        jmp InsertEffect
		//
		CheckType3:
		cmp dl,0x01
		jnz CheckType4
		mov dl,[eax+ecx+0x22DD8]
		xor dl,0xC5
		cmp dl,0x05
		jl NotFound
		cmp dl,0x08
		jl EffectLow1
		//EffectHigh
		cmp dl,0x8
		jnz CheckInc111
		mov edi,0x515
		jmp InsertEffect
        //
		CheckInc111:
		cmp dl,0x9
		jnz CheckInc121
		mov edi,0x51F
		jmp InsertEffect
        //
		CheckInc121:
		cmp dl,0xA
		jnz CheckInc131
		mov edi,0x529
		jmp InsertEffect
		//
		CheckInc131:
		cmp dl,0xB
		jnz CheckInc141
		mov edi,0x533
		jmp InsertEffect
		//
		CheckInc141:
		cmp dl,0xC
		jnz CheckInc151
		mov edi,0x53D
		jmp InsertEffect
		//
		CheckInc151:
		cmp dl,0xD
		jnz CheckInc161
		mov edi,0x547
		jmp InsertEffect
		//
		CheckInc161:
		cmp dl,0xE
		jnz CheckInc171
		mov edi,0x551
		jmp InsertEffect
		//
		CheckInc171:
		cmp dl,0xF
		jnz NotFound
		mov edi,0x55B
		jmp InsertEffect

		EffectLow1:
		mov edi,0x517
		jmp InsertEffect

		CheckType4:
		cmp dl,0x02
		jnz CheckType5
		mov dl,[eax+ecx+0x22DD8]
		xor dl,0xC5
		cmp dl,0x05
		jl NotFound
		cmp dl,0x08
		jl EffectLow11
		//EffectHigh
		cmp dl,0x8
		jnz CheckInc1111
		mov edi,0x516
		jmp InsertEffect
		//
		CheckInc1111:
		cmp dl,0x9
		jnz CheckInc1211
		mov edi,0x520
		jmp InsertEffect
		//
		CheckInc1211:
		cmp dl,0xA
		jnz CheckInc1311
		mov edi,0x52A
		jmp InsertEffect
		//
		CheckInc1311:
		cmp dl,0xB
		jnz CheckInc1411
		mov edi,0x534
		jmp InsertEffect
		//
		CheckInc1411:
		cmp dl,0xC
		jnz CheckInc1511
		mov edi,0x53E
		jmp InsertEffect
		//
		CheckInc1511:
		cmp dl,0xD
		jnz CheckInc1611
		mov edi,0x548
		jmp InsertEffect
		//
		CheckInc1611:
		cmp dl,0xE
		jnz CheckInc1711
		mov edi,0x552
		jmp InsertEffect
		//
		CheckInc1711:
		cmp dl,0xF
		jnz NotFound
		mov edi,0x55C
		jmp InsertEffect

		EffectLow11:
		mov edi,0x518
		jmp InsertEffect

		CheckType5:
		cmp dl,0x03
		jnz CheckType6
		mov dl,[eax+ecx+0x22DD8]
		xor dl,0xC5
		cmp dl,0x05
		jl NotFound
		cmp dl,0x08
		jl EffectLow1211
		//EffectHigh
		cmp dl,0x8
		jnz CheckInc11112
		mov edi,0x579
		jmp InsertEffect
		//
		CheckInc11112:
		cmp dl,0x9
		jnz CheckInc12112
		mov edi,0x583
		jmp InsertEffect
		//
		CheckInc12112:
		cmp dl,0xA
		jnz CheckInc13112
		mov edi,0x58D
		jmp InsertEffect
		//
		CheckInc13112:
		cmp dl,0xB
		jnz CheckInc14112
		mov edi,0x597
		jmp InsertEffect
		//
		CheckInc14112:
		cmp dl,0xC
		jnz CheckInc15112
		mov edi,0x5A1
		jmp InsertEffect
		//
		CheckInc15112:
		cmp dl,0xD
		jnz CheckInc16112
		mov edi,0x5AB
		jmp InsertEffect
		//
		CheckInc16112:
		cmp dl,0xE
		jnz CheckInc17112
		mov edi,0x5B5
		jmp InsertEffect
		//
		CheckInc17112:
		cmp dl,0xF
		jnz NotFound
		mov edi,0x5BF
		jmp InsertEffect

		EffectLow1211:
		mov edi,0x57B
		jmp InsertEffect

		CheckType6:
		cmp dl,0x04
		jnz CheckType7
		mov dl,[eax+ecx+0x22DD8]
		xor dl,0xC5
		cmp dl,0x05
		jl NotFound
		cmp dl,0x08
		jl EffectLow12112
		//EffectHigh
		cmp dl,0x8
		jnz CheckInc111121
		mov edi,0x57A
		jmp InsertEffect
        //
		CheckInc111121:
		cmp dl,0x9
		jnz CheckInc121121
		mov edi,0x584
		jmp InsertEffect
		//
		CheckInc121121:
		cmp dl,0xA
		jnz CheckInc131121
		mov edi,0x58E
		jmp InsertEffect
		//
		CheckInc131121:
		cmp dl,0xB
		jnz CheckInc141121
		mov edi,0x598
		jmp InsertEffect
		//
		CheckInc141121:
		cmp dl,0xC
		jnz CheckInc151121
		mov edi,0x5A2
		jmp InsertEffect
		//
		CheckInc151121:
		cmp dl,0xD
		jnz CheckInc161121
		mov edi,0x5AC
		jmp InsertEffect
		//
		CheckInc161121:
		cmp dl,0xE
		jnz CheckInc171121
		mov edi,0x5B6
		jmp InsertEffect
		//
		CheckInc171121:
		cmp dl,0xF
		jnz NotFound
		mov edi,0x5C0
		jmp InsertEffect

		EffectLow12112:
		mov edi,0x57C
		jmp InsertEffect

		CheckType7:
		jmp NotFound
		//
		InsertEffect:
		mov esi,[0x010D94A8]
		push 0xBF800000
		push 0x1
		push 0x0
		lea eax,[esi+0x8500]
		mov ecx,[esi+0x8924]
		push eax
		push edi
		push 0x01571B88
		mov eax,0x007817E0
		call eax
		jmp NotFound

      NotFound:
	  pop ecx
	  add ecx,0x1
	  cmp ecx,0x4
	  jg OutLoop
      jmp Loopback
      OutLoop:
	  popad
	  push 0x00
	  mov eax,0x4923B0
      call eax
	  push 0x006DD517
	  ret
	}
}
__declspec(naked)void PushAddress()
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
      lea edi,[eax+0x14]
	  push 0x0077E801
	  ret
	}
}
__declspec(naked)void TestModel()
{
__asm
	{
	  cmp eax,0x00
	  jz NamMode
	  lea edx,[ecx+0x23F]
	  mov eax,[edx*0x4+0x0160C7B8]
	  push 0x00716640
	  ret

      NamMode:
	  lea edx,[ecx+eax*0x4]
	  mov eax,[edx*0x4+0x0160C7B8]
	  push 0x00716640
	  ret
	}
}
__declspec(naked)void TestModel2()
{
__asm
	{
	  cmp edx,0x00
	  jz NamMode
	  lea ecx,[eax+0x23F]
	  mov edx,[ecx*0x4+0x0160C7B8]
	  push 0x0062EA75
	  ret
	  NamMode:
	  lea ecx,[eax+edx*0x4]
	  mov edx,[ecx*0x4+0x0160C7B8]
	  push 0x0062EA75
	  ret
	}
}
__declspec(naked)void TestModel3()
{
__asm
	{
	  cmp eax,0x00
	  jz NamMode
	  lea edx,[ecx+0x23F]
	  mov eax,[edx*0x4+0x0160C7B8]
	  push 0x00657C49
	  ret
	  NamMode:
	  lea edx, [ecx+eax*0x4]
	  mov eax,[edx*0x4+0x0160C7B8]
	  push 0x00657C49
	  ret
	}
}
__declspec(naked)void TestModel4()
{
__asm
	{
	  cmp edx,0x00
	  jz NamMode
	  lea ecx,[eax+0x23F]
	  mov edx,[ecx*0x4+0x0160C7B8]
	  push 0x0065E656
	  ret
	  NamMode:
	  lea ecx, [eax+edx*0x4]
	  mov edx,[ecx*0x4+0x0160C7B8]
	  push 0x0065E656
	  ret
	}
}
//AddMoreSlot
__declspec(naked)void AddMoreSlot()//004BC585
{
__asm
	{
		pushad
		inc ecx
		cmp ecx,0x18
		jle DefaultLoad
		popad
		cmp ecx,0x18
		jnz NotAddSlotMore
		add ecx,0x73
		NotAddSlotMore:
        inc ecx
		cmp ecx,0x94
		jz OutLoop
		mov ebx,ecx
        imul ebx,0x90
		mov [esp+0x10],ecx
		mov eax,[0x010D94A8]
		mov dx, [ebx+eax+0x22DDC]
		xor dx,0xCE43
		jle J4BC544
		push 0x004BC46D
		ret

		J4BC544:
		push 0x004BC544
        ret

		OutLoop:
		push 0x004BC59F
		mov eax,[0x010D94A8]
		ret

        DefaultLoad:
		popad
		 add     edi, 0x8
		 inc     ecx
		 add     ebx, 0x90
		 mov eax,[0x010D94A8]
		push 0x004BC58F
		ret

	}
}
__declspec(naked)void AddMoreSlot4()//004BC544
{
__asm
	{
		nop
		nop
		nop
		nop
		nop
		pushad
		cmp ecx,0x8C
		jl DefaultLoad
		sub ecx,0x8C
		xor edx,edx
		mov edx,[eax+ecx*0x8+0x4]
		mov edi,[esi+0x18]
		lea edx,[edx+edi-0x1]
		push edx
		mov edx,[eax+ecx*0x8]
		mov edi,[esi+0x14]
		lea edx,[edx+edi-0x1]
		push edx
		lea ecx,[esi+0x208]
		mov eax,0x007E00F0
		call eax
        popad
		push 0x004BC57C
		ret

		DefaultLoad:
		popad
		cmp edi,0x00896FD8
		push 0x004BC54A
		ret
	}
}
__declspec(naked)void AddMoreSlot3()//004BC46D
{
__asm
	{
		nop
		nop
		nop
		nop
		nop
		pushad
		cmp ecx,0x8C
		jl DefaultLoad
		sub ecx,0x8C
		xor edx,edx
		mov edx,[eax+ecx*0x8+0x4]
		mov edi,[esi+0x18]
		lea edx,[edx+edi-0x1]
		push edx
		mov edx,[eax+ecx*0x8]
		mov edi,[esi+0x14]
		lea edx,[edx+edi-0x1]
		push edx
		lea ecx,[esi+0x284]
		mov eax,0x007E00F0
		call eax
		popad
		mov eax,[0x010D94A8]
		push 0x004BC506
		ret

		DefaultLoad:
		popad
        mov eax,[0x010D94A8]
		xor edx,edx
        mov dl,[ecx+0x004BC62C]
		push 0x004BC475
		ret

	}
}
__declspec(naked)void AddMoreSlot1() //004BC517
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  pushad
	  cmp ebx,0x4EC0
	  jl Default
	  push 0x0
	  push ebp
	  push 0x0
	  mov ecx,eax
	  mov eax,[0x010D94A8]
	  lea eax,[eax+ebx+0x22DC8]
	  push eax
	  //get point X
	  mov eax,ecx
	  mov ebx,[esp+0x28]
      sub ebx,0x8C
	  mov ecx,[eax+ebx*8+0x4]
	  mov edx,[esi+0x18]
	  add edx,ecx
	  push edx
	  mov edx,[esi+0x14]
	  mov ecx,[eax+ebx*0x8]
	  add ecx,edx
      mov ebx,[esp+0x2C]
      imul ebx,0x90
	  push ecx
	  push 0x1
	  mov ecx,0x01615E90
	  mov ecx,[ecx]
	  mov eax,0x004913F0
	  call eax
      popad
	  push 0x004BC542
      ret
	  Default:
	  popad
	  mov eax,[0x010D94A8]
	  mov ecx, [edi+0x4]
	  mov edx, [esi+0x18]
	  push 0x004BC51D
	  ret
	}
}
__declspec(naked)void ShowInforHover() //004BC87C
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  pushad
	  cmp eax,0x8C
	  jl Default
      sub eax,0x8C
	  mov edi,[edx+eax*0x8]
	  mov ecx,[esi+0x14]
	  add ecx,edi
	  cmp ebp,ecx
	  jle J004BC886
	  add ecx,0x20
	  cmp ebp,ecx
	  jge J004BC886
	  mov ecx,[esi+0x18]
	  mov edi,[edx+eax*0x8+0x4]
	  add ecx,edi
	  mov edi,[ebx+0x8]
	  cmp edi,ecx
	  jle J004BC886
	  add ecx,0x20
	  cmp edi,ecx
	  jl J4BC8BA
	  popad
	  push 0x004BC8A4
	  ret
	  J4BC8BA:
	  popad
	  push 0x004BC8BA
	  ret


	  J004BC886:
	  popad
	  push 0x004BC8A4
      ret


	  Default:
	  popad
	  mov edi, [ecx-0x4]
	  mov edx, [esi+0x14]
	  push 0x004BC882
	  ret
	}
}
__declspec(naked)void ShowInforHover3() //004BC8C2
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  cmp eax,0x8C
	  jl Default
	  sub eax,0x8C
	  //1
	  mov edi,[edx+eax*0x8]
	  mov ebx,[esi+0x14]
	  lea edi,[edi+ebx-0x1]
	  mov [ecx],edi
	  //
	  //2
	  mov edi,[edx+eax*0x8+0x4]
	  mov ebx,[esi+0x18]
	  lea edi,[edi+ebx-0x1]
	  mov [ecx+0x4],edi
	  //
	  //3
	  mov edi,[edx+eax*0x8]
	  mov ebx,[esi+0x14]
	  lea ebx,[edi+ebx+0x1D]
	  pop edi
      mov [ecx+0x8],ebx
	  //
	  //4
	  mov ebx,[esi+0x18]
	  mov esi,[edx+eax*0x8+0x4]
	  lea edx,[esi+ebx+0x1D]
	  pop esi
	  add eax,0x8C
	  push 0x004BC904
      ret
	  //

	  Default:
	  mov edi,[eax*8+0x00896F98]
	  push 0x004BC8C9
	  ret
	}
}
__declspec(naked)void ShowInforHover2() //004BC8A4
{
__asm
	{
	  add ecx, 0x8
	  inc eax
	  cmp eax,0x19
	  jl Default
	  cmp eax,0x19
	  jnz NotAddSlot
      add eax,0x73
	  NotAddSlot:
	  cmp eax,0x95
	  jz OutloopMoreSlot
	  push 0x004BC87C
      ret
	  OutloopMoreSlot:
	  push 0x004BC8B0
      ret

	  Default:
	  cmp ecx,0x00897064
	  push 0x004BC8AE
	  ret
	}
}
__declspec(naked)void EquipItemRelic() //0048C71B
{
__asm
	{
	inc eax
	add edx,0x90
	cmp eax,ecx
	jl CheckLoop
	mov edi,0x1107258
	lea edx,[edi+0x27C88+0x14]
	mov eax,0x8C
	BackloopChecknewslot:
	mov di,[edx]
	xor di,0xCE43
	jle loc_48C728
	inc eax
	add edx,0x90
	cmp eax,0x94
	jl BackloopChecknewslot
	push 0x0048C726
    ret

    CheckLoop:
	push 0x0048C711
	ret

	loc_48C728:
	push 0x0048C728
	ret

	}
}
__declspec(naked)void EquipItemRelic2() //004BCA20 Lenght 9
{
__asm
	{
	cmp edx,0x18
	jg CheckNewSlot
	push edx
	mov eax,0x0048DE20
	call eax
	push 0x004BCA2F
    ret
	CheckNewSlot:
	cmp edx,0x8C
	jl DontAccept
	cmp edx,0x94
	jg DontAccept
    push edx
	mov eax,0x0048DE20
	call eax
	push 0x004BCA2F
    ret

	DontAccept:
	push 0x004BCCD3
	ret

	}
}
__declspec(naked)void AddBonusNewSlot() //006189B3
{
__asm
	{
	cmp edi,0x4EC0
	jge NotAddMoreSlot
	mov [esp+0x18],eax
	add eax,0xB
	cmp eax,0x13
    mov [esp+0x10],edi
	jle loc_61840C
	cmp eax,0x14
	jnz NotAddMoreSlot
	mov eax,0x1
	mov dword ptr [esp+0x10],0x4EC0
	mov [esp+0x18],eax
	mov ecx,[esp+0x10]
	lea ecx,[ecx+0x1107258+0x22DC8]
	mov eax,0x619CE0
	call eax
	test ax,ax
	jle loc_61899E
	push 0x00618478
	ret

	loc_61899E:
	push 0x0061899E
	ret

	NotAddMoreSlot:
	mov [esp+0x18],eax
    mov [esp+0x10],edi
	add eax,0x8C
    cmp eax,0x94
	jle loc_61840C312
	push 0x006189C7
    ret

	loc_61840C:
	push 0x0061840C
	ret

	loc_61840C312:
	mov ecx,[esp+0x10]
	lea ecx,[ecx+0x1107258+0x22DC8]
	mov eax,0x619CE0
	call eax
	test ax,ax
	jle loc_61899E
	push 0x00618478
	ret


	}
}
__declspec(naked)void GetBaseBonusFromItemNewSlot() //006138CB
{
__asm
	{
	cmp edx,0x4EC0
	jge NotAddMoreSlot
	mov [esp+0x24],eax
	add eax,0xB
	cmp eax,0x13
    mov [esp+0x1C],edx
	jle loc_61840C
	cmp eax,0x14
	jnz NotAddMoreSlot
	mov eax,0x1
	mov dword ptr [esp+0x1C],0x4EC0
	mov [esp+0x24],eax
	mov eax,[esp+0x1C]
	mov ax,[eax+0x1107258+0x22DDC]
	xor ax,0xCE43
	test ax,ax
	jle loc_6138BC
	push 0x0061361A
	ret
	NotAddMoreSlot:
	mov [esp+0x24],eax
    mov [esp+0x1C],edx
	add eax,0x8C
	cmp eax,0x95
	jl loc_61840C22
	push 0x006138DF
    ret

	loc_61840C:
	push 0x006135AE
	ret

	loc_6138BC:
	push 0x006138BC
    ret

	loc_61840C22:
    mov eax,[esp+0x1C]
	mov ax,[eax+0x1107258+0x22DDC]
	xor ax,0xCE43
	test ax,ax
	jle loc_6138BC
	push 0x0061361A
	ret


	}
}
//Add More LEvel
__declspec(naked)void insertValueLevel2()  //0062784B
{
__asm
	{
	  cmp eax,0x15
	  jl Default
	  sub eax,0x15
	  mov ecx,[eax*0x4+0x010D7B9C]
	  push 0x004F6F61
      ret
	  Default:
	  mov ecx,[eax*0x4+0x010D7B24]
	  push 0x004F6F61
	  ret
	}
}
__declspec(naked)void insertValueLevel3()  //0062784B
{
__asm
	{
	  cmp ecx,0x15
	  jl Default
	  sub ecx,0x15
	  mov ecx,[ecx*0x4+0x010D7B9C]
	  push 0x004B832B
      ret
	  Default:
	  mov ecx,[ecx*0x4+0x010D7B24]
	  push 0x004B832B
	  ret
	}
}
__declspec(naked)void insertValueLevel4()  //0062784B
{
__asm
	{
	  cmp ecx,0x15
	  jl Default
	  sub ecx,0x15
	  mov ecx,[ecx*0x4+0x010D7B9C]
	  push 0x004B832B
      ret
	  Default:
	  mov ecx,[ecx*0x4+0x010D7B24]
	  push 0x004B832B
	  ret
	}
}

__declspec(naked)void insert1stringdtname()  // 004054E2
{
__asm
	{
      push eax
	  push 0x262
	  push 0x1A
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  mov [0x010D7B9C],eax

	  push 0x263
	  push 0x1A
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  mov [0x010D7BA0],eax

      push 0x264
	  push 0x1A
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  mov [0x010D7BA4],eax
      pop eax
      push 0x14D
	  push 0x004054E7
      ret
	}
}
__declspec(naked)void insertValueLevel()  //0062784B
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
      lea ebx,[ecx+0x1C]
	  push 0x00627850
	  ret
	}
}
__declspec(naked)void insert16A098C01()  //00437CF7,00438486
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  lea edx,[ecx+0x4]
	  mov edx,[esi+edx]
	  push 0x00437CFD
	  ret
	}
}
__declspec(naked)void insert16A098C02()  //00437CF7,00438486 ***
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  lea edx,[ecx+0x4]
	  mov edx,[esi+edx]
	  push 0x0043848C
	  ret
	}
}
__declspec(naked)void insert16A098C2()  //00464774    edx
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  lea edx,[edx+0x4]
	  mov eax,[esi+edx]
	  push 0x0046477A
	  ret
	}
}
__declspec(naked)void insert16A098C3()  //00467DE0  edx
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  lea edx,[edx+0x4]
	  mov eax,[ebp+edx]
	  push 0x00467DE6
	  ret
	}
}
__declspec(naked)void insert16A098C4()  //0047E09A
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  lea ecx,[ecx+0x4]
	  mov esi,[eax+ecx]
	  mov ecx,0x10
	  push 0x0047E0A0
	  ret
	}
}
__declspec(naked)void insert16A098C5()  //004C94D5
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  lea ecx,[ecx+0x4]
	  mov ecx,[eax*0x8+ecx]
	  push 0x004C94DC
	  ret
	}
}
__declspec(naked)void insert16A098C601()  //004ED856,004EDE77,004EEB42 ***
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  lea ecx,[ecx+0x4]
	  mov eax,[eax+ecx]
      mov ecx,0x10
	  push 0x004ED85C
	  ret
	}
}
__declspec(naked)void insert16A098C602()  //004ED856,004EDE77,004EEB42 ***
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  lea ecx,[ecx+0x4]
	  mov eax,[eax+ecx]
      mov ecx,0x10
	  push 0x004EDE7D
	  ret
	}
}
__declspec(naked)void insert16A098C603()  //004ED856,004EDE77,004EEB42 ***
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  lea ecx,[ecx+0x4]
	  mov eax,[eax+ecx]
      mov ecx,0x10
	  push 0x004EEB48
	  ret
	}
}
__declspec(naked)void insert16A098C7()  // 0053C61D
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  lea ecx,[ecx+0x4]
	  mov ebx,[eax*0x8+ecx]
	  mov ecx,0x01733B30
	  push 0x0053C624
	  ret
	}
}
__declspec(naked)void insert16A098C8()  // 00627C8F   edx
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  lea edx,[edx+0x4]
	  mov edx,[eax*0x8+edx]
	  mov ecx,[0x010D94A8]
	  push 0x00627C96
	  ret
	}
}
__declspec(naked)void insert16A098C9()  // 006284BA
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  lea ecx,[ecx+0x4]
	  mov eax,[eax+ecx]
      mov ecx,[esp+0xC]
	  push 0x006284C0
	  ret
	}
}
__declspec(naked)void insert16A098C1001()  // 006F44B4   006F493C
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  lea ecx,[ecx+0x4]
	  mov ecx,[esi+ecx]
	  push 0x006F44BA
	  ret
	}
}
__declspec(naked)void insert16A098C1002()  // 006F44B4   006F493C ***
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  lea ecx,[ecx+0x4]
	  mov ecx,[esi+ecx]
	  push 0x006F4942
	  ret
	}
}
__declspec(naked)void AcceptUpradeOpt()  // 00488E93
{
__asm
	{
	  xor cl,0x1F
	  cmp cl,0x7
	  jnz Default
      mov cl,0xA
	  Default:
      cmp cl,0x0A
	  push 0x00488E99
	  ret
	}
}
__declspec(naked)void insert16A098C1101()  // 006F44F6  , 006F497E
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  lea ecx,[ecx+0x4]
	  mov edx,[esi+ecx]
	  push 0x006F44FC
	  ret
	}
}
__declspec(naked)void insert16A098C1102()  // 006F44F6  , 006F497E ***
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  lea ecx,[ecx+0x4]
	  mov edx,[esi+ecx]
	  push 0x006F4984
	  ret
	}
}
__declspec(naked)void insert16A09AC01()  // 004BC05E ,004E3FBC
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  lea ecx,[ecx+0x24]
	  mov eax,[eax*0x8+ecx]
      mov ecx,[0x010D94A8]
	  push 0x004BC065
	  ret
	}
}
__declspec(naked)void insert16A09AC02()  // 004BC05E ,004E3FBC ***
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  lea ecx,[ecx+0x24]
	  mov eax,[eax*0x8+ecx]
      mov ecx,[0x010D94A8]
	  push 0x004E3FC3
	  ret
	}
}
__declspec(naked)void insert16A09AC201()  // 005D1D22 005D204F
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  lea edx,[ecx+0x24]
	  mov ecx,[0x010D94A8]
	  mov ecx,[ecx+0x82A0]
      xor ecx,0xE137FDB1
	  cmp ecx,[eax*0x8+edx]
	  push 0x005D1D29
	  ret
	}
}
__declspec(naked)void insert16A09AC202()  // 005D1D22 005D204F ***
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  lea edx,[ecx+0x24]
	  mov ecx,[0x010D94A8]
	  mov ecx,[ecx+0x82A0]
      xor ecx,0xE137FDB1
	  cmp ecx,[eax*0x8+edx]
	  push 0x005D2056
	  ret
	}
}
__declspec(naked)void insert16A09AC3()  // 006B9230
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  lea ecx,[ecx+0x24]
	  mov ebp,[eax+ecx]
      mov ecx,[0x010D94A8]
	  push 0x006B9236
	  ret
	}
}
__declspec(naked)void insert16A09AC401()  // 006B9986  007052B2
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  lea ecx,[ecx+0x24]
	  mov edi,[eax+ecx]
      mov ecx,[0x010D94A8]
	  push 0x006B998C
	  ret
	}
}
__declspec(naked)void insert16A09AC402()  // 006B9986  007052B2 ***
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  lea ecx,[ecx+0x24]
	  mov edi,[eax+ecx]
      mov ecx,[0x010D94A8]
	  push 0x007052B8
	  ret
	}
}
__declspec(naked)void insert16A09AC5()  // 006C8013
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  lea ecx,[ecx+0x24]
	  cmp eax,[edx*0x8+ecx]
	  mov ecx,[0x010D94A8]
	  push 0x006C801A
	  ret
	}
}
__declspec(naked)void insert16A09AC6()  // 006C84FD
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  lea edx,[ecx+0x24]
	  mov ecx,[0x010D94A8]
	  mov ecx, [ecx+0x82A0]
      xor ecx, 0xE137FDB1
	  cmp ecx,[eax*0x8+edx]
	  push 0x006C8504
	  ret
	}
}
__declspec(naked)void insert16A09AC7()  // 006D3504
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  lea ecx,[ecx+0x24]
	  mov esi,[eax+ecx]
	  mov ecx,[0x010D94A8]
	  push 0x006D350A
	  ret
	}
}
__declspec(naked)void insert16A09AC8()  // 0075ECE8  mov edx
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  lea edx,[edx+0x24]
	  mov eax,[eax*0x8+edx]
	  xor edx,edx
	  push 0x0075ECEF
	  ret
	}
}
__declspec(naked)void insert16A09C4()  // 006B9222
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  lea ecx,[ecx+0x3C]
	  cmp [eax+ecx],ebx
	  mov ecx,[0x010D94A8]
	  push 0x006B9228
	  ret
	}
}
__declspec(naked)void insert16A09C41()  // 006B9978
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  lea ecx,[ecx+0x3C]
	  cmp [eax+ecx],esi
	  mov ecx,[0x010D94A8]
	  push 0x006B997E
	  ret
	}
}
__declspec(naked)void insert16A09C42()  // 006D34F0
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  lea ecx,[ecx+0x3C]
	  mov edx,[eax+ecx]
	  mov ecx,[0x010D94A8]
	  push 0x006D34F6
	  ret
	}
}
__declspec(naked)void insert16A09C43()  // 007052A2
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  lea ecx,[ecx+0x3C]
	  mov esi,[eax+ecx]
	  mov ecx,[0x010D94A8]
	  push 0x007052A8
	  ret
	}
}

__declspec(naked)void GetDieOrLieTanker()
{
__asm
	{
	  xor eax,eax    // eax = 0
	  mov al,[edi+0x19]
	  cmp al,0x01
	  jle Default
	  cmp al,0x2
	  jl CheckThuc2
	  cmp al,0x11
	  jg CheckThuc2
	  mov  byte ptr [esi+0x8C68],0x00
	  push 0x006C5587
	  ret

	  CheckThuc2:
	  cmp al,0x14
	  jl CheckThuc3
	  cmp al,0x23
	  jg CheckThuc3
	  mov  byte ptr [esi+0x8C68],0x01
	  push 0x006C5587
	  ret

	  CheckThuc3:
	  cmp al,0x28
	  jl CheckThuc4
	  cmp al,0x37
	  jg CheckThuc4
	  mov  byte ptr [esi+0x8C68],0x00
	  push 0x006C5587
	  ret

	  CheckThuc4:
	  cmp al,0x3C
	  jl CheckThuc5
	  cmp al,0x4B
	  jg CheckThuc5
	  mov  byte ptr [esi+0x8C68],0x01
	  push 0x006C5587
	  ret

	  CheckThuc5:
	  cmp al,0x50
	  jl CheckThuc6
	  cmp al,0x5F
	  jg CheckThuc6
	  mov  byte ptr [esi+0x8C68],0x00
	  push 0x006C5587
	  ret

      CheckThuc6:
	  cmp al,0x64
	  jl Default
	  cmp al,0x73
	  jg Default
	  mov  byte ptr [esi+0x8C68],0x01
	  push 0x006C5587
	  ret

	  Default:
	  mov [esi+0x8C68],al
	  push 0x006C5587
	  ret
	}
}
__declspec(naked)void GetDamageThucKy()
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  push eax
	  xor eax,eax
	  mov al,[ebp+0x1B]
      test eax,eax
	  jz Default
      xor eax,eax
	  mov al,[ebp+0x1B]
	  imul eax,0xFFFF
      xor edx,edx
	  mov dx,[ebp+0x10]
	  add edx,eax
	  pop eax
	  mov [eax],edx
      mov eax,[0x010D94A8]
	  push 0x006C52FF
	  ret

	  Default:
	  pop eax
      xor edx,edx
	  mov dx,[ebp+0x10]
      mov [eax],edx
      mov eax,[0x010D94A8]
	  mov dx,[edi+0x10]
	  push 0x006C52FF
	  ret
	}
}
__declspec(naked)void AllowLLanWeapon()  //00574C20
{
__asm
	{
	  and eax,0x000000FF
	  cmp eax,0x8
	  jnz Default
      mov eax,0x05
      Default:
	  push 0x00574C25
	  ret
	}
}
__declspec(naked)void AddressPassGG()  //00574C20
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  push eax
	  mov eax,0x0085C28C
	  call [eax]
	  test eax,eax
	  jz NotRun
	  push 0x00839BB3
	  ret
	  NotRun:
	  mov eax,0x00404B50
	  call eax
	}
}
__declspec(naked)void DrawExtSlot()  //0049411F
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
      pushad
	  cmp ecx,0x96

	  Defaul:
	  popad
	  mov eax,[esp+0x18]
	  mov ecx,[esp+0x14]
	  push 0x00494127
	  ret
	}
}
/*__declspec(naked)void AddMoreSlotShowItem()
{
__asm
	{
		nop
		nop
		nop
		nop
		nop
        push eax
		xor ebx,ebx
		mov edi,0x00896FF8
		BaclLoop:
        xor ecx,ecx
		mov eax,[esp]
        mov cl,[eax]
		cmp ecx,0x1    // Check level
		jl NotHaveNewSlot
		cmp ecx,0x8
		jz OutRunFunc
		LoopAddEdi:
		add edi,0x8
        add ebx,0x1
		sub ecx,0x1
		test ecx,ecx
		jnz LoopAddEdi
		call FuncLoadSlotItem
        jmp OutRunFunc


        FuncLoadSlotItem:
		LoopRunFuncAdd:
		mov     ecx, [edi+4]
		mov     edx, [esi+0x18]
		lea     eax, [ecx+edx-0x1]
		mov     ecx, [esi+0x14]
		mov     edx, [edi]
		push    eax
		lea     eax, [ecx+edx+0x45]
		lea     ecx, [esi+0x3F8]
		push    eax
		mov eax,0x7E00F0
		call eax
		mov     ecx, [edi+4]
		mov     edx, [esi+0x18]
		lea     eax, [ecx+edx-1]
		mov     ecx, [esi+0x14]
		mov     edx, [edi]
		push    eax
		lea     eax, [ecx+edx+0x45]
		lea     ecx, [esi+0x3F8]
		push    eax
		mov eax,0x7E00F0
		call eax
		add edi,0x8
		inc ebx
		cmp ebx,0x8
		jl LoopRunFuncAdd
        ret

		NotHaveNewSlot:
		mov     ecx, [edi+4]
		mov     edx, [esi+0x18]
		lea     eax, [ecx+edx-0x1]
		mov     ecx, [esi+0x14]
		mov     edx, [edi]
		push    eax
		lea     eax, [ecx+edx+0x45]
		lea     ecx, [esi+0x3F8]
		push    eax
		mov eax,0x7E00F0
		call eax
		mov     ecx, [edi+4]
		mov     edx, [esi+0x18]
		lea     eax, [ecx+edx-0x1]
		mov     ecx, [esi+0x14]
		mov     edx, [edi]
		push    eax
		lea     eax, [ecx+edx+0x45]
		lea     ecx, [esi+0x3F8]
		push    eax
		mov eax,0x7E00F0
		call eax
		add edi,0x8
		inc ebx
		cmp ebx,0x8
		jl NotHaveNewSlot

		  OutRunFunc:
          pop eax
		  mov eax,[0x010D94A8]
		  mov cl,[eax+0x0002822C]
		  push 0x004BC342
		  ret
	}
}        */
__declspec(naked)void AddMoreSlotShowItem()
{
__asm
	{
		nop
		nop
		nop
		nop
		nop
		push eax
		xor ecx,ecx
		mov ecx,[ebp+0x10]
		test ecx,ecx
        jz OutRunFunc
        xor ecx,ecx
		mov ecx,[eax+0x4]
		test ecx,ecx
		jnz DaCoOption
		add eax,0x4
		push eax
		call GetInforHienThiHinhAnh
		//
        DaCoOption:
        push 3827
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov  ecx, [esp]
		add ecx,0x4
		mov  DWORD PTR SS : [ecx + 0x70] , eax
		mov  DWORD PTR SS : [ecx + 0x9C] , 65
		mov  DWORD PTR SS : [ecx + 0xA0] , 63
		mov  DWORD PTR SS : [ecx + 0x98] , 33
		mov  DWORD PTR SS : [ecx + 0xA4] , 95
		//
		sub esp,0x4
        mov edi,0x00896FF8
		xor ecx,ecx
		mov [esp],ecx
        BackLoopLoadHinhAnhSlot:
		mov eax,[esp+0x4]
        mov ecx,[esp]
		mov eax,[eax]
		cmp eax,ecx
		jbe DontHaveSlot
		mov  ecx, [esp+0x4]
		add  ecx,0x4
		mov  DWORD PTR SS : [ecx + 0x9C] , 65
		mov  DWORD PTR SS : [ecx + 0xA0] , 63
		mov  DWORD PTR SS : [ecx + 0x98] , 33
		mov  DWORD PTR SS : [ecx + 0xA4] , 95
		mov ecx, [edi+4]
        mov edx, [ebp+0x18]
		lea eax, [ecx+edx+0x12]
		mov edx, [edi]
		mov ecx, [ebp+0x14]
		lea ecx, [ecx+edx+0x8D]
		push 0x00000000
		push 0x0089E914
		push eax
		push ecx
		mov ecx, [esp+0x14]
        add ecx,0x4
		mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
		call eax
		push 0x1732CC8
		mov ecx, [esp+0x8]
        add ecx,0x4
		mov eax, 0x7B9850
		call eax //Draw1
		//
        jmp ContinueShowImageSlot
		//
		DontHaveSlot:
		mov  ecx, [esp+0x4]
		add  ecx,0x4
		mov  DWORD PTR SS : [ecx + 0x9C] , 65
		mov  DWORD PTR SS : [ecx + 0xA0] , 95
		mov  DWORD PTR SS : [ecx + 0x98] , 65
		mov  DWORD PTR SS : [ecx + 0xA4] , 95
        mov ecx, [edi+4]
        mov edx, [ebp+0x18]
		lea eax, [ecx+edx+0x12]
		mov edx, [edi]
		mov ecx, [ebp+0x14]
		lea ecx, [ecx+edx+0x8D]
		push 0x00000000
		push 0x0089E914
		push eax
		push ecx
		mov ecx, [esp+0x14]
		add ecx,0x4
		mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
		call eax
		push 0x1732CC8
		mov ecx, [esp+0x8]
        add ecx,0x4
		mov eax, 0x7B9850
		call eax //Draw1
        jmp ContinueShowImageSlot
		//
        ContinueShowImageSlot:
		mov ecx,[esp]
        add ecx,1
		add edi,0x8
		mov [esp],ecx
		cmp ecx,0x8
		jz OutFuncLoad
        jmp BackLoopLoadHinhAnhSlot
		OutFuncLoad:
        add esp,0x4
        jmp OutRunFunc

		  OutRunFunc:
          pop eax
		  pop edi
		  pop esi
		  pop ebp
		  pop ebx
          add esp,0x0000015C
		  push 0x004BB660
		  ret

	   GetInforHienThiHinhAnh:
	   sub esp,0x4
	   xor ecx,ecx
	   mov [esp],ecx
	   mov ecx,[esp]
       LoopLoadHienThi:
       mov eax, 0x010CC088
	   mov edx, [eax + ecx]
       mov eax,[esp+0x8]
	   mov [eax + ecx], edx
	   add ecx, 0x4
	   cmp ecx, 0xB8
	   jnz LoopLoadHienThi
	   add esp,0x4
       ret 0x4
	}
}
__declspec(naked)void DisableViewPet()  //006205F5
{
__asm
	{
	  mov edx,[0x01615878]
	  test edx,edx
	  jz NotFoundID
	  xor eax,eax
	  mov ax,[edx+0xE]
	  cmp eax,3453
	  jl DefaultLoad
	  cmp eax,3472
	  ja DefaultLoad
	  NotFoundID:
	  push 0x006215D6
	  ret

	  DefaultLoad:
	  mov ecx,[0x01615868]
	  push 0x006205FB
	  ret
	}
}
__declspec(naked)void DisableViewPet2()  //0064B1F9
{
__asm
	{
      xor eax,eax
	  mov ax,[esi+0xE]
	  cmp eax,3453
	  jl Default
	  cmp eax,3472
	  ja Default
      PetView:
	  mov dword ptr [esi+0x18], 0x00000000
	  mov eax,[0x016158B4]
	  push 0x0064B1FE
	  ret

	  Default:
	  xor eax,eax
	  mov eax,[0x016158B4]
	  push 0x0064B1FE
	  ret
	}
}
__declspec(naked)void DisableViewPet3()  //0064B249
{
__asm
	{
	  xor eax,eax
	  mov ax,[esi+0xE]
	  test eax,eax
	  jz NotFoundId
	  cmp eax,3453
	  jl Default
	  cmp eax,3472
	  ja Default
      NotFoundId:
	  push 0x0064B5B3
	  ret

	  Default:
	  mov eax,[esi+0x14]
	  test eax,eax
	  push 0x0064B24E
	  ret
	}
}
__declspec(naked)void DisableViewPet4()  //00621A55
{
__asm
	{
	  mov edx,[0x01615878]
	  test edx,edx
	  jz NotFoundID
	  xor eax,eax
	  mov ax,[edx+0xE]
	  cmp eax,3453
	  jl DefaultLoad
	  cmp eax,3472
	  ja DefaultLoad
	  NotFoundID:
	  push 0x00622EB6
	  ret

	  DefaultLoad:
	  mov ecx, ebp
	  mov eax,0x00646520
      call eax
	  push 0x00621A5C
	  ret
	}
}
__declspec(naked)void DisableViewPet5()  //0062B739
{
__asm
	{
	  xor eax,eax
	  test edi,edi
      jz NotFound
	  mov ax,[edi+0xE]
	  cmp eax,3453
	  jl DefaultLoad
	  cmp eax,3472
	  ja DefaultLoad
	  NotFound:
	  push 0x0062B8C9
	  ret

	  DefaultLoad:
	  mov eax,[esp+0x18]
	  mov  edi,[esp+0x10]
	  mov [esi+0x2BF18], edi
	  push 0x0062B73F
	  ret
	}
}
/*__declspec(naked)void DisableViewPet5()  //0062B739
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
      xor ebx,ebx
	  mov bx,[eax+0x500]
	  test ebx,ebx
	  jz DefaultLoad
	  test edi,edi
	  jz NotFound
	  xor ecx,ecx
	  mov cx,[edi+0xE]
	  cmp ecx,ebx
	  jz CheckIDBossBH
      xor eax,eax
	  mov ax,[edi+0xE]
	  cmp eax,0xD73
	  jl DefaultLoad
	  cmp eax,0xD90
	  jg  DefaultLoad
      NotFound:
	  push 0x0062B8C9
	  ret

	  DefaultLoad:
	  mov eax,[esp+0x18]
	  mov edi,[esp+0x10]
      mov ebx,[esp+0x14]
	  mov [esi+0x2BF18], edi
	  push 0x0062B73F
	  ret

	  CheckIDBossBH:
	  lea ecx,[0x0110F5E8]
	  push ecx
	  lea eax,[eax+0x502]
      push eax
	  mov eax,0x008481C8
	  call eax
	  add esp,0x8
	  test eax,eax
	  jz ChoPhepDanhQuai
      push 0x0062B8C9
	  ret

	  ChoPhepDanhQuai:
	  mov eax,[esp+0x18]
	  mov edi,[esp+0x10]
      mov ebx,[esp+0x14]
	  mov [esi+0x2BF18], edi
	  push 0x0062B73F
	  ret
	}
}   */
__declspec(naked)void CheckConditionNewSlot()  //006B464B
{
__asm
	{
      nop
	  nop
	  nop
	  nop
	  nop
      mov dl,[esp+0x000008E0]
	  pushad
	  xor eax,eax
	  mov al,dl
	  imul eax,0x90
	  xor edx,edx
	  mov dl,[0x1107258+eax+0x22DC8+0x16]
	  xor dl,0x1F
	  cmp edx,7
      jnz Default
      xor edx,edx
	  mov dx,[0x1107258+eax+0x22DC8+0x14]
	  xor dx,0xCE43
	  cmp edx,1530
	  jnz CheckSlotCao
	  // Mo Slot Thap
      xor edx,edx
	  mov dl,[0x1107258+eax+0x22DC8+0x19]
	  xor dl,0xC5
	  test edx,edx
      jz KhongDuSoLuong
	  mov edx,[esp+0x1C]
	  xor ecx,ecx
	  mov cl,[edx]
	  cmp ecx,0x3
	  jae ErrorOpenSlotThap
	  cmp ecx,0x0
	  jnz MoSlot10
	  mov eax,[0x0112F480]
	  cmp eax,1000000000
	  jbe NotEnoughMoney
	  jmp NotPotionUsed

	  MoSlot10:
	  cmp ecx,0x1
	  jnz MoSlot11
	  mov eax,[0x0112F480]
	  cmp eax,2000000000
	  jbe NotEnoughMoney
      mov eax,[0x1107258+0x82B0]
	  xor eax,0xE137FDB1
	  cmp eax,0
      jb NotEnoughLv
	  jmp NotPotionUsed

	  MoSlot11:
	  cmp ecx,0x2
	  jnz ErrorOpenSlotThap
      mov eax,[0x0112F480]
	  cmp eax,4000000000
	  jbe NotEnoughMoney
      mov eax,[0x1107258+0x82B0]
	  xor eax,0xE137FDB1
	  cmp eax,0
      jb NotEnoughLv
	  jmp NotPotionUsed


	  //Mo Slot Cao
	  CheckSlotCao:
      cmp edx,1531
	  jnz Default
      xor edx,edx
	  mov dl,[0x1107258+eax+0x22DC8+0x19]
	  xor dl,0xC5
	  test edx,edx
	  jz KhongDuSoLuong
	  mov edx,[esp+0x1C]
	  xor ecx,ecx
	  mov cl,[edx]
	  cmp ecx,0x3
	  jb ErrorOpenSlotCao
	  cmp ecx,3
	  jnz KiemTraMoSlot5
      mov eax,[0x1107258+0x82B0]
	  xor eax,0xE137FDB1
	  cmp eax,160
      jb NotEnoughLv
	  jmp NotPotionUsed

	  KiemTraMoSlot5:
	  cmp ecx,4
	  jnz KiemTraMoSlot6
      mov eax,[0x1107258+0x82B0]
	  xor eax,0xE137FDB1
	  cmp eax,180
	  jb NotEnoughLv1
	  jmp NotPotionUsed

	  KiemTraMoSlot6:
	  cmp ecx,5
	  jnz KiemTraMoSlot7
      mov eax,[0x1107258+0x82B0]
	  xor eax,0xE137FDB1
	  cmp eax,200
	  jb NotEnoughLv2
	  jmp NotPotionUsed

	  KiemTraMoSlot7:
	  cmp ecx,6
	  jnz KiemTraMoSlot8
      mov eax,[0x1107258+0x82B0]
	  xor eax,0xE137FDB1
	  cmp eax,220
	  jb NotEnoughLv3
	  jmp NotPotionUsed

	  KiemTraMoSlot8:
	  cmp ecx,7
	  jnz KiemTraMoSlot9
      mov eax,[0x1107258+0x82B0]
	  xor eax,0xE137FDB1
	  cmp eax,240
      jb NotEnoughLv4
	  jmp NotPotionUsed

	  KiemTraMoSlot9:
      jmp ErrorOpenSlotCao


	  Default:
      xor edx,edx
	  mov dl,[esp+0x900]
	  imul edx,0x90
	  xor ecx,ecx
	  mov cl,[0x1107258+0x22DC8+edx+0x16]
	  xor cl,0x1F
	  cmp ecx,0x3
	  jnz NotPotionUsed
      xor ecx,ecx
	  mov cx,[0x1107258+0x22DC8+edx+0x14]
	  xor cx,0xCE43
	  cmp ecx,3435
      jz UsedPotionUplv
      cmp ecx,3436
	  jz UsedPotionUplv
      jmp NotPotionUsed
	  UsedPotionUplv:
	  xor ecx,ecx
	  mov cl,[0x1107258+0x82B4]
	  xor cl,0x1F
	  test ecx,ecx
	  jz ChuaChonMonPhaiKhongTheSuDung
      NotPotionUsed:
	  popad
	  mov dl,[esp+0x8E0]
	  push 0x006B4652
	  ret

	  NotUsed:
	  popad
	  push 0x006B3FF8
	  ret

	  NotEnoughMoney:
	  popad
	  push 0xFFFF2323
	  push 0x1
	  push 0xC
	  push 0x10DB
	  push 0x19
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x0155EE60
	  mov eax,0x006A9800
	  call eax
	  push 0x006B3FF8
	  ret

      KhongDuSoLuong:
	  popad
	  push 0xFFFF2323
	  push 0x1
	  push 0xC
	  push 0x10DB
	  push 0x19
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x0155EE60
	  mov eax,0x006A9800
	  call eax
	  push 0x006B3FF8
	  ret

      ChuaChonMonPhaiKhongTheSuDung:
	  popad
	  push 0xFFFF2323
	  push 0x1
	  push 0xC
	  push 4346
	  push 0x19
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x0155EE60
	  mov eax,0x006A9800
	  call eax
	  push 0x006B3FF8
	  ret

	  ErrorOpenSlotThap:
	  popad
	  push 0xFFFF2323
	  push 0x1
	  push 0xC
	  push 4341
	  push 0x19
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x0155EE60
	  mov eax,0x006A9800
	  call eax
	  push 0x006B3FF8
	  ret

	  ErrorOpenSlotCao:
	  popad
	  push 0xFFFF2323
	  push 0x1
	  push 0xC
	  push 4342
	  push 0x19
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x0155EE60
	  mov eax,0x006A9800
	  call eax
	  push 0x006B3FF8
	  ret

	  NotAcceptItem3:
	  popad
	  push 0xFFFF2323
	  push 0x1
	  push 0xC
	  push 0x10DE
	  push 0x19
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x0155EE60
	  mov eax,0x006A9800
	  call eax
	  push 0x006B3FF8
	  ret

      NotEnoughLv:
	  popad
	  push 0xFFFF2323
	  push 0x1
	  push 0xC
	  push 4832
	  push 0x19
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x0155EE60
	  mov eax,0x006A9800
	  call eax
	  push 0x006B3FF8
	  ret

	  NotEnoughLv1:
	  popad
	  push 0xFFFF2323
	  push 0x1
	  push 0xC
	  push 4833
	  push 0x19
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x0155EE60
	  mov eax,0x006A9800
	  call eax
	  push 0x006B3FF8
	  ret

	  NotEnoughLv2:
	  popad
	  push 0xFFFF2323
	  push 0x1
	  push 0xC
	  push 4834
	  push 0x19
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x0155EE60
	  mov eax,0x006A9800
	  call eax
	  push 0x006B3FF8
	  ret

	  NotEnoughLv3:
	  popad
	  push 0xFFFF2323
	  push 0x1
	  push 0xC
	  push 4835
	  push 0x19
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x0155EE60
	  mov eax,0x006A9800
	  call eax
	  push 0x006B3FF8
	  ret

	  NotEnoughLv4:
	  popad
	  push 0xFFFF2323
	  push 0x1
	  push 0xC
	  push 4836
	  push 0x19
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x0155EE60
	  mov eax,0x006A9800
	  call eax
	  push 0x006B3FF8
	  ret

      DontAcceptItemUpgrade:
	  popad
	  push 0xFFFF2323
	  push 0x1
	  push 0xC
	  push 0x12C3
	  push 0x19
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x0155EE60
	  mov eax,0x006A9800
	  call eax
	  push 0x006B3FF8
	  ret

      MaxUpgradePet:
	  popad
	  push 0xFFFF2323
	  push 0x1
	  push 0xC
	  push 0x12C4
	  push 0x19
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x0155EE60
	  mov eax,0x006A9800
	  call eax
	  push 0x006B3FF8
	  ret
	}
}
__declspec(naked)void GetGradeNewColor()  //00675FF3
{
__asm
	{
	  cmp al,0x8
	  jnz KiemTraRank10
	  mov eax,0xFFFF2424
	  push 0x00675FFA
	  ret

	  KiemTraRank10:
	  cmp al,0xA
	  jnz KiemTraRank11
      mov eax,0xFF6cf1b4
	  push 0x00675FFA
	  ret

	  KiemTraRank11:
	  cmp al,0xB
	  jnz KiemTraRank12
	  mov eax,0xFF00e6f1
	  push 0x00675FFA
	  ret

	  KiemTraRank12:
	  cmp al,0xC
	  jnz KiemTraRank13
	  mov eax,0xFF8c0add
	  push 0x00675FFA
	  ret

	  KiemTraRank13:
	  cmp al,0xD
	  jnz KiemTraRank14
	  mov eax,0xFFeb5678
	  push 0x00675FFA
	  ret

	  KiemTraRank14:
	  cmp al,0xE
      jl Default
	  mov eax,0xFFa70b0b
	  push 0x00675FFA
	  ret

	  Default:
	  mov eax,[eax*4+0x0089E91C]
	  push 0x00675FFA
	  ret
	}
}
__declspec(naked)void TestNewNguKhi()  //00601147  ManTiep
{
__asm
	{
      xor eax,eax
	  mov al,[0x1107258+0x2DB3D]
	  xor al,0x1F
	  jle loc_600ED5
	  fld dword ptr[0x1107258+0x2DB40]
	  mov eax,0x00848168
	  call eax
      xor ecx,ecx
	  mov cx,[esi+0x2DB34]
	  xor cx,0xDB23
	  add eax,ecx
	  mov bp,ax
	  mov esi,[0x010D94A8]
	  push 0x0060114D
	  ret
	  loc_600ED5:
	  mov ax,[esi+0x2DB34]
	  xor ax,0xDB23
	  mov bp,ax
	  mov esi,[0x010D94A8]
	  push 0x0060114D
	  ret
	}
}
__declspec(naked)void TestNewNguKhiTriTue()  //006011E5  TriTue
{
__asm
	{
      mov esi,eax
      xor eax,eax
	  mov al,[0x1107258+0x2DB15]
	  xor al,0x1F
	  jle loc_600E4A
	  fld dword ptr[0x1107258+0x2DB18]
	  mov eax,0x00848168
	  call eax
	  xor ecx,ecx
	  mov edx,esi
	  mov esi,[0x10D94A8]
	  mov cx,[esi+0x2DB0C]
	  xor cx,0xDB23
	  add eax,ecx
	  mov ecx,eax
	  mov eax,edx
      xor eax,0xAE1CDB23
	  push 0x006011EA
	  ret
	  loc_600E4A:
	  mov edx,esi
      mov esi,[0x10D94A8]
	  mov ax,[esi+0x2DB0C]
	  xor ax,0xDB23
	  mov ecx,eax
      mov eax,edx
	  xor eax,0xAE1CDB23
	  push 0x006011EA
	  ret
	}
}
__declspec(naked)void TestNewNguKhiSinhLuc()  //005FF49F
{
__asm
	{
	  mov [0x1107258+0x0002DB60],ecx
	  xor ecx,0xAE1CDB23
      xor eax,eax
	  mov al,[0x1107258+0x82B4]
	  xor eax,0x1F
	  cmp eax,0x0
	  jnz Check2
	  imul ecx,0x3
	  jmp DefaultLoad
	  Check2:
	  cmp eax,0x1
	  jnz Check23
	  imul ecx,0x3
	  jmp DefaultLoad
	  Check23:
	  cmp eax,0x2
	  jnz Check24
	  imul ecx,0x5
	  jmp DefaultLoad
	  Check24:
	  cmp eax,0x3
	  jnz Check25
	  imul ecx,0x5
	  jmp DefaultLoad
	  Check25:
	  cmp eax,0x4
	  jnz Check26
	  imul ecx,0x6
	  jmp DefaultLoad
      Check26:
	  imul ecx,0x6
	  DefaultLoad:
	  xor edx,edx
	  mov edx,[0x1107258+0x0002D9CC]
      xor edx,0xAE1CDB23
	  add edx,ecx
	  xor edx,0xAE1CDB23
      mov [0x1107258+0x0002D9CC] ,edx
	  push 0x005FF4A5
	  ret
	}
}
__declspec(naked)void TestNewNguKhiChanKhi()  //00601243  TriTue
{
__asm
	{
      mov esi,[0x10D94A8]
	  fld dword ptr[esi+0x2DAF0]
      mov esi,edx
	  mov eax,0x00848168
	  call eax
	  mov edx,esi
      mov esi,[0x10D94A8]
      xor edi,edi
	  mov di,ax
      xor eax,eax
	  mov ax, [esi+0x2DAE4]
	  xor ax,0xDB23
	  add edi,eax
      xor eax,eax
	  mov ax,[0x1107258+0x28246]
	  add edi,eax
	  xor eax,eax
	  mov al,[0x1107258+0x82B4]
	  xor eax,0x1F
	  cmp eax,0x0
	  jnz Check2
	  imul edi,0x5
	  jmp DefaultLoad
	  Check2:
	  cmp eax,0x1
	  jnz Check23
	  imul edi,0x5
	  jmp DefaultLoad
	  Check23:
	  cmp eax,0x2
	  jnz Check24
	  imul edi,0x6
	  jmp DefaultLoad
	  Check24:
	  cmp eax,0x3
	  jnz Check25
	  imul edi,0x5
	  jmp DefaultLoad
	  Check25:
	  imul edi,0x5
      DefaultLoad:
	  add edx,edi
	  xor edx,0xAE1CDB23
	  push 0x00601249
	  ret
	}
}
__declspec(naked)void TestAttactSpeed()  //006275B1  ManTiep
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
      pushad
	  movsx eax,ax
	  xor ecx,ecx
	  mov cl,[edx+0x4]
      test cl,cl
	  jz NotAttackSpeed
	  mov ecx,[0x0110F834]
	  test ecx,ecx
	  jz Default
	  test eax,eax
	  jz Default
	  //
	  cmp eax,6
	  jl CheckSpeedCao
	  cmp eax,29
	  ja CheckSpeedCao
	  jmp Default

	  CheckSpeedCao:
	  cmp eax,105
	  jz Default
	  cmp eax,106
	  jz Default
	  cmp eax,107
	  jz Default
	  cmp eax,108
	  jz Default
	  cmp eax,109
	  jz Default
	  cmp eax,110
	  jz Default
	  cmp eax,111
	  jz Default
	  cmp eax,112
	  jz Default
      cmp eax,143
	  jl ContinueShowSpeed
      cmp eax,157
	  ja ContinueShowSpeed
	  jmp Default
	  //
      ContinueShowSpeed:
	  push eax
	  mov eax,0x0071A340
	  call eax
	  test eax,eax
	  jz Default
      push eax
	  mov edx,[esp+0x18]
      push edx
	  xor ecx,ecx
	  mov cl,[edx+0x4]
	  push ecx
	  call GetTimeDelayAnimation
	  Default:
	  popad
      movsx eax,ax
	  push eax
	  mov ecx,ebp
	  mov edx, [ebp+0x0]
	  push 0x0063E7A1
	  ret

	  GetTimeDelayAnimation:
	  sub esp,0x4
	  xor ecx,ecx
	  mov [esp],ecx
	  BackLoopGetTimeDelayAnimation:
	  mov ecx,[esp]
	  mov eax,[esp+0xC]
	  lea eax,[eax+0x30]
	  xor edx,edx
	  imul ecx,0x4
	  mov dl,[eax+ecx]
	  mov ebx,[esp+0x8]
	  cmp ebx,edx
	  ja CheckAnotherGetTimeDelayAnimation
	  xor edx,edx
	  mov dl,[eax+ecx+0x1]
	  mov eax,[esp+0x10]
      mov byte ptr [eax+0xC],dl
	  add esp,0x4
	  ret 0xC

	  CheckAnotherGetTimeDelayAnimation:
	  mov ecx,[esp]
	  add ecx,1
	  mov [esp],ecx
	  cmp ecx,10
	  jl BackLoopGetTimeDelayAnimation
	  mov eax,[esp+0x10]
      mov byte ptr [eax+0xC],0x1F
	  add esp,0x4
	  ret 0xC


	  NotAttackSpeed:
	  mov ecx,[0x0110F834]
	  test ecx,ecx
	  jz Default
	  test eax,eax
	  jz Default
	  push eax
	  mov eax,0x0071A340
	  call eax
	  test eax,eax
	  jz Default
	  mov byte ptr[eax+0xC],0x1F
	  jmp Default
	}
}
__declspec(naked)void TestAttactSpeed2()  //006275B1  Thuc 2 3
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
      pushad
	  xor ecx,ecx
	  mov cl,[edx+0x4]
      test cl,cl
	  jz NotAttackSpeed
	  mov ecx,[0x0110F834]
	  test ecx,ecx
	  jz Default
	  test eax,eax
	  jz Default
	  cmp eax,6
	  jl CheckSpeedCao
      cmp eax,29
	  ja CheckSpeedCao
	  jmp Default
	  CheckSpeedCao:
	  cmp eax,105
	  jz Default
	  cmp eax,106
	  jz Default
	  cmp eax,107
	  jz Default
	  cmp eax,108
	  jz Default
	  cmp eax,109
	  jz Default
	  cmp eax,110
	  jz Default
	  cmp eax,111
	  jz Default
	  cmp eax,112
	  jz Default
      cmp eax,143
	  jl ContinueShowSpeed
	  cmp eax,157
	  ja ContinueShowSpeed
	  jmp Default

      ContinueShowSpeed:
	  push eax
	  mov eax,0x0071A340
	  call eax
	  test eax,eax
	  jz Default
      push eax
	  mov edx,[esp+0x18]
      push edx
	  xor ecx,ecx
	  mov cl,[edx+0x4]
      push ecx
	  call GetTimeDelayAnimation
      Default:
	  popad
	  lea ecx,[esi+0x000084E0]
	  push 0x006275B7
	  ret


      GetTimeDelayAnimation:
	  sub esp,0x4
	  xor ecx,ecx
	  mov [esp],ecx
	  BackLoopGetTimeDelayAnimation:
	  mov ecx,[esp]
	  mov eax,[esp+0xC]
	  lea eax,[eax+0x30]
	  xor edx,edx
	  imul ecx,0x4
	  mov dl,[eax+ecx]
	  mov ebx,[esp+0x8]
	  cmp ebx,edx
	  ja CheckAnotherGetTimeDelayAnimation
	  xor edx,edx
	  mov dl,[eax+ecx+0x1]
	  mov eax,[esp+0x10]
      mov byte ptr [eax+0xC],dl
	  add esp,0x4
	  ret 0xC

	  CheckAnotherGetTimeDelayAnimation:
	  mov ecx,[esp]
	  add ecx,1
	  mov [esp],ecx
	  cmp ecx,10
	  jl BackLoopGetTimeDelayAnimation
	  mov eax,[esp+0x10]
      mov byte ptr [eax+0xC],0x1F
	  add esp,0x4
	  ret 0xC

	  NotAttackSpeed:
	  mov ecx,[0x0110F834]
	  test ecx,ecx
	  jz Default
	  test eax,eax
	  jz Default
	  push eax
	  mov eax,0x0071A340
	  call eax
	  test eax,eax
	  jz Default
	  mov byte ptr[eax+0xC],0x1F
      jmp Default
	}
}
__declspec(naked)void TestAttactSpeed3()  //00629F43  Thuc 1
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
      pushad
	  xor ecx,ecx
	  mov cl,[edx+0x4]
      test cl,cl
	  jz NotAttackSpeed
	  mov ecx,[0x0110F834]
	  test ecx,ecx
	  jz Default
	  test eax,eax
	  jz Default
	  cmp eax,6
	  jl CheckSpeedCao
      cmp eax,29
	  ja CheckSpeedCao
	  jmp Default
      CheckSpeedCao:
	  cmp eax,105
	  jz Default
	  cmp eax,106
	  jz Default
	  cmp eax,107
	  jz Default
	  cmp eax,108
	  jz Default
	  cmp eax,109
	  jz Default
	  cmp eax,110
	  jz Default
	  cmp eax,111
	  jz Default
	  cmp eax,112
	  jz Default
      cmp eax,143
	  jl ContinueShowSpeed
	  cmp eax,157
	  ja ContinueShowSpeed
	  jmp Default
      ContinueShowSpeed:
	  push eax
	  mov eax,0x0071A340
	  call eax
	  test eax,eax
	  jz Default
      push eax
	  mov edx,[esp+0x18]
	  push edx
	  xor ecx,ecx
	  mov cl,[edx+0x4]
	  push ecx
	  call GetTimeDelayAnimation
	  Default:
      popad
	  lea ecx,[esi+0x000084E0]
	  push 0x00629F49
	  ret

	  GetTimeDelayAnimation:
	  sub esp,0x4
	  xor ecx,ecx
	  mov [esp],ecx
	  BackLoopGetTimeDelayAnimation:
	  mov ecx,[esp]
	  mov eax,[esp+0xC]
	  lea eax,[eax+0x30]
	  xor edx,edx
	  imul ecx,0x4
	  mov dl,[eax+ecx]
	  mov ebx,[esp+0x8]
	  cmp ebx,edx
	  ja CheckAnotherGetTimeDelayAnimation
	  xor edx,edx
	  mov dl,[eax+ecx+0x1]
	  mov eax,[esp+0x10]
      mov byte ptr [eax+0xC],dl
	  add esp,0x4
	  ret 0xC

	  CheckAnotherGetTimeDelayAnimation:
	  mov ecx,[esp]
	  add ecx,1
	  mov [esp],ecx
	  cmp ecx,10
	  jl BackLoopGetTimeDelayAnimation
	  mov eax,[esp+0x10]
      mov byte ptr [eax+0xC],0x1F
	  add esp,0x4
	  ret 0xC


	  NotAttackSpeed:
	  mov ecx,DWORD PTR SS:[0x0110F834]
	  test ecx,ecx
	  jz Default
	  test eax,eax
	  jz Default
	  push eax
	  mov eax,0x0071A340
	  call eax
	  test eax,eax
	  jz Default
	  mov byte ptr[eax+0xC],0x1F
      jmp Default
	}
}
__declspec(naked)void GetAttackValue()  //006138DF  ManTiep
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
      nop
	  pushad
	  mov ecx,[esp+0x44]
	  push ecx
	  mov [esp+0x48],eax
	  mov byte ptr [eax],0x0
	  xor ecx,ecx
	  mov ecx,0xC
	  BackLoopCheck:
	  xor eax,eax
	  push ecx
      imul ecx,0x90
	  mov ax,[0x1107258+ecx+0x22DC8+0x14]
	  xor ax,0xCE43
	  cmp eax,0x00
	  jz NextItem
      mov ebp,eax
      mov edx,[0x016DFA10]
	  lea eax,[ebp*0x8+0x00000000]
	  sub eax,ebp
	  lea edi,[eax+eax*0x2]
	  shl edi,0x3
	  mov al,[edi+edx+0x2A]
	  push eax
	  mov eax,0x006777A0
	  call eax
	  add esp,0x4
	  test eax,eax
	  jz NextItem
	  xor ebx,ebx
	  add edi,0x46
	  BackLoopNextValue:
	  mov eax,[0x016DFA10]
	  cmp word ptr[eax+edi],0x00
      jbe NextValue
	  xor ecx,ecx
	  mov cx,[eax+edi]
	  cmp ecx,0x14
	  jnz NextValue
	  xor edx,edx
      xor ecx,ecx
	  mov cx,[eax+edi+0xA]
	  mov eax,[esp+0x4C]
      mov dl,[eax]
	  add ecx,edx
	  cmp ecx,0x64
	  jb ChuaMaxValue
	  mov byte ptr [eax],0x64
      jmp NextValue
      ChuaMaxValue:
	  mov [eax],cl
	  NextValue:
	  add ebx,0x1
	  add edi,0x2
	  cmp ebx,0x5
	  jl BackLoopNextValue
	  NextItem:
	  pop ecx
	  add ecx,0x1
	  cmp ecx,0x13
	  jle BackLoopCheck
	  //NewSlot
	  xor eax,eax
	  xor ecx,ecx
	  mov ecx,0x8C
	  BackLoopCheckNSlo:
      xor eax,eax
	  push ecx
      imul ecx,0x90
	  mov ax,[0x1107258+ecx+0x22DC8+0x14]
	  xor ax,0xCE43
	  cmp eax,0x00
	  jz NextItemNSlo
      mov ebp,eax
      mov edx,[0x016DFA10]
	  lea eax,[ebp*0x8+0x00000000]
	  sub eax,ebp
	  lea edi,[eax+eax*0x2]
	  shl edi,0x3
	  mov al,[edi+edx+0x2A]
	  push eax
	  mov eax,0x006777A0
	  call eax
	  add esp,0x4
	  test eax,eax
	  jz NextItemNSlo
	  xor ebx,ebx
	  add edi,0x46
	  BackLoopNextValueNSlo:
	  mov eax,[0x016DFA10]
	  cmp word ptr[eax+edi],0x0
      jbe NextValueNSlo
	  xor ecx,ecx
	  mov cx,[eax+edi]
	  cmp ecx,0x14
	  jnz NextValueNSlo
	  xor edx,edx
      xor ecx,ecx
	  mov cx,[eax+edi+0xA]
	  mov eax,[esp+0x4C]
      mov dl,[eax]
	  add ecx,edx
	  cmp ecx,0x64
	  jb ChuaMaxValue1
	  mov byte ptr [eax],0x64
	  jmp NextValueNSlo
	  ChuaMaxValue1:
	  mov [eax],cl
	  NextValueNSlo:
	  add ebx,0x1
	  add edi,0x2
	  cmp ebx,0x5
	  jl BackLoopNextValueNSlo
	  NextItemNSlo:
	  pop ecx
	  add ecx,0x1
	  cmp ecx,0x93
	  jle BackLoopCheckNSlo
      xor ecx,ecx
	  mov eax,[esp+0x48]
	  mov cl,[eax]
	  xor edx,edx
	  mov dl,[eax+0x1]
	  add ecx,edx
	  xor cx,0xCE43
      mov [0x01111102],cx
	  pop ecx
	  mov [esp+0x44],ecx
	  popad
      mov eax,[esp+0x24]
      add eax, 0x90
	  push 0x0061358F
	  ret
	}
}

__declspec(naked)void PKMapsLoanChien2()  //00646898  TriTue
{
__asm
	{
      xor eax,eax
      mov al,[0x1107258+0x47C]
	  cmp eax,0xB
	  jnz Default
      xor eax,eax
	  mov al,[0x1107258+0x82A4]
      xor al,0xF
	  xor ecx,ecx
	  mov cl,[edi+0x82A4]
	  cmp ecx,0x1F
	  ja PheTong
	  mov ecx,0x1
      jmp KiemTraDieuKienDanh
	  PheTong:
	  mov cl,0x2
      KiemTraDieuKienDanh:
	  cmp eax,ecx
	  jnz ChoPhepDanh
	  push 0x00646956
      ret

	  ChoPhepDanh:
	  push 0x006468C7
      ret


	  Default:
      xor eax,eax
	  mov  al, [esi+0x2DC88]
	  push 0x0064689E
      ret
	}
}
__declspec(naked)void SetpkActiveResultMob()  //006C52AD  TriTue
{
__asm
	{
	  xor eax,eax
	  mov ax, [edi+0x8]
	  cmp ax, [0x1107258+0x83C8]
	  jz LocalUser
	  push eax
	  mov ecx,0x010D93D8
	  mov eax,0x0065F450
	  call eax
	  test eax,eax
	  jz NotFoundAnotherUser
	  xor ecx,ecx
	  mov cl,[edi]
	  cmp ecx,0x1B
	  jz SmashPvp
	  xor ecx,ecx
	  mov cl,[edi+0x1A]
	  xor cx,0xCE43
	  mov [eax+0x9EAA],cx
	  mov esi,eax
	  push 0x006C54CF
	  ret
	  SmashPvp:
	  xor ecx,ecx
	  mov cl,[edi+0x1A]
	  xor cx,0xCE43
	  mov [eax+0x9EAA],cx
	  mov esi,eax
	  push 0x006C54CF
	  ret
	  //Default
	  NotFoundAnotherUser:
	  push 0x006C568B
	  ret

	  LocalUser:
	  xor eax,eax
	  mov al,[edi+0x1A]
	  xor ax,0xCE43
	  mov [0x01111102],ax
	  xor eax,eax
      mov ecx,[0x010D94A8]
	  push 0x006C52BE
	  ret
	}
}
__declspec(naked)void SetAttackSpeedSmashMod()  //006C4A50  TriTue
{
__asm
	{
	  xor eax,eax
	  mov ax, [edi+0x8]
	  cmp ax, [0x1107258+0x83C8]
	  jz LocalUser
	  push eax
	  mov ecx,0x010D93D8
	  mov eax,0x0065F450
	  call eax
	  test eax,eax
	  jz NotFoundAnotherUser
	  xor ecx,ecx
	  mov cl,[edi]
	  cmp ecx,0x14
	  jz SmashPvp
	  xor ecx,ecx
	  mov cl,[edi+0x14]
	  xor cx,0xCE43
	  mov [eax+0x9EAA],cx
      mov esi,eax
	  push 0x006C4B8C
	  ret
	  SmashPvp:
      xor ecx,ecx
	  mov cl,[edi+0x13]
	  xor cx,0xCE43
	  mov [eax+0x9EAA],cx
      mov esi,eax
	  push 0x006C4B8C
	  ret
	  //Default
	  NotFoundAnotherUser:
	  push 0x006C4D22
	  ret

	  LocalUser:
	  xor ecx,ecx
	  mov cl,[edi]
	  cmp ecx,0x14
	  jz SmashPvpLocal
	  xor eax,eax
	  mov al,[edi+0x14]
	  xor ax,0xCE43
	  mov [0x01111102],ax
	  xor eax,eax
	  mov ecx,[0x010D94A8]
	  push 0x006C4A61
	  ret
	  SmashPvpLocal:
	  xor eax,eax
      mov ecx,[0x010D94A8]
	  push 0x006C4A61
	  ret
	}
}
__declspec(naked)void SetAttackSpeedNukerMob3()  //006C5EAB  TriTue
{
__asm
	{
	  xor eax,eax
	  mov ax, [esi+0x8]
	  cmp ax, [0x1107258+0x83C8]
	  jz LocalUser
	  push eax
	  mov ecx,0x010D93D8
	  mov eax,0x0065F450
	  call eax
	  test eax,eax
	  jz NotFoundAnotherUser
	  xor ecx,ecx
	  mov cl,[esi]
	  cmp ecx,0x16
	  jnz SmashPvp
	  xor ecx,ecx
	  mov cl,[esi+0x15]
	  xor cx,0xCE43
	  mov [eax+0x9EAA],cx
	  push 0x006C6005
	  ret
	  SmashPvp:
      xor ecx,ecx
	  mov cl,[esi+0x15]
	  xor cx,0xCE43
	  mov [eax+0x9EAA],cx
	  push 0x006C6005
	  ret
	  //Default
	  NotFoundAnotherUser:
	  push 0x006C60D6
	  ret

	  LocalUser:
	  xor ecx,ecx
	  mov cl,[esi]
	  cmp ecx,0x16
	  jnz SmashPvpLocal
	  xor eax,eax
	  mov al,[esi+0x15]
	  xor ax,0xCE43
	  mov [0x01111102],ax
	  xor eax,eax
	  mov ecx,[0x010D94A8]
	  push 0x006C5EBC
	  ret
	  SmashPvpLocal:
	  xor eax,eax
      mov ecx,[0x010D94A8]
	  push 0x006C5EBC
	  ret
	}
}
__declspec(naked)void SetAttackSpeedSmash2Mod()  //006C4D3F  TriTue
{
__asm
	{
	  xor eax,eax
	  mov ax, [edi+0x8]
	  cmp ax, [0x1107258+0x83C8]
	  jz LocalUser
	  push eax
	  mov ecx,0x010D93D8
	  mov eax,0x0065F450
	  call eax
	  test eax,eax
	  jz NotFoundAnotherUser
	  xor ecx,ecx
	  mov cl,[edi]
	  cmp ecx,0x14
	  jz SmashPvp
	  xor ecx,ecx
	  mov cl,[edi+0x13]
	  xor cx,0xCE43
	  mov [eax+0x9EAA],cx
	  mov esi,eax
	  push 0x006C4E64
	  ret
	  SmashPvp:
      xor ecx,ecx
	  mov cl,[edi+0x13]
	  xor cx,0xCE43
	  mov [eax+0x9EAA],cx
      mov esi,eax
	  push 0x006C4E64
	  ret
	  //Default
	  NotFoundAnotherUser:
	  push 0x006C5012
	  ret

	  LocalUser:
	  xor ecx,ecx
	  mov cl,[edi]
	  cmp ecx,0x14
	  jnz SmashPvpLocal
	  xor eax,eax
	  mov al,[edi+0x13]
	  xor ax,0xCE43
	  mov [0x1107258+0x9EAA],ax
	  xor eax,eax
      mov ecx,[0x010D94A8]
	  push 0x006C4D50
	  ret
	  SmashPvpLocal:
	  xor eax,eax
      mov ecx,[0x010D94A8]
	  push 0x006C4D50
	  ret
	}
}
__declspec(naked)void SetAttackSpeedAtivatePvp()  //006C56AD  TriTue
{
__asm
	{
	  xor eax,eax
	  mov ax, [esi+0x8]
	  cmp ax, [0x1107258+0x83C8]
	  jz LocalUser
	  push eax
	  mov ecx,0x010D93D8
	  mov eax,0x0065F450
	  call eax
	  test eax,eax
	  jz NotFoundAnotherUser
	  xor ecx,ecx
	  mov cl,[esi]
	  cmp ecx,0x1B
	  jz PvpActivate
	  mov cl,[esi+0x1A]
	  xor cx,0xCE43
	  mov [eax+0x9EAA],cx
	  mov edi,eax
	  push 0x006C587E
	  ret
	  PvpActivate:
	  mov cl,[esi+0x19]
	  xor cx,0xCE43
	  mov [eax+0x9EAA],cx
      mov edi,eax
	  push 0x006C587E
	  ret
	  //Default
	  NotFoundAnotherUser:
	  push 0x006C59B0
	  ret

	  LocalUser:
	  /*xor ecx,ecx
	  mov cl,[esi]
	  cmp ecx,0x1B
	  jz PvpActivateLocal
	  mov al,[esi+0x19]
	  xor ax,0xCE43
	  mov [0x1107258+0x9EAA],ax
	  xor eax,eax
	  mov ecx,[0x010D94A8]
	  push 0x006C56BE
	  ret
	  PvpActivateLocal: */
	  xor eax,eax
      mov ecx,[0x010D94A8]
	  push 0x006C56BE
	  ret
	}
}
__declspec(naked)void SetAttackSpeedNuker1Mob()  //006C69FC  TriTue
{
__asm
	{
	  xor eax,eax
	  mov ax, [esi+0x8]
	  cmp ax, [0x1107258+0x83C8]
	  jz LocalUser
	  push eax
	  mov ecx,0x010D93D8
	  mov eax,0x0065F450
	  call eax
	  test eax,eax
	  jz NotFoundAnotherUser
	  xor ecx,ecx
	  mov cl,[esi]
	  cmp ecx,0x16
	  jz PvpActivate
      xor ecx,ecx
	  mov cl,[esi+0x15]
	  xor cx,0xCE43
	  mov [eax+0x9EAA],cx
	  jmp NotFoundAnotherUser
	  PvpActivate:
      xor ecx,ecx
	  mov cl,[esi+0x15]
	  xor cx,0xCE43
	  mov [eax+0x9EAA],cx
      jmp NotFoundAnotherUser
	  //Default
	  NotFoundAnotherUser:
	  xor eax,eax
	  mov ecx,[0x010D94A8]
	  mov ax,[esi+0x8]
      cmp ax,[ecx+0x000083C8]
	  push 0x006C6A07
	  ret

	  LocalUser:
	  xor ecx,ecx
	  mov cl,[esi]
	  cmp ecx,0x16
	  jnz PvpActivateLocal
      xor eax,eax
	  mov al,[esi+0x15]
	  xor ax,0xCE43
	  mov [0x1107258+0x9EAA],ax
	  jmp NotFoundAnotherUser
	  PvpActivateLocal:
	  jmp NotFoundAnotherUser
	}
}
__declspec(naked)void SetAttackSpeedNuker1PvP()  //006C6C2B  TriTue
{
__asm
	{
	  xor eax,eax
	  mov ax, [esi+0x8]
	  cmp ax, [0x1107258+0x83C8]
	  jz LocalUser
	  push eax
	  mov ecx,0x010D93D8
	  mov eax,0x0065F450
	  call eax
	  test eax,eax
	  jz NotFoundAnotherUser
	  xor ecx,ecx
	  mov cl,[esi]
	  cmp ecx,0x15
	  jnz PvpActivate
      xor ecx,ecx
	  mov cl,[esi+0x14]
	  xor cx,0xCE43
	  mov [eax+0x9EAA],cx
	  jmp NotFoundAnotherUser
	  PvpActivate:
      xor ecx,ecx
	  mov cl,[esi+0x15]
	  xor cx,0xCE43
	  mov [eax+0x9EAA],cx
      jmp NotFoundAnotherUser
	  //Default
	  NotFoundAnotherUser:
	  xor eax,eax
	  mov ecx,[0x010D94A8]
	  mov ax,[esi+0x8]
      cmp ax,[ecx+0x000083C8]
	  push 0x006C6C36
	  ret

	  LocalUser:
	  xor ecx,ecx
	  mov cl,[esi]
	  cmp ecx,0x15
	  jnz PvpActivateLocal
      xor eax,eax
	  mov al,[esi+0x14]
	  xor ax,0xCE43
	  mov [0x1107258+0x9EAA],ax
	  jmp NotFoundAnotherUser
	  PvpActivateLocal:
	  jmp NotFoundAnotherUser
	}
}
__declspec(naked)void GetAttackSpeedAnotherUser()  //00656B8D  TriTue
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  pushad
	  xor ecx,ecx
	  mov cx,[esi+0x9EAA]
	  xor cx,0xCE43
	  cmp cx,0x00
	  jz NotAttackSpeed
	  mov ecx,[esi+0x85DC]
	  test ecx,ecx
	  jz Default
	  test edi,edi
	  jz Default
	  cmp edi,6
	  jl CheckSpeedCao
	  cmp edi,29
	  ja CheckSpeedCao
	  jmp Default

      CheckSpeedCao:
	  cmp edi,105
	  jz Default
	  cmp edi,106
	  jz Default
	  cmp edi,107
	  jz Default
	  cmp edi,108
	  jz Default
	  cmp edi,109
	  jz Default
	  cmp edi,110
	  jz Default
	  cmp edi,111
	  jz Default
	  cmp edi,112
	  jz Default
	  cmp edi,143
	  jl ContinueShowSpeed
	  cmp edi,157
	  ja ContinueShowSpeed
	  jmp Default

      ContinueShowSpeed:
	  push edi
	  mov eax,0x0071A340
	  call eax
	  test eax,eax
	  jz Default
      push eax
	  mov edx,[esp+0x18]
      push edx
	  xor ecx,ecx
	  mov cx,[esi+0x9EAA]
	  xor cx,0xCE43
	  push ecx
	  call GetTimeDelayAnimation
	  Default:
	  popad
	  mov eax,[esp+0x30]
	  push ebx
	  push 0x00656B92
	  ret

	  GetTimeDelayAnimation:
	  sub esp,0x4
	  xor ecx,ecx
	  mov [esp],ecx
	  BackLoopGetTimeDelayAnimation:
	  mov ecx,[esp]
	  mov eax,[esp+0xC]
	  lea eax,[eax+0x30]
	  xor edx,edx
	  imul ecx,0x4
	  mov dl,[eax+ecx]
	  mov ebx,[esp+0x8]
	  cmp ebx,edx
	  ja CheckAnotherGetTimeDelayAnimation
	  xor edx,edx
	  mov dl,[eax+ecx+0x1]
	  mov eax,[esp+0x10]
      mov byte ptr [eax+0xC],dl
	  add esp,0x4
	  ret 0xC

	  CheckAnotherGetTimeDelayAnimation:
	  mov ecx,[esp]
	  add ecx,1
	  mov [esp],ecx
	  cmp ecx,10
	  jl BackLoopGetTimeDelayAnimation
	  mov eax,[esp+0x10]
      mov byte ptr [eax+0xC],0x1F
	  add esp,0x4
	  ret 0xC

	  NotAttackSpeed:
	  mov ecx,[esi+0x85DC]
	  test ecx,ecx
	  jz Default
	  test edi,edi
	  jz Default
	  push edi
	  mov eax,0x0071A340
	  call eax
	  test eax,eax
	  jz Default
	  mov byte ptr [eax+0xC],0x1F
	  jmp Default
	}
}
__declspec(naked)void DisableStackRelic()  //0062C759  TriTue
{
__asm
	{
	  add esp,0x4
	  cmp al,0x9
	  jnz Default
      mov al,0xE
	  Default:
	  cmp al,0xFF
	  push 0x0062C75E
	  ret
	}
}
__declspec(naked)void NdTangCuongDoCloth()  //006B60B9  TriTue
{
__asm
	{
      mov ecx,[0x01615E90]
      xor eax,eax
	  mov al,[ecx+0x00000114]
	  imul eax,0x90
	  xor ecx,ecx
	  mov cl,[0x1107258+eax+0x22DC8+0x16]
	  xor cl,0x1F
	  cmp cl,0x1
	  jnz Default
	  xor eax,eax
      mov ecx,[0x01615E90]
	  mov al,[ecx+0x00000100]
	  imul eax,0x90
	  xor ecx,ecx
	  mov cx,[0x1107258+eax+0x22DC8+0x14]
	  xor cx,0xCE43
	  cmp cx,0x62
	  jnz Default
      xor eax,eax
      mov ecx,[0x01615E90]
	  mov al,[ecx+0x00000114]
	  imul eax,0x90
	  xor ecx,ecx
	  mov cl,[0x1107258+eax+0x22DC8+0x2E]
	  xor cl,0xC5
	  cmp cl,0x8
	  jg MaxCuongDoCloth
	  Default:
      mov ecx,[0x01615E90]
	  push 0x006B60BF
	  ret

	  MaxCuongDoCloth:
	  push 0xFFFF2323
	  push 0x1
	  push 0xC
	  push 0x10DA
	  push 0x19
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x0155EE60
	  mov eax,0x006A9800
	  call eax
	  push 0x006B6168
	  ret

	}
}
__declspec(naked)void GiaHanCucDai()  //00488BE2  TriTue
{
__asm
	{
	  mov al,[ecx+0x00022DDE]
	  xor al,0x1F
	  cmp al,0x1
	  jnz Default
      mov al,[ecx+0x00022DDE+0x1]
	  xor al,0x1F
	  cmp al,0x04
	  jg Default
	  mov al,0x0
      push 0x00488BF3
	  ret

	  Default:
	  mov al,[ecx+0x00022DDE]
	  push 0x00488BE8
	  ret
	}
}
__declspec(naked)void TestLockChangeMaps()  //006959A5  TriTue
{
__asm
	{
	  add esp,0x10
	  mov ecx,[esp+0x40]
	  push eax
	  mov eax,[esp+0x48]
	  mov eax,[eax-0x10]
	  cmp eax,0xC
	  jnz Check162
	  cmp ecx,0x3EF
	  jz DefaultGame
	  jmp OutGame

	  Check162:
	  cmp eax,0xE
	  jnz Check15
      cmp ecx,0x40D
	  jz DefaultGame
	  jmp OutGame

	  Check15:
	  cmp eax,0xF
	  jnz Check16
	  cmp ecx,0x35
	  jz DefaultGame
	  jmp OutGame

	  Check16:
	  cmp eax,0x11
	  jnz Check18
      cmp ecx,0x26F
	  jz DefaultGame
	  jmp OutGame

	  Check18:
	  cmp eax,0x12
	  jnz Check19
      cmp ecx,0xC
	  jz DefaultGame
	  jmp OutGame

	  Check19:
	  cmp eax,0x13
	  jnz Check20
      cmp ecx,0x39
	  jz DefaultGame
	  jmp OutGame

	  Check20:
	  cmp eax,0x14
	  jnz Check21
	  cmp ecx,0xB8
	  jz DefaultGame
	  jmp OutGame

	  Check21:
	  cmp eax,0x16
	  jnz Check23
      cmp ecx,0x114
	  jz DefaultGame
	  jmp OutGame

	  Check23:
	  cmp eax,0x17
	  jnz Check36
      cmp ecx,0x41D
	  jz DefaultGame
	  jmp OutGame

	  Check36:
	  cmp eax,0x3A
	  jnz Check37
	  cmp ecx,0x16
	  jz DefaultGame
	  jmp OutGame

	  Check37:
	  cmp eax,0x3B
	  jnz Check38
	  cmp ecx,0x69
	  jz DefaultGame
	  jmp OutGame

	  Check38:
	  cmp eax,0x3C
	  jnz Check39
	  cmp ecx,0x69
	  jz DefaultGame
	  jmp OutGame

	  Check39:
	  cmp eax,0x3D
	  jnz Check40
	  cmp ecx,0x69
	  jz DefaultGame
	  jmp OutGame

	  Check40:
	  cmp eax,0x3E
	  jnz Check41
	  cmp ecx,0x69
	  jz DefaultGame
	  jmp OutGame

	  Check41:
	  cmp eax,0x3F
	  jnz Check64
	  cmp ecx,0xA
	  jz DefaultGame
	  jmp OutGame

	  Check64:
	  cmp eax,0x40
	  jnz Check65
      cmp ecx,0x3A
	  jz DefaultGame
	  jmp OutGame

	  Check65:
	  cmp eax,0x41
	  jnz Check66
      cmp ecx,0xD
	  jz DefaultGame
	  jmp OutGame

	  Check66:
	  cmp eax,0x43
	  jnz Check68
      cmp ecx,0x1
	  jz DefaultGame
	  jmp OutGame

	  Check68:
	  cmp eax,0x44
	  jnz DefaultGame
      cmp ecx,0x1
	  jz DefaultGame
	  jmp OutGame


	  DefaultGame:
	  pop eax
      cmp eax,0x1
	  push 0x006959AB
	  ret

	  OutGame:
      pop eax
	  push 0x0076C215
	  ret

	}
}
__declspec(naked)void ReloadLump()  //00696BE3  TriTue
{
__asm
	{
      pushad
	  push 0x0089B0A4
	  mov ecx,0x015732C8
	  mov eax,0x007B7560
	  call eax
	  test eax,eax
	  jz loc_5E028D
	  push eax
	  mov ecx,0x016E20C8
	  mov eax,0x007EECE0
	  call eax
	  test al,al
	  jnz loc_5E028D
      popad
	  push 0x0076C215
      ret

	  loc_5E028D:
	  popad
      mov ecx,0x015736B8
	  push 0x00696BE8
	  ret
	}
}
__declspec(naked)void HienThiSet()  //0068C953  TriTue
{
__asm
	{
	  add edi,0x90
	  cmp edi,0xE10
	  jl loc_68C8A5
	  cmp edi,0xE10
	  jnz Notadd
	  mov edi,0x4EC0
	  Notadd:
	  cmp edi,0x52B0
      jg Loc_0068C965
	  push 0x0068C8B1
      ret

      loc_68C8A5:
	  push 0x0068C8A5
	  ret
	  Loc_0068C965:
	  push 0x0068C965
      ret
	}
}
__declspec(naked)void AddOptionSet()  //0068C227  TriTue
{
__asm
	{
	  add ebx,0x90
	  cmp ebx,0xE10
	  jl loc_68C18C
	  cmp ebx,0xE10
	  jnz Notadd
	  mov ebx,0x4EC0
	  Notadd:
	  cmp ebx,0x52B0
	  jg Loc_0068C198
	  push 0x0068C198
      ret

	  loc_68C18C:
	  push 0x0068C18C
	  ret
	  Loc_0068C198:
	  push 0x0068C239
      ret
	}
}
//Hien Thi InforPhy
__declspec(naked)void InforPhy()  //004B9E5A  7
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  mov esi,[eax]      // Max 2DB86
	  mov ecx,[eax+0x4]  // Min 2DB84
      mov eax,[0x01733AC4]
	  push 0x004B9E68
      ret
	}
}
__declspec(naked)void InforPhy2()  //005FFDD7  7 edx
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  mov ecx,[esp+0x20]
      and ecx,0xFFFF
	  add eax,edi
      add eax,ecx
	  mov [edx+0x4],eax // Min
	  push 0x005FFDE6
      ret
	}
}
__declspec(naked)void InforPhy3()  //005FFDFB  7 edx
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  add eax, ebp
	  mov ebp,[esp+0x24]
	  and ebp,0xFFFF
	  add eax,ebp
	  mov [edx],eax // Max
	  push 0x005FFE08
      ret
	}
}
__declspec(naked)void InforPhy4()  //00628311  7 eax
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  add [eax+0x4],ebx // Max
      xor eax,eax
      mov ax,[esi+0x0002DC30]
	  push 0x00628318
      ret
	}
}
__declspec(naked)void InforPhy5()  //0062831F  7 eax
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  add [eax],ebx // Max
	  xor eax,eax
      mov ax,[esi+0x0002DC30]
	  push 0x00628326
      ret
	}
}
__declspec(naked)void InforPhy6()  //00628303  7 eax
{
__asm
	{
	  xor eax,eax
      mov ax,[esi+0x0002DC30]
	  push 0x0062830A
      ret
	}
}
//Magic
__declspec(naked)void InforMagic1()  //004B9F87  7
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  mov esi,[eax]      // Max 2DB8A
	  mov ecx,[eax+0x4]  // Min 2DB88
      mov eax,[0x01733AC4]
	  push 0x004B9F95
      ret
	}
}
__declspec(naked)void InforMagic2()  //006007AB  7 eax
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  mov [eax+0x4],ecx // Min
	  push 0x006007B2
      ret
	}
}
__declspec(naked)void InforMagic3()  //006007C9  7 eax
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  mov [eax],edx // Max
      xor eax,eax
	  push 0x006007D0
      ret
	}
}
__declspec(naked)void InforMagic4()  //00628331  7 eax
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  add [eax+0x4],ebx // Max
	  xor eax,eax
      mov ax, [esi+0x2DC30]
	  push 0x00628338
      ret
	}
}
__declspec(naked)void InforMagic5()  //0062833A  7 eax
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  add [eax],edi // Max
	  push 0x00628341
      ret
	}
}
__declspec(naked)void InforMagic6()  //00600799  7 eax
{
__asm
	{

	  mov ecx,[eax+0x0002DA20]
      xor ecx,0xAE1CDB23
	  push 0x006007A5
      ret
	}
}
__declspec(naked)void InforMagic7()  //006007B7  7 eax
{
__asm
	{

	  mov edx,[eax+0x0002DA20]
      xor edx,0xAE1CDB23
	  push 0x006007C3
      ret
	}
}
__declspec(naked)void RemoveOldSlot()  //006DD2A6  7 eax
{
__asm
	{

	  mov dword ptr [eax+0x000282B0],0x0000008C
	  push 0x006DD2B0
      ret
	}
}
__declspec(naked)void ChangeRequestItemIncCloth()  //004F50EA  5 eax
{
__asm
	{
	  mov cl,[eax+0x16]
	  xor cl,0x1F
	  cmp ecx,0x1
	  jnz Default
      xor ecx,ecx
	  mov cx,[eax+0x2A]
	  xor cx,0xCE43
	  cmp ecx,0x13
      jnz MagicInch
	  jmp Default
	  MagicInch:
      xor ecx,ecx
      mov cl,[eax+0x10]
	  xor cl,0xC5
	  cmp ecx,0x1
	  jnz CheckTinhLuyenMagic2
	  mov eax,ecx
	  mov ecx,[0x016A2144]
	  lea edx,[eax+eax*0x4]
	  lea eax,[eax+edx*0x2]
	  mov edx,[ecx+eax*0x4+0x8]
	  mov dword ptr[esp+0x20],0x71
	  mov edx,[ecx+eax*0x4+0xC]
	  mov ebx,0x71
	  lea eax,[ecx+eax*0x4]
	  push 0x004F5113
      ret
	  CheckTinhLuyenMagic2:
	  cmp ecx,0x2
	  jnz CheckTinhLuyenMagic3
      mov eax,ecx
	  mov ecx,[0x016A2144]
	  lea edx,[eax+eax*0x4]
	  lea eax,[eax+edx*0x2]
	  mov edx,[ecx+eax*0x4+0x8]
	  mov dword ptr[esp+0x20],0x72
	  mov edx,[ecx+eax*0x4+0xC]
	  mov ebx,0x72
	  lea eax,[ecx+eax*0x4]
	  push 0x004F5113
	  ret

	  CheckTinhLuyenMagic3:
	  cmp ecx,0x3
	  jnz CheckTinhLuyenMagic4
      mov eax,ecx
	  mov ecx,[0x016A2144]
	  lea edx,[eax+eax*0x4]
	  lea eax,[eax+edx*0x2]
	  mov edx,[ecx+eax*0x4+0x8]
	  mov dword ptr[esp+0x20],0x73
	  mov edx,[ecx+eax*0x4+0xC]
	  mov ebx,0x73
	  lea eax,[ecx+eax*0x4]
	  push 0x004F5113
	  ret

	  CheckTinhLuyenMagic4:
	  cmp ecx,0x4
	  jnz CheckTinhLuyenMagic5
      mov eax,ecx
	  mov ecx,[0x016A2144]
	  lea edx,[eax+eax*0x4]
	  lea eax,[eax+edx*0x2]
	  mov edx,[ecx+eax*0x4+0x8]
	  mov dword ptr[esp+0x20],0x74
	  mov edx,[ecx+eax*0x4+0xC]
	  mov ebx,0x74
	  lea eax,[ecx+eax*0x4]
	  push 0x004F5113
	  ret

	  CheckTinhLuyenMagic5:
	  cmp ecx,0x5
	  jnz CheckTinhLuyenMagic6
      mov eax,ecx
	  mov ecx,[0x016A2144]
	  lea edx,[eax+eax*0x4]
	  lea eax,[eax+edx*0x2]
	  mov edx,[ecx+eax*0x4+0x8]
	  mov dword ptr[esp+0x20],0x75
	  mov edx,[ecx+eax*0x4+0xC]
	  mov ebx,0x75
	  lea eax,[ecx+eax*0x4]
	  push 0x004F5113
	  ret

	  CheckTinhLuyenMagic6:
	  cmp ecx,0x6
	  jnz CheckTinhLuyenMagic7
      mov eax,ecx
	  mov ecx,[0x016A2144]
	  lea edx,[eax+eax*0x4]
	  lea eax,[eax+edx*0x2]
	  mov edx,[ecx+eax*0x4+0x8]
	  mov dword ptr[esp+0x20],0x76
	  mov edx,[ecx+eax*0x4+0xC]
	  mov ebx,0x76
	  lea eax,[ecx+eax*0x4]
	  push 0x004F5113
	  ret

	  CheckTinhLuyenMagic7:
	  cmp ecx,0x7
	  jnz CheckTinhLuyenMagic8
      mov eax,ecx
	  mov ecx,[0x016A2144]
	  lea edx,[eax+eax*0x4]
	  lea eax,[eax+edx*0x2]
	  mov edx,[ecx+eax*0x4+0x8]
	  mov dword ptr[esp+0x20],0x77
	  mov edx,[ecx+eax*0x4+0xC]
	  mov ebx,0x77
	  lea eax,[ecx+eax*0x4]
	  push 0x004F5113
	  ret

	  CheckTinhLuyenMagic8:
	  cmp ecx,0x8
	  jnz CheckTinhLuyenMagic9
      mov eax,ecx
	  mov ecx,[0x016A2144]
	  lea edx,[eax+eax*0x4]
	  lea eax,[eax+edx*0x2]
	  mov edx,[ecx+eax*0x4+0x8]
	  mov dword ptr[esp+0x20],0x78
	  mov edx,[ecx+eax*0x4+0xC]
	  mov ebx,0x78
	  lea eax,[ecx+eax*0x4]
	  push 0x004F5113
	  ret

	  CheckTinhLuyenMagic9:
	  cmp ecx,0x9
	  jnz CheckTinhLuyenMagic10
      mov eax,ecx
	  mov ecx,[0x016A2144]
	  lea edx,[eax+eax*0x4]
	  lea eax,[eax+edx*0x2]
	  mov edx,[ecx+eax*0x4+0x8]
	  mov dword ptr[esp+0x20],0x79
	  mov edx,[ecx+eax*0x4+0xC]
	  mov ebx,0x79
	  lea eax,[ecx+eax*0x4]
	  push 0x004F5113
	  ret

	  CheckTinhLuyenMagic10:
	  cmp ecx,0xA
	  jnz CheckTinhLuyenMagic11
      mov eax,ecx
	  mov ecx,[0x016A2144]
	  lea edx,[eax+eax*0x4]
	  lea eax,[eax+edx*0x2]
	  mov edx,[ecx+eax*0x4+0x8]
	  mov dword ptr[esp+0x20],0x7A
	  mov edx,[ecx+eax*0x4+0xC]
	  mov ebx,0x7A
	  lea eax,[ecx+eax*0x4]
	  push 0x004F5113
	  ret

	  CheckTinhLuyenMagic11:
	  cmp ecx,0xB
	  jnz CheckTinhLuyenMagic12
      mov eax,ecx
	  mov ecx,[0x016A2144]
	  lea edx,[eax+eax*0x4]
	  lea eax,[eax+edx*0x2]
	  mov edx,[ecx+eax*0x4+0x8]
	  mov dword ptr[esp+0x20],0x7B
	  mov edx,[ecx+eax*0x4+0xC]
	  mov ebx,0x7B
	  lea eax,[ecx+eax*0x4]
	  push 0x004F5113
	  ret

	  CheckTinhLuyenMagic12:
	  cmp ecx,0xC
	  jnz CheckTinhLuyenMagic13
      mov eax,ecx
	  mov ecx,[0x016A2144]
	  lea edx,[eax+eax*0x4]
	  lea eax,[eax+edx*0x2]
	  mov edx,[ecx+eax*0x4+0x8]
	  mov dword ptr[esp+0x20],0x7C
	  mov edx,[ecx+eax*0x4+0xC]
	  mov ebx,0x7C
	  lea eax,[ecx+eax*0x4]
	  push 0x004F5113
	  ret

	  CheckTinhLuyenMagic13:
	  cmp ecx,0xD
	  jnz CheckTinhLuyenMagic14
      mov eax,ecx
	  mov ecx,[0x016A2144]
	  lea edx,[eax+eax*0x4]
	  lea eax,[eax+edx*0x2]
	  mov edx,[ecx+eax*0x4+0x8]
	  mov dword ptr[esp+0x20],0x7D
	  mov edx,[ecx+eax*0x4+0xC]
	  mov ebx,0x7D
	  lea eax,[ecx+eax*0x4]
	  push 0x004F5113
	  ret

	  CheckTinhLuyenMagic14:
	  cmp ecx,0xE
	  jnz Default
      mov eax,ecx
	  mov ecx,[0x016A2144]
	  lea edx,[eax+eax*0x4]
	  lea eax,[eax+edx*0x2]
	  mov edx,[ecx+eax*0x4+0x8]
	  mov dword ptr[esp+0x20],0x7E
	  mov edx,[ecx+eax*0x4+0xC]
	  mov ebx,0x7E
	  lea eax,[ecx+eax*0x4]
	  push 0x004F5113
	  ret

	  Default:
	  mov cl,[eax+0x10]
	  mov eax,ecx
	  push 0x004F50EF
      ret
	}
}

__declspec(naked)void ChangeRequestItemIncCloth1()  //004F3F4D  9 eax
{
__asm
	{
	  mov al,[ecx+0x16]
	  xor al,0x1F
	  cmp eax,0x1
	  jnz Default
	  mov ax,[ecx+0x2A]
	  xor ax,0xCE43
	  cmp eax,0x13
      jnz MagicInch
	  jmp Default
	  MagicInch:
	  xor eax,eax
      mov al,[ecx+0x10]
	  xor al,0xC5
	  cmp eax,0x1
	  jnz CheckTinhLuyenMagic2
	  push 0x71
	  push 0xA
	  push 0x004F3F6D
	  ret

	  CheckTinhLuyenMagic2:
	  cmp eax,0x2
	  jnz CheckTinhLuyenMagic3
	  push 0x72
	  push 0xA
	  push 0x004F3F6D
	  ret

	  CheckTinhLuyenMagic3:
	  cmp eax,0x3
	  jnz CheckTinhLuyenMagic4
	  push 0x73
	  push 0xA
	  push 0x004F3F6D
	  ret

	  CheckTinhLuyenMagic4:
	  cmp eax,0x4
	  jnz CheckTinhLuyenMagic5
	  push 0x74
	  push 0xA
	  push 0x004F3F6D
	  ret

	  CheckTinhLuyenMagic5:
	  cmp eax,0x5
	  jnz CheckTinhLuyenMagic6
	  push 0x75
	  push 0xA
	  push 0x004F3F6D
	  ret

	  CheckTinhLuyenMagic6:
	  cmp eax,0x6
	  jnz CheckTinhLuyenMagic7
	  push 0x76
	  push 0xA
	  push 0x004F3F6D
	  ret

	  CheckTinhLuyenMagic7:
	  cmp eax,0x7
	  jnz CheckTinhLuyenMagic8
	  push 0x77
	  push 0xA
	  push 0x004F3F6D
	  ret

	  CheckTinhLuyenMagic8:
	  cmp eax,0x8
	  jnz CheckTinhLuyenMagic9
	  push 0x78
	  push 0xA
	  push 0x004F3F6D
	  ret

	  CheckTinhLuyenMagic9:
	  cmp eax,0x9
	  jnz CheckTinhLuyenMagic10
	  push 0x79
	  push 0xA
	  push 0x004F3F6D
	  ret

	  CheckTinhLuyenMagic10:
	  cmp eax,0xA
	  jnz CheckTinhLuyenMagic11
	  push 0x7A
	  push 0xA
	  push 0x004F3F6D
	  ret

	  CheckTinhLuyenMagic11:
	  cmp eax,0xB
	  jnz CheckTinhLuyenMagic12
	  push 0x7B
	  push 0xA
	  push 0x004F3F6D
	  ret

	  CheckTinhLuyenMagic12:
	  cmp eax,0xC
	  jnz CheckTinhLuyenMagic13
	  push 0x7C
	  push 0xA
	  push 0x004F3F6D
	  ret

	  CheckTinhLuyenMagic13:
	  cmp eax,0xD
	  jnz CheckTinhLuyenMagic14
	  push 0x7D
	  push 0xA
	  push 0x004F3F6D
	  ret

	  CheckTinhLuyenMagic14:
	  cmp eax,0xE
	  jnz Default
	  push 0x7E
	  push 0xA
	  push 0x004F3F6D
	  ret

	  Default:
	  mov al,[ecx+0x10]
      mov ecx,[0x016A2144]
	  push 0x004F3F56
      ret
	}
}
__declspec(naked)void ByPassOverIndex3Dx()  //0070D05F  8 eax
{
__asm
	{
	  mov eax, [esi]
	  add esp, 0x10
	  cmp eax, 0xF9
	  push 0x0070D067
      ret
	}
}
__declspec(naked)void ByPassOverIndex3Dx1()  //0070DAAE  8 eax
{
__asm
	{
	  mov eax, [esi]
	  add esp, 0x10
	  cmp eax, 0xF9
	  push 0x0070DAB6
	  ret
	}
}
__declspec(naked)void ByPassOverIndex3Dx2()  //0070E51D  8 eax
{
__asm
	{
	  mov eax, [esi]
	  add esp, 0x10
	  cmp eax, 0xF9
	  push 0x0070E525
      ret
	}
}
__declspec(naked)void LoadFastMap()  //005A0E26  8 eax
{
__asm
	{
	  push 0x005A0E2D
      ret
	}
}
__declspec(naked)void BoQuaThongBaoLienMinh()  //006B0D1B  8 eax
{
__asm
	{
	  push 0x006B0D23
      ret
	}
}
__declspec(naked)void BypassMaxModel()  //0071E92D  8 eax
{
__asm
	{
	  cmp ebp, 0xFA0
	  jge loc_71FB6B
	  push 0x0071E939
      ret
	  loc_71FB6B:
	  push 0x0071FB6B
      ret
	}
}
__declspec(naked)void GetAttackSpeedFromNick()  //005FECAD  8 eax
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  mov ebx,eax
	  mov byte ptr [ebx+0x1],0x0
	  xor eax,eax
	  movsx eax,word ptr [esi+0xA]
	  cmp eax,0x14
	  jnz NotAttackSpees
	  xor eax,eax
	  mov ax,[esi+0xC]
	  mov [ebx+0x1],al
	  xor eax,eax
	  mov al,[ebx]
	  xor ecx,ecx
	  mov cl,[ebx+0x1]
	  add eax,ecx
	  xor ax,0xCE43
      mov [0x01111102],ax
	  NotAttackSpees:
	  xor eax,eax
      mov ecx,0x01616DB8
      movsx eax,word ptr [esi+0xA]
      mov [esp+0x10],eax
	  push 0x005FECB5
	  ret

	}
}
__declspec(naked)void FixHienThiDamge()  //005FFC99  8 eax
{
__asm
	{
	  xor ebp,ebp
	  mov bp,ax
      mov eax,[esp+0x44]
	  push 0x005FFCA0
      ret
	}
}
__declspec(naked)void ChangeCodeText()  //007C2317  8 eax
{
__asm
	{
	  mov eax,[ebx]
	  xor edi,edi
	  BackEndCode:
      xor ecx,ecx
	  xor cx,[eax+0xC+edi]
	  xor cx,0x1615
	  mov [eax+0xC+edi],cx
	  add edi,0x2
	  cmp edi,0x18
	  jb BackEndCode
      xor edi,edi
	  mov eax,[esp+0x44]
      add esp,0x10
	  push 0x007C231E
      ret
	}
}
__declspec(naked)void ChangeCodeText2()  //007C2426  8 eax
{
__asm
	{
	  mov eax,[esp]
	  xor ecx,ecx
	  BackEndCode:
	  xor edx,edx
	  xor dx,[eax+0x4+ecx]
	  test edx,edx
	  jz EndDecrypt
	  xor dx,0x0712
	  mov [eax+0x4+ecx],dx
      add ecx,0x2
	  jmp BackEndCode
      EndDecrypt:
	  mov edx,[ebp+0x8]
	  mov eax,[esp+0x68]
	  push 0x007C242D
      ret
	}
}
__declspec(naked)void ChangeCodeText3()  //007C2648  8 eax
{
__asm
	{
	  add esp,0x10
	  lea eax,[esp+0x91C]
	  xor ecx,ecx
	  BackEndCode:
	  xor edx,edx
	  xor dx,[eax+ecx]
	  test edx,edx
	  jz EndDecrypt
	  xor dx,0x1107
	  mov [eax+ecx],dx
      add ecx,0x2
	  jmp BackEndCode
      EndDecrypt:
	  push 0x007C2506
      ret
	}
}
__declspec(naked)void AddInfoItem()  //006AAE25  8 eax
{
__asm
	{
	  add ebp,0x12
	  mov ecx,esi
	  xor eax,eax
	  mov al,[ebp+0xC]
	  cmp eax,0xFF
      jnz Default
	  pushad
	  push 0x0000283C
	  mov ecx,0x017323A8
	  mov eax,0x007D8550
	  call eax
      mov esi,eax
	  mov dword ptr [esi+0x32C],0x0
	  mov dword ptr [esi+0x334],0x1
	  xor eax,eax
	  mov al,[ebp+0xF]
	  xor al,0x1F
	  mov [esi+0x222],al
      xor eax,eax
	  mov ax,[ebp+0x13]
	  xor ax,0xCE43
	  mov [esi+0x220],ax
      xor eax,eax
	  mov al,[ebp+0x17]
	  xor al,0xC5
	  mov  [esi+0x225],al
      mov al,[ebp+0x18]
	  xor al,0xC5
	  mov  [esi+0x21C],al
	  mov dword ptr [esi+0x10],0x1
	  popad
      Default:
	  push 0x006AAE2A
      ret
	}
}
__declspec(naked)void GetPacketFromCombine()  //00704A58  8 eax
{
__asm
	{
	  mov [esi+eax+0x00022DDC],dx
      xor edx,edx
	  mov dl,[edi+0x17]
	  xor dl,0xC5
	  mov [esi+eax+0x00022DD8],dl
	  push 0x00704A60
      ret
	}
}
__declspec(naked)void TestFuncOpenBox()  //0048CA92  8 eax
{
__asm
	{
	  xor eax,eax
	  mov eax,[esi+0x98]
	  imul eax,0x90
	  xor ecx,ecx
	  mov cl,[0x1107258+eax+0x22DC8+0x17]
	  xor cl,0x1F
	  cmp ecx,0xA
	  jnz Default
	  //
	  push 0x282C
	  mov ecx,0x017323A8
	  mov eax,0x007D8550
	  call eax
	  test eax,eax
	  jz Default
	  mov ecx,eax
	  mov eax,0x00578300
	  call eax
	  cmp eax,-1
	  jz FullHanhTrang
	  //
      xor eax,eax
	  mov eax,[esi+0x98]
	  push 0x0
	  push 0x0
	  push 0x0
	  push eax
      push 0x7A
	  mov ecx,0x0155EE60
	  mov eax,0x006B3170
	  call eax
	  push 0x48DAD5
      ret

	  Default:
	  movsx eax,word ptr [esi+0x1C]
	  mov ecx,[0x01733A9C]
	  push 0x0048CA9C
	  ret

	  FullHanhTrang:
      push 0xFFFF2323
	  push 0x1
	  push 0xC
	  push 207
	  push 74
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x0155EE60
	  mov eax,0x006A9800
	  call eax
      jmp Default

      GetEmptySlot:
	  sub esp,0x4
	  xor ecx,ecx
	  mov dword ptr [esp],0x19
      BackLoopCheckEmtypSlot:
	  mov ecx,[esp]
	  imul ecx,0x90
	  xor edx,edx
	  mov dx,[0x1107258+ecx+0x22DC8+0x14]
	  xor dx,0xCE43
	  test edx,edx
	  jz ConSlotTrong
	  mov ecx,[esp]
	  add ecx,0x1
	  mov [esp],ecx
      xor edx,edx
	  mov dl,[0x1107258+0x22DC0]
	  cmp ecx,edx
	  jl BackLoopCheckEmtypSlot
      mov eax,0x0
	  add esp,0x4
      ret
	  ConSlotTrong:
	  mov eax,1
	  add esp,0x4
	  ret
	}
}
__declspec(naked)void AcceptItemVPrequest()  //0048CA9C  8 eax
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
      push eax
	  mov ecx,[eax+0x20]
	  test ecx,ecx
	  jz Default
	  mov ecx,[eax]
	  test ecx,ecx
	  jz ChuaChonLoai
      mov ecx,[eax+0x4]
	  test ecx,ecx
	  jz ChuaChonTinVat
      mov ecx,[eax]
	  cmp ecx,0x1
	  jnz KiemTraTinhNang2
	  AddOption:
	  mov eax,[esi+0x98]
	  imul eax,0x90
	  xor ecx,ecx
	  mov cl,[0x1107258+eax+0x22DC8+0x16]
	  xor cl,0x1F
	  cmp ecx,0x7
	  jnz NotAcceptVpRequest
	  xor ecx,ecx
	  mov cx,[0x1107258+eax+0x22DC8+0x14]
	  xor cx,0xCE43
	  cmp cx,0x769
	  jz AcceptItemRequest
	  cmp cx,0x76A
	  jz AcceptItemRequest
      cmp cx,0x76B
	  jz AcceptItemRequest
      cmp cx,2037
	  jz AcceptItemRequest
      NotAcceptVpRequest:
	  push 0xFFFF0000
	  push 0x1
	  push 0xC
	  push 0x000010F0
	  push 0x19
      mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x0155EE60
	  mov eax,0x6A9800
	  call eax
      pop eax
	  push 0x0048DCCB
	  ret

	  AcceptItemRequest:
	  mov ecx,[esi+0x98]
	  mov eax,[esp]
	  mov [eax+0x8],ecx
      pop eax
	  push 0x0048DCCB
	  ret

	  KiemTraTinhNang2:
      cmp ecx,0x2
	  jnz KiemTraTinhNang3
      jmp AddOption


      KiemTraTinhNang3:
      cmp ecx,0x3    //Mo Rong
	  jnz Default
      mov eax,[esi+0x98]
	  imul eax,0x90
	  xor ecx,ecx
	  mov cl,[0x1107258+eax+0x22DC8+0x16]
	  xor cl,0x1F
	  cmp ecx,0x7
	  jnz NotAcceptVpRequest
	  xor ecx,ecx
	  mov cx,[0x1107258+eax+0x22DC8+0x14]
	  xor cx,0xCE43
	  cmp ecx,0x76D
	  jz AcceptItemMoRuong
      cmp ecx,1903
	  jz AcceptItemMoRuong
	  jmp NotAcceptVpMoRong

	  AcceptItemMoRuong:
      mov ecx,[esi+0x98]
	  mov eax,[esp]
	  mov [eax+0x8],ecx
      pop eax
	  push 0x0048DCCB
      ret


	  NotAcceptVpMoRong:
      push 0xFFFF0000
	  push 0x1
	  push 0xC
	  push 0x000010F0
	  push 0x19
      mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x0155EE60
	  mov eax,0x6A9800
	  call eax
      pop eax
	  push 0x0048DCCB
      ret


	  Default:
      pop eax
	  movsx eax,word ptr [esi+0x1C]
	  mov ecx,[0x01733A9C]
      xor eax,0xFFFFCE43
	  push 0x0048CAA1
	  ret



	  ChuaChonLoai:
	  push 0xFFFF0000
	  push 0x1
	  push 0xC
	  push 0x000010EE
	  push 0x19
      mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x0155EE60
	  mov eax,0x6A9800
	  call eax
	  pop eax
	  push 0x0048DCCB
	  ret

      ChuaChonTinVat:
	  push 0xFFFF0000
	  push 0x1
	  push 0xC
	  push 0x000010EF
	  push 0x19
      mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x0155EE60
	  mov eax,0x6A9800
	  call eax
      pop eax
	  push 0x0048DCCB
	  ret
	}
}
__declspec(naked)void TestFuncOpenBox2()  //0048D24F  8 eax
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  xor ecx,ecx
	  mov ecx,[esi+0x98]
	  imul ecx,0x90
	  xor edx,edx
	  mov dl,[0x1107258+ecx+0x22DC8+0x17]
	  xor dl,0x1F
	  cmp edx,0x15
	  jnz Default
	  xor edx,edx
	  mov dx,[0x1107258+ecx+0x22DC8+0x14]
	  xor dx,0xCE43
	  cmp edx,0x65
	  jnz TangTinhLuyen4
      mov dword ptr [eax],0x1
      jmp NotFoundTinhLuyen
	  TangTinhLuyen4:
	  cmp edx,0x64
	  jnz NotFoundTinhLuyen
      mov dword ptr [eax],0x2
	  NotFoundTinhLuyen:
      xor eax,eax
	  mov eax,[esi+0x98]
	  push 0x0
	  push 0x0
	  push 0x0
	  push eax
      push 0x7A
	  mov ecx,0x0155EE60
	  mov eax,0x006B3170
	  call eax
	  push 0x0048DAD5
      ret

	  Default:
	  mov cx, [esi+0x1C]
	  xor cx, 0xCE43
	  push 0x0048D258
	  ret
	  /*xor eax,eax
	  mov eax,[esi+0x98]
	  imul eax,0x90
	  xor ecx,ecx
	  mov cl,[0x1107258+eax+0x22DC8+0x17]
	  xor cl,0x1F
	  cmp ecx,0x15
	  jnz Default
      xor eax,eax
	  mov eax,[esi+0x98]
	  push 0x0
	  push 0x0
	  push 0x0
	  push eax
      push 0x7A
	  mov ecx,0x0155EE60
	  mov eax,0x006B3170
	  call eax
	  push 0x0048DAD5
      ret

	  Default:
	  mov cx, [esi+0x1C]
	  xor cx, 0xCE43
	  push 0x0048D258
	  ret  */

	}
}
__declspec(naked)void ChoDucSlotVkTinhLuyen()  //0051B56A  8 eax
{
__asm
	{
	  mov dl,[eax+ebp+0x00022DD8]
	  xor dl, 0xC5
	  push 0x0051B589
	  ret
	}
}
__declspec(naked)void MoRongBangHoi()  //0065FFC5  8 eax
{
__asm
	{
	  mov eax, DWORD PTR SS : [0x10D94A8]
	  mov ecx, [eax + 0x470]
	  mov eax, [eax + ecx * 0x4 + 0x20]
	  nChucMungNamMoi:
      cmp eax,0x285A
	  jnz nVanSuNhuY
	  sub ebx,0x1F
	  jmp Default

	  nVanSuNhuY:
	  cmp eax,0x2859
	  jnz CheckTopPhuHo
	  sub ebx,0x18
	  jmp Default

      CheckTopPhuHo:
	  cmp eax,0x2772
	  jz TopPhuHo
	  cmp eax,0x2773
	  jz TopPhuHo
	  cmp eax,0x2774
	  jz TopPhuHo
      cmp eax,0x2775
	  jz TopPhuHo
	  jmp Default

      TopPhuHo:
	  sub ebx,0x1C
	  jmp Default

	  Default:
      mov eax,[edx+0x0000838C]
	  push 0x0065FFCB
	  ret
	}
}

__declspec(naked)void MoRongBangHoi2()  //00660F57  8 eax
{
__asm
	{
	  mov eax, esi
	  mov eax, [eax + 0x470]
	  mov edx, DWORD PTR SS : [0x16A2178]
	  lea ecx, [eax + eax * 2]
	  shl ecx, 4
	  sub ecx, eax
	  mov eax, [edx + ecx * 0x4]
	  nChucMungNamMoi:
      cmp eax,0x285A
	  jnz nVanSuNhuY
	  sub ebp,0x1F
	  jmp Default

      nVanSuNhuY:
      cmp eax,0x2859
	  jnz CheckTopPhuHo
	  sub ebp,0x18
	  jmp Default

      CheckTopPhuHo:
	  cmp eax,0x2772
	  jz TopPhuHo
	  cmp eax,0x2773
	  jz TopPhuHo
	  cmp eax,0x2774
	  jz TopPhuHo
      cmp eax,0x2775
	  jz TopPhuHo
	  jmp Default

      TopPhuHo:
	  sub ebp,0x1C
	  jmp Default

	  Default:
	  mov edx,[esi+0x0000838C]
	  push 0x00660F5D
	  ret
	}
}
__declspec(naked)void GetMaxSlot()  //005DAE35  8 eax
{
__asm
	{
	  pushad
	  mov ebx,0x18
	  LoopCheck:
	  add ebx,0x1
	  mov ecx,ebx
	  cmp ecx,0x8C
      jae MaxSlot
	  mov eax,0x1107258
	  imul ecx,0x90
	  xor edx,edx
	  mov dx,[eax+ecx+0x22DC8+0x14]
	  xor dx,0xCE43
	  test edx,edx
	  jnz LoopCheck
	  popad
	  cmp edi,0x1
      ja ChiChoChon1Cai
      mov  ecx, [esi+0x20C]
	  push 0x005DAE3B
	  ret

	  ChiChoChon1Cai:
	  mov ecx,0x01733B30
	  push 0xFFFF0000
	  push 0x1
	  push 0xC
	  push 0x00001465
	  push 0x19
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x0155EE60
	  mov eax,0x6A9800
	  call eax
      push 0x005DAE78
      ret


	  MaxSlot:
	  popad
      mov ecx,0x01733B30
	  push 0xFFFF0000
	  push 0x1
	  push 0xC
	  push 0x00006A2
	  push 0x19
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x0155EE60
	  mov eax,0x6A9800
	  call eax
	  push 0x005DAE78
      ret
	}
}
__declspec(naked)void EncryptTwoByte()  //0040431E  8 eax
{
__asm
	{
	  mov bl,[esp+eax+0x18]
	  xor bl,0xF1
	  mov [esp+eax+0x18],bl
	  push 0x00404329
	  ret
	}
}
__declspec(naked)void EncryptTwoByte2()  //007B7C59  8 eax
{
__asm
	{
	  mov cl,[esp+eax+0x14]
	  xor cl,0xF1
      mov [esp+eax+0x14],cl
	  push 0x007B7C64
	  ret
	}
}
__declspec(naked)void ByPassGetIP()  //006A7B4D  8 eax
{
__asm
	{
	  push 0x006A7BED
	  ret
	}
}
__declspec(naked)void ThongBaoKhiNhanQua()  //006AAC57  8 eax
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
      nop
	  xor ecx,ecx
	  mov cl,[ebp+0x2]
	  cmp ecx,0x3B
	  jnz Default
      xor ecx,ecx
	  mov cl,[ebp+0x8]
	  cmp ecx,0xF1
	  jnz PkInfor
	  mov [ebp+0x9],eax
	  mov cl,[ebp+0x3]
	  cmp ecx,0x0
	  jnz CheckInfor2
	  mov eax,[ebp+0x4]
      push 0xFFFF0000
	  push 0x1
	  push 0xC
	  push eax
	  push 0x1475
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  push 0x100
	  mov eax,[ebp+0x9]
	  push eax
	  mov eax,0x0085C538
	  call [eax]
	  add esp,0x10
	  mov eax,[ebp+0x9]
      push eax
	  mov ecx,0x0155EE60
	  mov eax,0x6A9800
	  call eax
	  jmp EndFuncLoad

	  CheckInfor2:
	  cmp ecx,0x1
	  jnz CheckInfor3
      mov ecx,0x01733B30
	  push 0xFFFF0000
	  push 0x1
	  push 0xC
	  push 0x1476
	  push 0x19
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x0155EE60
	  mov eax,0x6A9800
	  call eax
	  jmp EndFuncLoad

      CheckInfor3:
	  cmp ecx,0x2
	  jnz Default
      mov eax,[ebp+0x4]
      push 0xFFFF0000
	  push 0x1
	  push 0xC
	  push eax
	  push 0x1477
	  push 0x19
      mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  push 0x100
	  mov eax,[ebp+0x9]
	  push eax
      mov eax,0x0085C538
	  call [eax]
	  add esp,0x10
      mov eax,[ebp+0x9]
      push eax
	  mov ecx,0x0155EE60
	  mov eax,0x6A9800
	  call eax

	  EndFuncLoad:
	  mov eax,0x1
	  pop edi
	  pop esi
	  pop ebp
	  pop ebx
	  add esp,0x264
      ret 0x4

	  PkInfor:
      xor ecx,ecx
	  mov cl,[ebp+0x3]
	  cmp ecx,0xE2
	  jnz ErrorGhiDanhTongKim
      mov [ebp+0x1E],eax
	  lea eax,[ebp+0x4]
      lea ecx,[ebp+0x11]
      push 0xFFFF0000
	  push 0x1
	  push 0xC
      //
      push ecx
	  push eax
	  push 0x1612
	  push 0x19
      mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  push 0x100
	  mov eax,[ebp+0x1E]
	  push eax
      mov eax,0x0085C538
	  call [eax]
	  add esp,0x14
      //
	  mov eax,[ebp+0x1E]
      push eax
	  mov ecx,0x0155EE60
	  mov eax,0x6A9800
	  call eax
	  jmp EndFuncLoad

	  ErrorGhiDanhTongKim:
      cmp ecx,0x24
	  jnz Default
      xor eax,eax
      mov al,[ebp+0x4]
	  cmp eax,0x1
	  jnz KiemTraThongBao2
	  push 0xFFFF0000
	  push 0x1
	  push 0xC
	  push 0x1613
	  push 0x19
      mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
      push eax
	  mov ecx,0x0155EE60
	  mov eax,0x6A9800
	  call eax
      jmp EndFuncLoad
	  KiemTraThongBao2:
	  cmp eax,0x2
	  jnz Default
	  push 0xFFFF0000
	  push 0x1
	  push 0xC
	  push 0x1614
	  push 0x19
      mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
      push eax
	  mov ecx,0x0155EE60
	  mov eax,0x6A9800
	  call eax
	  jmp EndFuncLoad




	  Default:
      xor eax,eax
	  mov  al, [ebp+0x2]
	  xor ecx,ecx
      mov cl,[eax+0x006B2494]
	  push 0x006AAC5F
	  ret
	}
}
__declspec(naked)void GetInfoTongKim()  //006AAC48  8 eax
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
      nop
	  xor ecx,ecx
	  mov cl,[ebp+0x2]
	  cmp ecx,0x3B
	  jnz Default
      xor ecx,ecx
	  mov cl,[ebp+0x3]
	  cmp ecx,0xF3
	  jnz GetThongTinUserTK
	  mov ecx,0x0
      LoopAdd:
	  xor edx,edx
	  mov dl,[ebp+0x4+ecx]
	  mov [eax+ecx],dl
	  cmp ecx,0x14B
	  jz Default
	  add ecx,0x1
	  jmp LoopAdd


	  GetThongTinUserTK:
      cmp ecx,0xF9
	  jnz Default
	  mov cx,[ebp+0x18]
	  mov [0x1107258+0x82A6],cx
      mov ecx,0x0
	  LoopAdd2:
	  xor edx,edx
	  mov dl,[ebp+0x4+ecx]
	  mov [eax+ecx+0x14C],dl
	  cmp ecx,0x24
	  jz Default
	  add ecx,0x1
	  jmp LoopAdd2


	  Default:
      xor eax,eax
	  mov  al, [ebp+0x2]
      cmp eax,0xFE
	  push 0x006AAC4D
	  ret
	}
}
__declspec(naked)void BypassErrorDriver()  //007620B4  8 eax
{
__asm
	{
	  push 0x007620DC
	  ret
	}
}
__declspec(naked)void GetDiemTK()  //006B8E29  8 eax
{
__asm
	{
      xor eax,eax
	  mov al,[0x1107258+0x47C]
	  cmp eax,0xB
	  jnz Default
	  mov [edx+0x000082A0],ecx
	  mov al,[ebp+0x24]
	  xor al,0xF
	  mov [edx+0x000082A4],al
	  mov ax,[ebp+0x26]
	  mov [edx+0x000082A4+0x2],ax
	  mov ecx,0x010D94A8
	  mov ecx,[ecx]
	  push 0x00002717
	  push 0x006B8E48
      ret
	  Default:
	  mov [edx+0x000082A0],ecx
	  push 0x006B8E2F
	  ret
	}
}

__declspec(naked)void ShowDiemTK1()  //0065FC2B  8 eax
{
__asm
	{
	  xor edx,edx
      mov dl,[0x1107258+0x47C]
	  cmp edx,0xB
	  jnz Default
      xor edx,edx
	  mov dx,[ecx+0x000082A4+0x2]
	  push 0x0065FC37
      ret

	  Default:
      mov edx,[ecx+0x000082A4]
	  push 0x0065FC31
	  ret
	}
}
__declspec(naked)void ShowDiemTK2()  //004BA464  8 eax
{
__asm
	{
      xor edx,edx
      mov dl,[0x1107258+0x47C]
	  cmp edx,0xB
	  jnz Default
	  xor edx,edx
	  mov dx,[0x1107258+0x000082A4+0x2]
      mov ecx,[eax]
	  push 0x004BA472
      ret

	  Default:
	  mov edx,[0x1107258+0x000082A4]
      mov ecx,[eax]
	  push 0x004BA46C
	  ret
	}
}
__declspec(naked)void GetDiemFromAnotherUserTK()  //006BA889  8 eax
{
__asm
	{
	  xor edx,edx
	  mov dl,[0x1107258+0x47C]
	  cmp edx,0xB
      jnz Default
	  mov dl, [ebx+0x4F]
      mov [ebp+0x82A4],dl
	  push 0x006BA89B
      ret

	  Default:
	  mov dl, [ebx+0x4F]
      and edx,0xF
	  push 0x006BA88F
	  ret
	}
}
__declspec(naked)void ShowInforTongKim()  //005CCDD1  8 eax
{
__asm
	{
	  xor ecx,ecx
	  mov cl,[0x1107258+0x47C]
	  cmp ecx,0xB
	  jnz Default
	  push 0x2826
      mov ecx,0x01733ACC
      mov ecx,[ecx]
	  push 0x005CCDD6
	  ret
	  Default:
	  push 0x00002767
      mov ecx,0x01733ACC
	  mov ecx,[ecx]
	  push 0x005CCDD6
	  ret
	}
}
__declspec(naked)void ThayDoiTen1()  //004728CF  8 eax
{
__asm
	{
	  xor ecx,ecx
	  mov cl,[0x1107258+0x47C]
	  cmp ecx,0xB
	  jnz Default
	  push 0x0000160F
	  mov ecx,0x01733ACC
      mov ecx,[ecx]
	  push 0x004728D4
	  ret
	  Default:
	  push 0x00000E30
      mov ecx,0x01733ACC
      mov ecx,[ecx]
	  push 0x004728D4
	  ret
	}
}
__declspec(naked)void GetDuLieuTongKim()  //00472974  5 eax
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
      add eax,0x8
	  lea ebx,[esi+0x00000208]
	  xor ecx,ecx
	  BackLoopAdd:
      xor edx,edx
	  mov dl,[eax+ecx]
	  mov [ebx+ecx],dl
	  add ecx,0x1
	  cmp ecx,0x167
	  jl BackLoopAdd
	  push 0x0047297A
	  ret
	}
}
__declspec(naked)void LineNguoiChoiTK()  //004729D7  5 eax
{
__asm
	{
	  cmp ebp,0x9
	  jnz Default
      push 0x1615
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov edx,[esi+0x18]
      push 0x0089507C
	  push 0x004729E3
	  ret


      Default:
	  mov edx,[ebx+0x10]
	  push edx
	  mov edx,[esi+0x18]
	  push 0x004729DE
	  ret
	}
}
__declspec(naked)void ShowPhe()  //00472A62  5 eax
{
__asm
	{
	  push 0x0089507C
	  push 0x00472A67
	  ret
	}
}
__declspec(naked)void ShowPhe1()  //00472A54  5 eax
{
__asm
	{
	  mov edx,[ebx+0x18]
	  cmp edx,0x1
	  jnz PheTong
      push 0x0000160D
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  mov edx,eax
	  jmp Default
	  PheTong:
      cmp edx,0x2
	  jnz Default
	  push 0x0000160C
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  mov edx,eax
      Default:
	  mov eax,0x01733ACC
      mov eax,[eax]
	  push 0x00472A5C
	  ret
	}
}
__declspec(naked)void ThayDoiTen2()  //00472909  8 eax
{
__asm
	{
	  xor ecx,ecx
	  mov cl,[0x1107258+0x47C]
	  cmp ecx,0xB
	  jnz Default
	  push 0x00001610
      mov ecx,0x01733ACC
      mov ecx,[ecx]
	  push 0x0047290E
	  ret
	  Default:
	  push 0x00000505
      mov ecx,0x01733ACC
      mov ecx,[ecx]
	  push 0x0047290E
	  ret
	}
}
__declspec(naked)void ThayDoiTen3()  //00472945  8 eax
{
__asm
	{
	  xor ecx,ecx
	  mov cl,[0x1107258+0x47C]
	  cmp ecx,0xB
	  jnz Default
	  push 0x00001611
	  push 0x0047294A
	  ret
	  Default:
	  push 0x00000E31
	  push 0x0047294A
	  ret
	}
}
__declspec(naked)void LayDiemTKSauPk()  //006D51D6  8 eax
{
__asm
	{
	  xor ecx,ecx
	  mov cl,[esi+0x4]
	  mov edx,[0x010D94A8]
	  mov [edx+0x000082A4],cl
	  //
	  xor ecx,ecx
	  mov cx,[esi+0x6]
	  mov edx,[0x010D94A8]
	  mov [edx+0x000082A6],cx
	  push 0x006D51EB
	  ret
	}
}
__declspec(naked)void ShowDiemTong()  //004726A2  8 eax
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  xor ecx,ecx
	  mov cl,[0x1107258+0x47C]
	  cmp ecx,0xB
	  jnz Default
	  push eax
      mov ecx,0x01733ACC
      mov ecx,[ecx]
	  push 0x0000160A
	  push 0x19
	  mov edi,[ecx]
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  pop edx
	  push edx
	  mov ecx,[edx]
      push ecx
      push eax
      push 0x100
	  lea eax,[edx+0x170]
	  push eax
	  mov eax,0x0085C538
	  call [eax]
	  add esp,0x10
      pop edx
	  lea eax,[edx+0x170]
	  mov ecx,0x01733ACC
	  mov ecx,[ecx]
	  push eax
	  mov eax,0x130
      mov edx,[esi+0x18]
	  push 0x004726C2
	  ret
	  Default:
	  push 0x00000E2C
	  push 0x004726A7
	  ret
	}
}
__declspec(naked)void ShowDiemKim()  //004726D3  6 eax
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  xor ecx,ecx
	  mov cl,[0x1107258+0x47C]
	  cmp ecx,0xB
	  jnz Default
      push eax
	  mov ecx,0x01733ACC
	  mov ecx,[ecx]
	  mov edx,[ecx]
	  push 0xFF000000
	  push 0x1
	  call dword ptr [edx+0x58]
	  mov ecx,0x01733ACC
	  mov ecx,[ecx]
	  push 0xFFFFE3A4
	  mov eax,[ecx]
	  call dword ptr [eax+0xC]
	  mov ecx,0x01733ACC
      mov ecx,[ecx]
	  push 0x0000160B
	  push 0x19
	  mov edi,[ecx]
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  pop ecx
	  push ecx
	  mov edx,[ecx+0x4]
	  push edx
      push eax
      push 0x100
	  lea eax,[ecx+0x184]
	  push eax
	  mov eax,0x0085C538
	  call [eax]
	  add esp,0x10
      pop ecx
	  lea eax,[ecx+0x184]
      push 0x0
	  push eax
	  mov edx,[esi+0x18]
      mov ecx,0x01733ACC
	  mov ecx,[ecx]
	  mov eax,[esi+0x1C]
	  add edx,0x13
	  push 0x2
	  push edx
	  mov edx,[esi+0x14]
	  sar eax,0x1
	  add eax,edx
	  add eax,0x70
	  push eax
      call dword ptr [edi+0x24]
	  mov ecx,0x01733ACC
      mov ecx,[ecx]
	  mov eax,0x01733ABC
	  mov eax,[eax]
	  push 0x004726DE
      ret
	  Default:
	  mov ecx,0x01733ACC
	  mov ecx,[ecx]
	  push 0x004726D9
      ret
	}
}
__declspec(naked)void EvetTK()  //0065FC42  8 eax
{
__asm
	{
	  xor eax,eax
	  mov al,[0x1107258+0x47C]
	  cmp eax,0xB
	  jnz Default
	  push 0x0
	  push 0x1
	  push 0x20
	  mov ecx,0x1107258
	  add ecx,0x10
	  push 0xFFE6E6E6
	  push ecx
	  push ebx
	  push ebp
	  mov ecx,0x010CC368
	  mov eax,0x007BA100
      call eax
	  mov al,[0x1107258+0x82A4]
	  xor al,0xF
	  cmp eax,0x1
	  jnz TongAdr
	  xor eax,eax
	  mov ax,[0x1107258+0x82A4+0x2]
	  cmp eax,0x1F4
	  jae nHieuUy
	  push 0x151D
	  jmp GetADdressText
	  nHieuUy:
	  cmp eax,0x7D0
	  jae nThongLinh
	  push 0x151E
	  jmp GetADdressText
	  nThongLinh:
	  cmp eax,0xFA0
	  jae nPhoTuong
	  push 0x151F
	  jmp GetADdressText
	  nPhoTuong:
	  cmp eax,0x1770
	  jae nDaiTuong
	  push 0x1520
	  jmp GetADdressText
	  nDaiTuong:
	  push 0x1521
	  GetADdressText:
	  push 0x19
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x01733AC4
	  mov ecx,[ecx]
	  mov edx,[ecx]
	  call dword ptr [edx+0x40]
	  add eax,0xC
	  mov [esp+0x18],eax
	  mov edx,0x010CC380
	  mov edx,[edx]
	  mov ecx,0x010CC37C
	  mov ecx,[ecx]
	  mov [esp+0x28],edx
	  push 0x0
	  push 0x0
	  push 0x20
	  //Get Address Text
      xor eax,eax
	  mov ax,[0x1107258+0x82A4+0x2]
	  cmp eax,0x1F4
	  jae nHieuUy2
	  push 0x151D
	  jmp GetADdressText2
	  nHieuUy2:
	  cmp eax,0x7D0
	  jae nThongLinh2
	  push 0x151E
	  jmp GetADdressText2
	  nThongLinh2:
	  cmp eax,0xFA0
	  jae nPhoTuong2
	  push 0x151F
	  jmp GetADdressText2
	  nPhoTuong2:
	  cmp eax,0x1770
	  jae nDaiTuong2
	  push 0x1520
	  jmp GetADdressText2
	  nDaiTuong2:
	  push 0x1521
	  GetADdressText2:
	  push 0x19
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
      push 0xFFF13333
	  push eax
      mov ecx,0x010CC37C
	  mov ecx,[ecx]
	  mov edx,[esp+0x2C]
	  push ebx
	  sub ecx,edx
	  push ecx
	  mov ecx,0x010CBDA8
	  mov eax,0x007BA100
	  call eax
	  push 0x5
	  mov ecx,0x010CBDA8
	  mov eax,0x007B9C30
	  call eax
	  jmp OutEvent


	  TongAdr:
	  cmp eax,0x2
	  jnz Default
      xor eax,eax
	  mov ax,[0x1107258+0x82A4+0x2]
	  cmp eax,0x1F4
	  jae nHieuUy3
	  push 0x1522
	  jmp GetADdressText3
	  nHieuUy3:
	  cmp eax,0x7D0
	  jae nThongLinh3
	  push 0x1523
	  jmp GetADdressText3
	  nThongLinh3:
	  cmp eax,0xFA0
	  jae nPhoTuong3
	  push 0x1524
	  jmp GetADdressText3
	  nPhoTuong3:
	  cmp eax,0x1770
	  jae nDaiTuong3
	  push 0x1525
	  jmp GetADdressText3
	  nDaiTuong3:
	  push 0x1526
	  GetADdressText3:
	  push 0x19
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x01733AC4
	  mov ecx,[ecx]
	  mov edx,[ecx]
	  call dword ptr [edx+0x40]
	  add eax,0xC
	  mov [esp+0x18],eax
	  mov edx,0x010CC380
	  mov edx,[edx]
	  mov ecx,0x010CC37C
	  mov ecx,[ecx]
	  mov [esp+0x28],edx
	  push 0x0
	  push 0x0
	  push 0x20
	  //Get Address Text
      xor eax,eax
	  mov ax,[0x1107258+0x82A4+0x2]
	  cmp eax,0x1F4
	  jae nHieuUy4
	  push 0x1522
	  jmp GetADdressText4
	  nHieuUy4:
	  cmp eax,0x7D0
	  jae nThongLinh4
	  push 0x1523
	  jmp GetADdressText4
	  nThongLinh4:
	  cmp eax,0xFA0
	  jae nPhoTuong4
	  push 0x1524
	  jmp GetADdressText4
	  nPhoTuong4:
	  cmp eax,0x1770
	  jae nDaiTuong4
	  push 0x1525
	  jmp GetADdressText4
	  nDaiTuong4:
	  push 0x1526
	  GetADdressText4:
	  push 0x19
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
      mov ecx,0x010CC37C
	  mov ecx,[ecx]
      push 0xFF3264FF
	  push eax
	  mov edx,[esp+0x2C]
	  push ebx
	  sub ecx,edx
	  push ecx
	  mov ecx,0x010CBDA8
	  mov eax,0x007BA100
	  call eax
	  push 0x5
	  mov ecx,0x010CBDA8
	  mov eax,0x007B9C30
	  call eax
	  jmp OutEvent


	  Default:
      cmp edi,0xFFFFFFFF
	  mov [esp+0x24], edi
	  push 0x0065FC49
	  ret

	  Adr0065FD26:
	  push 0x0065FD26
	  ret

	  OutEvent:
	  push 0x0065FDBE
      ret

	}
}

__declspec(naked)void EvetTKAnotherUser()  //00660B69  8 eax
{
__asm
	{
	  xor eax,eax
	  mov al,[0x1107258+0x47C]
	  cmp eax,0xB
	  jnz Default
      push edi
	  push 0x1
	  push 0x20
	  mov eax,esi
      add eax,0x10
	  push 0xFFE6E6E6
	  push eax
	  push ebp
	  push ebx
	  mov ecx,0x010CC368
	  mov eax,0x007BA100
      call eax
	  mov al,[esi+0x82A4]
	  cmp eax,0x20
	  jae TongAdr
	  xor eax,eax
	  mov al,[esi+0x82A4]
      sub al,0x10
	  cmp eax,0x1
	  jae nHieuUy
	  push 0x151D
	  jmp GetADdressText
	  nHieuUy:
	  cmp eax,0x2
	  jae nThongLinh
	  push 0x151E
	  jmp GetADdressText
	  nThongLinh:
	  cmp eax,0x3
	  jae nPhoTuong
	  push 0x151F
	  jmp GetADdressText
	  nPhoTuong:
	  cmp eax,0x4
	  jae nDaiTuong
	  push 0x1520
	  jmp GetADdressText
	  nDaiTuong:
	  push 0x1521
	  GetADdressText:
	  push 0x19
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x01733AC4
	  mov ecx,[ecx]
	  mov edx,[ecx]
	  call dword ptr [edx+0x40]
      mov edi,eax
	  add edi,0xC
	  mov edx,0x010CC380
	  mov edx,[edx]
	  mov ecx,0x010CC37C
	  mov ecx,[ecx]
	  mov [esp+0x28],edx
	  push 0x0
	  push 0x0
	  push 0x20
	  //Get Address Text
      xor eax,eax
	  mov al,[esi+0x82A4]
      sub al,0x10
	  cmp eax,0x1
	  jae nHieuUy2
	  push 0x151D
	  jmp GetADdressText2
	  nHieuUy2:
	  cmp eax,0x2
	  jae nThongLinh2
	  push 0x151E
	  jmp GetADdressText2
	  nThongLinh2:
	  cmp eax,0x3
	  jae nPhoTuong2
	  push 0x151F
	  jmp GetADdressText2
	  nPhoTuong2:
	  cmp eax,0x4
	  jae nDaiTuong2
	  push 0x1520
	  jmp GetADdressText2
	  nDaiTuong2:
	  push 0x1521
	  GetADdressText2:
	  push 0x19
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
      push 0xFFF13333
	  push eax
      mov ecx,0x010CC37C
	  mov ecx,[ecx]
	  push ebp
	  sub ecx,edi
	  push ecx
	  mov ecx,0x010CBDA8
	  mov eax,0x007BA100
	  call eax
	  push 0x5
	  mov ecx,0x010CBDA8
	  mov eax,0x007B9C30
	  call eax
	  jmp OutEvent


	  TongAdr:
      xor eax,eax
	  mov al,[esi+0x82A4]
      sub al,0x20
	  cmp eax,0x1
	  jae nHieuUy3
	  push 0x1522
	  jmp GetADdressText3
	  nHieuUy3:
	  cmp eax,0x2
	  jae nThongLinh3
	  push 0x1523
	  jmp GetADdressText3
	  nThongLinh3:
	  cmp eax,0x3
	  jae nPhoTuong3
	  push 0x1524
	  jmp GetADdressText3
	  nPhoTuong3:
	  cmp eax,0x4
	  jae nDaiTuong3
	  push 0x1525
	  jmp GetADdressText3
	  nDaiTuong3:
	  push 0x1526
	  GetADdressText3:
	  push 0x19
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x01733AC4
	  mov ecx,[ecx]
	  mov edx,[ecx]
	  call dword ptr [edx+0x40]
      mov edi,eax
	  add edi,0xC
	  mov edx,0x010CC380
	  mov edx,[edx]
	  mov ecx,0x010CC37C
	  mov ecx,[ecx]
	  mov [esp+0x28],edx
	  push 0x0
	  push 0x0
	  push 0x20
	  //Get Address Text
      xor eax,eax
	  mov al,[esi+0x82A4]
      sub al,0x20
	  cmp eax,0x1
	  jae nHieuUy4
	  push 0x1522
	  jmp GetADdressText4
	  nHieuUy4:
	  cmp eax,0x2
	  jae nThongLinh4
	  push 0x1523
	  jmp GetADdressText4
	  nThongLinh4:
	  cmp eax,0x3
	  jae nPhoTuong4
	  push 0x1524
	  jmp GetADdressText4
	  nPhoTuong4:
	  cmp eax,0x4
	  jae nDaiTuong4
	  push 0x1525
	  jmp GetADdressText4
	  nDaiTuong4:
	  push 0x1526
	  GetADdressText4:
	  push 0x19
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
      mov ecx,0x010CC37C
	  mov ecx,[ecx]
      push 0xFF3264FF
	  push eax
	  push ebp
	  sub ecx,edi
	  push ecx
	  mov ecx,0x010CBDA8
	  mov eax,0x007BA100
	  call eax
	  push 0x5
	  mov ecx,0x010CBDA8
	  mov eax,0x007B9C30
	  call eax
	  jmp OutEvent


	  Default:
	  mov  eax, [esi+0x82A4]
	  push 0x00660B6F
	  ret

	  OutEvent:
	  push 0x00660D16
      ret

	}
}
__declspec(naked)void ByPassResetTarget()  //0062FDCA  8 eax
{
__asm
	{

	  push 0x00000000
	  ret
	}
}
__declspec(naked)void ByPassResetTarget1()  //00583B31  8 eax
{
__asm
	{
	  push 0x00000000
	  ret
	}
}
__declspec(naked)void ByPassResetTarget2()  //00630063  8 eax
{
__asm
	{
	  push 0x00000000
	  ret
	}
}
__declspec(naked)void ByPassTextureError()  //007BAA52  8 eax
{
__asm
	{
	  push 0x007BAA6A
	  ret
	}
}
__declspec(naked)void ByPassTextureError1()  //007BAC04  8 eax
{
__asm
	{
	  push 0x007BAC1D
	  ret
	}
}
__declspec(naked)void ByPassTextureError2()  //007BADF4  8 eax
{
__asm
	{
	  push 0x007BAE0E
	  ret
	}
}
__declspec(naked)void ByPassTextureError3()  //007BAFDE  8 eax
{
__asm
	{
	  push 0x007BAFF8
	  ret
	}
}
__declspec(naked)void ByPassTextureError4()  //007BB137  8 eax
{
__asm
	{
	  push 0x007BB14F
	  ret
	}
}
__declspec(naked)void BoQuaShift()  //0064665D  8 eax
{
__asm
	{
	  xor ebx,ebx
	  mov bl,[0x1107258+0x47C]
	  cmp ebx,0xB
	  jnz Default
      xor eax,eax
	  mov al,[esi+0x82A4]
	  cmp eax,0x1F
      ja PheKim
      mov eax,0x1
      xor ebx,ebx
	  mov bl,[0x1107258+0x82A4]
	  xor bl,0xF
	  cmp eax,ebx
	  jz KhongDanh
      mov ebx,0x1107258
	  push 0x0064671A
      ret

	  KhongDanh:
      mov ebx,0x1107258
	  push 0x00646758
      ret

	  PheKim:
	  mov eax,0x2
      xor ebx,ebx
	  mov bl,[0x1107258+0x82A4]
	  xor bl,0xF
	  cmp eax,ebx
	  jz KhongDanh1
      mov ebx,0x1107258
	  push 0x0064671A
      ret

	  KhongDanh1:
      mov ebx,0x1107258
	  push 0x00646758
      ret

	  Default:
      mov ebx,0x1107258
	  cmp edi,eax
      je Adr00646702
	  push 0x00646665
	  ret

	  Adr00646702:
	  push 0x00646702
      ret
	}
}
__declspec(naked)void NenTenMauDo()  //00660DCB  8 eax
{
__asm
	{
	  xor eax,eax
	  mov al,[0x1107258+0x47C]
	  cmp eax,0xB
	  jnz Default
	  mov al,[0x1107258+0x82A4]
	  xor al,0xF
      xor ecx,ecx
      mov cl,[esi+0x82A4]
	  cmp ecx,0x1F
	  ja PheTong
	  mov ecx,0x1
      cmp eax,ecx
	  jz CungPhe
	  mov edi,0x1
	  jmp Default
	  PheTong:
      mov ecx,0x2
	  cmp eax,ecx
	  jz CungPhe
	  mov edi,0x1
	  jmp Default
	  CungPhe:
      mov edi,0x4
	  Default:
	  mov eax,[esp+0x18]
	  test eax,eax
	  push 0x00660DD1
	  ret
	}
}
__declspec(naked)void ChoPhepNghiNgoi()  //005C7BE8  8 eax
{
__asm
	{
	  xor ecx,ecx
	  mov cl,[0x1107258+0x47C]
	  cmp ecx,0xB
	  jnz Default
	  mov eax,0x1
      push 0x005C7BEF
	  ret

	  Default:
	  mov ecx, esi
	  mov eax,0x73B900
      call eax
	  push 0x005C7BEF
	  ret
	}
}
__declspec(naked)void UpRankLevel()  //006AB337  8 eax
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
      nop
	  xor ecx,ecx
	  mov cl,[ebp+0x3]
	  cmp ecx,0xE4
	  jz AnotherInforLevel
	  mov cl,[ebp+0x9]
	  cmp ecx,0x10
	  jl Default
      sub ecx,0x10
      mov [eax],cl
	  mov byte ptr [ebp+0x9],0x1
      push 0x008A1118
	  push 0x006AB33C
	  ret
	  Default:
      mov dword ptr[eax],0x0
	  push 0x008A1118
	  push 0x006AB33C
	  ret

	  AnotherInforLevel:
	  xor ecx,ecx
	  mov cl,[ebp+0x4]
	  mov [eax],cl
	  push 0x006AB379
	  ret

	}
}
__declspec(naked)void GetUpRankLevel()  //006AB28B
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  xor ecx,ecx
	  mov cl,[ebp+0x85]
	  mov [eax],ecx
      push 0x0000008A
	  push 0x006AB290
	  ret
	}
}
__declspec(naked)void GetDiemHoatDong()  //006AB296
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
      add esp,0xC
	  xor ecx,ecx
	  mov ecx,[ebp+0x86]
	  mov [eax],ecx
      mov ecx,ebx
	  push 0x006AB29B
	  ret
	}
}
__declspec(naked)void ShopDiemHoatDong()  //00494211
{
__asm
	{
      push edx
	  mov eax,DWORD PTR SS :[0x0161589C]
	  test eax,eax
	  jz Default
	  xor ecx,ecx
	  mov ecx,[eax+0x4C]
	  cmp ecx,0x3B29
	  jnz Default
	  push 0x275E
	  mov ecx,0x017323A8
	  mov eax,0x007D8550
      call eax
	  test eax,eax
	  jz Default
	  mov ecx,[eax+0x5ADC]
      push 0x00494218
	  ret


	  Default:
      mov ecx,[ebx+0x0000056C]
	  push 0x00494218
	  ret
	}
}
__declspec(naked)void GotoProcessShopDiemHoatDong()  //004941F1
{
__asm
	{
      mov ecx,DWORD PTR SS :[0x0161589C]
	  test ecx,ecx
	  jz Default
	  xor eax,eax
	  mov eax,[ecx+0x4C]
	  cmp eax,0x3B29
	  jnz Default
	  mov eax,[ebx+0x208]
      mov dword ptr [eax+0x10],0x0
	  push 0x00494201
	  ret


	  Default:
	  mov eax,DWORD PTR SS :[0x01615E90]
	  push 0x004941F6
	  ret
	}
}
__declspec(naked)void ShopDiemHoatDong2()  //004C6697
{
__asm
	{
	  mov ecx,DWORD PTR SS :[0x0161589C]
	  test ecx,ecx
	  jz Default
	  xor eax,eax
	  mov eax,[ecx+0x4C]
	  cmp eax,0x3B29
	  jnz Default
	  mov DWORD PTR [esi+0x00005854],0x4
      mov ecx,esi
	  push 0x004C669D
	  ret


	  Default:
      mov eax,[esp+0x000000BC]
	  mov [esi+0x00005854],eax
      mov ecx,esi
	  push 0x004C669D
	  ret
	}
}
__declspec(naked)void ShowDiemHoatDong()  //0049421D
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
      nop
	  mov ecx,DWORD PTR SS :[0x0161589C]
	  test ecx,ecx
	  jz Default
	  xor edx,edx
	  mov edx,[ecx+0x4C]
	  cmp edx,0x3B29
	  jnz Default
	  mov ecx,[eax]
      mov eax,DWORD PTR SS :[0x010D94A8]
      lea edx,[esp+0x28]
	  push 0x00494232
	  ret


	  Default:
	  mov eax,DWORD PTR SS :[0x010D94A8]
	  push 0x00494222
	  ret
	}
}
__declspec(naked)void CapNhatGiaTienSauMua()  //006ACA02
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  xor ecx,ecx
	  mov cl,[ebp]
	  cmp cl,0x67
      jnz Default
	  xor ecx,ecx
	  mov ecx,[ebp+0x63]
	  mov [eax],ecx
	  push 0x8A0C00
      push 0x67
	  push 0x006ACA09
	  ret

	  Default:
	  push 0x8A0C00
	  push 0x006ACA07
      ret
	}
}
__declspec(naked)void RemoveValueCombineX()  //006B54F3
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  test ecx,ecx
	  jz Default
      push eax
	  push ecx
      mov ecx,eax
	  add ecx,0x4
	  push ecx
	  call KiemTraChoPhepBK
	  mov ecx,eax
      pop eax
	  test ecx,ecx
	  jz Default
      mov dword ptr [eax],0x0
	  Default:
	  mov eax,[esp+0x8E4]
	  mov ecx,[esp+0x8EC]
	  mov edx,[esp+0x000008EC]
	  push 0x006B54FA
	  ret

      KiemTraChoPhepBK:
	  xor ecx,ecx
	  LoopCheck:
	  mov edx,[esp+0x4]
	  mov eax,[esp+0x8]
	  cmp ax,[edx+ecx]
	  jnz IncreaseCheck
      mov eax,0x1
	  jmp EncheckBK
	  IncreaseCheck:
	  add ecx,0x2
	  cmp ecx,0xEC
	  jl LoopCheck
      mov eax,0x0
	  EncheckBK:
	  ret 0x8
	}
}
__declspec(naked)void ShowTiLeTinhLuyen()  //005DE504
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  xor ecx,ecx
	  mov ecx,[esi+0x10]
	  test ecx,ecx
	  jz Default
	  mov ecx,[esi+0x2E4]
	  test ecx,ecx
	  jz Default
      mov ecx,[esi+0x2DC]
	  test ecx,ecx
      jz Default
      push eax
	  xor ecx,ecx
	  mov ecx,[esi+0x2E4]
	  push ecx
	  mov ecx,eax
	  add ecx,0x4
	  push ecx
	  call KiemTraChoPhepBK
	  mov ecx,eax
	  test ecx,ecx
	  jz ProcessHienThiChoPhep
	  push 5074
      jmp ProcessHienThiBk
	  ProcessHienThiChoPhep:
	  push 5075
      jmp ProcessHienThiBk
      ProcessHienThiBk:
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
      push 0x0
	  mov  ecx, [esi+0x18]
	  mov  edx, [esi+0x14]
	  push eax
	  add ecx, 0xB6
	  push 0x2
	  add edx, 0x61
	  push ecx
	  mov ecx,DWORD PTR SS:[0x01733AC4]
	  push edx
	  mov edx,DWORD PTR SS:[0x01733AC4]
	  mov edi,[edx]
	  call dword ptr [edi+0x24]
	  EncheckBiKip:
      pop eax
      //Hien Thi Giu VP
	  KhongCoBiKiepCheTao:
      xor ecx,ecx
	  mov ecx,[esi+0x2E4]
	  push ecx
	  mov ecx,eax
	  add ecx,0x320
	  push ecx
	  call KiemTraChoPhepGiuVP
	  test eax,eax
	  jz KhongGiuVP
	  push 0x0
	  push 0x13D1
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  mov  ecx, [esi+0x18]
	  mov  edx, [esi+0x14]
	  push eax
	  add ecx, 0xA0
	  push 0x2
	  add edx, 0x61
	  push ecx
	  mov ecx,DWORD PTR SS:[0x01733AC4]
	  push edx
	  mov edx,DWORD PTR SS:[0x01733AC4]
	  mov edi,[edx]
	  call dword ptr [edi+0x24]
      jmp Default
	  KhongGiuVP:
      mov ecx,[esi+0x2E4]
	  test ecx,ecx
	  jz Default
      push 0x0
      push 0x13D0
      push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  mov  ecx, [esi+0x18]
	  mov  edx, [esi+0x14]
	  push eax
	  add ecx, 0xA0
	  push 0x2
	  add edx, 0x61
	  push ecx
	  mov ecx,DWORD PTR SS:[0x01733AC4]
	  push edx
	  mov edx,DWORD PTR SS:[0x01733AC4]
	  mov edi,[edx]
	  call dword ptr [edi+0x24]
	  Default:
	  mov eax,[esp+0x1C]
	  mov ecx,esi
	  push 0x005DE50A
	  ret


	  KiemTraChoPhepBK:
	  xor ecx,ecx
	  LoopCheck:
	  mov edx,[esp+0x4]
	  mov eax,[esp+0x8]
	  cmp ax,[edx+ecx]
	  jnz IncreaseCheck
      mov eax,0x1
	  jmp EncheckBK
	  IncreaseCheck:
	  add ecx,0x4
	  cmp ecx,0x320
	  jl LoopCheck
      mov eax,0x0
	  EncheckBK:
	  ret 0x8


	  KiemTraChoPhepGiuVP:
      xor ecx,ecx
	  LoopCheck1:
	  mov edx,[esp+0x4]
	  mov eax,[esp+0x8]
	  cmp ax,[edx+ecx]
	  jnz IncreaseCheck3
      mov eax,0x1
	  jmp EncheckBK2
	  IncreaseCheck3:
	  add ecx,0x4
	  cmp ecx,0x320
	  jl LoopCheck1
      mov eax,0x0
	  EncheckBK2:
	  ret 0x8
	}
}
__declspec(naked)void GetValueCheckBox()  //00442BE2
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
      pushad
	  mov edi,[esi+0x208]
	  xor ecx,ecx
      xor ebx,ebx
	  LoopBackIncrease:
	  mov bl,[edi+ecx]
	  mov [eax+ecx],bl
	  add ecx,0x1
	  cmp ecx,0x165
	  jl LoopBackIncrease
	  popad
      push 0x000006CC
	  push 0x00442BE7
      ret
	}
}
__declspec(naked)void AcceptNewItemRequest()  //00488EB3
{
__asm
	{
	  xor edx,edx
	  mov edx,[ecx+0x29C]
	  mov dx,[edx+0x14]
	  push 0x00442BE7
      ret
	}
}
__declspec(naked)void InforQuyetErro()  //006AD688
{
__asm
	{
	  xor ecx,ecx
	  mov cl,[ebp+0x3]
	  cmp ecx,0xF1
	  jnz DieuKienSetDo1
	  push 0xFFFF0000
	  push 0x1
	  push 0xC
	  push 0x12BD
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x0155EE60
	  mov eax,0x6A9800
	  call eax
	  push 0x006AD690
	  ret

	  DieuKienSetDo1:
	  cmp ecx,0xF2
	  jnz DieuKienSetDo2
      push 0xFFFF0000
	  push 0x1
	  push 0xC
	  push 0x12BE
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x0155EE60
	  mov eax,0x6A9800
	  call eax
	  push 0x006AD690
	  ret

	  DieuKienSetDo2:
	  cmp ecx,0xF3
	  jnz Default
      push 0xFFFF0000
	  push 0x1
	  push 0xC
	  push 0x12BF
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x0155EE60
	  mov eax,0x6A9800
	  call eax
	  push 0x006AD690
	  ret

	  Default:
	  push ebp
	  mov ecx,ebx
	  mov eax,0x006CF9C0
      call eax
	  push 0x006AD690
      ret
	}
}
__declspec(naked)void GetInforBackDiQ()  //006AB664
{
__asm
	{
	  xor ecx,ecx
	  mov cl,[ebp+0x3]
	  cmp ecx,0x17
	  jnz Default
      xor ecx,ecx
	  mov cl,[ebp+0x6]
	  cmp ecx,0x1
	  jnz CheckInforQ2
      push 0xFFFF0000
	  push 0x1
	  push 0xC
	  push 0x12BC
	  push 0x19
      mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
      push eax
	  mov ecx,0x0155EE60
	  mov eax,0x6A9800
	  call eax
	  jmp Defaul2
      CheckInforQ2:
	  cmp ecx,0x2
	  jnz Defaul2
	  push 0x0
	  push 0x0
	  push 0x41
	  push 0xB8
      mov ecx,0x0155EE60
	  mov eax,0x006CF0A0
	  call eax
	  Default:
	  push ebp
	  mov ecx,ebx
	  mov eax,0x006DBFD0
      call eax
	  Defaul2:
	  push 0x006AB66C
      ret
	}
}
__declspec(naked)void ChangeModeInchant()  //006B6154
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  mov ecx,[esi+eax*0x4+0x14]
	  mov [esp+0x33],ecx
      mov eax,[0x0112F480]
	  cmp eax,ecx
      jb KhongDuTienTinhLuyen
	  lea eax,[esp+0x2C]
	  //Check VP Khac
      xor ecx,ecx
	  mov cl,[eax+0x5]
	  imul ecx,0x90
	  xor eax,eax
	  mov ax,[0x1107258+ecx+0x22DC8+0x14]
	  xor ax,0xCE43
	  cmp eax,0x59
	  jz Default
	  //
	  lea eax,[esp+0x2C]
	  xor ecx,ecx
	  mov cl,[eax+0x4]
	  imul ecx,0x90
	  xor eax,eax
	  mov al,[0x1107258+ecx+0x22DC8+0x16]
	  xor al,0x1F
	  cmp eax,0x13
	  jz LongIncWeapon
      cmp eax,0x0
	  jz LongIncWeapon
	  xor eax,eax
	  mov eax,[edx]
	  cmp eax,0x1
	  jz TinhLuyenVL
	  cmp eax,0x2
	  jnz LongIncCloth
	  lea edx,[esp+0x2C]
	  mov byte ptr [edx+0x3],0x6F
	  jmp Default
	  //
	  TinhLuyenVL:
	  lea edx,[esp+0x2C]
	  mov byte ptr [edx+0x3],0x6E
	  jmp Default

	  //Tinh Luyen Op1:
	  LongIncCloth:
	  cmp eax,0x5
	  jnz LanIncCloth
	  lea edx,[esp+0x2C]
	  mov byte ptr [edx+0x3],0x71
	  jmp Default
	  //Tinh Luyen Op2:
	  LanIncCloth:
	  cmp eax,0x6
	  jnz QuyIncCloth
      lea edx,[esp+0x2C]
	  mov byte ptr [edx+0x3],0x72
	  jmp Default
	  //Tinh Luyen Op3:
	  QuyIncCloth:
	  cmp eax,0x7
	  jnz PhungIncCloth
      lea edx,[esp+0x2C]
	  mov byte ptr [edx+0x3],0x73
	  jmp Default
	  //Tinh Luyen op4:
	  PhungIncCloth:
	  cmp eax,0x8
	  jnz Default
      lea edx,[esp+0x2C]
	  mov byte ptr [edx+0x3],0x74
	  jmp Default

	  LongIncWeapon:
      xor eax,eax
	  mov al,[0x1107258+ecx+0x22DC8+0x10]
	  xor al,0xC5
      cmp eax,0x15//Tam Khoa
      jl Default
	  xor eax,eax
	  mov eax,[edx]
	  cmp eax,0x5
	  jnz LanIncWeapon
	  lea edx,[esp+0x2C]
	  mov byte ptr [edx+0x3],0x75
	  jmp Default
	  //Tinh Luyen Op2:
	  LanIncWeapon:
	  cmp eax,0x6
	  jnz QuyIncWeapon
	  lea edx,[esp+0x2C]
	  mov byte ptr [edx+0x3],0x76
	  jmp Default
	  //Tinh Luyen Op3:
	  QuyIncWeapon:
	  cmp eax,0x7
	  jnz PhungIncWeapon
      lea edx,[esp+0x2C]
	  mov byte ptr [edx+0x3],0x77
	  jmp Default
	  //Tinh Luyen op4:
	  PhungIncWeapon:
	  cmp eax,0x8
	  jnz Default
      lea edx,[esp+0x2C]
	  mov byte ptr [edx+0x3],0x78
	  jmp Default

	  //
	  Default:
      lea edx,[esp+0x2C]
      push edx
	  push 0x006B6161
	  ret

      KhongDuTienTinhLuyen:
      push 0xFFFF2323
	  push 0x1
	  push 0xC
	  push 1761
	  push 25
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x0155EE60
	  mov eax,0x006A9800
	  call eax
	  push 0x006B6168
	  ret

	}
}
__declspec(naked)void ShowAnotherRequestItemInc()  //c
{
__asm
	{
	  mov eax,0x004913F0
	  call eax
      mov edx, [esi+0x29C]
	  test edx,edx
	  jz DefaultLoad
	  xor eax,eax
	  mov al,[edx+0x16]
	  xor al,0x1F
	  cmp eax,0x1
	  jz TinhLuyenQuanAoMoi
      xor eax,eax
	  mov al,[edx+0x10]
	  xor al,0xC5
	  cmp eax,23
	  jl DefaultLoad
	  jmp AcceptIncItem
      TinhLuyenQuanAoMoi:
	  xor eax,eax
	  mov al,[edx+0x10]
	  xor al,0xC5
	  cmp eax,0xF
	  jl TinhLuyenThuong
	  mov edx, [esi+0x29C]
      xor eax,eax
	  mov ax,[edx+0x42]
	  xor ax,0xCE43
	  test eax,eax
	  jnz DefaultLoad
	  AcceptIncItem:
	  mov     eax, [esi+0x18]
	  mov     ecx, [esi+0x14]
	  push    0xFF000000
	  push    ecx
	  lea     edx, [eax+0xBB]
	  add     eax, 0xAB
	  mov     [esp+0xC], edx
	  lea     edx, [ecx+0x1]
	  fild    dword ptr [esp+0xC]
	  mov     [esp+0xC], edx
	  fstp    dword ptr [esp]
	  fild    dword ptr [esp+0xC]
	  push    ecx
	  mov     [esp+0x10], eax
	  fstp    dword ptr [esp]
	  fild    dword ptr [esp+0x10]
	  push    ecx
	  sub     ecx, 0x4F
	  mov     [esp+0x14], ecx
	  fstp    dword ptr [esp]
	  fild    dword ptr [esp+0x14]
	  push    ecx
	  fstp    dword ptr [esp]
	  mov eax,0x007C7BB0
	  call    eax
	  add esp,0x14
      push 0x0
	  push 0x1359
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  mov  ecx, [esi+0x18]
	  mov  edx, [esi+0x14]
	  push eax
	  add ecx, 0xAE
	  push 0x0
	  sub edx, 0x45
	  push ecx
	  push edx
	  mov ecx,DWORD PTR SS:[0x01733AC4]
	  mov eax,[ecx]
	  call dword ptr [eax+0x24]
	  //
      mov     eax, [esi+0x18]
	  mov     ecx, [esi+0x14]
	  push    0xFF000000
	  push    ecx
	  lea     edx, [eax+0xCB]
	  add     eax, 0xAB
	  mov     [esp+0xC], edx
	  lea     edx, [ecx+0x1]
	  fild    dword ptr [esp+0xC]
	  mov     [esp+0xC], edx
	  fstp    dword ptr [esp]
	  fild    dword ptr [esp+0xC]
	  push    ecx
	  add     eax,0x11
	  mov     [esp+0x10], eax
	  fstp    dword ptr [esp]
	  fild    dword ptr [esp+0x10]
	  push    ecx
	  sub     ecx, 0x4F
	  mov     [esp+0x14], ecx
	  fstp    dword ptr [esp]
	  fild    dword ptr [esp+0x14]
	  push    ecx
	  fstp    dword ptr [esp]
	  mov eax,0x007C7BB0
	  call    eax
	  add esp,0x14
      push 0x0
	  push 0x135A
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  mov  ecx, [esi+0x18]
	  mov  edx, [esi+0x14]
	  push eax
	  add ecx, 0xBF
	  push 0x0
	  sub edx, 0x45
	  push ecx
	  push edx
	  mov ecx,DWORD PTR SS:[0x01733AC4]
	  mov eax,[ecx]
	  call dword ptr [eax+0x24]
	  //
      mov     eax, [esi+0x18]
	  mov     ecx, [esi+0x14]
	  push    0xFF000000
	  push    ecx
	  lea     edx, [eax+0xDB]
	  add     eax, 0xAB
	  mov     [esp+0xC], edx
	  lea     edx, [ecx+0x1]
	  fild    dword ptr [esp+0xC]
	  mov     [esp+0xC], edx
	  fstp    dword ptr [esp]
	  fild    dword ptr [esp+0xC]
	  push    ecx
	  add     eax,0x21
	  mov     [esp+0x10], eax
	  fstp    dword ptr [esp]
	  fild    dword ptr [esp+0x10]
	  push    ecx
	  sub     ecx, 0x4F
	  mov     [esp+0x14], ecx
	  fstp    dword ptr [esp]
	  fild    dword ptr [esp+0x14]
	  push    ecx
	  fstp    dword ptr [esp]
	  mov eax,0x007C7BB0
	  call    eax
	  add esp,0x14
      push 0x0
	  push 0x135B
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  mov  ecx, [esi+0x18]
	  mov  edx, [esi+0x14]
	  push eax
	  add ecx, 0xCF
	  push 0x0
	  sub edx, 0x45
	  push ecx
	  push edx
	  mov ecx,DWORD PTR SS:[0x01733AC4]
	  mov eax,[ecx]
	  call dword ptr [eax+0x24]
	  //
      mov     eax, [esi+0x18]
	  mov     ecx, [esi+0x14]
	  push    0xFF000000
	  push    ecx
	  lea     edx, [eax+0xED]
	  add     eax, 0xAB
	  mov     [esp+0xC], edx
	  lea     edx, [ecx+0x1]
	  fild    dword ptr [esp+0xC]
	  mov     [esp+0xC], edx
	  fstp    dword ptr [esp]
	  fild    dword ptr [esp+0xC]
	  push    ecx
	  add     eax,0x31
	  mov     [esp+0x10], eax
	  fstp    dword ptr [esp]
	  fild    dword ptr [esp+0x10]
	  push    ecx
	  sub     ecx, 0x4F
	  mov     [esp+0x14], ecx
	  fstp    dword ptr [esp]
	  fild    dword ptr [esp+0x14]
	  push    ecx
	  fstp    dword ptr [esp]
	  mov eax,0x007C7BB0
	  call    eax
	  add esp,0x14
      push 0x0
	  push 0x135C
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  mov  ecx, [esi+0x18]
	  mov  edx, [esi+0x14]
	  push eax
	  add ecx, 0xDF
	  push 0x0
	  sub edx, 0x45
	  push ecx
	  push edx
	  mov ecx,DWORD PTR SS:[0x01733AC4]
	  mov eax,[ecx]
	  call dword ptr [eax+0x24]
	  //
      DefaultLoad:
	  push 0x004F4469
	  ret

	  TinhLuyenThuong:
      cmp eax,0x1
	  jae DefaultLoad
      mov     eax, [esi+0x18]
	  mov     ecx, [esi+0x14]
	  push    0xFF000000
	  push    ecx
	  lea     edx, [eax+0x9B]
	  add     eax, 0x8B
	  mov     [esp+0xC], edx
	  lea     edx, [ecx+0x1]
	  fild    dword ptr [esp+0xC]
	  mov     [esp+0xC], edx
	  fstp    dword ptr [esp]
	  fild    dword ptr [esp+0xC]
	  push    ecx
	  mov     [esp+0x10], eax
	  fstp    dword ptr [esp]
	  fild    dword ptr [esp+0x10]
	  push    ecx
	  sub     ecx, 0x4F
	  mov     [esp+0x14], ecx
	  fstp    dword ptr [esp]
	  fild    dword ptr [esp+0x14]
	  push    ecx
	  fstp    dword ptr [esp]
	  mov eax,0x007C7BB0
	  call    eax
	  add esp,0x14
      push 0x0
	  push 0x12BA
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  mov  ecx, [esi+0x18]
	  mov  edx, [esi+0x14]
	  push eax
	  add ecx, 0x8E
	  push 0x0
	  sub edx, 0x45
	  push ecx
	  push edx
	  mov ecx,DWORD PTR SS:[0x01733AC4]
	  mov eax,[ecx]
	  call dword ptr [eax+0x24]
	  //
      mov     eax, [esi+0x18]
	  mov     ecx, [esi+0x14]
	  push    0xFF000000
	  push    ecx
	  lea     edx, [eax+0xAB]
	  add     eax, 0x8B
	  mov     [esp+0xC], edx
	  lea     edx, [ecx+0x1]
	  fild    dword ptr [esp+0xC]
	  mov     [esp+0xC], edx
	  fstp    dword ptr [esp]
	  fild    dword ptr [esp+0xC]
	  push    ecx
	  add     eax,0x11
	  mov     [esp+0x10], eax
	  fstp    dword ptr [esp]
	  fild    dword ptr [esp+0x10]
	  push    ecx
	  sub     ecx, 0x4F
	  mov     [esp+0x14], ecx
	  fstp    dword ptr [esp]
	  fild    dword ptr [esp+0x14]
	  push    ecx
	  fstp    dword ptr [esp]
	  mov eax,0x007C7BB0
	  call    eax
	  add esp,0x14
      push 0x0
	  push 0x12BB
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  mov  ecx, [esi+0x18]
	  mov  edx, [esi+0x14]
	  push eax
	  add ecx, 0x9F
	  push 0x0
	  sub edx, 0x45
	  push ecx
	  push edx
	  mov ecx,DWORD PTR SS:[0x01733AC4]
	  mov eax,[ecx]
	  call dword ptr [eax+0x24]
      jmp DefaultLoad
	}
}
__declspec(naked)void RequestItem2()  //006B6154
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  mov ecx,[esi+eax*0x4+0x14]
	  mov [esp+0x37],ecx
	  xor eax,eax
	  mov eax,[edx]
	  cmp eax,0x1
	  jz TinhLuyenVL
	  cmp eax,0x2
	  jnz Default
      lea edx,[esp+0x2C]
	  mov byte ptr [edx+0x3],0x6F
	  jmp Default
      //
	  TinhLuyenVL:
	  lea edx,[esp+0x2C]
	  mov byte ptr [edx+0x3],0x6E
	  jmp Default
      //
	  Default:
      lea edx,[esp+0x2C]
      push edx
	  push 0x006B6161
      ret
	}
}
__declspec(naked)void NhanPackageInfor()  //006EA0D9
{
__asm
	{
	  mov [esp+0x14],ebp
	  mov al,[esi+0x3]
	  cmp al,0xC8
	  jl Default
	  //Khong Du Tien
	  cmp eax,0xC8
      jnz CheckRoLoi2
	  push    0xFFFAE6AA
	  push    0x0               ; int
	  push    0x4C             ; int
	  push    0x12B4
	  push    0x19
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
      call eax
	  push eax             ; char *
	  mov ecx, ebp
	  mov eax,0x6A9800
      call eax
	  mov eax,DWORD PTR SS:[0x008CE194]
	  push 0x0
	  push eax
      jmp ProcessRestFunc
	  //Khong Ro Loi2
	  CheckRoLoi2:
	  cmp eax,0xC9
	  jnz CheckDieuKien
      push    0xFFFAE6AA
	  push    0x0               ; int
	  push    0x4C             ; int
	  push    0x12B7
	  push    0x19
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
      call eax
	  push eax             ; char *
	  mov ecx, ebp
	  mov eax,0x6A9800
      call eax
	  mov eax,DWORD PTR SS:[0x008CE194]
	  push 0x0
	  push eax
	  jmp ProcessRestFunc

	  //Khong Du DieuKien
	  CheckDieuKien:
	  cmp eax,0xCA
	  jnz CheckNguyenLieu
      push    0xFFFAE6AA
	  push    0x0               ; int
	  push    0x4C             ; int
	  push    0x12B6
	  push    0x19
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
      call eax
	  push eax             ; char *
	  mov ecx, ebp
	  mov eax,0x6A9800
      call eax
	  mov eax,DWORD PTR SS:[0x008CE194]
	  push 0x0
	  push eax
	  jmp ProcessRestFunc

	  //Khong Du Nguyen Lieu
	  CheckNguyenLieu:
	  cmp eax,0xCB
	  jnz CheckThatBaiAo
      push    0xFFFAE6AA
	  push    0x0               ; int
	  push    0x4C             ; int
	  push    0x12B5
	  push    0x19
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
      call eax
	  push eax             ; char *
	  mov ecx, ebp
	  mov eax,0x6A9800
      call eax
	  mov eax,DWORD PTR SS:[0x008CE194]
	  push 0x0
	  push eax
	  jmp ProcessRestFunc

	  //That Bai Quan Ao
	  CheckThatBaiAo:
	  cmp eax,0xD3
	  jnz CheckThatBaiVK
      push    0xFFFAE6AA
	  push    0x0               ; int
	  push    0x4C             ; int
	  push    0x12B8
	  push    0x19
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
      call eax
	  push eax             ; char *
	  mov ecx, ebp
	  mov eax,0x6A9800
	  call eax
	  //
	  xor eax,eax
	  mov al,[esi+0xA]
	  imul eax,0x90
      xor ecx,ecx
	  mov cl,[esi+0xB]
	  test ecx,ecx
      jz RemoveNguyenLieu1
      xor cl,0xC5
	  mov [0x1107258+0x22DC8+eax+0x19],cl
	  jmp ContinueProcessTBQuanAo
	  RemoveNguyenLieu1:
	  mov cl,[esi+0xA]
	  imul ecx,0x90
	  mov eax,[ecx+0x1107258+0x00022DC8]
	  lea ecx,[ecx+0x1107258+0x00022DC8]
      call dword ptr [eax+0x4]
	  ContinueProcessTBQuanAo:
      mov ecx,[esi+0xC]
      mov [0x0112F480],ecx
	  mov eax,DWORD PTR SS:[0x008CE194]
	  push 0x0
	  push eax
	  jmp ProcessRestFunc

	  //That Bai Vu Khi
	  CheckThatBaiVK:
	  cmp eax,0xD4
	  jnz CheckKhongRoLoi3
      push    0xFFFAE6AA
	  push    0x0               ; int
	  push    0x4C             ; int
	  push    0x12B8
	  push    0x19
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
      call eax
	  push eax             ; char *
	  mov ecx, ebp
	  mov eax,0x6A9800
	  call eax
      xor eax,eax
	  mov al,[esi+0xA]
	  imul eax,0x90
      xor ecx,ecx
	  mov cl,[esi+0xB]
	  test ecx,ecx
      jz RemoveNguyenLieu
      xor cl,0xC5
	  mov [0x1107258+0x22DC8+eax+0x19],cl
	  jmp ContinueProcessTBVk
	  RemoveNguyenLieu:
	  mov cl,[esi+0xA]
	  imul ecx,0x90
	  mov eax,[ecx+0x1107258+0x00022DC8]
	  lea ecx,[ecx+0x1107258+0x00022DC8]
      call dword ptr [eax+0x4]
	  ContinueProcessTBVk:
      mov ecx,[esi+0xC]
	  mov [0x0112F480],ecx
	  mov eax,DWORD PTR SS:[0x008CE194]
	  push 0x0
	  push eax
	  jmp ProcessRestFunc

	  //Khong Ro Loi2
	  CheckKhongRoLoi3:
	  cmp eax,0xD5
	  jnz CheckThanhCongAo
      push    0xFFFAE6AA
	  push    0x0               ; int
	  push    0x4C             ; int
	  push    0x12B6
	  push    0x19
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
      call eax
	  push eax             ; char *
	  mov ecx, ebp
	  mov eax,0x6A9800
      call eax
	  mov eax,DWORD PTR SS:[0x008CE194]
	  push 0x0
	  push eax
	  jmp ProcessRestFunc

      //Thanh Cong Quan Ao
	  CheckThanhCongAo:
	  cmp eax,0xD6
	  jnz CheckThanhCongVk
      push    0xFFFAE6AA
	  push    0x0               ; int
	  push    0x4C             ; int
	  push    0x12B9
	  push    0x19
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
      call eax
	  push eax             ; char *
	  mov ecx, ebp
	  mov eax,0x6A9800
	  call eax
      xor eax,eax
	  mov al,[esi+0xA]
	  imul eax,0x90
      xor ecx,ecx
	  mov cl,[esi+0xB]
	  test ecx,ecx
	  jz RemoveNguyenLieu3
	  xor cl,0xC5
	  mov [0x1107258+0x22DC8+eax+0x19],cl
	  jmp ContinueProcessTCQA
	  RemoveNguyenLieu3:
	  mov cl,[esi+0xA]
	  imul ecx,0x90
	  mov eax,[ecx+0x1107258+0x00022DC8]
	  lea ecx,[ecx+0x1107258+0x00022DC8]
      call dword ptr [eax+0x4]
	  ContinueProcessTCQA:
      mov ecx,[esi+0xC]
	  mov [0x0112F480],ecx
	  //Get Opt New
      xor eax,eax
	  mov al,[esi+0x5]
	  imul eax,0x90
	  xor ecx,ecx
	  mov cx,[esi+0x6]
	  xor cx,0xCE43
	  mov [0x1107258+eax+0x22DC8+0x42],cx
      mov cx,[esi+0x8]
	  xor cx,0xCE43
	  mov [0x1107258+eax+0x22DC8+0x44],cx
      mov BYTE PTR [0x1107258+eax+0x22DC8+0x46],0xC4
	  //
	  mov eax,DWORD PTR SS:[0x008CE194]
	  push 0x0
	  push eax
	  jmp ProcessRestFunc

	  //Thanh Cong  Vu Khi
	  CheckThanhCongVk:
	  cmp eax,0xD7
	  jnz Default
	  push 0xFFFAE6AA
	  push 0x0               ; int
	  push 0x4C             ; int
	  push 0x12B9
	  push 0x19
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
      call eax
	  push eax             ; char *
	  mov ecx, ebp
	  mov eax,0x6A9800
	  call eax
      xor eax,eax
	  mov al,[esi+0xA]
	  imul eax,0x90
      xor ecx,ecx
	  mov cl,[esi+0xB]
	  test ecx,ecx
	  jz RemoveNguyenLieu4
	  xor cl,0xC5
	  mov [0x1107258+0x22DC8+eax+0x19],cl
	  jmp ContinueProcessTCVk
	  RemoveNguyenLieu4:
	  mov cl,[esi+0xA]
	  imul ecx,0x90
	  mov eax,[ecx+0x1107258+0x00022DC8]
	  lea ecx,[ecx+0x1107258+0x00022DC8]
      call dword ptr [eax+0x4]
	  ContinueProcessTCVk:
      mov ecx,[esi+0xC]
	  mov [0x0112F480],ecx
	  //Get Opt New
      xor eax,eax
	  mov al,[esi+0x5]
	  imul eax,0x90
	  xor ecx,ecx
	  mov cx,[esi+0x6]
	  xor cx,0xCE43
	  mov [0x1107258+eax+0x22DC8+0x54],cx
      mov cx,[esi+0x8]
	  xor cx,0xCE43
	  mov [0x1107258+eax+0x22DC8+0x56],cx
	  mov BYTE PTR [0x1107258+eax+0x22DC8+0x58],0xC4
	  mov eax,DWORD PTR SS:[0x008CE194]
	  push 0x0
	  push eax
      jmp ProcessRestFunc

      ProcessRestFunc:
	  mov eax,0x40A7D0
	  call eax
      add esp,0x8
	  mov eax,DWORD PTR SS:[0x01615E90]
	  test eax,eax
	  je BypassUnknowFunc
	  mov DWORD PTR[eax+0x00000114],0x00000000
	  mov ecx,DWORD PTR SS:[0x01615E90]
	  mov eax,0x004912A0
      call eax
	  BypassUnknowFunc:
	  push 0x000027EE
	  mov ecx,0x017323A8
	  mov eax,0x007D8550
	  call eax
	  test eax,eax
	  jz DoneFunInctNew
	  push 0x0
	  mov ecx,eax
	  mov eax,0x004F4AF0
	  call eax
	  DoneFunInctNew:
	  push 0x006EBBDB
      ret

	  Default:
	  dec eax
      cmp eax,0x65
	  push 0x006EA0E0
      ret
	}
}
__declspec(naked)void ChangeInforPhongAn()  //004F3EF4
{
__asm
	{
      mov edx,[esi+0x29C]
	  xor ecx,ecx
	  mov cl,[edx+0x16]
	  xor cl,0x1F
	  cmp ecx,0x1
	  jnz VuKhi
	  xor ecx,ecx
	  mov cl,[edx+0x10]
	  xor cl,0xC5
	  cmp ecx,0xF
	  jl Default
      mov ecx,0x01733B30
      push 0x0
	  push 0x163D
	  push 0x004F3F00
      ret
	  VuKhi:
      xor ecx,ecx
	  mov cl,[edx+0x10]
	  xor cl,0xC5
	  cmp ecx,23
	  jl Default
      mov ecx,0x01733B30
      push 0x0
	  push 0x163D
	  push 0x004F3F00
      ret

	  Default:
      mov ecx,0x01733B30
	  xor eax,0x000000C5
	  push 0x004F3EF9
      ret
	}
}
__declspec(naked)void ChangeInforPhongAn1()  //004F3FA5
{
__asm
	{
      mov eax,[esi+0x29C]
	  xor ecx,ecx
	  mov cl,[eax+0x16]
	  xor cl,0x1F
	  cmp ecx,0x1
	  jnz VuKhi
	  xor ecx,ecx
	  mov cl,[eax+0x10]
	  xor cl,0xC5
	  cmp ecx,0xF
	  jl Default
      pop eax
	  push 0x004F3FE4
      ret
	  VuKhi:
      xor ecx,ecx
	  mov cl,[eax+0x10]
	  xor cl,0xC5
	  cmp ecx,23
	  jl Default
      pop eax
	  push 0x004F3FE4
      ret

	  Default:
      push edx
      push 0x00000D75
	  push 0x004F3FAB
      ret
	}
}
__declspec(naked)void ChangeInforPhongAn2()  //004F407D
{
__asm
	{
      mov eax,[esi+0x29C]
	  xor edx,edx
	  mov dl,[eax+0x16]
	  xor dl,0x1F
	  cmp edx,0x1
	  jnz VuKhi
	  xor edx,edx
	  mov dl,[eax+0x10]
	  xor dl,0xC5
	  cmp edx,0xF
	  jl Default
	  push 0x2625A00
      push 0x00000D76
	  push 0x004F4083
      ret
	  VuKhi:
	  xor edx,edx
	  mov dl,[eax+0x10]
	  xor dl,0xC5
	  cmp edx,23
	  jl Default
	  push 0x2625A00
      push 0x00000D76
	  push 0x004F4083
	  ret

	  Default:
      push ecx
      push 0x00000D76
	  push 0x004F4083
      ret
	}
}
__declspec(naked)void ChangeInforPhongAn3()  //004F40BC
{
__asm
	{
      mov eax,[esi+0x29C]
	  xor edx,edx
	  mov dl,[eax+0x16]
	  xor dl,0x1F
	  cmp edx,0x1
	  jnz VuKhi
	  xor edx,edx
	  mov dl,[eax+0x10]
	  xor dl,0xC5
	  cmp edx,0xF
	  jl Default
	  push 0x004F43A5
      ret
	  VuKhi:
	  xor edx,edx
	  mov dl,[eax+0x10]
	  xor dl,0xC5
	  cmp edx,23
	  jl Default
	  push 0x004F43A5
	  ret

	  Default:
      mov ecx,DWORD PTR SS:[0x01733AC4]
	  push 0x004F40C2
      ret
	}
}
__declspec(naked)void MoFormPhongAn()  //007C078C
{
__asm
	{
      nop
	  nop
	  nop
	  nop
	  nop
	  cmp edi,0x7A
      jnz KhongPhaiF11
	  xor ecx,ecx
	  mov ecx,[eax+0x20]
	  test ecx,ecx
	  jz ChuaCoMo
	  mov dword ptr [eax+0x20],0x0
	  jmp KhongPhaiF11

	  ChuaCoMo:
      mov dword ptr [eax+0x20],0x1
	  jmp KhongPhaiF11

	  KhongPhaiF11:
	  lea eax,[edi-0x21]
	  cmp eax,0x5A
	  push 0x007C0792
	  ret
	}
}
__declspec(naked)void VietHoaText()  //007DE7E3
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
      push eax
	  mov eax,[esp+0x18]
	  mov ecx,[ebp+0x00000164]
	  xor edx,edx
	  mov dx,[ecx]
	  test edx,edx
	  jz CheckAnotherText
	  cmp ax,0xEC
	  jz ConvertText
	  cmp ax,0xCC
	  jz ConvertText
	  cmp ax,0xD2
	  jz ConvertText
	  cmp ax,0xDE
	  jz ConvertText
	  cmp ax,0xF2
	  jz ConvertText
	  jmp Default

	  ConvertText:
      mov ecx,[esp]
	  mov [ecx+0x1],al
	  mov ecx,[ebp+0x00000164]
	  imul edx,0x2
	  add ecx,0x4
	  mov ax,[ecx+edx-0x2]
	  cmp ax,0x1B0
	  jz Chuuu2CanFix
      cmp ax,0x1A1
	  jz ChuoooCanFix
	  xor eax,eax
      mov al,[ecx+edx-0x2]
      mov ecx,[esp]
	  mov [ecx],al
	  xor eax,eax
	  mov ax,[ecx]
	  //Loop Check
	  xor ecx,ecx
      LoopCheckUniCode:
	  mov edx,[esp]
      add edx,0x2
	  cmp ax,[edx+ecx]
      jnz CheckAndLoop
	  mov edx,[esp]
	  mov ax,[edx+ecx+0x1B0+0x2]
	  mov ecx,[ebp+0x00000164]
	  xor edx,edx
	  mov dx,[ecx]
	  imul edx,0x2
	  add ecx,0x4
	  mov word ptr [ecx+edx-0x2],0x0
	  xor edx,edx
	  mov ecx,[ebp+0x00000164]
	  mov dx,[ecx]
	  sub dx,0x1
	  mov [ecx],dx
	  pop edx
	  mov ecx,[esp+0x14]
	  mov cx,ax
	  push 0x1
	  push 0x007DE7E9
	  ret
	  CheckAndLoop:
	  add ecx,0x2
	  cmp ecx,0x1B0
	  jl LoopCheckUniCode

      //


	  Default:
	  pop eax
	  mov ecx,[esp+0x14]
	  push 0x1
	  push 0x007DE7E9
	  ret

      CheckAnotherText:
      cmp ax,0xD0
	  jz ChuDFix
      cmp ax,0xF0
	  jz ChudnhoFix
      cmp ax,0xF5
	  jz ChuOFix
      cmp ax,0xFD
	  jz ChuuFix
      jmp Default

	  ChuDFix:
	  xor eax,eax
      mov ax,0x110
	  pop edx
	  mov ecx,[esp+0x14]
	  mov cx,ax
	  push 0x1
	  push 0x007DE7E9
	  ret

      ChudnhoFix:
	  xor eax,eax
	  mov ax,0x111
	  pop edx
	  mov ecx,[esp+0x14]
	  mov cx,ax
	  push 0x1
	  push 0x007DE7E9
	  ret

	  ChuOFix:
      xor eax,eax
	  mov ax,0x1A1
	  pop edx
	  mov ecx,[esp+0x14]
	  mov cx,ax
	  push 0x1
	  push 0x007DE7E9
	  ret

	  ChuuFix:
      xor eax,eax
	  mov ax,0x1B0
	  pop edx
	  mov ecx,[esp+0x14]
	  mov cx,ax
	  push 0x1
	  push 0x007DE7E9
	  ret


	  Chuuu2CanFix:
	  mov eax,[esp+0x18]
	  cmp al,0xEC
	  jnz CheckU2
      xor eax,eax
	  mov ax,0x1ee9
	  mov ecx,[ebp+0x00000164]
	  xor edx,edx
	  mov dx,[ecx]
	  imul edx,0x2
	  add ecx,0x4
	  mov word ptr [ecx+edx-0x2],0x0
	  xor edx,edx
	  mov ecx,[ebp+0x00000164]
	  mov dx,[ecx]
	  sub dx,0x1
	  mov [ecx],dx
	  pop edx
	  mov ecx,[esp+0x14]
	  mov cx,ax
	  push 0x1
	  push 0x007DE7E9
	  ret

	  CheckU2:
	  cmp al,0xCC
	  jnz CheckU3
      xor eax,eax
	  mov ax,0x1eeb
	  mov ecx,[ebp+0x00000164]
	  xor edx,edx
	  mov dx,[ecx]
	  imul edx,0x2
	  add ecx,0x4
	  mov word ptr [ecx+edx-0x2],0x0
	  xor edx,edx
	  mov ecx,[ebp+0x00000164]
	  mov dx,[ecx]
	  sub dx,0x1
	  mov [ecx],dx
	  pop edx
	  mov ecx,[esp+0x14]
	  mov cx,ax
	  push 0x1
	  push 0x007DE7E9
	  ret

	  CheckU3:
	  cmp al,0xD2
	  jnz CheckU4
      xor eax,eax
	  mov ax,0x1eed
	  mov ecx,[ebp+0x00000164]
	  xor edx,edx
	  mov dx,[ecx]
	  imul edx,0x2
	  add ecx,0x4
	  mov word ptr [ecx+edx-0x2],0x0
	  xor edx,edx
	  mov ecx,[ebp+0x00000164]
	  mov dx,[ecx]
	  sub dx,0x1
	  mov [ecx],dx
	  pop edx
	  mov ecx,[esp+0x14]
	  mov cx,ax
	  push 0x1
	  push 0x007DE7E9
	  ret

	  CheckU4:
	  cmp al,0xDE
	  jnz CheckU5
      xor eax,eax
	  mov ax,0x1eef
	  mov ecx,[ebp+0x00000164]
	  xor edx,edx
	  mov dx,[ecx]
	  imul edx,0x2
	  add ecx,0x4
	  mov word ptr [ecx+edx-0x2],0x0
	  xor edx,edx
	  mov ecx,[ebp+0x00000164]
	  mov dx,[ecx]
	  sub dx,0x1
	  mov [ecx],dx
	  pop edx
	  mov ecx,[esp+0x14]
	  mov cx,ax
	  push 0x1
	  push 0x007DE7E9
	  ret

	  CheckU5:
	  cmp al,0xF2
	  jnz UnknowU
	  xor eax,eax
	  mov ax,0x1ef1
	  mov ecx,[ebp+0x00000164]
	  xor edx,edx
	  mov dx,[ecx]
	  imul edx,0x2
	  add ecx,0x4
	  mov word ptr [ecx+edx-0x2],0x0
	  xor edx,edx
	  mov ecx,[ebp+0x00000164]
	  mov dx,[ecx]
	  sub dx,0x1
	  mov [ecx],dx
	  pop edx
	  mov ecx,[esp+0x14]
	  mov cx,ax
	  push 0x1
	  push 0x007DE7E9
	  ret


	  UnknowU:
      xor eax,eax
	  mov ax,0x01b0
	  mov ecx,[ebp+0x00000164]
	  xor edx,edx
	  mov dx,[ecx]
	  imul edx,0x2
	  add ecx,0x4
	  mov word ptr [ecx+edx-0x2],0x0
	  xor edx,edx
	  mov ecx,[ebp+0x00000164]
	  mov dx,[ecx]
	  sub dx,0x1
	  mov [ecx],dx
	  pop edx
	  mov ecx,[esp+0x14]
	  mov cx,ax
	  push 0x1
	  push 0x007DE7E9
	  ret

	  ChuoooCanFix:
      mov eax,[esp+0x18]
	  cmp al,0xEC
	  jnz CheckO2
      xor eax,eax
	  mov ax,0x1edb
	  mov ecx,[ebp+0x00000164]
	  xor edx,edx
	  mov dx,[ecx]
	  imul edx,0x2
	  add ecx,0x4
	  mov word ptr [ecx+edx-0x2],0x0
	  xor edx,edx
	  mov ecx,[ebp+0x00000164]
	  mov dx,[ecx]
	  sub dx,0x1
	  mov [ecx],dx
	  pop edx
	  mov ecx,[esp+0x14]
	  mov cx,ax
	  push 0x1
	  push 0x007DE7E9
	  ret

	  CheckO2:
	  cmp al,0xCC
	  jnz CheckO3
	  xor eax,eax
	  mov ax,0x1edd
	  mov ecx,[ebp+0x00000164]
	  xor edx,edx
	  mov dx,[ecx]
	  imul edx,0x2
	  add ecx,0x4
	  mov word ptr [ecx+edx-0x2],0x0
	  xor edx,edx
	  mov ecx,[ebp+0x00000164]
	  mov dx,[ecx]
	  sub dx,0x1
	  mov [ecx],dx
	  pop edx
	  mov ecx,[esp+0x14]
	  mov cx,ax
	  push 0x1
	  push 0x007DE7E9
	  ret

	  CheckO3:
	  cmp al,0xD2
	  jnz CheckO4
      xor eax,eax
	  mov ax,0x1edf
	  mov ecx,[ebp+0x00000164]
	  xor edx,edx
	  mov dx,[ecx]
	  imul edx,0x2
	  add ecx,0x4
	  mov word ptr [ecx+edx-0x2],0x0
	  xor edx,edx
	  mov ecx,[ebp+0x00000164]
	  mov dx,[ecx]
	  sub dx,0x1
	  mov [ecx],dx
	  pop edx
	  mov ecx,[esp+0x14]
	  mov cx,ax
	  push 0x1
	  push 0x007DE7E9
	  ret

	  CheckO4:
	  cmp al,0xDE
	  jnz CheckO5
      xor eax,eax
	  mov ax,0x1ee1
	  mov ecx,[ebp+0x00000164]
	  xor edx,edx
	  mov dx,[ecx]
	  imul edx,0x2
	  add ecx,0x4
	  mov word ptr [ecx+edx-0x2],0x0
	  xor edx,edx
	  mov ecx,[ebp+0x00000164]
	  mov dx,[ecx]
	  sub dx,0x1
	  mov [ecx],dx
	  pop edx
	  mov ecx,[esp+0x14]
	  mov cx,ax
	  push 0x1
	  push 0x007DE7E9
	  ret

	  CheckO5:
	  cmp al,0xF2
	  jnz UnknowO
	  xor eax,eax
	  mov ax,0x1ee3
	  mov ecx,[ebp+0x00000164]
	  xor edx,edx
	  mov dx,[ecx]
	  imul edx,0x2
	  add ecx,0x4
	  mov word ptr [ecx+edx-0x2],0x0
	  xor edx,edx
	  mov ecx,[ebp+0x00000164]
	  mov dx,[ecx]
	  sub dx,0x1
	  mov [ecx],dx
	  pop edx
	  mov ecx,[esp+0x14]
	  mov cx,ax
	  push 0x1
	  push 0x007DE7E9
	  ret


	  UnknowO:
      xor eax,eax
	  mov ax,0x01a1
	  mov ecx,[ebp+0x00000164]
	  xor edx,edx
	  mov dx,[ecx]
	  imul edx,0x2
	  add ecx,0x4
	  mov word ptr [ecx+edx-0x2],0x0
	  xor edx,edx
	  mov ecx,[ebp+0x00000164]
	  mov dx,[ecx]
	  sub dx,0x1
	  mov [ecx],dx
	  pop edx
	  mov ecx,[esp+0x14]
	  mov cx,ax
	  push 0x1
	  push 0x007DE7E9
	  ret
	}
}
__declspec(naked)void VietHoaText1()  //007DA969
{
__asm
	{
	  jne Adr007DBA7B
	  push 0x007DA96F
      ret
      Adr007DBA7B:
	  push 0x007DBA7B
      ret
	}
}
__declspec(naked)void VietHoaText2()  //005BC364
{
__asm
	{
      push esi
	  xor ecx,ecx
	  push ecx
	  push ecx
	  mov dword ptr [esp],0x0
	  mov dword ptr [esp+0x4],0x0  //Count So Byte da add
      BackLoopGetText:
	  imul ecx,0x2
	  xor eax,eax
	  mov al,[esi+ecx+0x4]
	  test eax,eax
	  jz Default
	  mov al,[esi+ecx+0x1+0x4]
	  test eax,eax
      jz ChiCoMotByte
	  cmp eax,0x1E
	  jz EditCode1E
      cmp eax,0x01
	  jz EditCode10
      jmp ChiCoMotByte

	  EditCode10:
      lea eax,[esp+0x30]
	  xor edx,edx
	  mov dl,[esi+ecx+0x4]
	  mov ecx,[esp+0x4]
	  mov [eax+ecx+0x1],dl
	  mov byte ptr [eax+ecx],0xFE
      add ecx,0x2
	  mov [esp+0x4],ecx
	  mov ecx,[esp]
	  add ecx,0x1
      mov [esp],ecx
	  jmp BackLoopGetText

	  EditCode1E:
      lea eax,[esp+0x30]
	  xor edx,edx
	  mov dl,[esi+ecx+0x4]
	  mov ecx,[esp+0x4]
	  mov [eax+ecx+0x1],dl
	  mov byte ptr [eax+ecx],0xFF
      add ecx,0x2
	  mov [esp+0x4],ecx
	  mov ecx,[esp]
	  add ecx,0x1
      mov [esp],ecx
	  jmp BackLoopGetText


	  ChiCoMotByte:
      lea eax,[esp+0x30]
	  xor edx,edx
	  mov dl,[esi+ecx+0x4]
	  mov ecx,[esp+0x4]
	  mov [eax+ecx],dl
	  add ecx,0x1
	  mov [esp+0x4],ecx
	  mov ecx,[esp]
	  add ecx,0x1
      mov [esp],ecx
      jmp BackLoopGetText

	  Default:
      pop ecx
	  pop ecx
	  pop esi
	  lea edx,[ebx+0x0000492C]
	  mov ecx,0x00000014
	  xor eax,eax
	  mov edi,edx
	  repe stosd
	  lea ecx,[esp+0x24]
	  push 0x005BC36A
      ret
	}
}
__declspec(naked)void ShowCheckBoxTinhLuyen()  //004F3C1A  eax
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  mov edx,[esi+0x29C]
	  xor ecx,ecx
	  mov cl,[edx+0x16]
      xor cl,0x1F
	  cmp cl,0x1
	  jnz TinhLuyenVkAn
      mov edx,[esi+0x29C]
	  xor ecx,ecx
	  mov cl,[edx+0x10]
	  xor cl,0xC5
	  cmp ecx,0xE
	  ja ChuaTinhLuyenQuanAo
	  mov cx,[edx+0x2A]
	  xor cx,0xCE43
	  test ecx,ecx
	  jz ChuaTinhLuyenQuanAo
	  cmp ecx,0x80
	  jz TinhLuyenVatLyQuanAo
	  mov dword ptr [eax],0x1
	  jmp ChuaTinhLuyenQuanAo
      TinhLuyenVatLyQuanAo:
	  mov dword ptr [eax],0x2
	  ChuaTinhLuyenQuanAo:
	  xor ecx,ecx
	  mov ecx,[eax]
	  test ecx,ecx
	  jz ChuaCoGigaTri
	  cmp ecx,0x1
	  jz TinhLuyenVL
	  cmp ecx,0x2
	  jnz LongAnItem
      xor ecx,ecx
	  mov ecx,[eax+0x4]
	  test ecx,ecx
	  jz Nohover
	  push 0xFFB4B4B4
      jmp ShowTextColor
	  Nohover:
	  push 0xFF36B880
	  ShowTextColor:
      mov ecx,DWORD PTR SS:[0x01733AC4]
	  mov eax,[ecx]
	  call dword ptr [eax+0xC]
      push 0x13D9
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push 0x0
	  push eax
	  mov edx, [esi+0x18]
	  push 0x0
	  add edx,0xE1
	  push edx
	  mov edx, [esi+0x14]
      add edx,0x33
	  push edx
	  mov ecx,DWORD PTR SS:[0x01733AC4]
	  mov eax,[ecx]
	  call dword ptr [eax+0x24]
	  mov eax,[esi+0x18]
	  mov edx,[esi+0x14]
	  push 0x004F3C20
	  ret

	  TinhLuyenVkAn:
      xor ecx,ecx
      mov cl,[edx+0x16]
      xor cl,0xC5
	  cmp cl,23
	  jnz Default
      xor ecx,ecx
	  mov ecx,[eax]
	  test ecx,ecx
	  jnz LongAnItem
	  mov dword ptr [eax],0x5
	  TinhLuyenVL:

      xor ecx,ecx
	  mov ecx,[eax+0x4]
	  test ecx,ecx
	  jz Nohover1
	  push 0xFFB4B4B4
	  jmp ShowTextColor1
	  Nohover1:
	  push 0xFFF34E38
	  ShowTextColor1:
      mov ecx,DWORD PTR SS:[0x01733AC4]
	  mov eax,[ecx]
	  call dword ptr [eax+0xC]
	  push 0x13D8
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push 0x0
	  push eax
	  mov edx, [esi+0x18]
	  push 0x0
	  add edx,0xE1
	  push edx
	  mov edx, [esi+0x14]
      add edx,0x33
	  push edx
	  mov ecx,DWORD PTR SS:[0x01733AC4]
	  mov eax,[ecx]
	  call dword ptr [eax+0x24]
      mov eax,[esi+0x18]
	  mov edx,[esi+0x14]
	  push 0x004F3C20
	  ret


	  LongAnItem:
      cmp ecx,0x5
	  jnz LanAnItem
	  push 0xFF36B880
      mov ecx,DWORD PTR SS:[0x01733AC4]
	  mov eax,[ecx]
	  call dword ptr [eax+0xC]
      push 0x135E
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push 0x0
	  push eax
	  mov edx, [esi+0x18]
	  push 0x0
	  add edx,0xE1
	  push edx
	  mov edx, [esi+0x14]
      add edx,0x33
	  push edx
	  mov ecx,DWORD PTR SS:[0x01733AC4]
	  mov eax,[ecx]
	  call dword ptr [eax+0x24]
	  mov eax,[esi+0x18]
	  mov edx,[esi+0x14]
	  push 0x004F3C20
	  ret

	  LanAnItem:
	  cmp ecx,0x6
	  jnz QuyAnItem
	  push 0xFF36B880
      mov ecx,DWORD PTR SS:[0x01733AC4]
	  mov eax,[ecx]
	  call dword ptr [eax+0xC]
	  push 0x135F
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push 0x0
	  push eax
	  mov edx, [esi+0x18]
	  push 0x0
	  add edx,0xE1
	  push edx
	  mov edx, [esi+0x14]
      add edx,0x33
	  push edx
	  mov ecx,DWORD PTR SS:[0x01733AC4]
	  mov eax,[ecx]
	  call dword ptr [eax+0x24]
	  mov eax,[esi+0x18]
	  mov edx,[esi+0x14]
	  push 0x004F3C20
	  ret

	  QuyAnItem:
	  cmp ecx,0x7
	  jnz PhungAnItem
	  push 0xFF36B880
      mov ecx,DWORD PTR SS:[0x01733AC4]
	  mov eax,[ecx]
	  call dword ptr [eax+0xC]
	  push 0x1360
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push 0x0
	  push eax
	  mov edx, [esi+0x18]
	  push 0x0
	  add edx,0xE1
	  push edx
	  mov edx, [esi+0x14]
      add edx,0x33
	  push edx
	  mov ecx,DWORD PTR SS:[0x01733AC4]
	  mov eax,[ecx]
	  call dword ptr [eax+0x24]
	  mov eax,[esi+0x18]
	  mov edx,[esi+0x14]
	  push 0x004F3C20
	  ret

	  PhungAnItem:
	  cmp ecx,0x8
	  jnz Default
	  push 0xFF36B880
      mov ecx,DWORD PTR SS:[0x01733AC4]
	  mov eax,[ecx]
	  call dword ptr [eax+0xC]
      push 0x1361
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push 0x0
	  push eax
	  mov edx, [esi+0x18]
	  push 0x0
	  add edx,0xE1
	  push edx
	  mov edx, [esi+0x14]
      add edx,0x33
	  push edx
	  mov ecx,DWORD PTR SS:[0x01733AC4]
	  mov eax,[ecx]
	  call dword ptr [eax+0x24]
	  mov eax,[esi+0x18]
	  mov edx,[esi+0x14]
	  push 0x004F3C20
	  ret

	  Default:
      mov dword ptr [eax],0x0
	  mov eax,[esi+0x18]
	  mov edx,[esi+0x14]
	  push 0x004F3C20
	  ret

	  ChuaCoGigaTri:
	  mov edx,[esi+0x29C]
	  test edx,edx
	  jz Default
	  xor ecx,ecx
	  mov cl,[edx+0x16]
	  xor cl,0x1F
	  cmp ecx,0x1
	  jz TinhLuyenQuanAoMoi
	  xor ecx,ecx
	  mov cl,[edx+0x10]
	  xor cl,0xC5
	  cmp ecx,0x12
	  jl DefaultInchantItem
	  mov dword ptr [eax],0x5
	  jmp LongAnItem

      TinhLuyenQuanAoMoi:
      xor ecx,ecx
	  mov cl,[edx+0x10]
	  xor cl,0xC5
	  cmp ecx,0xF
	  jl DefaultInchantItem
	  mov dword ptr [eax],0x5
	  jmp LongAnItem

	  DefaultInchantItem:
	  mov dword ptr [eax],0x1
      jmp TinhLuyenVL
	}
}
__declspec(naked)void ChangeColorAndType()  //004F3B1B     edx
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
      push edx
	  mov [esp+0x18],eax
	  mov eax,edx
	  mov edx,[esi+0x29C]
	  test edx,edx
      jz Default2
	  xor ecx,ecx
	  mov cl,[edx+0x16]
	  xor cl,0x1F
	  cmp cl,0x1
	  jnz KiemTraVuKhi
      xor ecx,ecx
	  mov cl,[edx+0x10]
	  xor cl,0xC5
	  cmp cl,0xE
	  ja CheckAnotherPoz
	  test ecx,ecx
	  jnz Default2
	  mov ecx,eax
	  mov eax,[esp+0x18]
	  mov edx,[esi+0x14]
	  sub edx,0x4F
	  mov ecx,[eax]
	  cmp ecx,edx
	  jl CheckPozKhiCong
      add edx,0x4C
	  cmp ecx,edx
	  ja CheckPozKhiCong
	  xor ecx,ecx
	  mov eax,[esp+0x18]
      mov ecx,[eax+0x8]
      mov edx,[esi+0x18]
	  add edx,0x8A
	  cmp ecx,edx
	  jl CheckPozKhiCong
      add edx,0xD
	  cmp ecx,edx
	  ja CheckPozKhiCong
	  mov edx,[esp+0x10]
	  xor eax,eax
      mov al,[edx+0xC]
	  cmp eax,0x1
	  jnz Default2
      pop ecx
	  mov dword ptr [ecx],0x1
      mov eax,[esi+0x00000210]
	  push 0x004F3B25
	  ret


	  KiemTraVuKhi:
	  cmp cl,0x13
	  jnz Default2
	  mov ecx,[esi+0x29C]
      xor edx,edx
	  mov dl,[ecx+0x10]
	  xor dl,0xC5
	  cmp edx,23
	  jl Default2
      xor edx,edx
	  mov dx,[ecx+0x4E]
	  xor dx,0xCE43
	  test edx,edx
	  jnz Default2
	  mov ecx,eax
	  jmp AcceptInc


	  CheckPozKhiCong:
      mov ecx,eax
	  mov eax,[esp+0x18]
	  mov edx,[esi+0x14]
	  sub edx,0x4F
	  mov ecx,[eax]
	  cmp ecx,edx
	  jl Default2
      add edx,0x4C
	  cmp ecx,edx
	  ja Default2
	  xor ecx,ecx
	  mov eax,[esp+0x18]
      mov ecx,[eax+0x8]
      mov edx,[esi+0x18]
	  add edx,0x9C
	  cmp ecx,edx
	  jl Default2
      add edx,0xC
	  cmp ecx,edx
	  ja Default2
	  mov edx,[esp+0x10]
      xor eax,eax
	  mov al,[edx+0xC]
	  cmp eax,0x1
	  jnz Default2
      pop ecx
	  mov dword ptr [ecx],0x2
      mov eax,[esi+0x00000210]
	  push 0x004F3B25
	  ret

	  CheckAnotherPoz:
      mov ecx,eax
	  mov eax,[esi+0x29C]
	  test eax,eax
	  jz Default2
	  xor edx,edx
	  mov dl,[eax+0x16]
	  xor dl,0x1F
	  cmp edx,0x1
	  jz TinhLuyenQuanAoMoi
	  xor edx,edx
	  mov dl,[eax+0x10]
	  xor dl,0xC5
	  cmp edx,0x12
	  jl Default2
	  xor edx,edx
	  mov dx,[eax+0x42]
	  xor dx,0xCE43
	  test edx,edx
	  jnz Default2
	  jmp AcceptInc
      TinhLuyenQuanAoMoi:
      xor edx,edx
	  mov dl,[eax+0x10]
	  xor dl,0xC5
	  cmp edx,0xF
	  jl Default2
      xor edx,edx
	  mov dx,[eax+0x42]
	  xor dx,0xCE43
	  test edx,edx
	  jnz Default2

	  AcceptInc:
	  mov ecx,eax
	  mov eax,[esp+0x18]
	  mov edx,[esi+0x14]
	  sub edx,0x4F
	  mov ecx,[eax]
	  cmp ecx,edx
	  jl CheckAnotherPoz1
	  add edx,0x4C
	  cmp ecx,edx
	  ja CheckAnotherPoz1
	  xor ecx,ecx
	  mov eax,[esp+0x18]
      mov ecx,[eax+0x8]
      mov edx,[esi+0x18]
	  add edx,0xAB
	  cmp ecx,edx
	  jl CheckAnotherPoz1
	  add edx,0xC
	  cmp ecx,edx
	  ja CheckAnotherPoz1
      mov edx,[esp+0x10]
      xor eax,eax
	  mov al,[edx+0xC]
      test eax,eax
	  jz Default2
      pop ecx
	  mov dword ptr [ecx],0x5
      push 0x004F3B25
	  ret

	  CheckAnotherPoz1:
	  mov ecx,eax
	  mov eax,[esp+0x18]
	  mov edx,[esi+0x14]
	  sub edx,0x4F
	  mov ecx,[eax]
	  cmp ecx,edx
	  jl CheckAnotherPoz2
	  add edx,0x4C
	  cmp ecx,edx
	  ja CheckAnotherPoz2
	  xor ecx,ecx
	  mov eax,[esp+0x18]
      mov ecx,[eax+0x8]
      mov edx,[esi+0x18]
	  add edx,0xBC
	  cmp ecx,edx
	  jl CheckAnotherPoz2
	  add edx,0xC
	  cmp ecx,edx
	  ja CheckAnotherPoz2
	  mov edx,[esp+0x10]
      xor eax,eax
	  mov al,[edx+0xC]
	  test eax,eax
	  jz Default2
      pop ecx
	  mov dword ptr [ecx],0x6
      push 0x004F3B25
	  ret

	  CheckAnotherPoz2:
      mov ecx,eax
	  mov eax,[esp+0x18]
	  mov edx,[esi+0x14]
	  sub edx,0x4F
	  mov ecx,[eax]
	  cmp ecx,edx
	  jl CheckAnotherPoz3
	  add edx,0x4C
	  cmp ecx,edx
	  ja CheckAnotherPoz3
	  xor ecx,ecx
	  mov eax,[esp+0x18]
      mov ecx,[eax+0x8]
      mov edx,[esi+0x18]
	  add edx,0xCC
	  cmp ecx,edx
	  jl CheckAnotherPoz3
	  add edx,0xC
	  cmp ecx,edx
	  ja CheckAnotherPoz3
	  mov edx,[esp+0x10]
	  xor eax,eax
	  mov al,[edx+0xC]
	  test eax,eax
	  jz Default2
      pop ecx
	  mov dword ptr [ecx],0x7
      push 0x004F3B25
	  ret

      CheckAnotherPoz3:
      mov ecx,eax
	  mov eax,[esp+0x18]
	  mov edx,[esi+0x14]
	  sub edx,0x4F
	  mov ecx,[eax]
	  cmp ecx,edx
	  jl Default2
      add edx,0x4C
	  cmp ecx,edx
	  ja Default2
	  xor ecx,ecx
	  mov eax,[esp+0x18]
      mov ecx,[eax+0x8]
      mov edx,[esi+0x18]
	  add edx,0xDC
	  cmp ecx,edx
	  jl Default2
	  add edx,0xC
	  cmp ecx,edx
	  ja Default2
	  mov edx,[esp+0x10]
	  xor eax,eax
	  mov al,[edx+0xC]
	  test eax,eax
	  jz Default2
      pop ecx
	  mov dword ptr [ecx],0x8
      push 0x004F3B25
	  ret

	  Default2:
      pop eax
      mov eax,[esi+0x00000210]
	  push 0x004F3B25
      ret
	}
}
__declspec(naked)void ChangePhongAnRequest()  //0065F919     edx
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  xor ecx,ecx
      push eax
	  mov ecx,[eax+0x20]
	  test ecx,ecx
	  jz Default
	  mov ecx,DWORD PTR SS:[0x01733AD0]
	  xor eax,eax
	  mov al,[ecx+0x210]
	  cmp eax,0x1
	  jnz Default
      mov ecx,DWORD PTR SS:[0x01733AD0]
	  mov eax,0x007D7FE0
	  call eax
	  push eax
	  mov eax,[esp+0x4]
      push eax
	  call CheckPosz
	  Default:
      pop eax
	  mov eax,DWORD PTR SS:[0x010D94A8]
	  push 0x0065F91E
	  ret

	  CheckPosz:
	  xor ecx,ecx
	  mov ecx,[esp+0x8]
	  mov edx,[ecx]
	  mov ecx,DWORD PTR SS:[0x01733AD0]
	  mov ecx,[ecx+0x240]
	  sub ecx,0x224
	  cmp edx,ecx
	  jl CheckPosz2
	  add ecx,0x58
	  cmp edx,ecx
	  ja CheckPosz2
	  mov ecx,[esp+0x8]
	  mov edx,[ecx+0x8]
	  cmp edx,0x98
	  jl CheckPosz2
	  cmp edx,0xAE
	  ja CheckPosz2
	  mov ecx,[esp+0x4]
	  mov DWORD PTR [ecx],0x1
	  mov DWORD PTR [ecx+0x4],0x0
	  mov DWORD PTR [ecx+0x8],0x0
      mov DWORD PTR [ecx+0xC],0x0
	  ret 0x8

	  CheckPosz2:
	  mov ecx,[esp+0x8]
	  mov edx,[ecx]
	  mov ecx,DWORD PTR SS:[0x01733AD0]
	  mov ecx,[ecx+0x240]
	  sub ecx,0x224
	  cmp edx,ecx
	  jl CheckPosz3
      add ecx,0x58
	  cmp edx,ecx
	  ja CheckPosz3
      mov ecx,[esp+0x8]
	  mov edx,[ecx+0x8]
	  cmp edx,0xB5
	  jl CheckPosz3
	  cmp edx,0xCB
	  ja CheckPosz3
	  mov ecx,[esp+0x4]
	  mov DWORD PTR [ecx],0x2
      mov DWORD PTR [ecx+0x4],0x0
	  mov DWORD PTR [ecx+0x8],0x0
      mov DWORD PTR [ecx+0xC],0x0
	  ret 0x8

	  CheckPosz3:
      mov ecx,[esp+0x8]
	  mov edx,[ecx]
      mov ecx,DWORD PTR SS:[0x01733AD0]
	  mov ecx,[ecx+0x240]
	  sub ecx,0x224
	  cmp edx,ecx
	  jl CheckPoszOption1
      add ecx,0x58
	  cmp edx,ecx
	  ja CheckPoszOption1
      mov ecx,[esp+0x8]
	  mov edx,[ecx+0x8]
	  cmp edx,0xD2
	  jl CheckPoszOption1
	  cmp edx,0xE6
	  ja CheckPoszOption1
	  mov ecx,[esp+0x4]
	  mov DWORD PTR [ecx],0x3
      mov DWORD PTR [ecx+0x4],0x0
	  mov DWORD PTR [ecx+0x8],0x0
      mov DWORD PTR [ecx+0xC],0x0
	  ret 0x8

      //Choose Option
	  CheckPoszOption1:
      mov ecx,[esp+0x8]
	  mov edx,[ecx]
      mov ecx,DWORD PTR SS:[0x01733AD0]
	  mov ecx,[ecx+0x240]
	  sub ecx,0x1C2
	  cmp edx,ecx
	  jl CheckPoszOption2
	  add ecx,0xF1
	  cmp edx,ecx
	  ja CheckPoszOption2
      mov ecx,[esp+0x8]
	  mov edx,[ecx+0x8]
	  cmp edx,0x10B
	  jl CheckPoszOption2
	  cmp edx,0x119
	  ja CheckPoszOption2
	  mov ecx,[esp+0x4]
	  xor eax,eax
	  mov eax,[ecx+0x4]
	  imul eax,0x90
	  xor ecx,ecx
	  mov cx,[0x1107258+0x22DC8+eax+0x2A]
      xor cx,0xCE43
	  test ecx,ecx
	  jnz AcceptOption1
	  xor ecx,ecx
	  mov cl,[0x1107258+0x22DC8+eax+0x2E]
      xor cl,0xC5
	  test ecx,ecx
	  jnz AcceptOption1
	  jmp UnFindPozs

	  AcceptOption1:
      mov ecx,[esp+0x4]
	  mov DWORD PTR [ecx+0xC],0x1
	  ret 0x8

	  CheckPoszOption2:
      mov ecx,[esp+0x8]
	  mov edx,[ecx]
	  mov ecx,DWORD PTR SS:[0x01733AD0]
	  mov ecx,[ecx+0x240]
	  sub ecx,0x1C2
	  cmp edx,ecx
	  jl CheckPoszOption3
      add ecx,0xF1
	  cmp edx,ecx
	  ja CheckPoszOption3
      mov ecx,[esp+0x8]
	  mov edx,[ecx+0x8]
	  cmp edx,0x11D
	  jl CheckPoszOption3
	  cmp edx,0x12B
	  ja CheckPoszOption3
	  mov ecx,[esp+0x4]
	  xor eax,eax
	  mov eax,[ecx+0x4]
	  imul eax,0x90
      xor ecx,ecx
	  mov cx,[0x1107258+0x22DC8+eax+0x30]
      xor cx,0xCE43
	  test ecx,ecx
	  jnz AcceptOption2
      xor ecx,ecx
	  mov cl,[0x1107258+0x22DC8+eax+0x34]
      xor cl,0xC5
	  test ecx,ecx
	  jnz AcceptOption2
	  jmp UnFindPozs

	  AcceptOption2:
      mov ecx,[esp+0x4]
	  mov DWORD PTR [ecx+0xC],0x2
	  ret 0x8

	  CheckPoszOption3:
      mov ecx,[esp+0x8]
	  mov edx,[ecx]
	  mov ecx,DWORD PTR SS:[0x01733AD0]
	  mov ecx,[ecx+0x240]
	  sub ecx,0x1C2
	  cmp edx,ecx
	  jl CheckPoszOption4
      add ecx,0xF1
	  cmp edx,ecx
	  ja CheckPoszOption4
	  mov ecx,[esp+0x8]
	  mov edx,[ecx+0x8]
	  cmp edx,0x12F
	  jl CheckPoszOption4
	  cmp edx,0x13D
	  ja CheckPoszOption4
	  mov ecx,[esp+0x4]
	  xor eax,eax
	  mov eax,[ecx+0x4]
	  imul eax,0x90
      xor ecx,ecx
	  mov cx,[0x1107258+0x22DC8+eax+0x36]
      xor cx,0xCE43
	  test ecx,ecx
	  jnz AcceptOption3
      xor ecx,ecx
	  mov cl,[0x1107258+0x22DC8+eax+0x3A]
      xor cl,0xC5
	  test ecx,ecx
	  jnz AcceptOption3
	  jmp UnFindPozs

	  AcceptOption3:
      mov ecx,[esp+0x4]
	  mov DWORD PTR [ecx+0xC],0x3
	  ret 0x8

	  CheckPoszOption4:
      mov ecx,[esp+0x8]
	  mov edx,[ecx]
	  mov ecx,DWORD PTR SS:[0x01733AD0]
	  mov ecx,[ecx+0x240]
	  sub ecx,0x1C2
	  cmp edx,ecx
	  jl CheckPoszOption5
      add ecx,0xF1
	  cmp edx,ecx
	  ja CheckPoszOption5
      mov ecx,[esp+0x8]
	  mov edx,[ecx+0x8]
	  cmp edx,0x141
	  jl CheckPoszOption5
	  cmp edx,0x14F
	  ja CheckPoszOption5
	  mov ecx,[esp+0x4]
	  xor eax,eax
	  mov eax,[ecx+0x4]
	  imul eax,0x90
      xor ecx,ecx
	  mov cx,[0x1107258+0x22DC8+eax+0x3C]
      xor cx,0xCE43
	  test ecx,ecx
	  jnz AcceptOption4
      xor ecx,ecx
	  mov cl,[0x1107258+0x22DC8+eax+0x40]
      xor cl,0xC5
	  test ecx,ecx
	  jnz AcceptOption4
	  jmp UnFindPozs

	  AcceptOption4:
      mov ecx,[esp+0x4]
	  mov DWORD PTR [ecx+0xC],0x4
	  ret 0x8

	  CheckPoszOption5:
      mov ecx,[esp+0x8]
	  mov edx,[ecx]
	  mov ecx,DWORD PTR SS:[0x01733AD0]
	  mov ecx,[ecx+0x240]
	  sub ecx,0x1C2
	  cmp edx,ecx
	  jl CheckPoszOption6
	  add ecx,0xF1
	  cmp edx,ecx
	  ja CheckPoszOption6
      mov ecx,[esp+0x8]
	  mov edx,[ecx+0x8]
	  cmp edx,0x153
	  jl CheckPoszOption6
	  cmp edx,0x161
	  ja CheckPoszOption6
	  mov ecx,[esp+0x4]
	  xor eax,eax
	  mov eax,[ecx+0x4]
	  imul eax,0x90
      xor ecx,ecx
	  mov cx,[0x1107258+0x22DC8+eax+0x42]
      xor cx,0xCE43
	  test ecx,ecx
	  jnz AcceptOption5
      xor ecx,ecx
	  mov cl,[0x1107258+0x22DC8+eax+0x46]
      xor cl,0xC5
	  test ecx,ecx
	  jnz AcceptOption5
	  jmp UnFindPozs

	  AcceptOption5:
      mov ecx,[esp+0x4]
	  mov DWORD PTR [ecx+0xC],0x5
	  ret 0x8

	  CheckPoszOption6:
      mov ecx,[esp+0x8]
	  mov edx,[ecx]
	  mov ecx,DWORD PTR SS:[0x01733AD0]
	  mov ecx,[ecx+0x240]
	  sub ecx,0x1C2
	  cmp edx,ecx
	  jl ProcessFeature
      add ecx,0xF1
	  cmp edx,ecx
	  ja ProcessFeature
	  mov ecx,[esp+0x8]
	  mov edx,[ecx+0x8]
	  cmp edx,0x165
	  jl ProcessFeature
	  cmp edx,0x174
	  ja ProcessFeature
	  mov ecx,[esp+0x8]
	  mov ecx,[esp+0x4]
	  xor eax,eax
	  mov eax,[ecx+0x4]
	  imul eax,0x90
      xor ecx,ecx
	  mov cx,[0x1107258+0x22DC8+eax+0x48]
	  xor cx,0xCE43
	  test ecx,ecx
	  jnz AcceptOption6
      xor ecx,ecx
	  mov cl,[0x1107258+0x22DC8+eax+0x4C]
      xor cl,0xC5
	  test ecx,ecx
	  jnz AcceptOption6
	  jmp UnFindPozs

	  AcceptOption6:
      mov ecx,[esp+0x4]
	  mov DWORD PTR [ecx+0xC],0x6
	  ret 0x8

	  ProcessFeature:
      mov ecx,[esp+0x8]
	  mov edx,[ecx]
	  mov ecx,DWORD PTR SS:[0x01733AD0]
	  mov ecx,[ecx+0x240]
	  sub ecx,0x10B
	  cmp edx,ecx
	  jl UnFindPozs
      add ecx,0x33
	  cmp edx,ecx
	  ja UnFindPozs
      mov ecx,[esp+0x8]
	  mov edx,[ecx+0x8]
	  cmp edx,0xD1
	  jl UnFindPozs
	  cmp edx,0xEC
	  ja UnFindPozs
	  mov ecx,[esp+0x4]
	  xor eax,eax
	  mov al,[ecx+0x1]
	  test eax,eax
	  jnz UnFindPozs
      mov ecx,[esp+0x4]
	  xor eax,eax
	  mov al,[ecx]
	  test eax,eax
	  jz ChuaChonTinhNang
	  xor eax,eax
	  mov eax,[ecx+0x4]
	  test eax,eax
	  jz ChuaChonTinVat
	  xor eax,eax
	  mov eax,[ecx+0x8]
	  test eax,eax
	  jz ChuaChonVatPhamYeuCau
      xor eax,eax
	  mov al,[ecx]
	  cmp eax,0x3
	  jnz KhongPhaiMoRong
      mov byte ptr [ecx+0x1],0x1
	  push ecx
	  mov ecx,0x0155EE60
      push ecx
	  call SendPackageProcess
	  ret 0x8

	  KhongPhaiMoRong:
	  xor eax,eax
	  mov eax,[ecx+0xC]
	  test eax,eax
	  jz ChuaChonOption
	  mov eax,DWORD PTR SS:[0x0112F480]
	  cmp eax,0x1312D00
	  jb ChuaDuTien
	  mov byte ptr [ecx+0x1],0x1
	  push ecx
	  mov ecx,0x0155EE60
      push ecx
	  call SendPackageProcess
	  ret 0x8


	  UnFindPozs:
	  ret 0x8


	  ChuaChonTinhNang:
	  jmp UnFindPozs

	  ChuaChonTinVat:
	  push 0xFFFF0000
	  push 0x1
	  push 0xC
	  push 0x000010EF
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x0155EE60
	  mov eax,0x6A9800
	  call eax
	  jmp UnFindPozs

	  ChuaChonVatPhamYeuCau:
	  push 0xFFFF0000
	  push 0x1
	  push 0xC
	  push 0x000010F1
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x0155EE60
	  mov eax,0x6A9800
	  call eax
	  jmp UnFindPozs

	  ChuaChonOption:
	  push 0xFFFF0000
	  push 0x1
	  push 0xC
	  push 0x000010F2
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x0155EE60
	  mov eax,0x6A9800
	  call eax
	  jmp UnFindPozs

	  ChuaDuTien:
	  push 0xFFFF0000
	  push 0x1
	  push 0xC
	  push 0x0000112B
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x0155EE60
	  mov eax,0x6A9800
	  call eax
	  jmp UnFindPozs

	  SendPackageProcess:
	  sub esp,0x8
	  mov word ptr [esp],0x9
	  mov byte ptr [esp+0x2],0x7C
	  // BC Mo Rong
	  // BD Thay Doi / Pha Phong An
	  mov eax,[esp+0x10]
	  xor ecx,ecx
	  mov cl,[eax]
	  cmp ecx,0x3
	  jnz KhongPhaiMoRongChoose
	  mov byte ptr [esp+0x3],0xBC
	  jmp ProcessContinueSendPackagePhongAnTinVat
      KhongPhaiMoRongChoose:
	  mov byte ptr [esp+0x3],0xBD
      ProcessContinueSendPackagePhongAnTinVat:
	  mov eax,[esp+0x10]
      mov byte ptr [eax+0x1],0x1
	  xor ecx,ecx
	  mov cl,[eax]
      mov byte ptr [esp+0x4],cl
      xor ecx,ecx
	  mov ecx,[eax+0x4]
	  mov byte ptr [esp+0x5],cl
      xor ecx,ecx
	  mov ecx,[eax+0x8]
	  mov byte ptr [esp+0x6],cl
	  xor ecx,ecx
	  mov ecx,[eax+0xC]
	  mov byte ptr [esp+0x7],cl
	  lea edx,[esp]
	  push edx
	  mov ecx,[esp+0x10]
	  mov eax,0x6B2F60
      call eax
	  add esp,0x8
	  ret 0x8
	}
}
__declspec(naked)void DisableClickPhongAn()  //00629C0C  edx
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  mov [esi+0x00008360],ebx
	  xor ecx,ecx
	  mov ecx,[eax+0x20]
	  test ecx,ecx
	  jz Default
	  push 0x00629C2D
      ret


	  Default:
	  push 0x00629C12
	  ret
	}
}
__declspec(naked)void MoPhongAnTinVat()  //0048C33A  edx
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  mov ebx,[eax+0x20]
	  test ebx,ebx
	  jz Default
	  mov ebx,[eax]
	  test ebx,ebx
	  jz ChuaChonTinhNang
      mov ecx,[esi+0x00000098]
	  mov [eax+0x4],ecx
	  pop edi
	  pop esi
	  pop ebp
	  xor eax,eax
	  pop ebx
	  add esp,0x00000140
	  ret

	  Default:
      mov eax,[esi+0x00000098]
	  push 0x0048C340
	  ret

	  ChuaChonTinhNang:

      push 0xFFFF0000
	  push 0x1
	  push 0xC
	  push 0x000010EE
	  push 0x19
      mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x0155EE60
	  mov eax,0x6A9800
	  call eax
	  pop edi
	  pop esi
	  pop ebp
      xor eax,eax
	  pop ebx
	  add esp,0x00000140
	  ret
	}
}
__declspec(naked)void RequestCorrectItem()  //004F43BF     edx
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
      nop
	  mov edx, [esi+0x29C]
	  test edx,edx
	  jz NotFoundAddressSlot
      mov ecx,eax
	  xor eax,eax
	  mov al,[edx+0x16]
	  xor al,0x1F
	  cmp eax,0x1
	  jnz VuKhiMaxInchant
	  xor eax,eax
	  mov al,[edx+0x10]
	  xor al,0xC5
      cmp eax,0xF
	  jl NotFoundAddressSlot
      ShowItemRequest:
	  xor eax,eax
	  mov ax,[edx+0x42]
	  xor ax,0xCE43
      AcceptItemFromWeapon:
	  test eax,eax
      jz ChuaCoGiaTri
	  cmp eax,0x2D0
	  jnz CheckTinhLuyen2
      mov byte ptr [esi+0x2A0+0x16],0x18
	  mov word ptr [esi+0x2A0+0x14],0xCF76
      mov dword ptr [ecx],0x5
	  push 0x1639
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push 0xE
	  push eax
	  lea eax,[esi+0x214]
	  push eax
	  mov eax,0x00848162
	  call eax
      add esp,0xC
	  jmp NotFoundAddressSlot
      // End 1
	  CheckTinhLuyen2:
	  cmp eax,0x41
	  jnz CheckTinhLuyen3
	  mov byte ptr [esi+0x2A0+0x16],0x18
	  mov word ptr [esi+0x2A0+0x14],0xCF75
	  mov dword ptr [ecx],0x6
	  push 0x163A
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push 0xD
	  push eax
	  lea eax,[esi+0x214]
	  push eax
	  mov eax,0x00848162
	  call eax
      add esp,0xC
	  jmp NotFoundAddressSlot
	  // End 2
	  CheckTinhLuyen3:
	  cmp eax,0x29
	  jnz CheckTinhLuyen4
	  mov byte ptr [esi+0x2A0+0x16],0x18
	  mov word ptr [esi+0x2A0+0x14],0xCF74
	  mov dword ptr [ecx],0x7
	  push 0x163B
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push 0xD
	  push eax
	  lea eax,[esi+0x214]
	  push eax
	  mov eax,0x00848162
	  call eax
      add esp,0xC
	  jmp NotFoundAddressSlot
	  // End 3
	  CheckTinhLuyen4:
	  cmp eax,0xE3
	  jnz NotFoundAddressSlot
	  mov byte ptr [esi+0x2A0+0x16],0x18
	  mov word ptr [esi+0x2A0+0x14],0xCF7B
      mov dword ptr [ecx],0x8
      push 0x163C
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push 0x11
	  push eax
	  lea eax,[esi+0x214]
	  push eax
	  mov eax,0x00848162
	  call eax
      add esp,0xC
	  jmp NotFoundAddressSlot
	  // End 14
	  VuKhiMaxInchant:
	  cmp eax,0x17
	  jnz NotFoundAddressSlot
      xor eax,eax
	  mov al,[edx+0x10]
	  xor al,0xC5
	  cmp eax,0x16
	  jl NotFoundAddressSlot
      xor eax,eax
	  mov ax,[edx+0x4E]
	  xor ax,0xCE43
	  jmp AcceptItemFromWeapon

	  ChuaCoGiaTri:
	  mov eax,[ecx]
	  cmp eax,0x5
      jnz NewLanAn
	  mov word ptr [esi+0x2A0+0x14],0xCF76
	  mov byte ptr [esi+0x2A0+0x16],0x18
      push 0x1639
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push 0xE
	  push eax
	  lea eax,[esi+0x214]
	  push eax
	  mov eax,0x00848162
	  call eax
	  add esp,0xC
	  jmp NotFoundAddressSlot

	  NewLanAn:
	  cmp eax,0x6
	  jnz NewQuyAn
      mov byte ptr [esi+0x2A0+0x16],0x18
	  mov word ptr [esi+0x2A0+0x14],0xCF75
	  push 0x163A
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push 0xD
	  push eax
	  lea eax,[esi+0x214]
	  push eax
	  mov eax,0x00848162
	  call eax
      add esp,0xC
	  jmp NotFoundAddressSlot

	  NewQuyAn:
	  cmp eax,0x7
	  jnz NewPhungAn
      mov byte ptr [esi+0x2A0+0x16],0x18
	  mov word ptr [esi+0x2A0+0x14],0xCF74
	  push 0x163B
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push 0xD
	  push eax
	  lea eax,[esi+0x214]
	  push eax
	  mov eax,0x00848162
	  call eax
      add esp,0xC
	  jmp NotFoundAddressSlot

	  NewPhungAn:
	  cmp eax,0x8
	  jnz ChuaChonGiaTriNew
      mov byte ptr [esi+0x2A0+0x16],0x18
	  mov word ptr [esi+0x2A0+0x14],0xCF7B
      push 0x163C
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push 0x11
	  push eax
	  lea eax,[esi+0x214]
	  push eax
	  mov eax,0x00848162
	  call eax
      add esp,0xC
	  jmp NotFoundAddressSlot

	  ChuaChonGiaTriNew:
	  mov word ptr [esi+0x2A0+0x14],0xCF76
	  mov byte ptr [esi+0x2A0+0x16],0x18
      push 0x1639
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push 0xE
	  push eax
	  lea eax,[esi+0x214]
	  push eax
	  mov eax,0x00848162
	  call eax
	  add esp,0xC
	  NotFoundAddressSlot:
	  mov edx,[esi+0x18]
	  mov eax,[esi+0x14]
	  push 0x004F43C5
      ret
	}
};
__declspec(naked)void DrawWeaponSkill()  //004D5FBC
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  push eax
	  mov edx,[esi+0x228]
	  mov [eax+0x70],edx
      mov ecx,[esi+0x20C]
	  cmp ecx,0x1
	  jz ShowItemClothInInventory
      cmp ecx,0x2
	  jz ShowItemClothInInventory
      cmp ecx,0x6 //Giao Dich Doi Phuong
	  jz ShowItemTradeAnotherUser
	  cmp ecx,0x7 //Giao Dich Local User
	  jz ShowItemTradeUser
      cmp ecx,0xA //Shop
	  jz ShowItemInShopUser
	  cmp ecx,0x10 //Shop
	  jz ShowItemUserWear
	  jmp Default


      ShowItemUserWear:
	  mov eax,[esi+0x0000583C]
	  mov edx,[esi+0x00005B04]
	  lea ecx,[eax+eax*0x8]
	  shl ecx,0x4
	  lea eax,[ecx+edx+0x000005CC]
	  push eax
	  call ProcessShowWeaponSkill
	  jmp Default


	  ShowItemTradeAnotherUser:
      mov eax,[esi+0x0000583C]
	  lea ecx,[eax+eax*0x8]
	  lea edx,[eax+ecx*0x2]
	  mov eax,[esi+0x00005AE4]
	  lea ecx,[eax+edx*0x8+0x00000240]
      push ecx
      call ProcessShowWeaponSkill
	  jmp Default

	  ShowItemTradeUser:
      mov eax,[esi+0x0000583C]
	  lea ecx,[eax+eax*0x8]
	  lea edx,[eax+ecx*0x2]
	  mov eax,[esi+0x00005AE4]
	  lea ecx,[eax+edx*0x8+0x00000834]
	  push ecx
	  call ProcessShowWeaponSkill
	  jmp Default

	  ShowItemInShopUser:
      mov eax,[esi+0x0000583C]
	  lea ecx,[eax+eax*0x8]
	  lea edx,[eax+ecx*0x2]
	  mov eax,[esi+0x00005AFC]
	  lea ecx,[eax+edx*0x8+0x000002CC]
	  push ecx
	  call ProcessShowWeaponSkill
	  jmp Default

      ShowItemClothInInventory:
	  xor eax,eax
	  mov eax,[esi+0x5840]
	  test eax,eax
	  jz Default
	  cmp eax,0x13
	  jnz Default
	  mov eax,[esi+0x583C]
	  cmp eax,0x0
	  jb Default
	  cmp eax,0x96
	  ja Default
	  //Check
      xor eax,eax
	  mov eax,[esi+0x583C]
	  imul eax,0x90
	  lea edx,[eax+0x1107258+0x22DC8]
	  push edx
	  call ProcessShowWeaponSkill
	  jmp Default

	  ProcessShowWeaponSkill:
      xor eax,eax
	  mov eax,[esp+0x4]
      xor edx,edx
	  mov dx,[eax+0x14]
	  xor dx,0xCE43
	  push edx
	  mov eax,[esp+0xC]
	  push eax
	  call GetIDSkillFromWeapon
	  test eax,eax
      jz EndShowWeaponSkill
	  //
      push eax
      push 0xFFFF0000
      mov ecx,DWORD PTR SS :[0x01733AC4]
	  mov eax,[ecx]
	  call dword ptr [eax+0xC]
	  push 0x14
      mov ecx, 0x1733B30
	  mov eax, 0x007C2CF0
	  call eax
      mov ebx,eax
	  //Show Text
      mov     eax, [esi+0x210]
	  mov     edi, [esi+0x18]
	  mov 	  ecx,DWORD PTR SS:[0x01733AC4]
	  push    0x3
	  sub     eax, 0x10
	  push    0x3F800000
	  push    eax
	  mov     eax, [esi+0x228]
	  mov     edx, [ecx]
	  add     eax, edi
	  add     eax,0x24
	  push    ebx
	  push    eax
	  mov     eax, [esi+0x14]
	  add     eax, 0x4D
	  push    eax
	  call    dword ptr [edx+0x18]
	  mov     eax, [esi+0x210]
	  mov     ecx, DWORD PTR SS:[0x01733AC4]
	  sub     eax, 0x10
	  mov     edx, [ecx]
	  push    eax
	  push    ebx
	  call    dword ptr [edx+0x48]
	  mov ecx,DWORD PTR SS:[0x008970EC]
	  imul ecx,eax
	  add [esi+0x00000228],ecx
      //Hien thi vien o vuong
	  mov ebp,[0x008970EC]
	  imul ebp,0x3
	  push 0xAAFFFFFF
	  push 0x0
	  mov ecx,[esi+0x00000228]
	  add ecx,0x2B
	  mov edi,[esi+0x18]
	  add ecx,edi
	  push ecx
	  mov ecx,[esi+0x00000210]
	  mov eax,[esi+0x14]
	  lea eax,[eax+ecx-0x8]
	  push eax
	  mov ecx,[esi+0x00000228]
	  add ecx,0x2B
	  mov edi,[esi+0x18]
	  add ecx,edi
	  sub ecx,0x1E
      push ecx
	  mov ecx,[esi+0x00000210]
	  mov eax,[esi+0x14]
	  lea eax,[eax+ecx-0xC1]
      push eax
      fild    dword ptr [esp+0xC]
	  fstp    dword ptr [esp+0xC]
	  fild    dword ptr [esp+0x8]
	  fstp    dword ptr [esp+0x8]
	  fild    dword ptr [esp+0x4]
	  fstp    dword ptr [esp+0x4]
	  fild    dword ptr [esp]
	  fstp    dword ptr [esp]
	  mov eax,0x007C7880
	  call    eax
	  add esp,0x18
	  //Hien thi nen
	  push 0xFF000000
      mov ecx,[esi+0x00000228]
	  add ecx,0x2B
	  mov edi,[esi+0x18]
	  add ecx,edi
	  push ecx
	  mov ecx,[esi+0x00000210]
	  mov eax,[esi+0x14]
	  lea eax,[eax+ecx-0x8]
	  push eax
	  mov ecx,[esi+0x00000228]
	  add ecx,0x2B
	  mov edi,[esi+0x18]
	  add ecx,edi
      sub ecx,0x1D
	  push ecx
	  mov ecx,[esi+0x00000210]
	  mov eax,[esi+0x14]
	  lea eax,[eax+ecx-0xC0]
      push eax
      fild    dword ptr [esp+0xC]
	  fstp    dword ptr [esp+0xC]
	  fild    dword ptr [esp+0x8]
	  fstp    dword ptr [esp+0x8]
	  fild    dword ptr [esp+0x4]
	  fstp    dword ptr [esp+0x4]
	  fild    dword ptr [esp]
	  fstp    dword ptr [esp]
	  mov eax,0x007C7BB0
	  call    eax
      add esp,0x14
	  //Show IconSkill
	  push 0x1
	  //--
      mov ecx,[esi+0x00000228]
	  add ecx,0xD
	  mov edi,[esi+0x18]
	  add ecx,edi
	  push ecx
	  //
      mov ecx,[esi+0x00000210]
	  mov eax,[esi+0x14]
	  lea eax,[eax+ecx-0xE1]
	  push eax
	  mov eax,[esp+0x10]
      xor edx,edx
	  mov dx,[eax+0x14]
	  xor dx,0xCE43
	  push edx
	  mov eax,[esp+0x18]
      push eax
	  call GetIDSkillFromWeapon
	  push eax
	  mov ecx, DWORD PTR SS : [0x1616230]
	  mov eax, 0x0055F550
	  call eax // Show Icon Skill
	  EndShowWeaponSkill:
	  ret 0x4

	  //
	  Default:
	  pop edi
	  pop esi
	  pop ebp
      add esp,0x48
	  push 0x004D5FC1
	  ret

	  GetIDSkillFromWeapon:
	  xor ecx,ecx
	  BackLoopCheckIDWeapon:
      mov eax,[esp+0x4]
	  mov edx,[esp+0x8]
	  cmp dx,[eax+ecx*0x8]
	  jnz CheckAnotherNext
	  xor edx,edx
	  mov dx,[eax+ecx*0x8+0x4]
      mov eax,edx
      ret 0x8

	  CheckAnotherNext:
	  add ecx,0x1
	  mov dx,[eax+ecx*0x4]
	  test edx,edx
	  jnz BackLoopCheckIDWeapon
	  mov eax,0x0
	  ret 0x8
	}
}
/*__declspec(naked)void DrawMoreInforRelic()  //004D8DA0
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  push eax
	  mov edx,[esi+0x228]
	  mov [eax+0x70],edx
      mov ecx,[esi+0x20C]
	  cmp ecx,0x1
	  jz ShowItemClothInInventory
      cmp ecx,0x2
	  jz ShowItemClothInInventory
      cmp ecx,0x6 //Giao Dich Doi Phuong
	  jz ShowItemTradeAnotherUser
      cmp ecx,0x7 //Giao Dich Local User
	  jz ShowItemTradeUser
      cmp ecx,0xA //Shop
	  jz ShowItemInShopUser
	  cmp ecx,0x10 //Shop
	  jz ShowItemUserWear
	  jmp Default


	  ShowItemUserWear:
	  mov eax,[esi+0x0000583C]
	  mov edx,[esi+0x00005B04]
	  lea ecx,[eax+eax*0x8]
	  shl ecx,0x4
	  lea eax,[ecx+edx+0x000005CC]
	  push eax
	  call ProcessDrawRelics
	  jmp Default


	  ShowItemTradeAnotherUser:
      mov eax,[esi+0x0000583C]
	  lea ecx,[eax+eax*0x8]
	  lea edx,[eax+ecx*0x2]
	  mov eax,[esi+0x00005AE4]
	  lea ecx,[eax+edx*0x8+0x00000240]
	  push ecx
      call ProcessDrawRelics
	  jmp Default

	  ShowItemTradeUser:
      mov eax,[esi+0x0000583C]
	  lea ecx,[eax+eax*0x8]
	  lea edx,[eax+ecx*0x2]
	  mov eax,[esi+0x00005AE4]
	  lea ecx,[eax+edx*0x8+0x00000834]
	  push ecx
      call ProcessDrawRelics
	  jmp Default

	  ShowItemInShopUser:
      mov eax,[esi+0x0000583C]
	  lea ecx,[eax+eax*0x8]
	  lea edx,[eax+ecx*0x2]
	  mov eax,[esi+0x00005AFC]
	  lea ecx,[eax+edx*0x8+0x000002CC]
	  push ecx
      call ProcessDrawRelics
	  jmp Default

	  ShowItemClothInInventory:
	  xor eax,eax
	  mov eax,[esi+0x5840]
	  test eax,eax
	  jz Default
	  cmp eax,0x9
	  jnz Default
	  mov eax,[esi+0x583C]
	  cmp eax,0x0
	  jb Default
	  cmp eax,0x96
	  ja Default
	  imul eax,0x90
      xor edx,edx
	  mov dl,[eax+0x1107258+0x22DC8+0x2E]
	  xor dl,0xC5
	  test edx,edx
	  jz Default
	  lea edx,[eax+0x1107258+0x22DC8]
	  push edx
	  call ProcessDrawRelics
	  jmp Default


	  ProcessDrawRelics:
      push 0xFFFF0000
      mov ecx,DWORD PTR SS :[0x01733AC4]
	  mov eax,[ecx]
	  call dword ptr [eax+0xC]
      push 0x1099
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  call ShowTextCount
	  mov eax,[esp+0x4]
	  mov cl,[eax+0x2E]
	  xor cl,0xC5
	  test ecx,ecx
	  jz EndOfFuncDrawRelics
	  sub esp,0x4
	  xor ecx,ecx
	  LoopCheckOptionRelics:
	  mov [esp],ecx
	  xor edx,edx
	  xor eax,eax
	  mov eax,[esp+0x8]
	  mov dl,[eax+0x2A+ecx+0x4]
	  xor dl,0xC5
	  test edx,edx
      jz EndCheckOptionRelicsItem
	  // esp = vi tri
	  // esp+0x4 =
	  //Get Infor Item
	  //-- Get Color Text
      xor eax,eax
	  mov eax,[esp+0x8]
	  mov dl,[eax+0x2A+ecx+0x5]
	  xor dl,0xC5
	  test edx,edx
      jz ChuaPhaBoPhongAn
	  push edx
	  call GetColorOption
	  push eax
      mov ecx,DWORD PTR SS :[0x01733AC4]
	  mov eax,[ecx]
	  call dword ptr [eax+0xC]
	  //--Get String Option
	  xor edx,edx
	  mov ecx,[esp]
      xor eax,eax
	  mov eax,[esp+0x8]
	  mov dl,[eax+0x2A+ecx+0x5]
	  xor dl,0xC5
	  push edx
	  xor edx,edx
	  mov eax,[esp+0xC]
	  mov dx,[eax+0x2A+ecx]
	  xor dx,0xCE43
	  push edx
	  xor edx,edx
	  mov eax,[esp+0x10]
	  mov dx,[eax+0x2A+ecx+0x2]
	  xor dx,0xCE43
	  push edx
	  mov edx,[esp+0x18]
	  push edx
	  call GetStringOptn
	  ShowTextInGame:
      mov ebx,eax
	  //Show Text
      mov     eax, [esi+0x210]
	  mov     edi, [esi+0x18]
	  mov 	  ecx,DWORD PTR SS:[0x01733AC4]
	  push    0x3
	  sub     eax, 0x10
	  push    0x3F800000
	  push    eax
	  mov     eax, [esi+0x228]
	  mov     edx, [ecx]
	  add     eax, edi
      add     eax,0x14
	  push    ebx
	  push    eax
	  mov     eax, [esi+0x14]
	  add     eax, 0xA
	  push    eax
	  call    dword ptr [edx+0x18]
	  mov     eax, [esi+0x210]
	  mov     ecx, DWORD PTR SS:[0x01733AC4]
	  sub     eax, 0x10
	  mov     edx, [ecx]
	  push    eax
	  push    ebx
	  call    dword ptr [edx+0x48]
	  mov ecx,DWORD PTR SS:[0x008970EC]
	  imul ecx,eax
	  add [esi+0x00000228],ecx
	  jmp LoopCheckViTri
	  ChuaPhaBoPhongAn:
      push 0x1095
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  jmp ShowTextInGame
	  LoopCheckViTri:
	  mov ecx,[esp]
	  add ecx,0x6
	  mov [esp],ecx
	  cmp ecx,0x24
	  jl LoopCheckOptionRelics
	  EndCheckOptionRelicsItem:
	  add esp,0x4
      xor eax,eax
	  mov eax,[esp+0x8]
	  lea edx,[eax+0x2A]
	  push edx
	  call GetCountNewOption
	  mov ebp,DWORD PTR SS:[0x008970EC]
	  imul ebp,eax
	  push 0xAAFFFFFF
	  push 0x0
	  mov ecx,[esi+0x00000228]
	  add ecx,0x12
	  mov edi,[esi+0x18]
	  add ecx,edi
	  push ecx
	  mov ecx,[esi+0x00000210]
	  mov eax,[esi+0x14]
	  lea eax,[eax+ecx-0x8]
	  push eax
	  mov eax,[esp+0x18]
	  mov eax,[eax+0x70]
      mov ecx,[esi+0x18]
	  add eax,ecx
	  add eax,0x10
	  push eax
	  mov ecx,[esi+0x00000210]
	  mov eax,[esi+0x14]
	  lea eax,[eax+ecx-0xFB]
      push eax
      fild    dword ptr [esp+0xC]
	  fstp    dword ptr [esp+0xC]
	  fild    dword ptr [esp+0x8]
	  fstp    dword ptr [esp+0x8]
	  fild    dword ptr [esp+0x4]
	  fstp    dword ptr [esp+0x4]
	  fild    dword ptr [esp]
	  fstp    dword ptr [esp]
	  mov eax,0x007C7880
	  call    eax
	  add esp,0x18
      EndOfFuncDrawRelics:
	  ret 0x4

	  Default:
      pop edi
	  pop edi
	  pop esi
	  pop ebp
	  pop ebx
      add esp,0x8
	  push 0x004D8DA7
	  ret


	  GetCountNewOption:
	  sub esp,0x4
	  xor ecx,ecx
      LoopCheckCountOpt:
	  mov [esp],ecx
	  xor edx,edx
	  mov eax,[esp+0x8]
      imul ecx,0x6
	  mov dl,[eax+ecx+0x4]
	  xor dl,0xC5
	  test edx,edx
	  jz EncFunCountOption
      mov ecx,[esp]
	  add ecx,0x1
	  mov [esp],ecx
	  cmp ecx,0x6
	  jl LoopCheckCountOpt
	  EncFunCountOption:
      mov eax,[esp]
      add esp,0x4
      ret 0x4

	  GetColorOption:
	  xor ecx,ecx
	  mov ecx,[esp+0x4]
	  cmp ecx,0x1
	  jnz KiemTraColor2
	  mov eax,0xFFFFFFFF
	  ret 0x4

	  KiemTraColor2:
	  cmp ecx,0x2
	  jnz KiemTraColor3
      mov eax,0xFFFF9A00
	  ret 0x4

	  KiemTraColor3:
	  cmp ecx,0x3
	  jnz KiemTraColor4
      mov eax,0xFF009A00
	  ret 0x4

	  KiemTraColor4:
	  cmp ecx,0x4
	  jnz KiemTraColor5
      mov eax,0xFFFFFF00
	  ret 0x4

	  KiemTraColor5:
	  cmp ecx,0x5
	  jnz UnknowColor
      mov eax,0xFFFF00FF
	  ret 0x4

	  UnknowColor:
      mov eax,0xFF00F064
	  ret 0x4

      GetStringOptn:
	  xor ecx,ecx
	  mov ecx,[esp+0x10]
	  cmp ecx,0x1
	  jnz KiemTraRank2
      push 0x108F
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
      mov ecx,[esp+0x4]
	  push 0x7
	  push eax
	  lea eax,[ecx]
	  push eax
	  mov eax,0x00848162
	  call eax
	  add esp,0xC
	  mov eax,[esp+0x8]
	  push eax
	  mov eax,[esp+0x10]
	  push eax
	  push 0xB
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov eax,[esp+0xC]
	  lea eax,[eax+0x7]
	  push 0x100
	  push eax
	  mov eax,0x0085C538
	  call dword ptr [eax]
	  add esp,0x10
      mov eax,[esp+0x4]
	  lea eax,[eax]
      ret 0x10

	  KiemTraRank2:
	  cmp ecx,0x2
	  jnz KiemTraRank3
	  push 0x1090
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
      mov ecx,[esp+0x4]
	  push 0x7
	  push eax
	  lea eax,[ecx]
	  push eax
	  mov eax,0x00848162
	  call eax
	  add esp,0xC
	  mov eax,[esp+0x8]
	  push eax
	  mov eax,[esp+0x10]
	  push eax
	  push 0xB
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov eax,[esp+0xC]
	  lea eax,[eax+0x7]
	  push 0x100
	  push eax
	  mov eax,0x0085C538
	  call dword ptr [eax]
	  add esp,0x10
      mov eax,[esp+0x4]
	  lea eax,[eax]
      ret 0x10

	  KiemTraRank3:
	  cmp ecx,0x3
	  jnz KiemTraRank4
	  push 0x1091
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
      mov ecx,[esp+0x4]
	  push 0x8
	  push eax
	  lea eax,[ecx]
	  push eax
	  mov eax,0x00848162
	  call eax
	  add esp,0xC
	  mov eax,[esp+0x8]
	  push eax
	  mov eax,[esp+0x10]
	  push eax
	  push 0xB
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov eax,[esp+0xC]
	  lea eax,[eax+0x8]
	  push 0x100
	  push eax
	  mov eax,0x0085C538
	  call dword ptr [eax]
	  add esp,0x10
      mov eax,[esp+0x4]
	  lea eax,[eax]
      ret 0x10

	  KiemTraRank4:
	  cmp ecx,0x4
	  jnz KiemTraRank5
	  push 0x1092
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
      mov ecx,[esp+0x4]
	  push 0x5
	  push eax
	  lea eax,[ecx]
	  push eax
	  mov eax,0x00848162
	  call eax
	  add esp,0xC
	  mov eax,[esp+0x8]
	  push eax
	  mov eax,[esp+0x10]
	  push eax
	  push 0xB
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov eax,[esp+0xC]
	  lea eax,[eax+0x5]
	  push 0x100
	  push eax
	  mov eax,0x0085C538
	  call dword ptr [eax]
	  add esp,0x10
	  mov eax,[esp+0x4]
	  lea eax,[eax]
      ret 0x10

	  KiemTraRank5:
	  cmp ecx,0x5
	  jnz UnknowRank
	  push 0x1094
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
      mov ecx,[esp+0x4]
	  push 0x7
	  push eax
	  lea eax,[ecx]
	  push eax
	  mov eax,0x00848162
	  call eax
	  add esp,0xC
	  mov eax,[esp+0x8]
	  push eax
	  mov eax,[esp+0x10]
	  push eax
	  push 0xB
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov eax,[esp+0xC]
	  lea eax,[eax+0x6]
	  push 0x100
	  push eax
	  mov eax,0x0085C538
	  call dword ptr [eax]
	  add esp,0x10
      mov eax,[esp+0x4]
	  lea eax,[eax]
      ret 0x10

	  UnknowRank:
	  push 0x1094
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
      mov ecx,[esp+0x4]
	  push 0x7
	  push eax
	  lea eax,[ecx]
	  push eax
	  mov eax,0x00848162
	  call eax
	  add esp,0xC
	  mov eax,[esp+0x8]
	  push eax
	  mov eax,[esp+0x10]
	  push eax
	  push 0xB
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov eax,[esp+0xC]
	  lea eax,[eax+0x7]
	  push 0x100
	  push eax
	  mov eax,0x0085C538
	  call dword ptr [eax]
	  add esp,0x10
      mov eax,[esp+0x4]
	  lea eax,[eax]
	  ret 0x10

	  ShowTextCount:
      mov ebx,[esp+0x4]
	  //Show Text
      mov     eax, [esi+0x210]
	  mov     edi, [esi+0x18]
	  mov 	  ecx,DWORD PTR SS:[0x01733AC4]
	  push    0x3
	  sub     eax, 0x10
	  push    0x3F800000
	  push    eax
	  mov     eax, [esi+0x228]
	  mov     edx, [ecx]
	  add     eax, edi
      add     eax,0x14
	  push    ebx
	  push    eax
	  mov     eax, [esi+0x14]
	  add     eax, 0xA
	  push    eax
	  call    dword ptr [edx+0x18]
	  mov     eax, [esi+0x210]
	  mov     ecx, DWORD PTR SS:[0x01733AC4]
	  sub     eax, 0x10
	  mov     edx, [ecx]
	  push    eax
	  push    ebx
	  call    dword ptr [edx+0x48]
	  mov ecx,DWORD PTR SS:[0x008970EC]
	  imul ecx,eax
	  add [esi+0x00000228],ecx
      ret 0x4
	}
}    */
__declspec(naked)void DrawMoreInforRelic()  //004D8DA0
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  push eax
      mov ecx,[eax+0x80]
	  test ecx,ecx
	  jnz DaCoThongTinHinhAnhNV
      add eax,0x80
	  push eax
	  call AddOptionImage
      DaCoThongTinHinhAnhNV:
      mov ecx,[esi+0x20C]
	  cmp ecx,0x1
	  jz ShowItemClothInInventory
      cmp ecx,0x2
	  jz ShowItemClothInInventory
      cmp ecx,0x6 //Giao Dich Doi Phuong
	  jz ShowItemTradeAnotherUser
      cmp ecx,0x7 //Giao Dich Local User
	  jz ShowItemTradeUser
      cmp ecx,0xA //Shop
	  jz ShowItemInShopUser
	  cmp ecx,0x10 //Shop
	  jz ShowItemUserWear
	  jmp Default


	  ShowItemUserWear:
	  mov eax,[esi+0x0000583C]
	  mov edx,[esi+0x00005B04]
	  lea ecx,[eax+eax*0x8]
	  shl ecx,0x4
	  lea eax,[ecx+edx+0x000005CC]
	  push eax
      mov eax,[esp+0x4]
      push eax
	  call ProcessDrawRelics
	  jmp Default


	  ShowItemTradeAnotherUser:
      mov eax,[esi+0x0000583C]
	  lea ecx,[eax+eax*0x8]
	  lea edx,[eax+ecx*0x2]
	  mov eax,[esi+0x00005AE4]
	  lea ecx,[eax+edx*0x8+0x00000240]
	  push ecx
      mov eax,[esp+0x4]
	  push eax
      call ProcessDrawRelics
	  jmp Default

	  ShowItemTradeUser:
      mov eax,[esi+0x0000583C]
	  lea ecx,[eax+eax*0x8]
	  lea edx,[eax+ecx*0x2]
	  mov eax,[esi+0x00005AE4]
	  lea ecx,[eax+edx*0x8+0x00000834]
	  push ecx
      mov eax,[esp+0x4]
	  push eax
      call ProcessDrawRelics
	  jmp Default

	  ShowItemInShopUser:
      mov eax,[esi+0x0000583C]
	  lea ecx,[eax+eax*0x8]
	  lea edx,[eax+ecx*0x2]
	  mov eax,[esi+0x00005AFC]
	  lea ecx,[eax+edx*0x8+0x000002CC]
	  push ecx
      mov eax,[esp+0x4]
	  push eax
      call ProcessDrawRelics
	  jmp Default

	  ShowItemClothInInventory:
	  xor eax,eax
	  mov eax,[esi+0x5840]
	  test eax,eax
	  jz Default
	  cmp eax,0x9
	  jnz Default
	  mov eax,[esi+0x583C]
	  cmp eax,0x0
	  jb Default
	  cmp eax,0x96
	  ja Default
	  imul eax,0x90
	  /*xor edx,edx
	  mov dl,[eax+0x1107258+0x22DC8+0x2E]
	  xor dl,0xC5
	  test edx,edx
	  jz Default    */
	  lea edx,[eax+0x1107258+0x22DC8]
	  push edx
      mov eax,[esp+0x4]
      push eax
	  call ProcessDrawRelics
	  jmp Default

      GetRankOption:
	  mov ecx,[esp+0x4]
	  cmp ecx,0
	  jnz KiemTraRankOption1
	  mov eax,4136
	  ret 0x4

	  KiemTraRankOption1:
	  cmp ecx,1
	  jnz KiemTraRankOption2
	  mov eax,4137
	  ret 0x4

	  KiemTraRankOption2:
	  cmp ecx,2
	  jnz KiemTraRankOption3
	  mov eax,4138
	  ret 0x4

	  KiemTraRankOption3:
	  cmp ecx,3
	  jnz KiemTraRankOption4
	  mov eax,4139
	  ret 0x4

	  KiemTraRankOption4:
      mov eax,4140
	  ret 0x4

      GetlenghtCapDo:
      mov ecx,[esp+0x4]
	  cmp ecx,0
	  jnz GetlenghtCapDo1
	  mov eax,0x72
	  ret 0x4

	  GetlenghtCapDo1:
	  cmp ecx,1
	  jnz GetlenghtCapDo2
	  mov eax,0x58
	  ret 0x4

	  GetlenghtCapDo2:
	  cmp ecx,2
	  jnz GetlenghtCapDo3
	  mov eax,0x7B
	  ret 0x4

	  GetlenghtCapDo3:
	  cmp ecx,3
	  jnz GetlenghtCapDo4
	  mov eax,0x55
	  ret 0x4

	  GetlenghtCapDo4:
      mov eax,0x71
	  ret 0x4


	  ProcessDrawRelics:
	  sub esp,0x4
	  xor ecx,ecx
	  mov [esp],ecx
	  BackLoopOptionClothRanDom:
      xor ecx,ecx
	  mov ecx,[esp]
	  imul ecx,6
	  xor edx,edx
	  mov eax,[esp+0xC]
	  mov dx,[eax+0x2A+ecx]
	  xor dx,0xCE43
	  test edx,edx
	  jz EndShowOptionClothRandomShowPhongAn
	  //
	  xor ecx,ecx
	  mov ecx,[esp]
	  imul ecx,6
	  xor edx,edx
	  mov eax,[esp+0xC]
	  xor edx,edx
	  mov dl,[eax+0x2A+ecx+0x4]
	  xor dl,0xC5
	  and dl,0xF
	  cmp dl,0
      jnz KiemTraCapDo2
	  push 0xFF0066ff
      jmp HienThiMauRate

	  KiemTraCapDo2:
	  cmp dl,1
	  jnz KiemTraCapDo3
	  push 0xFFff00ff
	  jmp HienThiMauRate

	  KiemTraCapDo3:
	  cmp dl,2
	  jnz KiemTraCapDo4
	  push 0xFF66ff66
	  jmp HienThiMauRate

	  KiemTraCapDo4:
	  cmp dl,3
	  jnz KiemTraCapDo5
	  push 0xFF0000ff
	  jmp HienThiMauRate

	  KiemTraCapDo5:
	  push 0xFFffff00
      HienThiMauRate:
      mov ecx,DWORD PTR SS :[0x01733AC4]
	  mov eax,[ecx]
	  call dword ptr [eax+0xC]
	  xor ecx,ecx
	  mov ecx,[esp]
	  imul ecx,6
	  xor edx,edx
	  mov eax,[esp+0xC]
      xor edx,edx
      mov dl,[eax+0x2A+ecx+0x4]
	  xor dl,0xC5
	  push edx // Rank Thap Trung Cao
	  call GetRankOption
	  push eax
      push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  push 51
      push 82
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
      push 0x0
	  push 0x3F800000
	  mov eax,DWORD PTR [0x01733AC4]
	  mov edi,[eax]
	  mov edx,[esi+0x18]
	  add edx,86
	  mov ecx,[esp+0x10]
	  imul ecx,0x26
	  add edx,ecx
	  push edx
	  mov edx,[esi+0x14]
	  sub edx,309
	  push edx
	  push eax
	  mov ecx,DWORD PTR [0x01733AC4]
	  call dword ptr [edi+0x30]
	  add esp,0x1C
	  // Hien Thi Opt
      xor ecx,ecx
	  mov ecx,[esp]
	  imul ecx,6
	  xor edx,edx
	  mov eax,[esp+0xC]
      xor edx,edx
	  mov dl,[eax+0x2A+ecx+0x4]
	  xor dl,0xC5
	  cmp dl,0
	  jnz KiemTraRank2EffectText1
	  push 0xFFFFFFFF
	  jmp ContiNeuKiemTraRank2EffectText

	  KiemTraRank2EffectText1:
	  cmp dl,1
	  jnz KiemTraRank2EffectText2
	  push 0xFFFF9A00
	  jmp ContiNeuKiemTraRank2EffectText

	  KiemTraRank2EffectText2:
	  cmp dl,2
	  jnz KiemTraRank2EffectText3
	  push 0xFF009A00
	  jmp ContiNeuKiemTraRank2EffectText

	  KiemTraRank2EffectText3:
      cmp dl,3
	  jnz KiemTraRank2EffectText4
	  push 0xFFFFFF00
	  jmp ContiNeuKiemTraRank2EffectText

	  KiemTraRank2EffectText4:
	  push 0xFFFF00FF
      ContiNeuKiemTraRank2EffectText:
	  mov ecx,DWORD PTR SS :[0x01733AC4]
	  mov eax,[ecx]
	  call dword ptr [eax+0xC]
	  xor ecx,ecx
	  mov ecx,[esp]
	  imul ecx,6
	  xor edx,edx
	  mov eax,[esp+0xC]
	  mov dx,[eax+0x2A+ecx+0x2]
	  xor dx,0xCE43
	  push edx // Value
      xor edx,edx
      mov dx,[eax+0x2A+ecx]
	  xor dx,0xCE43
	  push edx // Get NDText String
      push 11
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  push 0x2
	  push 0x3F800000
	  mov eax,DWORD PTR [0x01733AC4]
	  mov edi,[eax]
	  mov edx,[esi+0x18]
	  add edx,107
	  mov ecx,[esp+0x10]
	  imul ecx,0x26
	  add edx,ecx
	  push edx
	  mov edx,[esi+0x14]
	  sub edx,149
	  push edx
      mov eax,DWORD PTR [0x01733AC4]
	  push eax
	  mov ecx,DWORD PTR [0x01733AC4]
	  call dword ptr [edi+0x30]
	  add esp,0x1C
	  mov ecx,[esp]
	  add ecx,1
      mov [esp],ecx
	  cmp ecx,6
	  jl BackLoopOptionClothRanDom
	  EndShowOptionClothRandom:
      mov eax,[esi+0x18]
	  add eax,80
	  push eax
	  mov eax,[esi+0x14]
	  sub eax,248
      push eax
	  mov eax,[esp+0x10]
	  add eax,0x80
	  push eax
	  call GetImageClass
      KhongHienThiOptionForm:
	  add esp,0x4
	  ret 0x8

	  EndShowOptionClothRandomShowPhongAn:
      xor ecx,ecx
	  mov ecx,[esp]
	  imul ecx,6
	  xor edx,edx
	  mov eax,[esp+0xC]
	  xor edx,edx
	  mov dl,[eax+0x2A+ecx+0x4]
	  xor dl,0xC5
	  test dl,dl
	  jz CheckNextSlotPhongAn
      push 0xFFFF0000
      mov ecx,DWORD PTR SS :[0x01733AC4]
	  mov eax,[ecx]
	  call dword ptr [eax+0xC]
	  push 4245
      push 25
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  push 0x1
	  push 0x3F800000
	  mov eax,DWORD PTR [0x01733AC4]
	  mov edi,[eax]
	  mov edx,[esi+0x18]
	  add edx,107
	  mov ecx,[esp+0xC]
	  imul ecx,0x26
	  add edx,ecx
	  push edx
	  mov edx,[esi+0x14]
	  sub edx,125
	  push edx
      mov eax,DWORD PTR [0x01733AC4]
	  push eax
	  mov ecx,DWORD PTR [0x01733AC4]
	  call dword ptr [edi+0x30]
	  add esp,0x18
	  CheckNextSlotPhongAn:
	  mov ecx,[esp]
	  add ecx,1
      mov [esp],ecx
	  cmp ecx,6
	  jl BackLoopOptionClothRanDom
	  jmp EndShowOptionClothRandom

	  Default:
      pop edi
	  pop edi
	  pop esi
	  pop ebp
	  pop ebx
      add esp,0x8
	  push 0x004D8DA7
	  ret

      AddOptionImage:
	  sub esp,0x4
	  xor ecx,ecx
	  mov [esp],ecx
	  BackGetOptionImage:
	  mov ecx,[esp]
	  mov eax, 0x010CC088
	  mov edx,[eax+ecx]
	  mov eax,[esp+0x8]
	  mov [eax+ecx],edx
	  add ecx,4
	  mov [esp],ecx
	  cmp ecx,0xB8
	  jl BackGetOptionImage
	  add esp,0x4
	  ret 0x4

      GetImageClass:
	  push 53
	  push 82
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
	  mov  DWORD PTR SS : [ecx + 0x9C] , 33
	  mov  DWORD PTR SS : [ecx + 0xA0] , 359
	  mov  DWORD PTR SS : [ecx + 0x98] , 40
	  mov  DWORD PTR SS : [ecx + 0xA4] , 260
	  push 0xFF7F0000
	  push 5188
	  push 25
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,[esp+0x14]
	  mov edx,[esp+0x10]
	  push ecx
	  push edx
	  mov ecx, [esp+0x14]
	  mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
	  call eax
	  mov ecx,[esp+0x4]
	  push 0x1732CC8
	  mov eax, 0x7B9850
	  call eax //Draw1
	  ret 0xC
	}
}
__declspec(naked)void ResizeShowItem()  //004D322D
{
	__asm
	{
	   xor eax,eax
       mov ecx,[ebp+0x20C]
	   cmp ecx,0x1
	   jz ShowItemClothInInventory
       cmp ecx,0x2
	   jz ShowItemClothInInventory
	   cmp ecx,0x6 //Giao Dich Doi Phuong
	   jz ShowItemTradeAnotherUser
	   cmp ecx,0x7 //Giao Dich Local User
	   jz ShowItemTradeUser
	   cmp ecx,0xA //Shop
	   jz ShowItemInShopUser
       cmp ecx,0x10 //Shop
	   jz ShowItemUserWear
	   jmp Default


       ShowItemUserWear:
	   mov eax,[ebp+0x0000583C]
       mov edx,[ebp+0x00005B04]
	   lea ecx,[eax+eax*0x8]
	   shl ecx,0x4
       lea eax,[ecx+edx+0x000005CC]
	   push eax
       call ProcessAddMoreRawRelics
	   jmp Default


	   ShowItemTradeAnotherUser:
	   mov eax,[ebp+0x0000583C]
	   lea ecx,[eax+eax*0x8]
	   lea edx,[eax+ecx*0x2]
	   mov eax,[ebp+0x00005AE4]
	   lea ecx,[eax+edx*0x8+0x00000240]
	   push ecx
	   call ProcessAddMoreRawRelics
	   jmp Default

	   ShowItemTradeUser:
	   mov eax,[ebp+0x0000583C]
	   lea ecx,[eax+eax*0x8]
	   lea edx,[eax+ecx*0x2]
	   mov eax,[ebp+0x00005AE4]
	   lea ecx,[eax+edx*0x8+0x00000834]
	   push ecx
	   call ProcessAddMoreRawRelics
	   jmp Default


	   ShowItemInShopUser:
	   mov eax,[ebp+0x0000583C]
	   lea ecx,[eax+eax*0x8]
	   lea edx,[eax+ecx*0x2]
	   mov eax,[ebp+0x00005AFC]
	   lea ecx,[eax+edx*0x8+0x000002CC]
	   push ecx
	   call ProcessAddMoreRawRelics
	   jmp Default

       ShowItemClothInInventory:
	   mov eax,[ebp+0x5840]
	   test eax,eax
	   jz Default
	   cmp eax,0x9
       jnz Default
	   xor eax,eax
	   mov eax,[ebp+0x583C]
	   test eax,eax
	   jz Default
       mov eax,[ebp+0x583C]
	   imul eax,0x90
       xor edx,edx
	   mov dl,[eax+0x1107258+0x22DC8+0x2E]
	   xor dl,0xC5
	   test edx,edx
	   jz Default
	   lea edx,[eax+0x1107258+0x22DC8]
	   push edx
	   call ProcessAddMoreRawRelics
	   jmp Default


	   ProcessAddMoreRawRelics:
	   sub esp,0x4
	   xor ecx,ecx
	   LoopCheckText:
       mov eax,[esp+0x8]
	   mov [esp],ecx
	   xor edx,edx
	   mov dx,[eax+0x2A+ecx]
	   xor dx,0xCE43
	   test edx,edx
       jz ChuaCoOption
	   mov eax,[ebp+0x00000210]
	   sub eax,0x10
	   push eax
	   push edx
	   push 0xC
       mov ecx, 0x1733B30
	   mov eax, 0x007C2CF0
	   call eax
       push eax
	   mov ecx,DWORD PTR SS:[0x01733AC4]
	   mov eax,[ecx]
	   call dword ptr [eax+0x48]
	   mov ecx,DWORD PTR SS:[0x008970EC]
	   imul ecx,eax
	   add [ebp+0x00000214],ecx
	   mov ecx,[esp]
	   add ecx,0x6
	   jmp LoopCheckText
	   EncheckRow:
       add esp,0x4
	   ret 0x4

	   ChuaCoOption:
	   xor edx,edx
	   mov dl,[eax+0x2A+ecx+0x4]
	   xor dl,0xC5
	   test edx,edx
	   jz EncheckRow
	   mov eax,0x1
       mov ecx,DWORD PTR SS:[0x008970EC]
	   imul ecx,eax
	   add [ebp+0x00000214],ecx
	   mov ecx,[esp]
	   add ecx,0x6
       jmp LoopCheckText


	   Default:
       mov eax,0x1
       mov ecx,DWORD PTR SS:[0x008970EC]
	   imul ecx,eax
	   add [ebp+0x00000214],ecx
       mov ecx,[ebp+0x00005844]
	   push 0x004D3233
       ret
	}
}
__declspec(naked)void ResizeShowIncCloth()  //004CDF21
{
	__asm
	{
       xor eax,eax
	   mov eax,[ebp+0x20C]
	   cmp eax,0x1
	   jz ShowItemClothInInventory
	   cmp eax,0x2
	   jz ShowItemClothInInventory
	   cmp eax,0x6 //Giao Dich Doi Phuong
	   jz ShowItemTradeAnotherUser
	   cmp eax,0x7 //Giao Dich Local User
	   jz ShowItemTradeUser
	   cmp eax,0xA //Shop
	   jz ShowItemInShopUser
       cmp eax,0x10 //Shop
	   jz ShowItemUserWear
	   jmp Default


       ShowItemUserWear:
	   mov eax,[ebp+0x0000583C]
       mov edx,[ebp+0x00005B04]
	   lea ecx,[eax+eax*0x8]
	   shl ecx,0x4
       lea eax,[ecx+edx+0x000005CC]
	   push eax
       call GetRowCount
	   jmp Default


	   ShowItemTradeAnotherUser:
	   mov eax,[ebp+0x0000583C]
	   lea ecx,[eax+eax*0x8]
	   lea edx,[eax+ecx*0x2]
	   mov eax,[ebp+0x00005AE4]
	   lea ecx,[eax+edx*0x8+0x00000240]
	   push ecx
	   call GetRowCount
	   jmp Default

	   ShowItemTradeUser:
	   mov eax,[ebp+0x0000583C]
	   lea ecx,[eax+eax*0x8]
	   lea edx,[eax+ecx*0x2]
	   mov eax,[ebp+0x00005AE4]
	   lea ecx,[eax+edx*0x8+0x00000834]
       push ecx
	   call GetRowCount
	   jmp Default

	   ShowItemInShopUser:
	   mov eax,[ebp+0x0000583C]
	   lea ecx,[eax+eax*0x8]
	   lea edx,[eax+ecx*0x2]
	   mov eax,[ebp+0x00005AFC]
	   lea ecx,[eax+edx*0x8+0x000002CC]
	   push ecx
	   call GetRowCount
	   jmp Default

	   ShowItemClothInInventory:
       xor eax,eax
	   mov eax,[ebp+0x5840]
	   test eax,eax
	   jz Default
	   cmp eax,0x1
       jnz Default
	   xor eax,eax
	   mov eax,[ebp+0x583C]
	   cmp eax,0x0
	   jb Default
       cmp eax,0x96
	   ja Default
       mov eax,[ebp+0x583C]
	   imul eax,0x90
       xor edx,edx
	   lea edx,[eax+0x1107258+0x22DC8]
	   push edx
	   call GetRowCount
	   Default:
	   mov  ecx,[ebp+0x5844]
	   push 0x004CDF27
	   ret


	   GetRowCount:
       sub esp,0x4
	   xor ecx,ecx
	   LoopCheckText:
       mov eax,[esp+0x8]
	   mov [esp],ecx
	   xor edx,edx
	   mov dx,[eax+0x2A+ecx]
	   xor dx,0xCE43
	   test edx,edx
       jz EncheckRow
	   mov eax,1
	   mov ecx,DWORD PTR SS:[0x008970EC]
	   imul ecx,eax
	   add [ebp+0x00000214],ecx
	   mov ecx,[esp]
	   add ecx,0x6
	   jmp LoopCheckText
	   EncheckRow:
       add esp,0x4
       ret 0x4

	}
}
__declspec(naked)void ResizeShowWeaponSkill()  //004CC245
{
	__asm
	{
	   nop
	   nop
	   nop
	   nop
       nop
	   push eax
       mov ecx,[ebp+0x20C]
	   cmp ecx,0x1
	   jz ShowItemClothInInventory
	   cmp ecx,0x2
	   jz ShowItemClothInInventory
	   cmp ecx,0x6 //Giao Dich Doi Phuong
	   jz ShowItemTradeAnotherUser
	   cmp ecx,0x7 //Giao Dich Local User
	   jz ShowItemTradeUser
	   cmp ecx,0xA //Shop
	   jz ShowItemInShopUser
       cmp ecx,0x10//Shop
	   jz ShowItemUserWear
	   jmp Default

	   ShowItemUserWear:
	   mov eax,[ebp+0x0000583C]
       mov edx,[ebp+0x00005B04]
	   lea ecx,[eax+eax*0x8]
	   shl ecx,0x4
       lea eax,[ecx+edx+0x000005CC]
	   push eax
       call ProcessAddMoreRow
	   jmp Default

	   ShowItemTradeAnotherUser:
	   mov eax,[ebp+0x0000583C]
	   lea ecx,[eax+eax*0x8]
	   lea edx,[eax+ecx*0x2]
	   mov eax,[ebp+0x00005AE4]
	   lea ecx,[eax+edx*0x8+0x00000240]
	   push ecx
	   call ProcessAddMoreRow
	   jmp Default

	   ShowItemTradeUser:
	   mov eax,[ebp+0x0000583C]
	   lea ecx,[eax+eax*0x8]
	   lea edx,[eax+ecx*0x2]
	   mov eax,[ebp+0x00005AE4]
	   lea ecx,[eax+edx*0x8+0x00000834]
	   push ecx
	   call ProcessAddMoreRow
	   jmp Default

	   ShowItemInShopUser:
	   mov eax,[ebp+0x0000583C]
	   lea ecx,[eax+eax*0x8]
	   lea edx,[eax+ecx*0x2]
	   mov eax,[ebp+0x00005AFC]
	   lea ecx,[eax+edx*0x8+0x000002CC]
	   push ecx
	   call ProcessAddMoreRow
	   jmp Default

	   ShowItemClothInInventory:
       xor eax,eax
	   mov eax,[ebp+0x5840]
	   test eax,eax
	   jz Default
       xor eax,eax
	   mov eax,[ebp+0x583C]
	   cmp eax,0x0
	   jb Default
       cmp eax,0x96
	   ja Default
       mov eax,[ebp+0x583C]
	   imul eax,0x90
       xor edx,edx
	   lea edx,[eax+0x1107258+0x22DC8]
	   push edx
	   call ProcessAddMoreRow
       mov ecx,[ebp+0x20C]
	   cmp ecx,0x1
       jnz Default
	   mov eax,0x5
	   imul eax,DWORD PTR SS:[0x008970EC]
	   mov ecx,[ebp+0x00000214]
	   add ecx,eax
	   mov [ebp+0x00000214],ecx
	   jmp Default

	   ProcessAddMoreRow:
	   mov eax,[esp+0x4]
       xor edx,edx
	   mov dx,[eax+0x14]
	   xor dx,0xCE43
	   test edx,edx
	   jz Default
	   push edx
	   mov edx,[esp+0xC]
	   push edx
	   call CheckListWeaponSkill
	   cmp eax,0x0
	   jz NotFountListWeaponSkill
	   mov eax,0x3
	   imul eax,DWORD PTR SS:[0x008970EC]
	   mov ecx,[ebp+0x00000214]
	   add ecx,eax
	   mov [ebp+0x00000214],ecx
	   ret 0x4
	   NotFountListWeaponSkill:
       ret 0x4

	   Default:
	   pop ecx
       mov ecx,0x00000040
	   push 0x004CC24A
	   ret

	   CheckListWeaponSkill:
	   xor ecx,ecx
       LoopBackCheckID:
       mov eax,[esp+0x4]
	   mov edx,[esp+0x8]
	   cmp edx,[eax+ecx*0x4]
	   jnz IncreaseCheckID
	   mov eax,0x1
       ret 0x8

	   IncreaseCheckID:
	   add ecx,0x1
	   mov edx,[eax+ecx*0x4]
	   test edx,edx
       jnz LoopBackCheckID
       mov eax,0x0
       ret 0x8
	}
}
__declspec(naked)void ReceivePackagePhongAn()  //006ACB11
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
      push eax
	  xor eax,eax
	  mov al,[ebp+0x3]
	  cmp al,0xE4
	  jnz ResetOption
	  mov al,[ebp+0x4]
	  cmp al,0x00
	  jz MoRongThatBai
	  cmp al,0x01
	  jz MoRongThanhCong
	  cmp al,0x03
	  jz MoRongThanhCong
	  cmp al,0x02
	  jz MoRongGioiHan
	  cmp al,0x04
	  jz KhongPhaiTinVat
	  cmp al,0x05
	  jz KhongDungNguyenLieu
	  cmp al,0x06
	  jz KhongDuNguyenLieu
	  cmp al,0x07
	  jz KhongDuTien
	  cmp al,0x08   //tru nguyen lieu
	  jz TruNLHuyetLong
	  cmp al,0x09   //Ko phai huyet long
	  jz KhongPhaiHuyetLong
	  cmp al,0xA   //Khong du nguyen lieu
	  jz KhongDuNguyenLieuHL
      //KhongRoLoi
	  push 0xFFFFFF39
	  push 0x1
	  push 0xC
	  push 0x0000109F
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x0155EE60
	  mov eax,0x6A9800
	  call eax
	  jmp EndFunc

	  KhongDuNguyenLieuHL:
      push 0xFFFFFF39
	  push 0x1
	  push 0xC
	  push 0x00001147
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x0155EE60
	  mov eax,0x6A9800
	  call eax
	  jmp EndFunc

	  KhongPhaiHuyetLong:
      push 0xFFFFFF39
	  push 0x1
	  push 0xC
	  push 0x00001146
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x0155EE60
	  mov eax,0x6A9800
	  call eax
	  jmp EndFunc

	  TruNLHuyetLong:
      mov al,[ebp+0x26]
	  //Vat Pham Request
	  cmp al,0xFF
	  jz RemoveVPRequestHuyetLong
	  xor ecx,ecx
	  mov cl,[ebp+0x25]
	  imul ecx,0x90
	  xor al,0xC5
	  mov [0x1107258+0x22DC8+ecx+0x19],al
	  jmp EndFunc
	  RemoveVPRequestHuyetLong:
	  xor eax,eax
	  mov al,[ebp+0x25]
	  imul eax,0x90
	  lea ecx,[eax+0x1107258+0x00022DC8]
      mov eax,[eax+0x1107258+0x00022DC8]
	  call dword ptr [eax+0x4]
	  jmp EndFunc


      MoRongThanhCong:
	  mov eax,[ebp+0x27]
	  //Money
	  mov [0x0112F480],eax
	  xor eax,eax
	  mov al,[ebp+0x26]
	  //Vat Pham Request
	  cmp al,0xFF
	  jz RemoveVPRequest
	  xor ecx,ecx
	  mov cl,[ebp+0x25]
	  imul ecx,0x90
	  xor al,0xC5
	  mov [0x1107258+0x22DC8+ecx+0x19],al
	  jmp ContinewGetPackagePA
	  RemoveVPRequest:
	  xor eax,eax
	  mov al,[ebp+0x25]
	  imul eax,0x90
	  lea ecx,[eax+0x1107258+0x00022DC8]
      mov eax,[eax+0x1107258+0x00022DC8]
	  call dword ptr [eax+0x4]
	  ContinewGetPackagePA:
	  //Tin Vat
      xor eax,eax
	  mov al,[ebp+0x5]
	  imul eax,0x90
	  lea eax,[eax+0x22DC8+0x1107258]
      //Option 1
	  xor edx,edx
	  mov dx,[ebp+0x6]
	  xor edx,0xCE43
	  mov [eax+0x2A],dx
      //Value 1
      xor edx,edx
	  mov dx,[ebp+0x8]
	  xor edx,0xCE43
	  mov [eax+0x2C],dx
      //Rank 1
      xor edx,edx
	  mov dl,[ebp+0xA]
	  and dl,0xF
      xor dl,0xC5
	  mov [eax+0x2E],dl
      xor edx,edx
	  mov dl,[ebp+0xA]
	  shr dl,0x4
	  xor dl,0xC5
	  mov [eax+0x2F],dl
	  CompletedOption1:
      //Complete Option 1
	  //Option 2
	  xor edx,edx
	  mov dx,[ebp+0x6+0x5]
	  xor edx,0xCE43
	  mov [eax+0x2A+0x6],dx
	  //Value 2
      xor edx,edx
	  mov dx,[ebp+0x8+0x5]
	  xor edx,0xCE43
	  mov [eax+0x2C+0x6],dx
	  //Rank 2
      xor edx,edx
	  mov dl,[ebp+0xA+0x5]
      and dl,0xF
      xor dl,0xC5
	  mov [eax+0x2E+0x6],dl
	  xor edx,edx
	  mov dl,[ebp+0xA+0x5]
	  shr dl,0x4
	  xor dl,0xC5
	  mov [eax+0x2F+0x6],dl
      CompletedOption2:
	  //Complete Option 2
	  //Option 3
	  xor edx,edx
	  mov dx,[ebp+0x6+0x5+0x5]
	  xor edx,0xCE43
	  mov [eax+0x2A+0x6+0x6],dx
	  //Value 3
      xor edx,edx
	  mov dx,[ebp+0x8+0x5+0x5]
	  xor edx,0xCE43
	  mov [eax+0x2C+0x6+0x6],dx
	  //Rank 3
	  xor edx,edx
	  mov dl,[ebp+0xA+0x5+0x5]
      and dl,0xF
      xor dl,0xC5
	  mov [eax+0x2E+0x6+0x6],dl
	  xor edx,edx
	  mov dl,[ebp+0xA+0x5+0x5]
	  shr dl,0x4
	  xor dl,0xC5
	  mov [eax+0x2F+0x6+0x6],dl
      CompletedOption3:
	  //Complete Option 3
	  //Option 4
	  xor edx,edx
	  mov dx,[ebp+0x6+0x5+0x5+0x5]
	  xor edx,0xCE43
	  mov [eax+0x2A+0x6+0x6+0x6],dx
	  //Value 4
      xor edx,edx
	  mov dx,[ebp+0x8+0x5+0x5+0x5]
	  xor edx,0xCE43
	  mov [eax+0x2C+0x6+0x6+0x6],dx
	  //Rank 4
	  xor edx,edx
	  mov dl,[ebp+0xA+0x5+0x5+0x5]
	  and dl,0xF
      xor dl,0xC5
	  mov [eax+0x2E+0x6+0x6+0x6],dl
	  xor edx,edx
	  mov dl,[ebp+0xA+0x5+0x5+0x5]
	  shr dl,0x4
	  xor dl,0xC5
	  mov [eax+0x2F+0x6+0x6+0x6],dl
      CompletedOption4:
	  //Complete Option 4
	  //Option 5
	  xor edx,edx
	  mov dx,[ebp+0x6+0x5+0x5+0x5+0x5]
	  xor edx,0xCE43
	  mov [eax+0x2A+0x6+0x6+0x6+0x6],dx
	  //Value 5
      xor edx,edx
	  mov dx,[ebp+0x8+0x5+0x5+0x5+0x5]
	  xor edx,0xCE43
	  mov [eax+0x2C+0x6+0x6+0x6+0x6],dx
	  //Rank 5
	  xor edx,edx
	  mov dl,[ebp+0xA+0x5+0x5+0x5+0x5]
	  and dl,0xF
      xor dl,0xC5
	  mov [eax+0x2E+0x6+0x6+0x6+0x6],dl
	  xor edx,edx
	  mov dl,[ebp+0xA+0x5+0x5+0x5+0x5]
	  shr dl,0x4
	  xor dl,0xC5
	  mov [eax+0x2F+0x6+0x6+0x6+0x6],dl
      CompletedOption5:
	  //Complete Option 5
	  //Option 6
	  xor edx,edx
	  mov dx,[ebp+0x6+0x5+0x5+0x5+0x5+0x5]
	  xor edx,0xCE43
	  mov [eax+0x2A+0x6+0x6+0x6+0x6+0x6],dx
	  //Value 6
      xor edx,edx
	  mov dx,[ebp+0x8+0x5+0x5+0x5+0x5+0x5]
	  xor edx,0xCE43
	  mov [eax+0x2C+0x6+0x6+0x6+0x6+0x6],dx
	  //Rank 6
	  xor edx,edx
	  mov dl,[ebp+0xA+0x5+0x5+0x5+0x5+0x5]
	  and dl,0xF
	  xor dl,0xC5
	  mov [eax+0x2E+0x6+0x6+0x6+0x6+0x6],dl
	  xor edx,edx
	  mov dl,[ebp+0xA+0x5+0x5+0x5+0x5+0x5]
	  shr dl,0x4
	  xor dl,0xC5
	  mov [eax+0x2F+0x6+0x6+0x6+0x6+0x6],dl
      CompletedOption6:
	  //Complete Option 3
      mov al,[ebp+0x4]
	  cmp al,0x01
	  jnz ThayDoiOptRelics
	  push 0xFFFFFF39
	  push 0x1
	  push 0xC
	  push 0x00001097
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x0155EE60
	  mov eax,0x6A9800
	  call eax
	  jmp EndFunc

	  ThayDoiOptRelics:
      cmp al,0x03
	  jnz EndFunc
      push 0xFFFFFF39
	  push 0x1
	  push 0xC
	  push 0x00001098
	  push 0x19
      mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x0155EE60
	  mov eax,0x6A9800
	  call eax
	  jmp EndFunc
	  //

	  ResetOption:
	  cmp al,0xEE
	  jnz EndFunc
	  mov al,[ebp+04]
	  cmp al,0x40
	  jnz RsCuongDo
      mov al,[ebp+0x26]
	  cmp al,0xFF
	  jz RemoveVPRequestRsOpt
	  xor ecx,ecx
	  mov cl,[ebp+0x25]
	  imul ecx,0x90
	  xor al,0xC5
	  mov [0x1107258+0x22DC8+ecx+0x19],al
      jmp ContinueResetOption
	  RemoveVPRequestRsOpt:
	  xor eax,eax
	  mov al,[ebp+0x25]
	  imul eax,0x90
	  lea ecx,[eax+0x1107258+0x00022DC8]
      mov eax,[eax+0x1107258+0x00022DC8]
	  call dword ptr [eax+0x4]
      ContinueResetOption:
      mov eax,[ebp+0x27]
	  mov [0x0112F480],eax
	  push 0xFFFFFF39
	  push 0x1
	  push 0xC
	  push 0x0000127A
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x0155EE60
	  mov eax,0x6A9800
	  call eax
	  jmp EndFunc


	  RsCuongDo:
	  cmp al,0x41
	  jnz cnPhanGiaiVkRc
      mov al,[ebp+0x26]
	  cmp al,0xFF
	  jz RemoveVPRequestRsCuongDo
	  xor ecx,ecx
	  mov cl,[ebp+0x25]
	  imul ecx,0x90
	  xor al,0xC5
	  mov [0x1107258+0x22DC8+ecx+0x19],al
	  jmp ContinueRsCuongDo
	  RemoveVPRequestRsCuongDo:
	  xor eax,eax
	  mov al,[ebp+0x25]
	  imul eax,0x90
	  lea ecx,[eax+0x1107258+0x00022DC8]
      mov eax,[eax+0x1107258+0x00022DC8]
	  call dword ptr [eax+0x4]
      ContinueRsCuongDo:
      xor eax,eax
	  mov al,[ebp+0x5]
	  imul eax,0x90
	  mov byte ptr[0x1107258+eax+0x22DC8+0x74],0x60
      mov byte ptr[0x1107258+eax+0x22DC8+0x75],0x00
	  mov eax,[ebp+0x27]
	  mov [0x0112F480],eax
      push 0xFFFFFF39
	  push 0x1
	  push 0xC
	  push 0x0000127F
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x0155EE60
	  mov eax,0x6A9800
	  call eax
	  jmp EndFunc

	  cnPhanGiaiVkRc:
	  cmp al,0x50
	  jnz ErSaiVuKhi
	  xor eax,eax
	  mov al,[ebp+0x5]
	  imul eax,0x90
	  lea ecx,[eax+0x1107258+0x00022DC8]
      mov eax,[eax+0x1107258+0x00022DC8]
	  call dword ptr [eax+0x4]
      push 0xFFFFFF39
	  push 0x1
	  push 0xC
	  push 4747
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x0155EE60
	  mov eax,0x6A9800
	  call eax
	  jmp EndFunc


      ErSaiVuKhi:
	  cmp al,0x60
	  jnz NangCapThatBai
	  push 0xFFFFFFFF
	  push 0x1
	  push 0xC
	  push 0x00001190
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x0155EE60
	  mov eax,0x6A9800
	  call eax
	  jmp EndFunc

      NangCapThatBai:
	  cmp al,0x6E
	  jnz ErSaiNL
	  push 0xFFFFFFFF
	  push 0x1
	  push 0xC
	  push 0x00001196
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x0155EE60
	  mov eax,0x6A9800
	  call eax
	  jmp EndFunc

      ErSaiNL:
	  cmp al,0x61
	  jnz ErTrangBiKhongThePhanGiai
      push 0xFFFFFFFF
	  push 0x1
	  push 0xC
	  push 0x00001191
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x0155EE60
	  mov eax,0x6A9800
	  call eax
	  jmp EndFunc

      ErTrangBiKhongThePhanGiai:
	  cmp al,0x51
	  jnz ErKhongDuNguyenLieu
      push 0xFFFFFFFF
	  push 0x1
	  push 0xC
	  push 4748
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x0155EE60
	  mov eax,0x6A9800
	  call eax
	  jmp EndFunc

	  ErKhongDuNguyenLieu:
	  cmp al,0x62
	  jnz ErKhongDuTinhLuyenYeuCau
      push 0xFFFFFFFF
	  push 0x1
	  push 0xC
	  push 0x0000118E
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x0155EE60
	  mov eax,0x6A9800
	  call eax
	  jmp EndFunc

	  ErKhongDuTinhLuyenYeuCau:
	  cmp al,0x63
	  jnz ErKhongPhaiQuanAo
      push 0xFFFFFFFF
	  push 0x1
	  push 0xC
	  push 0x00001192
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x0155EE60
	  mov eax,0x6A9800
	  call eax
	  jmp EndFunc

      ErKhongPhaiQuanAo:
	  cmp al,0x65
	  jnz DaMaxGioiHanNangCapOtp
      push 0xFFFFFFFF
	  push 0x1
	  push 0xC
	  push 0x0000118E
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x0155EE60
	  mov eax,0x6A9800
	  call eax
	  jmp EndFunc

	  DaMaxGioiHanNangCapOtp:
	  cmp al,0x66
	  jnz cnQuayOptionQuanAo
      push 0xFFFFFFFF
	  push 0x1
	  push 0xC
	  push 0x00001195
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x0155EE60
	  mov eax,0x6A9800
	  call eax
	  jmp EndFunc

	  cnQuayOptionQuanAo:
	  cmp al,0x64
	  jnz cnNangCapOptionVuKhi
	  mov eax,[ebp+0x27]
	  //Money
	  mov [0x0112F480],eax
	  xor eax,eax
	  mov al,[ebp+0x26]
	  //Vat Pham Request
	  cmp al,0xFF
	  jz RemoveVPRequestQuayOpt
	  xor ecx,ecx
	  mov cl,[ebp+0x25]
	  imul ecx,0x90
	  xor al,0xC5
	  mov [0x1107258+0x22DC8+ecx+0x19],al
	  jmp ContinewGetPackageQuayOpt
	  RemoveVPRequestQuayOpt:
	  xor eax,eax
	  mov al,[ebp+0x25]
	  imul eax,0x90
	  lea ecx,[eax+0x1107258+0x00022DC8]
      mov eax,[eax+0x1107258+0x00022DC8]
	  call dword ptr [eax+0x4]
	  ContinewGetPackageQuayOpt:
      xor eax,eax
	  mov al,[ebp+0x5]
	  imul eax,0x90
	  lea eax,[eax+0x22DC8+0x1107258]
      xor edx,edx
	  mov dx,[ebp+0x6+0x5+0x5+0x5]
	  xor edx,0xCE43
	  mov [eax+0x2A+0x6+0x6+0x6],dx
	  //Value 4
      xor edx,edx
	  mov dx,[ebp+0x8+0x5+0x5+0x5]
	  xor edx,0xCE43
	  mov [eax+0x2C+0x6+0x6+0x6],dx
	  mov byte ptr [eax+0x40],0xC4
      //
      xor eax,eax
	  mov al,[ebp+0x5]
	  imul eax,0x90
	  lea eax,[eax+0x22DC8+0x1107258]
      xor edx,edx
	  mov dx,[ebp+0x6+0x5+0x5+0x5+0x5]
	  xor edx,0xCE43
	  mov [eax+0x2A+0x6+0x6+0x6+0x6],dx
	  //Value 4
      xor edx,edx
	  mov dx,[ebp+0x8+0x5+0x5+0x5+0x5]
	  xor edx,0xCE43
	  mov [eax+0x2C+0x6+0x6+0x6+0x6],dx
	  mov byte ptr [eax+0x46],0xC4
	  //
      push 0xFFFFFFFF
	  push 0x1
	  push 0xC
	  push 0x00001194
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x0155EE60
	  mov eax,0x6A9800
	  call eax
	  jmp EndFunc

      cnNangCapOptionVuKhi:
	  cmp al,0x67
	  jnz ErKhongDuNguyenLieu
	  mov eax,[ebp+0x27]
	  //Money
	  mov [0x0112F480],eax
	  xor eax,eax
	  mov al,[ebp+0x26]
	  //Vat Pham Request
	  cmp al,0xFF
	  jz RemoveVPRequest1NcOptionVk
	  xor ecx,ecx
	  mov cl,[ebp+0x25]
	  imul ecx,0x90
	  xor al,0xC5
	  mov [0x1107258+0x22DC8+ecx+0x19],al
	  jmp ContinewGetPackageNcOptionVk
	  RemoveVPRequest1NcOptionVk:
	  xor eax,eax
	  mov al,[ebp+0x25]
	  imul eax,0x90
	  lea ecx,[eax+0x1107258+0x00022DC8]
      mov eax,[eax+0x1107258+0x00022DC8]
	  call dword ptr [eax+0x4]
	  ContinewGetPackageNcOptionVk:
      //Vp2
      xor eax,eax
	  mov al,[ebp+0x2C]
	  //Vat Pham Request
	  cmp al,0xFF
	  jz RemoveVPRequest2NcOptionVk
	  xor ecx,ecx
	  mov cl,[ebp+0x2B]
	  imul ecx,0x90
	  xor al,0xC5
	  mov [0x1107258+0x22DC8+ecx+0x19],al
	  jmp ContinewGetPackageNcOptionVk2
	  RemoveVPRequest2NcOptionVk:
	  xor eax,eax
	  mov al,[ebp+0x2B]
	  imul eax,0x90
	  lea ecx,[eax+0x1107258+0x00022DC8]
      mov eax,[eax+0x1107258+0x00022DC8]
	  call dword ptr [eax+0x4]
	  ContinewGetPackageNcOptionVk2:
	  xor eax,eax
	  mov al,[ebp+0x5]
	  imul eax,0x90
	  lea eax,[eax+0x22DC8+0x1107258]
      //Option 1
	  xor edx,edx
	  mov dx,[ebp+0x6]
	  xor edx,0xCE43
	  mov [eax+0x2A],dx
      //Value 1
      xor edx,edx
	  mov dx,[ebp+0x8]
	  xor edx,0xCE43
	  mov [eax+0x2C],dx
      //Rank 1
      xor edx,edx
	  mov dl,[ebp+0xA]
	  push edx
	  call GetInfoRank
      xor edx,edx
	  mov dl,[ebp+0xA]
	  sub dl,al
	  xor dl,0xC5
      xor eax,eax
	  mov al,[ebp+0x5]
	  imul eax,0x90
	  lea eax,[eax+0x22DC8+0x1107258]
	  mov byte ptr [eax+0x2E],dl
      xor edx,edx
	  mov dl,[ebp+0xA]
	  push edx
	  call GetInfoRank2
	  xor edx,edx
      mov dl,al
	  xor dl,0xC5
	  xor eax,eax
	  mov al,[ebp+0x5]
	  imul eax,0x90
	  lea eax,[eax+0x22DC8+0x1107258]
	  mov byte ptr [eax+0x2F],dl
      //Complete Option 1
	  //Option 2
	  xor edx,edx
	  mov dx,[ebp+0x6+0x5]
	  xor edx,0xCE43
	  mov [eax+0x2A+0x6],dx
	  //Value 2
      xor edx,edx
	  mov dx,[ebp+0x8+0x5]
	  xor edx,0xCE43
	  mov [eax+0x2C+0x6],dx
	  //Rank 2
      xor edx,edx
	  mov dl,[ebp+0xA+0x5]
	  push edx
	  call GetInfoRank
      xor edx,edx
	  mov dl,[ebp+0xA+0x5]
	  sub dl,al
	  xor dl,0xC5
      xor eax,eax
	  mov al,[ebp+0x5]
	  imul eax,0x90
	  lea eax,[eax+0x22DC8+0x1107258]
	  mov byte ptr [eax+0x2E+0x6],dl
	  xor edx,edx
	  mov dl,[ebp+0xA+0x5]
	  push edx
	  call GetInfoRank2
	  xor edx,edx
	  mov dl,al
	  xor dl,0xC5
	  xor ecx,ecx
	  mov cl,[ebp+0x5]
	  imul ecx,0x90
	  lea ecx,[ecx+0x22DC8+0x1107258]
	  mov byte ptr [ecx+0x2F+0x6],dl
	  //Complete Option 2
	  //Option 3
	  xor edx,edx
	  mov dx,[ebp+0x6+0x5+0x5]
	  xor edx,0xCE43
	  mov [ecx+0x2A+0x6+0x6],dx
	  //Value 3
      xor edx,edx
	  mov dx,[ebp+0x8+0x5+0x5]
	  xor edx,0xCE43
	  mov [ecx+0x2C+0x6+0x6],dx
	  //Rank 3
	  xor edx,edx
	  mov dl,[ebp+0xA+0x5+0x5]
	  push edx
	  call GetInfoRank
      xor edx,edx
	  mov dl,[ebp+0xA+0x5+0x5]
	  sub dl,al
      xor dl,0xC5
	  mov byte ptr [ecx+0x2E+0x6+0x6],dl
      xor edx,edx
	  mov dl,[ebp+0xA+0x5+0x5]
	  push edx
	  call GetInfoRank2
      xor al,0xC5
	  mov byte ptr [ecx+0x2F+0x6+0x6],al
	  //Complete Option 3
	  //Option 4
	  xor edx,edx
	  mov dx,[ebp+0x6+0x5+0x5+0x5]
	  xor edx,0xCE43
	  mov [ecx+0x2A+0x6+0x6+0x6],dx
	  //Value 4
      xor edx,edx
	  mov dx,[ebp+0x8+0x5+0x5+0x5]
	  xor edx,0xCE43
	  mov [ecx+0x2C+0x6+0x6+0x6],dx
	  //Rank 4
	  xor edx,edx
	  mov dl,[ebp+0xA+0x5+0x5+0x5]
	  push edx
	  call GetInfoRank
      xor edx,edx
	  mov dl,[ebp+0xA+0x5+0x5+0x5]
	  sub dl,al
      xor dl,0xC5
	  mov byte ptr [ecx+0x2E+0x6+0x6+0x6],dl
      xor edx,edx
	  mov dl,[ebp+0xA+0x5+0x5+0x5]
	  push edx
	  call GetInfoRank2
      xor al,0xC5
	  mov byte ptr [ecx+0x2F+0x6+0x6+0x6],al
	  //Complete Option 4
	  //Option 5
	  xor edx,edx
	  mov dx,[ebp+0x6+0x5+0x5+0x5+0x5]
	  xor edx,0xCE43
	  mov [ecx+0x2A+0x6+0x6+0x6+0x6],dx
	  //Value 5
      xor edx,edx
	  mov dx,[ebp+0x8+0x5+0x5+0x5+0x5]
	  xor edx,0xCE43
	  mov [ecx+0x2C+0x6+0x6+0x6+0x6],dx
	  //Rank 5
	  xor edx,edx
	  mov dl,[ebp+0xA+0x5+0x5+0x5+0x5]
	  push edx
	  call GetInfoRank
	  xor edx,edx
	  mov dl,[ebp+0xA+0x5+0x5+0x5+0x5]
	  sub dl,al
	  xor dl,0xC5
	  mov byte ptr [ecx+0x2E+0x6+0x6+0x6+0x6],dl
	  xor edx,edx
	  mov dl,[ebp+0xA+0x5+0x5+0x5+0x5]
	  push edx
	  call GetInfoRank2
	  xor al,0xC5
	  mov byte ptr [ecx+0x2F+0x6+0x6+0x6+0x6],al
	  //Complete Option 5
	  //Option 6
	  xor edx,edx
	  mov dx,[ebp+0x6+0x5+0x5+0x5+0x5+0x5]
	  xor edx,0xCE43
	  mov [ecx+0x2A+0x6+0x6+0x6+0x6+0x6],dx
	  //Value 6
      xor edx,edx
	  mov dx,[ebp+0x8+0x5+0x5+0x5+0x5+0x5]
	  xor edx,0xCE43
	  mov [ecx+0x2C+0x6+0x6+0x6+0x6+0x6],dx
	  //Rank 6
	  xor edx,edx
	  mov dl,[ebp+0xA+0x5+0x5+0x5+0x5+0x5+0x5]
	  push edx
	  call GetInfoRank
	  xor edx,edx
	  mov dl,[ebp+0xA+0x5+0x5+0x5+0x5+0x5+0x5]
	  sub dl,al
	  xor dl,0xC5
	  mov byte ptr [ecx+0x2E+0x6+0x6+0x6+0x6+0x6+0x6],dl
	  xor edx,edx
	  mov dl,[ebp+0xA+0x5+0x5+0x5+0x5+0x5+0x5]
	  push edx
	  call GetInfoRank2
	  xor al,0xC5
	  mov byte ptr [ecx+0x2F+0x6+0x6+0x6+0x6+0x6+0x6],al
	  //
      push 0xFFFFFFFF
	  push 0x1
	  push 0xC
	  push 0x00001193
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x0155EE60
	  mov eax,0x6A9800
	  call eax
	  jmp EndFunc


	  GetInfoRank:
	  mov eax,[esp+0x4]
	  cmp eax,0x10
	  jae CheckRankVk2
	  mov eax,0x0
	  ret 0x4

	  CheckRankVk2:
	  cmp eax,0x20
	  jae CheckRankVk21
	  mov eax,0x10
	  ret 0x4

	  CheckRankVk21:
	  cmp eax,0x30
	  jae CheckRankVk22
	  mov eax,0x20
	  ret 0x4

	  CheckRankVk22:
	  cmp eax,0x40
	  jae CheckRankVk23
	  mov eax,0x30
	  ret 0x4

	  CheckRankVk23:
	  cmp eax,0x50
	  jae CheckRankVk24
	  mov eax,0x40
	  ret 0x4

	  CheckRankVk24:
	  cmp eax,0x60
	  jae CheckRankVk25
	  mov eax,0x50
	  ret 0x4

	  CheckRankVk25:
	  cmp eax,0x70
	  jae CheckRankVk26
	  mov eax,0x60
	  ret 0x4

	  CheckRankVk26:
	  cmp eax,0x80
	  jae CheckRankVk27
	  mov eax,0x70
	  ret 0x4

	  CheckRankVk27:
	  cmp eax,0x90
	  jae CheckRankVk28
	  mov eax,0x80
	  ret 0x4

	  CheckRankVk28:
	  cmp eax,0xA0
	  jae CheckRankVk29
	  mov eax,0x90
	  ret 0x4

	  CheckRankVk29:
	  mov eax,0xA0
	  ret 0x4

      GetInfoRank2:
	  mov eax,[esp+0x4]
	  cmp eax,0x10
	  jae CheckRankVk2A
	  mov eax,0x0
	  ret 0x4

	  CheckRankVk2A:
	  cmp eax,0x20
	  jae CheckRankVk21A
	  mov eax,0x1
	  ret 0x4

	  CheckRankVk21A:
	  cmp eax,0x30
	  jae CheckRankVk22A
	  mov eax,0x2
	  ret 0x4

	  CheckRankVk22A:
	  cmp eax,0x40
	  jae CheckRankVk23A
	  mov eax,0x3
	  ret 0x4

	  CheckRankVk23A:
	  cmp eax,0x50
	  jae CheckRankVk24A
	  mov eax,0x4
	  ret 0x4

	  CheckRankVk24A:
	  cmp eax,0x60
	  jae CheckRankVk25A
	  mov eax,0x5
	  ret 0x4

	  CheckRankVk25A:
	  cmp eax,0x70
	  jae CheckRankVk26A
	  mov eax,0x6
	  ret 0x4

	  CheckRankVk26A:
	  cmp eax,0x80
	  jae CheckRankVk27A
	  mov eax,0x7
	  ret 0x4

	  CheckRankVk27A:
	  cmp eax,0x90
	  jae CheckRankVk28A
	  mov eax,0x8
	  ret 0x4

	  CheckRankVk28A:
	  cmp eax,0xA0
	  jae CheckRankVk29A
	  mov eax,0x9
	  ret 0x4

	  CheckRankVk29A:
	  mov eax,0xA
	  ret 0x4

	  KhongPhaiMoRong:
	  pop eax
	  mov dword ptr [eax],0x0
	  mov dword ptr [eax+0x4],0x0
	  mov dword ptr [eax+0x8],0x0
      mov dword ptr [eax+0xC],0x0
	  push 0x006ACB19
	  ret

      KhongPhaiTinVat:
	  push 0xFFFF0000
	  push 0x1
	  push 0xC
	  push 0x0000109B
	  push 0x19
      mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x0155EE60
	  mov eax,0x6A9800
	  call eax
      jmp EndFunc

	  KhongDungNguyenLieu:
	  push 0xFFFF0000
	  push 0x1
	  push 0xC
	  push 0x0000109C
	  push 0x19
      mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x0155EE60
	  mov eax,0x6A9800
	  call eax
	  jmp EndFunc

	  KhongDuNguyenLieu:
	  push 0xFFFF0000
	  push 0x1
	  push 0xC
	  push 0x0000109D
	  push 0x19
      mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x0155EE60
	  mov eax,0x6A9800
	  call eax
	  jmp EndFunc

      KhongDuTien:
	  push 0xFFFF0000
	  push 0x1
	  push 0xC
	  push 0x0000109E
	  push 0x19
      mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x0155EE60
	  mov eax,0x6A9800
	  call eax
      jmp EndFunc

	  MoRongGioiHan:
      mov eax,[ebp+0x27]
	  //Money
	  mov [0x0112F480],eax
	  xor eax,eax
	  mov al,[ebp+0x26]
	  //Vat Pham Request
	  cmp al,0xFF
	  jz RemoveVPRequestMoRongMax
	  xor ecx,ecx
	  mov cl,[ebp+0x25]
	  imul ecx,0x90
	  xor al,0xC5
	  mov [0x1107258+0x22DC8+ecx+0x19],al
	  jmp ContinewGetPackagePAMoRongMax
	  RemoveVPRequestMoRongMax:
	  xor eax,eax
	  mov al,[ebp+0x25]
	  imul eax,0x90
	  lea ecx,[eax+0x1107258+0x00022DC8]
      mov eax,[eax+0x1107258+0x00022DC8]
	  call dword ptr [eax+0x4]
	  ContinewGetPackagePAMoRongMax:
      push 0xFFFF0000
	  push 0x1
	  push 0xC
	  push 0x0000109A
	  push 0x19
      mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x0155EE60
	  mov eax,0x6A9800
	  call eax
      jmp EndFunc

	  MoRongThatBai:
	  mov eax,[ebp+0x27]
	  //Money
	  mov [0x0112F480],eax
	  xor eax,eax
	  mov al,[ebp+0x26]
	  //Vat Pham Request
	  cmp al,0xFF
	  jz RemoveVPRequestTBMoRong
	  xor ecx,ecx
	  mov cl,[ebp+0x25]
	  imul ecx,0x90
	  xor al,0xC5
	  mov [0x1107258+0x22DC8+ecx+0x19],al
	  jmp ContinewGetPackagePATBMoRong
	  RemoveVPRequestTBMoRong:
	  xor eax,eax
	  mov al,[ebp+0x25]
	  imul eax,0x90
	  lea ecx,[eax+0x1107258+0x00022DC8]
      mov eax,[eax+0x1107258+0x00022DC8]
	  call dword ptr [eax+0x4]
	  ContinewGetPackagePATBMoRong:
      push 0xFFFF0000
	  push 0x1
	  push 0xC
	  push 0x00001096
	  push 0x19
      mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x0155EE60
	  mov eax,0x6A9800
	  call eax
	  EndFunc:
	  pop eax
	  mov dword ptr [eax],0x0
	  mov dword ptr [eax+0x4],0x0
	  mov dword ptr [eax+0x8],0x0
      mov dword ptr [eax+0xC],0x0
	  push 0x006ACB19
      ret
	}
}
__declspec(naked)void ChangeInforPhongAn1910()  //0065F9A0
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  xor ecx,ecx
	  mov ecx,[eax+0x20]
	  test ecx,ecx
	  jz Default
	  push eax
	  mov ecx,DWORD PTR SS :[0x01733AD0]
	  mov ecx,[ecx+0x240]
	  sub ecx,0x254
	  push    0xFF000000
	  push    0xB0
	  add ecx,0x90
	  push ecx
	  push 0x98
	  mov ecx,DWORD PTR SS :[0x01733AD0]
	  mov ecx,[ecx+0x240]
      sub ecx,0x254
	  add ecx,0x30
	  push ecx
	  fild    dword ptr [esp+0xC]
	  fstp    dword ptr [esp+0xC]
	  fild    dword ptr [esp+0x8]
	  fstp    dword ptr [esp+0x8]
	  fild    dword ptr [esp+0x4]
	  fstp    dword ptr [esp+0x4]
	  fild    dword ptr [esp]
	  fstp    dword ptr [esp]
	  mov eax,0x007C7BB0
	  call    eax
	  add esp,0x14
	  mov ecx,DWORD PTR SS :[0x01733AC4]
	  push 0xFF00F064
	  mov eax,[ecx]
	  call dword ptr [eax+0xC]
      push 0x0
	  push 0xFD7
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  mov edx,DWORD PTR SS :[0x01733AD0]
	  mov edx,[edx+0x240]
	  sub edx,0x254
	  push eax
	  add edx, 0x45
      push 0x0
	  push 0x9E
	  push edx
	  mov ecx,DWORD PTR SS:[0x01733AC4]
	  mov eax,[ecx]
	  call dword ptr [eax+0x24]
	  //
	  mov ecx,DWORD PTR SS :[0x01733AD0]
	  mov ecx,[ecx+0x240]
      sub ecx,0x254
	  push    0xFF000000
	  push    0xCD
	  add ecx,0x90
	  push ecx
	  push 0xB5
	  mov ecx,DWORD PTR SS :[0x01733AD0]
	  mov ecx,[ecx+0x240]
      sub ecx,0x254
	  add ecx,0x30
	  push ecx
	  fild    dword ptr [esp+0xC]
	  fstp    dword ptr [esp+0xC]
	  fild    dword ptr [esp+0x8]
	  fstp    dword ptr [esp+0x8]
	  fild    dword ptr [esp+0x4]
	  fstp    dword ptr [esp+0x4]
	  fild    dword ptr [esp]
	  fstp    dword ptr [esp]
	  mov eax,0x007C7BB0
	  call    eax
	  add esp,0x14
	  mov ecx,DWORD PTR SS :[0x01733AC4]
	  push 0xFF00F064
	  mov eax,[ecx]
	  call dword ptr [eax+0xC]
      push 0x0
	  push 0xFD8
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  mov edx,DWORD PTR SS :[0x01733AD0]
	  mov edx,[edx+0x240]
	  sub edx,0x254
	  push eax
	  add edx, 0x45
      push 0x0
	  push 0xBB
	  push edx
	  mov ecx,DWORD PTR SS:[0x01733AC4]
	  mov eax,[ecx]
	  call dword ptr [eax+0x24]
	  //
	  mov ecx,DWORD PTR SS :[0x01733AD0]
	  mov ecx,[ecx+0x240]
      sub ecx,0x254
	  push    0xFF000000
	  push    0xE9
	  add ecx,0x90
	  push ecx
	  push 0xD2
	  mov ecx,DWORD PTR SS :[0x01733AD0]
	  mov ecx,[ecx+0x240]
      sub ecx,0x254
	  add ecx,0x30
	  push ecx
	  fild    dword ptr [esp+0xC]
	  fstp    dword ptr [esp+0xC]
	  fild    dword ptr [esp+0x8]
	  fstp    dword ptr [esp+0x8]
	  fild    dword ptr [esp+0x4]
	  fstp    dword ptr [esp+0x4]
	  fild    dword ptr [esp]
	  fstp    dword ptr [esp]
	  mov eax,0x007C7BB0
	  call    eax
	  add esp,0x14
	  mov ecx,DWORD PTR SS :[0x01733AC4]
	  push 0xFF00F064
	  mov eax,[ecx]
	  call dword ptr [eax+0xC]
	  push 0x0
	  push 0xFD9
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  mov edx,DWORD PTR SS :[0x01733AD0]
	  mov edx,[edx+0x240]
	  sub edx,0x254
	  push eax
	  add edx, 0x45
	  push 0x0
	  push 0xD8
	  push edx
	  mov ecx,DWORD PTR SS:[0x01733AC4]
	  mov eax,[ecx]
	  call dword ptr [eax+0x24]
	  //
	  //Kiem Tra Cach Option Chon
      //Hien thi yeu cau vat pham
      mov ecx,DWORD PTR SS :[0x01733AC4]
	  push 0xFF00F064
	  mov eax,[ecx]
	  call dword ptr [eax+0xC]
	  mov eax,[esp]
	  mov ecx,[eax]
	  test ecx,ecx
	  jz ChuaChon
	  cmp ecx,0x1
	  jnz ThayDoi
      push 0x0
	  push 0xFDB
      jmp HienThiRequestVatPham
      ThayDoi:
	  cmp ecx,0x2
	  jnz MoRong
      push 0x0
	  push 0xFDB
      jmp HienThiRequestVatPham
      MoRong:
	  cmp ecx,0x3
	  jnz ChuaChon
      push 0x0
	  push 0xFDA
      HienThiRequestVatPham:
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  mov edx,DWORD PTR SS :[0x01733AD0]
	  mov edx,[edx+0x240]
	  sub edx,0x254
	  push eax
	  add edx, 0xC5
      push 0x0
	  push 0xB1
	  push edx
	  mov ecx,DWORD PTR SS:[0x01733AC4]
	  mov eax,[ecx]
	  call dword ptr [eax+0x24]
	  //Hien thi yeu cau tienn
      mov ecx,DWORD PTR SS :[0x01733AC4]
	  push 0xFF00F064
	  mov eax,[ecx]
	  call dword ptr [eax+0xC]
	  xor ecx,ecx
      mov eax,[esp]
	  mov ecx,[eax]
	  test ecx,ecx
	  jz ChuaChon
	  cmp ecx,0x1
	  jnz ThayDoi2
      push 0x0
	  push 0xFDD
      jmp HienThiRequestGiaTien
	  ThayDoi2:
	  cmp ecx,0x2
	  jnz MoRong2
      push 0x0
	  push 0xFDD
	  jmp HienThiRequestGiaTien
	  MoRong2:
	  cmp ecx,0x3
	  jnz ChuaChon
      push 0x0
	  push 0xFDC
	  HienThiRequestGiaTien:
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  mov edx,DWORD PTR SS :[0x01733AD0]
	  mov edx,[edx+0x240]
      sub edx,0x254
	  push eax
	  add edx, 0xA5
	  push 0x0
	  push 0xDA
	  push edx
	  mov ecx,DWORD PTR SS:[0x01733AC4]
	  mov eax,[ecx]
	  call dword ptr [eax+0x24]
	  //HienTh Nut
	  mov ecx,DWORD PTR SS :[0x01733AC4]
	  push 0xFF00F064
	  mov eax,[ecx]
	  call dword ptr [eax+0xC]
	  xor ecx,ecx
      mov eax,[esp]
	  mov ecx,[eax]
	  test ecx,ecx
	  jz ChuaChon
	  cmp ecx,0x1
	  jnz ThayDoi3
      push 0x0
	  push 0x108D
      jmp HienThiRequestNut
	  ThayDoi3:
	  cmp ecx,0x2
	  jnz MoRong3
      push 0x0
	  push 0x108E
      jmp HienThiRequestNut
      MoRong3:
	  cmp ecx,0x3
	  jnz ChuaChon
      push 0x0
	  push 0x108C
	  HienThiRequestNut:
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  mov edx,DWORD PTR SS :[0x01733AD0]
	  mov edx,[edx+0x240]
      sub edx,0x254
	  push eax
	  add edx, 0x150
	  push 0x0
	  push 0xDA
	  push edx
	  mov ecx,DWORD PTR SS:[0x01733AC4]
	  mov eax,[ecx]
	  call dword ptr [eax+0x24]
	  //Ket Thuc HienThi Request Option
      //Hien Thi Option VP Phong An
      mov eax,[esp]
	  xor ecx,ecx
	  mov ecx,[eax+0x4]
	  test ecx,ecx
	  jz ChuaChon
	  imul ecx,0x90
	  lea edx,[0x1107258+0x22DC8+ecx]
      push eax
      push 0x0
	  push edx
	  call FuncHienThiOpnt
	  mov eax,[esp]
	  xor ecx,ecx
	  mov ecx,[eax+0xC]
	  test ecx,ecx
	  jz ChuaChon
      // Ve vien
	  push 0xFF969DFD
	  push 0x3F800000
	  xor ecx,ecx
      mov eax,[esp+0x8]
	  mov ecx,[eax+0xC]
      push ecx
	  call GetSizeChoose
	  add eax,0x109
	  push eax
	  mov ecx,DWORD PTR SS :[0x01733AD0]
	  mov ecx,[ecx+0x240]
      sub ecx,0x254
	  add ecx,0x186
	  push ecx
	  xor ecx,ecx
      mov eax,[esp+0x10]
	  mov ecx,[eax+0xC]
      push ecx
	  call GetSizeChoose
	  add eax,0xF8
	  push eax
	  mov ecx,DWORD PTR SS :[0x01733AD0]
	  mov ecx,[ecx+0x240]
      sub ecx,0x254
	  add ecx,0x91
	  push ecx
	  fild    dword ptr [esp+0xC]
	  fstp    dword ptr [esp+0xC]
	  fild    dword ptr [esp+0x8]
	  fstp    dword ptr [esp+0x8]
	  fild    dword ptr [esp+0x4]
	  fstp    dword ptr [esp+0x4]
	  fild    dword ptr [esp]
	  fstp    dword ptr [esp]
	  mov eax,0x007C7880
	  call    eax
	  add esp,0x18
	  push 0xFF000000
	  xor ecx,ecx
      mov eax,[esp+0x4]
	  mov ecx,[eax+0xC]
	  push ecx
	  call GetSizeChoose
	  add eax,0xF9
	  push eax
	  mov ecx,DWORD PTR SS :[0x01733AD0]
	  mov ecx,[ecx+0x240]
      sub ecx,0x254
	  add ecx,0x186
	  push ecx
	  xor ecx,ecx
	  mov eax,[esp+0xC]
	  mov ecx,[eax+0xC]
	  push ecx
	  call GetSizeChoose
	  add eax,0x109
      push eax
	  mov ecx,DWORD PTR SS :[0x01733AD0]
	  mov ecx,[ecx+0x240]
      sub ecx,0x254
	  add ecx,0x92
      push ecx
	  fild    dword ptr [esp+0xC]
	  fstp    dword ptr [esp+0xC]
	  fild    dword ptr [esp+0x8]
	  fstp    dword ptr [esp+0x8]
	  fild    dword ptr [esp+0x4]
	  fstp    dword ptr [esp+0x4]
	  fild    dword ptr [esp]
	  fstp    dword ptr [esp]
	  mov eax,0x007C7BB0
	  call    eax
	  add esp,0x14
	  //
	  ChuaChon:
	  //
      push 5313
	  push 25
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,eax
	  mov eax,[esp]
	  add eax,0x10
	  mov  DWORD PTR SS : [eax + 0x70] , ecx
	  mov  DWORD PTR SS : [eax + 0x9C] , 0x00
	  mov  DWORD PTR SS : [eax + 0xA0] , 0xF8
      mov  DWORD PTR SS : [eax + 0x98] , 0x00
	  mov  DWORD PTR SS : [eax + 0xA4] , 0xF8
	  push 0x00000000
	  push 0x0089E914
	  mov ecx,DWORD PTR SS :[0x01733AD0]
	  mov ecx,[ecx+0x240]
      sub ecx,0x254
	  mov edx,0x10
	  push edx
	  add ecx, 0xD9
	  push ecx
      mov edx,eax
	  mov ecx, edx
	  mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
	  call eax
	  mov eax,[esp]
      add eax,0x10
	  push 0x1732CC8
	  mov ecx, eax
	  mov eax, 0x7B9850
	  call eax //Draw1
      //HienThi Vat Pham Phong An
	  xor ecx,ecx
	  mov eax,[esp]
	  mov ecx,[eax+0x4]
	  test ecx,ecx
	  jz EndFunc
	  push 0x0
	  push 0x1
	  imul ecx,0x90
	  lea edx,[0x1107258+0x22DC8+ecx]
	  push 0x0
	  push edx
	  mov edx,DWORD PTR SS :[0x01733AD0]
	  mov edx,[edx+0x240]
      sub edx,0x254
      push 0x57
	  add edx, 0xFB
      push edx
	  push 0x1
      mov ecx,DWORD PTR SS:[0x01615E90]
	  mov eax,0x004913F0
      call eax
	  //Hien Thi VP Yeu Cau
      mov eax,[esp]
	  xor ecx,ecx
	  mov ecx,[eax+0x8]
	  test ecx,ecx
	  jz EndFunc
	  push 0x0
	  push 0x1
	  imul ecx,0x90
	  lea edx,[0x1107258+0x22DC8+ecx]
	  push 0x0
	  push edx
	  mov edx,DWORD PTR SS :[0x01733AD0]
	  mov edx,[edx+0x240]
      sub edx,0x254
      push 0xA5
	  add edx, 0x9B
      push edx
	  push 0x1
      mov ecx,DWORD PTR SS:[0x01615E90]
	  mov eax,0x004913F0
      call eax

	  EndFunc:
      pop eax
	  Default:
      mov edx,DWORD PTR SS:[0x010D94A8]
      mov eax,[edx+0x00009D88]
	  push 0x0065F9A6
	  ret


	  FuncHienThiOpnt:
      xor ecx,ecx
      mov [esp+0x8],ecx
      BackLoopCheckOpt:
	  xor edx,edx
      mov eax,[esp+0x4]
	  mov dx,[eax+0x2A+ecx]
	  xor dx,0xCE43
	  test edx,edx
	  jz ChuaMoPhongAn
      xor edx,edx
	  mov dl,[eax+0x2A+ecx+0x5]
      xor dl,0xC5
	  push edx
	  call GetColorOption
	  push eax
      mov ecx,DWORD PTR SS :[0x01733AC4]
	  mov eax,[ecx]
	  call dword ptr [eax+0xC]
	  mov eax,[esp+0x4]
	  mov ecx,[esp+0x8]
      xor edx,edx
	  mov dl,[eax+0x2A+ecx+0x4]
	  xor dl,0xC5
	  push edx
	  xor edx,edx
	  mov dx,[eax+0x2A+ecx]
	  xor dx,0xCE43
	  push edx  // Loai Opt
	  xor edx,edx
	  mov dx,[eax+0x2A+ecx+0x2]
	  xor dx,0xCE43
	  push edx // Value
	  mov eax,[esp+0x18]
	  push eax
	  call GetStringOptn
	  push 0x0
	  mov edx,DWORD PTR SS :[0x01733AD0]
	  mov edx,[edx+0x240]
      sub edx,0x254
	  push eax
	  mov ecx,[esp+0x10]
	  imul ecx,0x3
	  add ecx,0x10D
	  add edx, 0x95
	  push 0x0
	  push ecx
	  push edx
	  mov ecx,DWORD PTR SS:[0x01733AC4]
	  mov eax,[ecx]
	  call dword ptr [eax+0x24]
	  jmp ChuaCoOpt
	  ChuaMoPhongAn:
      xor edx,edx
      mov eax,[esp+0x4]
	  mov dl,[eax+0x2A+ecx+0x4]
	  xor dl,0xC5
	  test dl,dl
      jz ChuaCoOpt
      push 0x0
	  push 0x1095
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
      push eax
	  mov edx,DWORD PTR SS :[0x01733AD0]
	  mov edx,[edx+0x240]
      sub edx,0x254
	  mov ecx,[esp+0x10]
	  imul ecx,0x3
	  add ecx,0x10D
	  add edx, 0x95
	  push 0x0
	  push ecx
	  push edx
	  mov ecx,DWORD PTR SS:[0x01733AC4]
	  mov eax,[ecx]
	  call dword ptr [eax+0x24]
	  ChuaCoOpt:
	  mov ecx,[esp+0x8]
	  add ecx,0x6
	  mov [esp+0x8],ecx
	  cmp ecx,0x2A
      jl BackLoopCheckOpt
	  ret 0xC


	  GetColorOption:
	  xor ecx,ecx
	  mov ecx,[esp+0x4]
	  cmp ecx,0x1
      jnz KiemTraColor2
	  mov eax,0xFF00F064
      ret 0x4
	  KiemTraColor2:
	  cmp ecx,0x2
	  jnz KiemTraColor3
      mov eax,0xFF00F064
	  ret 0x4

	  KiemTraColor3:
	  cmp ecx,0x3
	  jnz KiemTraColor4
      mov eax,0xFF00F064
	  ret 0x4

	  KiemTraColor4:
	  cmp ecx,0x4
	  jnz KiemTraColor5
      mov eax,0xFF00F064
	  ret 0x4

	  KiemTraColor5:
	  cmp ecx,0x5
	  jnz UnknowColor
      mov eax,0xFF00F064
	  ret 0x4

	  UnknowColor:
      mov eax,0xFF00F064
	  ret 0x4

      GetStringOptn:
	  xor ecx,ecx
	  mov ecx,[esp+0x10]
	  cmp ecx,0x0
	  jnz KiemTraRank2
	  push 4239
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
      mov ecx,[esp+0x4]
	  push 0xF
	  push eax
	  lea eax,[ecx+0x100]
	  push eax
	  mov eax,0x00848162
	  call eax
	  add esp,0xC
	  mov eax,[esp+0x8]
	  push eax
	  mov eax,[esp+0x10]
	  push eax
	  push 0xB
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov eax,[esp+0xC]
	  lea eax,[eax+0x10F]
	  push 0x100
	  push eax
	  mov eax,0x0085C538
	  call dword ptr [eax]
	  add esp,0x10
      mov eax,[esp+0x4]
	  lea eax,[eax+0x100]
      ret 0x10

	  KiemTraRank2:
	  cmp ecx,1
	  jnz KiemTraRank3
	  push 4240
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
      mov ecx,[esp+0x4]
	  push 0x9
	  push eax
	  lea eax,[ecx+0x100]
	  push eax
	  mov eax,0x00848162
	  call eax
	  add esp,0xC
	  mov eax,[esp+0x8]
	  push eax
	  mov eax,[esp+0x10]
	  push eax
	  push 0xB
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov eax,[esp+0xC]
	  lea eax,[eax+0x109]
	  push 0x100
	  push eax
	  mov eax,0x0085C538
	  call dword ptr [eax]
	  add esp,0x10
      mov eax,[esp+0x4]
	  lea eax,[eax+0x100]
      ret 0x10

	  KiemTraRank3:
	  cmp ecx,2
	  jnz KiemTraRank4
	  push 4241
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
      mov ecx,[esp+0x4]
	  push 0x11
	  push eax
	  lea eax,[ecx+0x100]
	  push eax
	  mov eax,0x00848162
	  call eax
	  add esp,0xC
	  mov eax,[esp+0x8]
	  push eax
	  mov eax,[esp+0x10]
	  push eax
	  push 0xB
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov eax,[esp+0xC]
	  lea eax,[eax+0x111]
	  push 0x100
	  push eax
	  mov eax,0x0085C538
	  call dword ptr [eax]
	  add esp,0x10
      mov eax,[esp+0x4]
	  lea eax,[eax+0x100]
      ret 0x10

	  KiemTraRank4:
	  cmp ecx,3
	  jnz KiemTraRank5
	  push 4242
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
      mov ecx,[esp+0x4]
	  push 0x7
	  push eax
	  lea eax,[ecx+0x100]
	  push eax
	  mov eax,0x00848162
	  call eax
	  add esp,0xC
	  mov eax,[esp+0x8]
	  push eax
	  mov eax,[esp+0x10]
	  push eax
	  push 0xB
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov eax,[esp+0xC]
	  lea eax,[eax+0x107]
	  push 0x100
	  push eax
	  mov eax,0x0085C538
	  call dword ptr [eax]
	  add esp,0x10
      mov eax,[esp+0x4]
	  lea eax,[eax+0x100]
      ret 0x10

	  KiemTraRank5:
	  cmp ecx,4
	  jnz UnknowRank
	  push 4243
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
      mov ecx,[esp+0x4]
	  push 0xD
	  push eax
	  lea eax,[ecx+0x100]
	  push eax
	  mov eax,0x00848162
	  call eax
	  add esp,0xC
	  mov eax,[esp+0x8]
	  push eax
	  mov eax,[esp+0x10]
	  push eax
	  push 0xB
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov eax,[esp+0xC]
	  lea eax,[eax+0x10D]
	  push 0x100
	  push eax
	  mov eax,0x0085C538
	  call dword ptr [eax]
	  add esp,0x10
      mov eax,[esp+0x4]
	  lea eax,[eax+0x100]
      ret 0x10

	  UnknowRank:
	  push 4244
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
      mov ecx,[esp+0x4]
	  push 0x7
	  push eax
	  lea eax,[ecx+0x100]
	  push eax
	  mov eax,0x00848162
	  call eax
	  add esp,0xC
	  mov eax,[esp+0x8]
	  push eax
	  mov eax,[esp+0x10]
	  push eax
	  push 0xB
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov eax,[esp+0xC]
	  lea eax,[eax+0x107]
	  push 0x100
	  push eax
	  mov eax,0x0085C538
	  call dword ptr [eax]
	  add esp,0x10
      mov eax,[esp+0x4]
	  lea eax,[eax+0x100]
      ret 0x10

	  GetSizeChoose:
	  xor ecx,ecx
	  mov ecx,[esp+0x4]
	  cmp ecx,0x1
	  jnz CheckSize2
      mov eax,0x12
	  ret 0x4


	  CheckSize2:
	  cmp ecx,0x2
	  jnz CheckSize3
	  mov eax,0x24
	  ret 0x4

	  CheckSize3:
	  cmp ecx,0x3
	  jnz CheckSize4
	  mov eax,0x36
	  ret 0x4

	  CheckSize4:
	  cmp ecx,0x4
	  jnz CheckSize5
	  mov eax,0x48
	  ret 0x4

	  CheckSize5:
	  cmp ecx,0x5
	  jnz CheckSize6
      mov eax,0x5A
	  ret 0x4

	  CheckSize6:
	  cmp ecx,0x6
	  jnz UnknowSizeChoose
	  mov eax,0x6C
	  ret 0x4


	  UnknowSizeChoose:
      mov eax,0x12
      ret 0x4
	}
}
__declspec(naked)void AddOptionPhongAnTinVat()  //00613D8D
{
__asm
	{
	  pushad
	  //Store Previous Value
	  sub esp,0x8
	  //esp count tin vat
	  //esp+4 count opt
	  //Slot Thap
	  mov ecx,0xC
      BackLoopThap:
	  mov [esp],ecx
	  imul ecx,0x90
	  xor edx,edx
	  mov dx,[0x1107258+ecx+0x22DC8+0x14]
	  xor dx,0xCE43
	  test edx,edx
	  jz LoopCheckIncreaseThap
	  //Check Option Relics
	  xor ecx,ecx
      BackLoopCheckOptionThap:
	  mov [esp+0x4],ecx
      imul ecx,0x6
	  mov eax,[esp]
      imul eax,0x90
	  xor edx,edx
	  mov dx,[0x1107258+ecx+eax+0x2A+0x22DC8]
	  xor dx,0xCE43
	  test edx,edx
	  jz CheckAnotherFun
      xor edx,edx
	  mov dx,[0x1107258+ecx+eax+0x2A+0x22DC8]
	  xor dx,0xCE43
	  push edx //Option
	  xor edx,edx
	  mov dx,[0x1107258+ecx+eax+0x2A+0x2+0x22DC8]
	  xor dx,0xCE43
	  push edx //Value
      call AddOptionForUser
	  CheckAnotherFun:
	  mov ecx,[esp+0x4]
	  add ecx,0x1
	  cmp ecx,0x6
	  jb BackLoopCheckOptionThap
	  //
      LoopCheckIncreaseThap:
	  mov ecx,[esp]
	  add ecx,0x1
	  cmp ecx,0x14
      jb BackLoopThap

	  //Slot Cao
	  mov ecx,0x8C
      BackLoopCao:
	  mov [esp],ecx
	  imul ecx,0x90
	  xor edx,edx
	  mov dx,[0x1107258+ecx+0x22DC8+0x14]
	  xor dx,0xCE43
	  test edx,edx
	  jz LoopCheckIncreaseCao
	  //Check Option Relics
	  xor ecx,ecx
      BackLoopCheckOptionCao:
	  mov [esp+0x4],ecx
      imul ecx,0x6
	  mov eax,[esp]
      imul eax,0x90
	  xor edx,edx
	  mov dx,[0x1107258+ecx+eax+0x2A+0x22DC8]
	  xor dx,0xCE43
	  test edx,edx
	  jz CheckAnotherFunCao
      xor edx,edx
	  mov dx,[0x1107258+ecx+eax+0x2A+0x22DC8]
	  xor dx,0xCE43
	  push edx //Option
	  xor edx,edx
	  mov dx,[0x1107258+ecx+eax+0x2A+0x2+0x22DC8]
	  xor dx,0xCE43
	  push edx //Value
      call AddOptionForUser
	  CheckAnotherFunCao:
	  mov ecx,[esp+0x4]
	  add ecx,0x1
	  cmp ecx,0x6
	  jb BackLoopCheckOptionCao
	  //
      LoopCheckIncreaseCao:
	  mov ecx,[esp]
	  add ecx,0x1
	  cmp ecx,0x94
	  jb BackLoopCao
	  //
      add esp,0x8
	  //End Func
	  popad
	  xor ebx,0x1F
	  xor di,0xCE43
	  push 0x00613D95
	  ret


	  AddOptionForUser:
	  mov eax,[esp+0x8]
	  cmp eax,0x3
	  jnz CheckOption2
	  mov eax,[esp+0x4]
	  push eax
	  mov eax,[esp+0xC]
	  push eax
	  mov ecx,0x0111100C
	  mov eax,0x00601FC0
      call eax
	  ret 0x8

	  CheckOption2:
	  cmp eax,0xF
	  jnz CheckOption3
      mov eax,[esp+0x4]
	  push eax
	  mov eax,[esp+0xC]
	  push eax
	  mov ecx,0x0111100C
	  mov eax,0x00602220
	  call eax
	  ret 0x8

	  CheckOption3:
	  cmp eax,0x10
	  jnz CheckOption4
      mov eax,[esp+0x4]
	  push eax
	  mov eax,[esp+0xC]
	  push eax
	  mov ecx,0x0111100C
	  mov eax,0x00603160
	  call eax
	  ret 0x8

	  CheckOption4:
	  cmp eax,0x25
	  jnz CheckOption5
      mov eax,[esp+0x4]
	  push eax
	  mov eax,[esp+0xC]
	  push eax
	  mov ecx,0x0111100C
	  mov eax,0x00601FC0
	  call eax
	  ret 0x8

	  CheckOption5:
	  cmp eax,0x26
	  jnz CheckOption6
      mov eax,[esp+0x4]
	  push eax
	  mov eax,[esp+0xC]
	  push eax
	  mov ecx,0x0111100C
	  mov eax,0x00603210
	  call eax
	  ret 0x8

	  CheckOption6:
	  cmp eax,0x27
	  jnz CheckOption7
      mov eax,[esp+0x4]
	  push eax
	  mov eax,[esp+0xC]
	  push eax
	  mov ecx,0x0111100C
	  mov eax,0x006032C0
	  call eax
	  ret 0x8

	  CheckOption7:
	  cmp eax,0x28
	  jnz CheckOption8
      mov eax,[esp+0x4]
	  push eax
	  mov eax,[esp+0xC]
	  push eax
	  mov ecx,0x0111100C
	  mov eax,0x00603370
	  call eax
	  ret 0x8

	  CheckOption8:
	  cmp eax,0x2F
	  jnz CheckOption9
      mov eax,[esp+0x4]
	  push eax
	  mov eax,[esp+0xC]
	  push eax
	  mov ecx,0x0111100C
	  mov eax,0x006029F0
	  call eax
	  ret 0x8

	  CheckOption9:
	  cmp eax,0x30
	  jnz CheckOption10
      mov eax,[esp+0x4]
	  push eax
	  mov eax,[esp+0xC]
	  push eax
	  mov ecx,0x0111100C
	  mov eax,0x00602B30
	  call eax
	  ret 0x8

	  CheckOption10:
	  cmp eax,0x3D
	  jnz CheckOption11
      mov eax,[esp+0x4]
	  push eax
	  mov eax,[esp+0xC]
	  push eax
	  mov ecx,0x0111100C
	  mov eax,0x00602DB0
	  call eax
	  ret 0x8

	  CheckOption11:
	  cmp eax,0x50
	  jnz CheckOption12
      mov eax,[esp+0x4]
	  push eax
	  mov eax,[esp+0xC]
	  push eax
	  mov ecx,0x0111100C
	  mov eax,0x00602660
	  call eax
	  ret 0x8

	  CheckOption12:
	  cmp eax,0x5D
	  jnz CheckOption13
      mov eax,[esp+0x4]
	  push eax
	  mov eax,[esp+0xC]
	  push eax
	  mov ecx,0x0111100C
	  mov eax,0x00602F80
	  call eax
	  ret 0x8

	  CheckOption13:
	  cmp eax,0x5F
	  jnz CheckOption14
      mov eax,[esp+0x4]
	  push eax
	  mov eax,[esp+0xC]
	  push eax
	  mov ecx,0x0111100C
	  mov eax,0x00603040
	  call eax
	  ret 0x8

	  CheckOption14:
	  cmp eax,0x7C
	  jnz CheckOption15
      mov eax,[esp+0x4]
	  push eax
	  mov eax,[esp+0xC]
	  push eax
	  mov ecx,0x0111100C
	  mov eax,0x00603420
	  call eax
	  ret 0x8

	  CheckOption15:
	  cmp eax,0x8A
	  jnz CheckOptionSl
      mov eax,[esp+0x4]
	  push eax
	  mov eax,[esp+0xC]
	  push eax
	  mov ecx,0x0111100C
	  mov eax,0x00602530
      call eax
	  ret 0x8

      CheckOptionSl:
	  cmp eax,0x35
	  jnz CheckOptionML
      mov eax,[esp+0x4]
	  push eax
	  mov eax,[esp+0xC]
	  push eax
	  mov ecx,0x0111100C
	  mov eax,0x00601AB0
      call eax
	  ret 0x8

	  CheckOptionML:
	  cmp eax,0x36
	  jnz CheckOptionNK
      mov eax,[esp+0x4]
	  push eax
	  mov eax,[esp+0xC]
	  push eax
	  mov ecx,0x0111100C
	  mov eax,0x00601DB0
      call eax
	  ret 0x8

      CheckOptionNK:
	  cmp eax,0x3F
	  jnz NotFount
      mov eax,[esp+0x4]
	  push eax
	  mov eax,[esp+0xC]
	  push eax
	  mov ecx,0x0111100C
	  mov eax,0x006012B0
	  call eax
	  //
      mov eax,[esp+0x4]
	  push eax
	  mov eax,[esp+0xC]
	  push eax
	  mov ecx,0x0111100C
	  mov eax,0x006014C0
	  call eax
	  //
      mov eax,[esp+0x4]
	  push eax
	  mov eax,[esp+0xC]
	  push eax
	  mov ecx,0x0111100C
	  mov eax,0x006017D0
	  call eax
	  //
      mov eax,[esp+0x4]
	  push eax
	  mov eax,[esp+0xC]
	  push eax
	  mov ecx,0x0111100C
	  mov eax,0x00601AB0
	  call eax
	  //
      mov eax,[esp+0x4]
	  push eax
	  mov eax,[esp+0xC]
	  push eax
	  mov ecx,0x0111100C
	  mov eax,0x00601DB0
      call eax
	  ret 0x8
      //

	  NotFount:
      ret 0x8
	}
}
__declspec(naked)void LoadImageTgaSetItemA()  //0049074A
{
	__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
      push eax
	  mov eax,[esp+0x14]
	  cmp al,0x40
	  ja NewImage
      pop eax
	  movsx eax,byte ptr [ecx+0x47]
      jmp dword ptr [eax*0x4+0x00491150]
	  NewImage:
	  push 0x00490625
      ret
	}
}
__declspec(naked)void LoadImageTgaSetItemB()  //004907A4
{
	__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
      push eax
	  mov eax,[esp+0x14]
	  cmp al,0x40
	  ja NewImage
      pop eax
	  movsx eax,byte ptr [ecx+0x47]
	  jmp dword ptr [eax*0x4+0x0049116C]

	  NewImage:
	  push 0x00490625
      ret
	}
}
__declspec(naked)void LoadImageTgaSetItemC()  //0049086A
{
	__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
      push eax
	  mov eax,[esp+0x14]
	  cmp al,0x40
	  ja NewImage
      pop eax
	  movsx eax,byte ptr [ecx+0x47]
	  jmp dword ptr [eax*0x4+0x004911A4]
	  NewImage:
	  push 0x00490625
      ret
	}
}
__declspec(naked)void LoadImageTgaSetItemD()  //004908C4
{
	__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
      push eax
	  mov eax,[esp+0x14]
	  cmp al,0x40
	  ja NewImage
      pop eax
	  movsx eax,byte ptr [ecx+0x47]
	  jmp dword ptr [eax*0x4+0x004911C0]
	  NewImage:
	  push 0x00490625
	  ret
	}
}
__declspec(naked)void AcceptTiengViet()  //00422110
{
	__asm
	{
	  cmp eax,0x6
	  jz AcceptTiengVietAdr
	  cmp eax,0x6
	  ja Adr0x00422F0F
	  push 0x00422119
	  ret

	  AcceptTiengVietAdr:
	  mov eax,0x0
	  cmp eax,0x6
	  ja Adr0x00422F0F
	  push 0x00422119
	  ret

	  Adr0x00422F0F:
	  push 0x00422F0F
      ret
	}
}
__declspec(naked)void DatTenTiengViet()  //004224E6
{
	__asm
	{
	  sub esp,0xC
	  // esp count
      mov [esp+0x4],eax
	  lea ecx,[ebx+0x00000208]
	  xor eax,eax
      mov [esp+0x8],eax
	  add ecx,0x4
	  xor edi,edi
      lookbackcheckbyte:
	  mov [esp],edi
	  xor eax,eax
      imul edi,0x2
	  mov al,[ecx+edi]
	  test eax,eax
	  jz completeconvert
	  xor eax,eax
	  mov al,[ecx+edi+0x1]
	  cmp al,0x01
	  jz Change01
	  cmp al,0x1E
	  jz Change1E
	  cmp al,0x00
      jz Bang0
	  //Chi co 1 byte
      mov eax,[esp+0x4]
	  xor edx,edx
	  mov edi,[esp]
	  imul edi,0x2
	  mov dl,[ecx+edi]
	  mov edi,[esp+0x8]
	  mov byte ptr [eax+edi],dl
	  //
      mov edi,[esp]
	  imul edi,0x2
	  mov dl,[ecx+edi+0x1]
	  mov edi,[esp+0x8]
	  mov byte ptr [eax+edi+0x1],dl

	  //
	  mov edi,[esp+0x8]
	  add edi,0x2
	  mov [esp+0x8],edi
	  mov edi,[esp]
	  add edi,0x1
	  jmp lookbackcheckbyte

	  Change01:
	  mov eax,[esp+0x4]
	  xor edx,edx
	  mov edi,[esp]
      imul edi,0x2
	  mov dl,[ecx+edi]
      mov edi,[esp+0x8]
	  mov byte ptr [eax+edi],0xFE
	  mov byte ptr [eax+edi+0x1],dl
      mov edi,[esp+0x8]
	  add edi,0x2
	  mov [esp+0x8],edi
	  mov edi,[esp]
	  add edi,0x1
	  jmp lookbackcheckbyte

	  Change1E:
      mov eax,[esp+0x4]
	  xor edx,edx
      mov edi,[esp]
      imul edi,0x2
	  mov dl,[ecx+edi]
      mov edi,[esp+0x8]
	  mov byte ptr [eax+edi],0xFF
	  mov byte ptr [eax+edi+0x1],dl
      mov edi,[esp+0x8]
	  add edi,0x2
	  mov [esp+0x8],edi
      mov edi,[esp]
	  add edi,0x1
	  jmp lookbackcheckbyte

      Bang0:
      mov eax,[esp+0x4]
	  xor edx,edx
	  mov edi,[esp]
      imul edi,0x2
	  mov dl,[ecx+edi]
      mov edi,[esp+0x8]
	  mov byte ptr [eax+edi],dl
	  mov edi,[esp+0x8]
	  add edi,0x1
	  mov [esp+0x8],edi
	  mov edi,[esp]
	  add edi,0x1
	  jmp lookbackcheckbyte

	  completeconvert:
      mov eax,[esp+0x4]
	  add esp,0xC
	  mov edi, eax
	  or ecx, 0xFFFFFFFF
	  push 0x004224EB
	  ret
	}
}
__declspec(naked)void ShowHuyetLongRequest()  //004F43EA
{
	__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  push eax
	  mov edx,[esi+0x0000029C]
	  test edx,edx
	  jz Default
	  xor ecx,ecx
	  mov cl,[edx+0x16]
	  xor cl,0x1F
	  cmp ecx,0x1
	  jnz Default
	  mov eax,[esp]
	  xor ecx,ecx
	  mov cl,[eax]
	  test ecx,ecx
	  jz Default
	  imul ecx,0x90
	  lea ecx,[0x1107258+0x22DC8+ecx]
	  push 0x0
	  push 0x1
	  push 0x1
	  push ecx
	  mov edx,[esi+0x18]
	  mov eax,[esi+0x14]
	  add edx,0x000000CF
	  mov ecx,DWORD PTR SS:[0x01615E90]
	  add eax,0xD
	  push edx
	  push eax
	  push 0x1
	  mov eax,0x004913F0
	  call eax
	  Default:
      pop eax
	  mov eax,[esi+0x18]
	  mov ecx,[esi+0x14]
	  push 0x004F43F0
      ret
	}
}
__declspec(naked)void RemoveHuyetLongRequest()  //004F55F7
{
	__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  mov dword ptr [eax],0x0
      mov eax,0x1
	  push 0x004F55FC
      ret
	}
}
__declspec(naked)void ShowTextIncCloCuongDo()  //004F42DF
{
	__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
      push eax
	  mov eax,[esi+0x0000029C]
	  xor ecx,ecx
	  mov cl,[eax+0x16]
	  xor cl,0x1F
	  cmp ecx,0x1
	  jnz Default
	  mov eax,[esp]
	  xor ecx,ecx
	  mov cl,[eax]
	  test ecx,ecx
	  jz ChuaCoHuyetLong
      pop ecx
	  mov ecx,DWORD PTR SS:[0x01733AC4]
	  mov edx,[ecx]
	  push 0xFF00F064
	  call dword ptr [edx+0xC]
	  mov ecx,0x00000020
	  xor eax,eax
	  lea edi,[esp+0x24]
	  push 0x00001144
	  repe stosd
	  push 0x004F4329
      ret

	  ChuaCoHuyetLong:
      pop ecx
	  mov ecx,DWORD PTR SS:[0x01733AC4]
	  mov edx,[ecx]
	  push 0xFFFA4141
	  call dword ptr [edx+0xC]
	  mov ecx,0x00000020
	  xor eax,eax
	  lea edi,[esp+0x24]
	  push 0x00001145
	  repe stosd
	  push 0x004F4329
      ret

	  Default:
      pop eax
	  mov eax,[esi+0x0000029C]
	  push 0x004F42E5
      ret
	}
}
__declspec(naked)void NewIncClothItem()  //006B6161
{
	__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  pop edx
	  xor ecx,ecx
	  mov cl,[eax]
	  test ecx,ecx
	  jz KhongBaoHo
	  sub esp,0xC
	  mov [esp+0xB],cl
      mov byte ptr [esp+0x3],0x69
	  push 0xB
	  push edx
	  lea edx,[esp+0x8]
	  push edx
	  call CopyBte
	  lea edx,[esp]
      mov byte ptr [edx],0xC
	  push edx
	  mov ecx,ebp
	  mov eax,0x006B2F60
      call eax
	  jmp ProcessContinue
	  KhongBaoHo:
      sub esp,0xC
	  mov byte ptr[esp+0xB],0x0
      mov byte ptr [esp+0x3],0x69
	  push 0xB
	  push edx
	  lea edx,[esp+0x8]
	  push edx
	  call CopyBte
      lea edx,[esp]
      mov byte ptr [edx],0xC
	  push edx
	  mov ecx,ebp
	  mov eax,0x006B2F60
	  call eax

	  ProcessContinue:
      add esp,0xC
	  push 0x006B6168
	  ret

	  CopyBte:
	  xor ecx,ecx
      LoopCopyByte:
	  mov eax,[esp+0x4]
	  mov edi,[esp+0x8]
	  xor edx,edx
	  mov dl,[edi+ecx]
	  mov [eax+ecx],dl
	  add ecx,0x1
	  mov eax,[esp+0xC]
	  cmp ecx,eax
	  jb LoopCopyByte
      ret 0xC
	}
}
__declspec(naked)void ShowResourceInfo()  //004D8082
{
	__asm
	{
	   nop
	   nop
	   nop
	   nop
       nop
	   pushad
	   mov ecx,[eax]
	   test ecx,ecx
       jnz DaCoThongTin
	   push eax
	   call AddOptionImage
       DaCoThongTin:
	   mov ecx,[esi+0x20C]
	   cmp ecx,0x1
	   jz ShowItemClothInInventory
	   cmp ecx,0x2
	   jz ShowItemClothInInventory
	   cmp ecx,0x6 //Giao Dich Doi Phuong
	   jz ShowItemTradeAnotherUser
	   cmp ecx,0x7 //Giao Dich Local User
	   jz ShowItemTradeUser
	   cmp ecx,0xA //Shop
	   jz ShowItemInShopUser
       cmp ecx,0x10//Shop
	   jz ShowItemUserWear
	   jmp Default

	   ShowItemUserWear:
	   mov eax,[esi+0x0000583C]
       mov edx,[esi+0x00005B04]
	   lea ecx,[eax+eax*0x8]
	   shl ecx,0x4
       lea eax,[ecx+edx+0x000005CC]
	   push eax
       call ProcessShowInfo
	   jmp Default

	   ShowItemTradeAnotherUser:
	   mov eax,[esi+0x0000583C]
	   lea ecx,[eax+eax*0x8]
	   lea edx,[eax+ecx*0x2]
	   mov eax,[esi+0x00005AE4]
	   lea ecx,[eax+edx*0x8+0x00000240]
	   push ecx
	   call ProcessShowInfo
	   jmp Default

	   ShowItemTradeUser:
	   mov eax,[esi+0x0000583C]
	   lea ecx,[eax+eax*0x8]
	   lea edx,[eax+ecx*0x2]
	   mov eax,[esi+0x00005AE4]
	   lea ecx,[eax+edx*0x8+0x00000834]
	   push ecx
	   call ProcessShowInfo
	   jmp Default

	   ShowItemInShopUser:
	   mov eax,[esi+0x0000583C]
	   lea ecx,[eax+eax*0x8]
	   lea edx,[eax+ecx*0x2]
	   mov eax,[esi+0x00005AFC]
	   lea ecx,[eax+edx*0x8+0x000002CC]
	   push ecx
	   call ProcessShowInfo
	   jmp Default

	   ShowItemClothInInventory:
       xor eax,eax
	   mov eax,[esi+0x5840]
	   test eax,eax
	   jz Default
       xor eax,eax
	   mov eax,[esi+0x583C]
	   cmp eax,0x0
	   jb Default
       cmp eax,0x96
	   ja Default
       mov eax,[esi+0x583C]
	   imul eax,0x90
       xor edx,edx
	   lea edx,[eax+0x1107258+0x22DC8]
	   push edx
	   call ProcessShowInfo
	   jmp Default

	   

	   ProcessShowInfo:
	   // Check Giao Dich
       push 0
	   mov eax,[esi+0x18]
	   add eax,0x13
	   push eax
	   mov eax,[esi+0x14]
	   add eax,0xE
	   push eax
	   mov eax,[esp+0x30]
       push eax
	   call Show3DongThongTin
       //
       mov eax,[esp+0x4]
	   xor ecx,ecx
	   mov cx,[eax+0x14]
	   xor cx,0xCE43
	   push ecx
	   xor ecx,ecx
	   mov cl,[eax+0x16]
	   xor cl,0x1F
	   push ecx
	   mov eax,0x00676AB0
	   call eax
       add esp,0x8
	   push eax
	   push 0x1
	   call ShowTextInfo
	   // Check Bo Kho
       mov eax,[esp+0x4]
	   xor ecx,ecx
	   mov cx,[eax+0x14]
	   xor cx,0xCE43
	   push ecx
	   xor ecx,ecx
	   mov cl,[eax+0x16]
	   xor cl,0x1F
	   push ecx
	   mov eax,0x006779D0
	   call eax
       add esp,0x8
	   push eax
	   push 0x2
	   call ShowTextInfo
	   // Check Mua Ban
       mov eax,[esp+0x4]
	   xor ecx,ecx
	   mov cx,[eax+0x14]
	   xor cx,0xCE43
	   push ecx
	   xor ecx,ecx
	   mov cl,[eax+0x16]
	   xor cl,0x1F
	   push ecx
	   mov eax,0x00676F40
	   call eax
       add esp,0x8
	   push eax
	   push 0x3
	   call ShowTextInfo
	   ret 0x4

	   Default:
	   //
	   popad
	   mov edi,ebx
	   or ecx,0xFFFFFFFF
       xor eax,eax
	   push 0x004D8089
	   ret

	   ShowTextInfo:
	   mov eax,[esp+0x4]
	   cmp eax,0x1
	   jnz CheckBoKhoUser
	   // Check Giao Dich
		xor eax,eax
        mov al,[esp+0x8]
		cmp eax,0x1
		jnz CoTheGiaoDich
		ret 0x8

		CoTheGiaoDich:
		push 1
		mov eax,[esi+0x18]
		add eax,0x15
		push eax
		mov eax,[esi+0x14]
		add eax,0x3C
		push eax
		mov eax,[esp+0x3C]
		push eax
		call Show3DongThongTin
		ret 0x8

		CheckBoKhoUser:
		cmp eax,0x2
		jnz CheckMuaBanUser
	    // Check Bo Kho
		xor eax,eax
		mov al,[esp+0x8]
		cmp eax,0x1
		jnz CoTheBoKho
		ret 0x8

		CoTheBoKho:
        push 1
		mov eax,[esi+0x18]
		add eax,0x29
		push eax
		mov eax,[esi+0x14]
		add eax,0x3C
		push eax
		mov eax,[esp+0x3C]
		push eax
		call Show3DongThongTin
		ret 0x8

	    CheckMuaBanUser:
	   // Check Mua Ban
        xor eax,eax
		mov al,[esp+0x8]
		cmp eax,0x1
		jnz CoTheMuaBan
		ret 0x8

		CoTheMuaBan:
        push 1
		mov eax,[esi+0x18]
		add eax,0x3D
		push eax
		mov eax,[esi+0x14]
		add eax,0x3C
		push eax
		mov eax,[esp+0x3C]
		push eax
		call Show3DongThongTin
		ret 0x8

	   Show3DongThongTin:
	   mov eax,[esp+0x10]
	   cmp eax,1
	   jz HienThiTick
       push 4108
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
	   mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0
	   mov  DWORD PTR SS : [ecx + 0xA0] , 59
	   mov  DWORD PTR SS : [ecx + 0x98] , 0
	   mov  DWORD PTR SS : [ecx + 0xA4] , 58
	   jmp ProcessShowNut

	   HienThiTick:
       push 4108
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
	   mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0
	   mov  DWORD PTR SS : [ecx + 0xA0] , 229
	   mov  DWORD PTR SS : [ecx + 0x98] , 217
	   mov  DWORD PTR SS : [ecx + 0xA4] , 12

	   ProcessShowNut:
	   push 0xFF7F0000
	   push 5188
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,[esp+0x14]
	   mov edx,[esp+0x10]
	   push ecx
	   push edx
	   mov ecx, [esp+0x14]
	   mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
	   call eax
	   mov ecx,[esp+0x4]
	   push 0x1732CC8
	   mov eax, 0x7B9850
	   call eax //Draw1
	   ret 0x10


	   AddOptionImage:
	   sub esp,0x4
	   xor ecx,ecx
	   mov [esp],ecx
	   BackGetOptionImage:
	   mov ecx,[esp]
	   mov eax, 0x010CC088
	   mov edx,[eax+ecx]
	   mov eax,[esp+0x8]
	   mov [eax+ecx],edx
	   add ecx,4
	   mov [esp],ecx
	   cmp ecx,0xB8
	   jl BackGetOptionImage
	   add esp,0x4
	   ret 0x4
	}
}
__declspec(naked)void ShowWeapon1()  //004D52B0
{
	__asm
	{
	   nop
	   nop
	   nop
	   nop
       nop
	   pushad
       mov ecx,[eax]
	   test ecx,ecx
       jnz DaCoThongTin
	   push eax
	   call AddOptionImage
       DaCoThongTin:
	   mov ecx,[esi+0x20C]
	   cmp ecx,0x1
	   jz ShowItemClothInInventory
	   cmp ecx,0x2
	   jz ShowItemClothInInventory
	   cmp ecx,0x6 //Giao Dich Doi Phuong
	   jz ShowItemTradeAnotherUser
	   cmp ecx,0x7 //Giao Dich Local User
	   jz ShowItemTradeUser
	   cmp ecx,0xA //Shop
	   jz ShowItemInShopUser
       cmp ecx,0x10//Shop
	   jz ShowItemUserWear
	   jmp Default

	   ShowItemUserWear:
	   mov eax,[esi+0x0000583C]
       mov edx,[esi+0x00005B04]
	   lea ecx,[eax+eax*0x8]
	   shl ecx,0x4
       lea eax,[ecx+edx+0x000005CC]
	   push eax
       call ProcessShowInfo
	   jmp Default

	   ShowItemTradeAnotherUser:
	   mov eax,[esi+0x0000583C]
	   lea ecx,[eax+eax*0x8]
	   lea edx,[eax+ecx*0x2]
	   mov eax,[esi+0x00005AE4]
	   lea ecx,[eax+edx*0x8+0x00000240]
	   push ecx
	   call ProcessShowInfo
	   jmp Default

	   ShowItemTradeUser:
	   mov eax,[esi+0x0000583C]
	   lea ecx,[eax+eax*0x8]
	   lea edx,[eax+ecx*0x2]
	   mov eax,[esi+0x00005AE4]
	   lea ecx,[eax+edx*0x8+0x00000834]
	   push ecx
	   call ProcessShowInfo
	   jmp Default

	   ShowItemInShopUser:
	   mov eax,[esi+0x0000583C]
	   lea ecx,[eax+eax*0x8]
	   lea edx,[eax+ecx*0x2]
	   mov eax,[esi+0x00005AFC]
	   lea ecx,[eax+edx*0x8+0x000002CC]
	   push ecx
	   call ProcessShowInfo
	   jmp Default

	   ShowItemClothInInventory:
       xor eax,eax
	   mov eax,[esi+0x5840]
	   test eax,eax
	   jz Default
       xor eax,eax
	   mov eax,[esi+0x583C]
	   cmp eax,0x0
	   jb Default
       cmp eax,0x96
	   ja Default
       mov eax,[esi+0x583C]
	   imul eax,0x90
       xor edx,edx
	   lea edx,[eax+0x1107258+0x22DC8]
	   push edx
	   call ProcessShowInfo
	   jmp Default

       Show3DongThongTin:
	   mov eax,[esp+0x10]
	   cmp eax,1
	   jz HienThiTick
       push 4108
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
	   mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0
	   mov  DWORD PTR SS : [ecx + 0xA0] , 59
	   mov  DWORD PTR SS : [ecx + 0x98] , 0
	   mov  DWORD PTR SS : [ecx + 0xA4] , 58
	   jmp ProcessShowNut

	   HienThiTick:
       push 4108
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
	   mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0
	   mov  DWORD PTR SS : [ecx + 0xA0] , 229
	   mov  DWORD PTR SS : [ecx + 0x98] , 217
	   mov  DWORD PTR SS : [ecx + 0xA4] , 12

	   ProcessShowNut:
	   push 0xFF7F0000
	   push 5188
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,[esp+0x14]
	   mov edx,[esp+0x10]
	   push ecx
	   push edx
	   mov ecx, [esp+0x14]
	   mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
	   call eax
	   mov ecx,[esp+0x4]
	   push 0x1732CC8
	   mov eax, 0x7B9850
	   call eax //Draw1
	   ret 0x10

	   ProcessShowInfo:
	   //
       push 0
	   mov eax,[esi+0x18]
	   add eax,0x13
	   push eax
	   mov eax,[esi+0x14]
	   add eax,0xE
	   push eax
	   mov eax,[esp+0x30]
       push eax
       call Show3DongThongTin
	   // Check Giao Dich
       mov eax,[esp+0x4]
	   xor ecx,ecx
	   mov cx,[eax+0x14]
	   xor cx,0xCE43
	   push ecx
	   xor ecx,ecx
	   mov cl,[eax+0x16]
	   xor cl,0x1F
	   push ecx
	   mov eax,0x00676AB0
	   call eax
       add esp,0x8
	   push eax
	   push 0x1
	   call ShowTextInfo
	   // Check Bo Kho
       mov eax,[esp+0x4]
	   xor ecx,ecx
	   mov cx,[eax+0x14]
	   xor cx,0xCE43
	   push ecx
	   xor ecx,ecx
	   mov cl,[eax+0x16]
	   xor cl,0x1F
	   push ecx
	   mov eax,0x006779D0
	   call eax
       add esp,0x8
	   push eax
	   push 0x2
	   call ShowTextInfo
	   // Check Mua Ban
       mov eax,[esp+0x4]
	   xor ecx,ecx
	   mov cx,[eax+0x14]
	   xor cx,0xCE43
	   push ecx
	   xor ecx,ecx
	   mov cl,[eax+0x16]
	   xor cl,0x1F
	   push ecx
	   mov eax,0x00676F40
	   call eax
       add esp,0x8
	   push eax
	   push 0x3
	   call ShowTextInfo
	   ret 0x4

	   Default:
	   //Draw Nen
	   popad
	   mov ecx,DWORD PTR SS:[0x01733AC4]
	   push 0x004D52B6
	   ret

	   ShowTextInfo:
	   mov eax,[esp+0x4]
	   cmp eax,0x1
	   jnz CheckBoKhoUser
	   // Check Giao Dich
		xor eax,eax
        mov al,[esp+0x8]
		cmp eax,0x1
		jnz CoTheGiaoDich
		ret 0x8

		CoTheGiaoDich:
		push 1
		mov eax,[esi+0x18]
		add eax,0x15
		push eax
		mov eax,[esi+0x14]
		add eax,0x3C
		push eax
		mov eax,[esp+0x3C]
		push eax
		call Show3DongThongTin
		ret 0x8

       CheckBoKhoUser:
	   cmp eax,0x2
	   jnz CheckMuaBanUser
	   // Check Bo Kho
        xor eax,eax
		mov al,[esp+0x8]
		cmp eax,0x1
		jnz CoTheBoKho
		ret 0x8

		CoTheBoKho:
        push 1
		mov eax,[esi+0x18]
		add eax,0x29
		push eax
		mov eax,[esi+0x14]
		add eax,0x3C
		push eax
		mov eax,[esp+0x3C]
		push eax
		call Show3DongThongTin
		ret 0x8

	   CheckMuaBanUser:
	   // Check Mua Ban
       	xor eax,eax
		mov al,[esp+0x8]
		cmp eax,0x1
		jnz CoTheMuaBan
		ret 0x8

		CoTheMuaBan:
        push 1
		mov eax,[esi+0x18]
		add eax,0x3D
		push eax
		mov eax,[esi+0x14]
		add eax,0x3C
		push eax
		mov eax,[esp+0x3C]
		push eax
		call Show3DongThongTin
		ret 0x8


        AddOptionImage:
	   sub esp,0x4
	   xor ecx,ecx
	   mov [esp],ecx
	   BackGetOptionImage:
	   mov ecx,[esp]
	   mov eax, 0x010CC088
	   mov edx,[eax+ecx]
	   mov eax,[esp+0x8]
	   mov [eax+ecx],edx
	   add ecx,4
	   mov [esp],ecx
	   cmp ecx,0xB8
	   jl BackGetOptionImage
	   add esp,0x4
	   ret 0x4
	}
}
__declspec(naked)void ShowCloth1()  //004D6143
{
	__asm
	{
    nop
	   nop
	   nop
	   nop
       nop
	   pushad
       mov ecx,[eax]
	   test ecx,ecx
       jnz DaCoThongTin
	   push eax
	   call AddOptionImage
       DaCoThongTin:
	   mov ecx,[esi+0x20C]
	   cmp ecx,0x1
	   jz ShowItemClothInInventory
	   cmp ecx,0x2
	   jz ShowItemClothInInventory
	   cmp ecx,0x6 //Giao Dich Doi Phuong
	   jz ShowItemTradeAnotherUser
	   cmp ecx,0x7 //Giao Dich Local User
	   jz ShowItemTradeUser
	   cmp ecx,0xA //Shop
	   jz ShowItemInShopUser
       cmp ecx,0x10//Shop
	   jz ShowItemUserWear
	   jmp Default

	   ShowItemUserWear:
	   mov eax,[esi+0x0000583C]
       mov edx,[esi+0x00005B04]
	   lea ecx,[eax+eax*0x8]
	   shl ecx,0x4
       lea eax,[ecx+edx+0x000005CC]
	   push eax
       call ProcessShowInfo
	   jmp Default

	   ShowItemTradeAnotherUser:
	   mov eax,[esi+0x0000583C]
	   lea ecx,[eax+eax*0x8]
	   lea edx,[eax+ecx*0x2]
	   mov eax,[esi+0x00005AE4]
	   lea ecx,[eax+edx*0x8+0x00000240]
	   push ecx
	   call ProcessShowInfo
	   jmp Default

	   ShowItemTradeUser:
	   mov eax,[esi+0x0000583C]
	   lea ecx,[eax+eax*0x8]
	   lea edx,[eax+ecx*0x2]
	   mov eax,[esi+0x00005AE4]
	   lea ecx,[eax+edx*0x8+0x00000834]
	   push ecx
	   call ProcessShowInfo
	   jmp Default

	   ShowItemInShopUser:
	   mov eax,[esi+0x0000583C]
	   lea ecx,[eax+eax*0x8]
	   lea edx,[eax+ecx*0x2]
	   mov eax,[esi+0x00005AFC]
	   lea ecx,[eax+edx*0x8+0x000002CC]
	   push ecx
	   call ProcessShowInfo
	   jmp Default

	   ShowItemClothInInventory:
       xor eax,eax
	   mov eax,[esi+0x5840]
	   test eax,eax
	   jz Default
       xor eax,eax
	   mov eax,[esi+0x583C]
	   cmp eax,0x0
	   jb Default
       cmp eax,0x96
	   ja Default
       mov eax,[esi+0x583C]
	   imul eax,0x90
       xor edx,edx
	   lea edx,[eax+0x1107258+0x22DC8]
	   push edx
	   call ProcessShowInfo
	   jmp Default

	   ProcessShowInfo:
	   // Check Giao Dich
       push 0
	   mov eax,[esi+0x18]
	   add eax,0x13
	   push eax
	   mov eax,[esi+0x14]
	   add eax,0xE
	   push eax
	   mov eax,[esp+0x30]
       push eax
       call Show3DongThongTin
	   //
       mov eax,[esp+0x4]
	   xor ecx,ecx
	   mov cx,[eax+0x14]
	   xor cx,0xCE43
	   push ecx
	   xor ecx,ecx
	   mov cl,[eax+0x16]
	   xor cl,0x1F
	   push ecx
	   mov eax,0x00676AB0
	   call eax
       add esp,0x8
	   push eax
	   push 0x1
	   call ShowTextInfo
	   // Check Bo Kho
       mov eax,[esp+0x4]
	   xor ecx,ecx
	   mov cx,[eax+0x14]
	   xor cx,0xCE43
	   push ecx
	   xor ecx,ecx
	   mov cl,[eax+0x16]
	   xor cl,0x1F
	   push ecx
	   mov eax,0x006779D0
	   call eax
       add esp,0x8
	   push eax
	   push 0x2
	   call ShowTextInfo
	   // Check Mua Ban
       mov eax,[esp+0x4]
	   xor ecx,ecx
	   mov cx,[eax+0x14]
	   xor cx,0xCE43
	   push ecx
	   xor ecx,ecx
	   mov cl,[eax+0x16]
	   xor cl,0x1F
	   push ecx
	   mov eax,0x00676F40
	   call eax
       add esp,0x8
	   push eax
	   push 0x3
	   call ShowTextInfo
	   ret 0x4

	   Default:
	   //
	   popad
	   mov ecx,DWORD PTR SS:[0x01733AC4]
	   push 0x004D6149
	   ret

	   ShowTextInfo:
	   mov eax,[esp+0x4]
	   cmp eax,0x1
	   jnz CheckBoKhoUser
	   // Check Giao Dich
		xor eax,eax
        mov al,[esp+0x8]
		cmp eax,0x1
		jnz CoTheGiaoDich
		ret 0x8

		CoTheGiaoDich:
		push 1
		mov eax,[esi+0x18]
		add eax,0x15
		push eax
		mov eax,[esi+0x14]
		add eax,0x3C
		push eax
		mov eax,[esp+0x3C]
		push eax
		call Show3DongThongTin
		ret 0x8

       CheckBoKhoUser:
	   cmp eax,0x2
	   jnz CheckMuaBanUser
	   // Check Bo Kho
        xor eax,eax
		mov al,[esp+0x8]
		cmp eax,0x1
		jnz CoTheBoKho
		ret 0x8

		CoTheBoKho:
        push 1
		mov eax,[esi+0x18]
		add eax,0x29
		push eax
		mov eax,[esi+0x14]
		add eax,0x3C
		push eax
		mov eax,[esp+0x3C]
		push eax
		call Show3DongThongTin
		ret 0x8

	   CheckMuaBanUser:
	    xor eax,eax
		mov al,[esp+0x8]
		cmp eax,0x1
		jnz CoTheMuaBan
		ret 0x8

		CoTheMuaBan:
        push 1
		mov eax,[esi+0x18]
		add eax,0x3D
		push eax
		mov eax,[esi+0x14]
		add eax,0x3C
		push eax
		mov eax,[esp+0x3C]
		push eax
		call Show3DongThongTin
		ret 0x8

	    Show3DongThongTin:
	   mov eax,[esp+0x10]
	   cmp eax,1
	   jz HienThiTick
       push 4108
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
	   mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0
	   mov  DWORD PTR SS : [ecx + 0xA0] , 59
	   mov  DWORD PTR SS : [ecx + 0x98] , 0
	   mov  DWORD PTR SS : [ecx + 0xA4] , 58
	   jmp ProcessShowNut

	   HienThiTick:
       push 4108
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
	   mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0
	   mov  DWORD PTR SS : [ecx + 0xA0] , 229
	   mov  DWORD PTR SS : [ecx + 0x98] , 217
	   mov  DWORD PTR SS : [ecx + 0xA4] , 12

	   ProcessShowNut:
	   push 0xFF7F0000
	   push 5188
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,[esp+0x14]
	   mov edx,[esp+0x10]
	   push ecx
	   push edx
	   mov ecx, [esp+0x14]
	   mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
	   call eax
	   mov ecx,[esp+0x4]
	   push 0x1732CC8
	   mov eax, 0x7B9850
	   call eax //Draw1
	   ret 0x10

       AddOptionImage:
	   sub esp,0x4
	   xor ecx,ecx
	   mov [esp],ecx
	   BackGetOptionImage:
	   mov ecx,[esp]
	   mov eax, 0x010CC088
	   mov edx,[eax+ecx]
	   mov eax,[esp+0x8]
	   mov [eax+ecx],edx
	   add ecx,4
	   mov [esp],ecx
	   cmp ecx,0xB8
	   jl BackGetOptionImage
	   add esp,0x4
	   ret 0x4
	}
}
__declspec(naked)void ShowBook1()  //004D759E
{
	__asm
	{
    nop
	   nop
	   nop
	   nop
       nop
	   pushad
       mov ecx,[eax]
	   test ecx,ecx
       jnz DaCoThongTin
	   push eax
	   call AddOptionImage
	   DaCoThongTin:
	   mov ecx,[esi+0x20C]
	   cmp ecx,0x1
	   jz ShowItemClothInInventory
	   cmp ecx,0x2
	   jz ShowItemClothInInventory
	   cmp ecx,0x6 //Giao Dich Doi Phuong
	   jz ShowItemTradeAnotherUser
	   cmp ecx,0x7 //Giao Dich Local User
	   jz ShowItemTradeUser
	   cmp ecx,0xA //Shop
	   jz ShowItemInShopUser
       cmp ecx,0x10//Shop
	   jz ShowItemUserWear
	   jmp Default

	   ShowItemUserWear:
	   mov eax,[esi+0x0000583C]
       mov edx,[esi+0x00005B04]
	   lea ecx,[eax+eax*0x8]
	   shl ecx,0x4
       lea eax,[ecx+edx+0x000005CC]
	   push eax
       call ProcessShowInfo
	   jmp Default

	   ShowItemTradeAnotherUser:
	   mov eax,[esi+0x0000583C]
	   lea ecx,[eax+eax*0x8]
	   lea edx,[eax+ecx*0x2]
	   mov eax,[esi+0x00005AE4]
	   lea ecx,[eax+edx*0x8+0x00000240]
	   push ecx
	   call ProcessShowInfo
	   jmp Default

	   ShowItemTradeUser:
	   mov eax,[esi+0x0000583C]
	   lea ecx,[eax+eax*0x8]
	   lea edx,[eax+ecx*0x2]
	   mov eax,[esi+0x00005AE4]
	   lea ecx,[eax+edx*0x8+0x00000834]
	   push ecx
	   call ProcessShowInfo
	   jmp Default

	   ShowItemInShopUser:
	   mov eax,[esi+0x0000583C]
	   lea ecx,[eax+eax*0x8]
	   lea edx,[eax+ecx*0x2]
	   mov eax,[esi+0x00005AFC]
	   lea ecx,[eax+edx*0x8+0x000002CC]
	   push ecx
	   call ProcessShowInfo
	   jmp Default

	   ShowItemClothInInventory:
       xor eax,eax
	   mov eax,[esi+0x5840]
	   test eax,eax
	   jz Default
       xor eax,eax
	   mov eax,[esi+0x583C]
	   cmp eax,0x0
	   jb Default
       cmp eax,0x96
	   ja Default
       mov eax,[esi+0x583C]
	   imul eax,0x90
       xor edx,edx
	   lea edx,[eax+0x1107258+0x22DC8]
	   push edx
	   call ProcessShowInfo
	   jmp Default

	   ProcessShowInfo:
	   // Check Giao Dich
       push 0
	   mov eax,[esi+0x18]
	   add eax,0x13
	   push eax
	   mov eax,[esi+0x14]
	   add eax,0xE
	   push eax
	   mov eax,[esp+0x30]
       push eax
	   call Show3DongThongTin
       //
       mov eax,[esp+0x4]
	   xor ecx,ecx
	   mov cx,[eax+0x14]
	   xor cx,0xCE43
	   push ecx
	   xor ecx,ecx
	   mov cl,[eax+0x16]
	   xor cl,0x1F
	   push ecx
	   mov eax,0x00676AB0
	   call eax
       add esp,0x8
	   push eax
	   push 0x1
	   call ShowTextInfo
	   // Check Bo Kho
       mov eax,[esp+0x4]
	   xor ecx,ecx
	   mov cx,[eax+0x14]
	   xor cx,0xCE43
	   push ecx
	   xor ecx,ecx
	   mov cl,[eax+0x16]
	   xor cl,0x1F
	   push ecx
	   mov eax,0x006779D0
	   call eax
       add esp,0x8
	   push eax
	   push 0x2
	   call ShowTextInfo
	   // Check Mua Ban
       mov eax,[esp+0x4]
	   xor ecx,ecx
	   mov cx,[eax+0x14]
	   xor cx,0xCE43
	   push ecx
	   xor ecx,ecx
	   mov cl,[eax+0x16]
	   xor cl,0x1F
	   push ecx
	   mov eax,0x00676F40
	   call eax
       add esp,0x8
	   push eax
	   push 0x3
	   call ShowTextInfo
	   ret 0x4

	   Default:
	   //
	   popad
	   pop edi
	   pop esi
	   pop ebx
	   add esp,0x18
	   push 0x004D75A4
	   ret

	   ShowTextInfo:
	   mov eax,[esp+0x4]
	   cmp eax,0x1
	   jnz CheckBoKhoUser
	   // Check Giao Dich
		xor eax,eax
        mov al,[esp+0x8]
		cmp eax,0x1
		jnz CoTheGiaoDich
		ret 0x8

		CoTheGiaoDich:
		push 1
		mov eax,[esi+0x18]
		add eax,0x15
		push eax
		mov eax,[esi+0x14]
		add eax,0x3C
		push eax
		mov eax,[esp+0x3C]
		push eax
		call Show3DongThongTin
		ret 0x8

       CheckBoKhoUser:
	   cmp eax,0x2
	   jnz CheckMuaBanUser
	   // Check Bo Kho
        xor eax,eax
		mov al,[esp+0x8]
		cmp eax,0x1
		jnz CoTheBoKho
		ret 0x8

		CoTheBoKho:
        push 1
		mov eax,[esi+0x18]
		add eax,0x29
		push eax
		mov eax,[esi+0x14]
		add eax,0x3C
		push eax
		mov eax,[esp+0x3C]
		push eax
		call Show3DongThongTin
		ret 0x8

	   CheckMuaBanUser:
	   // Check Mua Ban
       	xor eax,eax
		mov al,[esp+0x8]
		cmp eax,0x1
		jnz CoTheMuaBan
		ret 0x8

		CoTheMuaBan:
        push 1
		mov eax,[esi+0x18]
		add eax,0x3D
		push eax
		mov eax,[esi+0x14]
		add eax,0x3C
		push eax
		mov eax,[esp+0x3C]
		push eax
		call Show3DongThongTin
		ret 0x8

	   Show3DongThongTin:
	   mov eax,[esp+0x10]
	   cmp eax,1
	   jz HienThiTick
       push 4108
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
	   mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0
	   mov  DWORD PTR SS : [ecx + 0xA0] , 59
	   mov  DWORD PTR SS : [ecx + 0x98] , 0
	   mov  DWORD PTR SS : [ecx + 0xA4] , 58
	   jmp ProcessShowNut

	   HienThiTick:
       push 4108
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
	   mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0
	   mov  DWORD PTR SS : [ecx + 0xA0] , 229
	   mov  DWORD PTR SS : [ecx + 0x98] , 217
	   mov  DWORD PTR SS : [ecx + 0xA4] , 12

	   ProcessShowNut:
	   push 0xFF7F0000
	   push 5188
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,[esp+0x14]
	   mov edx,[esp+0x10]
	   push ecx
	   push edx
	   mov ecx, [esp+0x14]
	   mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
	   call eax
	   mov ecx,[esp+0x4]
	   push 0x1732CC8
	   mov eax, 0x7B9850
	   call eax //Draw1
	   ret 0x10


	   AddOptionImage:
	   sub esp,0x4
	   xor ecx,ecx
	   mov [esp],ecx
	   BackGetOptionImage:
	   mov ecx,[esp]
	   mov eax, 0x010CC088
	   mov edx,[eax+ecx]
	   mov eax,[esp+0x8]
	   mov [eax+ecx],edx
	   add ecx,4
	   mov [esp],ecx
	   cmp ecx,0xB8
	   jl BackGetOptionImage
	   add esp,0x4
	   ret 0x4

	}
}
__declspec(naked)void ShowPotion1()  //004D7610
{
	__asm
	{
	   nop
	   nop
	   nop
	   nop
       nop
	   pushad
       mov ecx,[eax]
	   test ecx,ecx
       jnz DaCoThongTin
	   push eax
	   call AddOptionImage
       DaCoThongTin:
	   mov ecx,[esi+0x20C]
	   cmp ecx,0x1
	   jz ShowItemClothInInventory
	   cmp ecx,0x2
	   jz ShowItemClothInInventory
	   cmp ecx,0x6 //Giao Dich Doi Phuong
	   jz ShowItemTradeAnotherUser
	   cmp ecx,0x7 //Giao Dich Local User
	   jz ShowItemTradeUser
	   cmp ecx,0xA //Shop
	   jz ShowItemInShopUser
       cmp ecx,0x10//Shop
	   jz ShowItemUserWear
	   jmp Default

	   ShowItemUserWear:
	   mov eax,[esi+0x0000583C]
       mov edx,[esi+0x00005B04]
	   lea ecx,[eax+eax*0x8]
	   shl ecx,0x4
       lea eax,[ecx+edx+0x000005CC]
	   push eax
       call ProcessShowInfo
	   jmp Default

	   ShowItemTradeAnotherUser:
	   mov eax,[esi+0x0000583C]
	   lea ecx,[eax+eax*0x8]
	   lea edx,[eax+ecx*0x2]
	   mov eax,[esi+0x00005AE4]
	   lea ecx,[eax+edx*0x8+0x00000240]
	   push ecx
	   call ProcessShowInfo
	   jmp Default

	   ShowItemTradeUser:
	   mov eax,[esi+0x0000583C]
	   lea ecx,[eax+eax*0x8]
	   lea edx,[eax+ecx*0x2]
	   mov eax,[esi+0x00005AE4]
	   lea ecx,[eax+edx*0x8+0x00000834]
	   push ecx
	   call ProcessShowInfo
	   jmp Default

	   ShowItemInShopUser:
	   mov eax,[esi+0x0000583C]
	   lea ecx,[eax+eax*0x8]
	   lea edx,[eax+ecx*0x2]
	   mov eax,[esi+0x00005AFC]
	   lea ecx,[eax+edx*0x8+0x000002CC]
	   push ecx
	   call ProcessShowInfo
	   jmp Default

	   ShowItemClothInInventory:
       xor eax,eax
	   mov eax,[esi+0x5840]
	   test eax,eax
	   jz Default
       xor eax,eax
	   mov eax,[esi+0x583C]
	   cmp eax,0x0
	   jb Default
       cmp eax,0x96
	   ja Default
       mov eax,[esi+0x583C]
	   imul eax,0x90
       xor edx,edx
	   lea edx,[eax+0x1107258+0x22DC8]
	   push edx
	   call ProcessShowInfo
	   jmp Default

	   ProcessShowInfo:
	   // Check Giao Dich
       push 0
	   mov eax,[esi+0x18]
	   add eax,0x13
	   push eax
	   mov eax,[esi+0x14]
	   add eax,0xE
	   push eax
	   mov eax,[esp+0x30]
       push eax
	   call Show3DongThongTin
	   //
       mov eax,[esp+0x4]
	   xor ecx,ecx
	   mov cx,[eax+0x14]
	   xor cx,0xCE43
	   push ecx
	   xor ecx,ecx
	   mov cl,[eax+0x16]
	   xor cl,0x1F
	   push ecx
	   mov eax,0x00676AB0
	   call eax
       add esp,0x8
	   push eax
	   push 0x1
	   call ShowTextInfo
	   // Check Bo Kho
       mov eax,[esp+0x4]
	   xor ecx,ecx
	   mov cx,[eax+0x14]
	   xor cx,0xCE43
	   push ecx
	   xor ecx,ecx
	   mov cl,[eax+0x16]
	   xor cl,0x1F
	   push ecx
	   mov eax,0x006779D0
	   call eax
       add esp,0x8
	   push eax
	   push 0x2
	   call ShowTextInfo
	   // Check Mua Ban
       mov eax,[esp+0x4]
	   xor ecx,ecx
	   mov cx,[eax+0x14]
	   xor cx,0xCE43
	   push ecx
	   xor ecx,ecx
	   mov cl,[eax+0x16]
	   xor cl,0x1F
	   push ecx
	   mov eax,0x00676F40
	   call eax
       add esp,0x8
	   push eax
	   push 0x3
	   call ShowTextInfo
	   ret 0x4

	   Default:
	   //
	   popad
	   mov ecx,DWORD PTR SS:[0x01733AC4]
	   push 0x004D7616
	   ret

	   ShowTextInfo:
	   mov eax,[esp+0x4]
	   cmp eax,0x1
	   jnz CheckBoKhoUser
	   // Check Giao Dich
		xor eax,eax
        mov al,[esp+0x8]
		cmp eax,0x1
		jnz CoTheGiaoDich
		ret 0x8

		CoTheGiaoDich:
		push 1
		mov eax,[esi+0x18]
		add eax,0x15
		push eax
		mov eax,[esi+0x14]
		add eax,0x3C
		push eax
		mov eax,[esp+0x3C]
		push eax
		call Show3DongThongTin
		ret 0x8

       CheckBoKhoUser:
	   cmp eax,0x2
	   jnz CheckMuaBanUser
	   // Check Bo Kho
        xor eax,eax
		mov al,[esp+0x8]
		cmp eax,0x1
		jnz CoTheBoKho
		ret 0x8

		CoTheBoKho:
        push 1
		mov eax,[esi+0x18]
		add eax,0x29
		push eax
		mov eax,[esi+0x14]
		add eax,0x3C
		push eax
		mov eax,[esp+0x3C]
		push eax
		call Show3DongThongTin
		ret 0x8

	   CheckMuaBanUser:
	   xor eax,eax
		mov al,[esp+0x8]
		cmp eax,0x1
		jnz CoTheMuaBan
		ret 0x8

		CoTheMuaBan:
        push 1
		mov eax,[esi+0x18]
		add eax,0x3D
		push eax
		mov eax,[esi+0x14]
		add eax,0x3C
		push eax
		mov eax,[esp+0x3C]
		push eax
		call Show3DongThongTin
		ret 0x8

	   Show3DongThongTin:
	   mov eax,[esp+0x10]
	   cmp eax,1
	   jz HienThiTick
       push 4108
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
	   mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0
	   mov  DWORD PTR SS : [ecx + 0xA0] , 59
	   mov  DWORD PTR SS : [ecx + 0x98] , 0
	   mov  DWORD PTR SS : [ecx + 0xA4] , 58
	   jmp ProcessShowNut

	   HienThiTick:
       push 4108
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
	   mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0
	   mov  DWORD PTR SS : [ecx + 0xA0] , 229
	   mov  DWORD PTR SS : [ecx + 0x98] , 217
	   mov  DWORD PTR SS : [ecx + 0xA4] , 12

	   ProcessShowNut:
	   push 0xFF7F0000
	   push 5188
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,[esp+0x14]
	   mov edx,[esp+0x10]
	   push ecx
	   push edx
	   mov ecx, [esp+0x14]
	   mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
	   call eax
	   mov ecx,[esp+0x4]
	   push 0x1732CC8
	   mov eax, 0x7B9850
	   call eax //Draw1
	   ret 0x10


	   AddOptionImage:
	   sub esp,0x4
	   xor ecx,ecx
	   mov [esp],ecx
	   BackGetOptionImage:
	   mov ecx,[esp]
	   mov eax, 0x010CC088
	   mov edx,[eax+ecx]
	   mov eax,[esp+0x8]
	   mov [eax+ecx],edx
	   add ecx,4
	   mov [esp],ecx
	   cmp ecx,0xB8
	   jl BackGetOptionImage
	   add esp,0x4
	   ret 0x4

	}
}
__declspec(naked)void ShowConsuming1()  //004D7BD7
{
	__asm
	{
        nop
	   nop
	   nop
	   nop
       nop
	   pushad
       mov ecx,[eax]
	   test ecx,ecx
       jnz DaCoThongTin
	   push eax
	   call AddOptionImage
	   DaCoThongTin:
	   mov ecx,[esi+0x20C]
	   cmp ecx,0x1
	   jz ShowItemClothInInventory
	   cmp ecx,0x2
	   jz ShowItemClothInInventory
	   cmp ecx,0x6 //Giao Dich Doi Phuong
	   jz ShowItemTradeAnotherUser
	   cmp ecx,0x7 //Giao Dich Local User
	   jz ShowItemTradeUser
	   cmp ecx,0xA //Shop
	   jz ShowItemInShopUser
       cmp ecx,0x10//Shop
	   jz ShowItemUserWear
	   jmp Default

	   ShowItemUserWear:
	   mov eax,[esi+0x0000583C]
       mov edx,[esi+0x00005B04]
	   lea ecx,[eax+eax*0x8]
	   shl ecx,0x4
       lea eax,[ecx+edx+0x000005CC]
	   push eax
       call ProcessShowInfo
	   jmp Default

	   ShowItemTradeAnotherUser:
	   mov eax,[esi+0x0000583C]
	   lea ecx,[eax+eax*0x8]
	   lea edx,[eax+ecx*0x2]
	   mov eax,[esi+0x00005AE4]
	   lea ecx,[eax+edx*0x8+0x00000240]
	   push ecx
	   call ProcessShowInfo
	   jmp Default

	   ShowItemTradeUser:
	   mov eax,[esi+0x0000583C]
	   lea ecx,[eax+eax*0x8]
	   lea edx,[eax+ecx*0x2]
	   mov eax,[esi+0x00005AE4]
	   lea ecx,[eax+edx*0x8+0x00000834]
	   push ecx
	   call ProcessShowInfo
	   jmp Default

	   ShowItemInShopUser:
	   mov eax,[esi+0x0000583C]
	   lea ecx,[eax+eax*0x8]
	   lea edx,[eax+ecx*0x2]
	   mov eax,[esi+0x00005AFC]
	   lea ecx,[eax+edx*0x8+0x000002CC]
	   push ecx
	   call ProcessShowInfo
	   jmp Default

	   ShowItemClothInInventory:
       xor eax,eax
	   mov eax,[esi+0x5840]
	   test eax,eax
	   jz Default
       xor eax,eax
	   mov eax,[esi+0x583C]
	   cmp eax,0x0
	   jb Default
       cmp eax,0x96
	   ja Default
       mov eax,[esi+0x583C]
	   imul eax,0x90
       xor edx,edx
	   lea edx,[eax+0x1107258+0x22DC8]
	   push edx
	   call ProcessShowInfo
	   jmp Default

	   ProcessShowInfo:
	   // Check Giao Dich
       push 0
	   mov eax,[esi+0x18]
	   add eax,0x13
	   push eax
	   mov eax,[esi+0x14]
	   add eax,0xE
	   push eax
	   mov eax,[esp+0x30]
       push eax
	   call Show3DongThongTin
       //
       mov eax,[esp+0x4]
	   xor ecx,ecx
	   mov cx,[eax+0x14]
	   xor cx,0xCE43
	   push ecx
	   xor ecx,ecx
	   mov cl,[eax+0x16]
	   xor cl,0x1F
	   push ecx
	   mov eax,0x00676AB0
	   call eax
       add esp,0x8
	   push eax
	   push 0x1
	   call ShowTextInfo
	   // Check Bo Kho
       mov eax,[esp+0x4]
	   xor ecx,ecx
	   mov cx,[eax+0x14]
	   xor cx,0xCE43
	   push ecx
	   xor ecx,ecx
	   mov cl,[eax+0x16]
	   xor cl,0x1F
	   push ecx
	   mov eax,0x006779D0
	   call eax
       add esp,0x8
	   push eax
	   push 0x2
	   call ShowTextInfo
	   // Check Mua Ban
       mov eax,[esp+0x4]
	   xor ecx,ecx
	   mov cx,[eax+0x14]
	   xor cx,0xCE43
	   push ecx
	   xor ecx,ecx
	   mov cl,[eax+0x16]
	   xor cl,0x1F
	   push ecx
	   mov eax,0x00676F40
	   call eax
       add esp,0x8
	   push eax
	   push 0x3
	   call ShowTextInfo
	   ret 0x4

	   Default:
	   //
	   popad
	   mov eax,[esi+0x0000020C]
	   push 0x004D7BDD
	   ret

	   ShowTextInfo:
	   mov eax,[esp+0x4]
	   cmp eax,0x1
	   jnz CheckBoKhoUser
	   // Check Giao Dich
		xor eax,eax
        mov al,[esp+0x8]
		cmp eax,0x1
		jnz CoTheGiaoDich
		ret 0x8

		CoTheGiaoDich:
		push 1
		mov eax,[esi+0x18]
		add eax,0x15
		push eax
		mov eax,[esi+0x14]
		add eax,0x3C
		push eax
		mov eax,[esp+0x3C]
		push eax
		call Show3DongThongTin
		ret 0x8

       CheckBoKhoUser:
	   cmp eax,0x2
	   jnz CheckMuaBanUser
	   // Check Bo Kho
        xor eax,eax
		mov al,[esp+0x8]
		cmp eax,0x1
		jnz CoTheBoKho
		ret 0x8

		CoTheBoKho:
        push 1
		mov eax,[esi+0x18]
		add eax,0x29
		push eax
		mov eax,[esi+0x14]
		add eax,0x3C
		push eax
		mov eax,[esp+0x3C]
		push eax
		call Show3DongThongTin
		ret 0x8

	   CheckMuaBanUser:
	   xor eax,eax
		mov al,[esp+0x8]
		cmp eax,0x1
		jnz CoTheMuaBan
		ret 0x8

		CoTheMuaBan:
        push 1
		mov eax,[esi+0x18]
		add eax,0x3D
		push eax
		mov eax,[esi+0x14]
		add eax,0x3C
		push eax
		mov eax,[esp+0x3C]
		push eax
		call Show3DongThongTin
		ret 0x8

Show3DongThongTin:
	   mov eax,[esp+0x10]
	   cmp eax,1
	   jz HienThiTick
       push 4108
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
	   mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0
	   mov  DWORD PTR SS : [ecx + 0xA0] , 59
	   mov  DWORD PTR SS : [ecx + 0x98] , 0
	   mov  DWORD PTR SS : [ecx + 0xA4] , 58
	   jmp ProcessShowNut

	   HienThiTick:
       push 4108
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
	   mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0
	   mov  DWORD PTR SS : [ecx + 0xA0] , 229
	   mov  DWORD PTR SS : [ecx + 0x98] , 217
	   mov  DWORD PTR SS : [ecx + 0xA4] , 12

	   ProcessShowNut:
	   push 0xFF7F0000
	   push 5188
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,[esp+0x14]
	   mov edx,[esp+0x10]
	   push ecx
	   push edx
	   mov ecx, [esp+0x14]
	   mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
	   call eax
	   mov ecx,[esp+0x4]
	   push 0x1732CC8
	   mov eax, 0x7B9850
	   call eax //Draw1
	   ret 0x10


	   AddOptionImage:
	   sub esp,0x4
	   xor ecx,ecx
	   mov [esp],ecx
	   BackGetOptionImage:
	   mov ecx,[esp]
	   mov eax, 0x010CC088
	   mov edx,[eax+ecx]
	   mov eax,[esp+0x8]
	   mov [eax+ecx],edx
	   add ecx,4
	   mov [esp],ecx
	   cmp ecx,0xB8
	   jl BackGetOptionImage
	   add esp,0x4
	   ret 0x4

	}
}
__declspec(naked)void ShowElixir1()  //004D7EE3
{
	__asm
	{
    	nop
	   nop
	   nop
	   nop
	   nop
	   pushad
       mov ecx,[eax]
	   test ecx,ecx
       jnz DaCoThongTin
	   push eax
	   call AddOptionImage
       DaCoThongTin:
	   mov ecx,[esi+0x20C]
	   cmp ecx,0x1
	   jz ShowItemClothInInventory
	   cmp ecx,0x2
	   jz ShowItemClothInInventory
	   cmp ecx,0x6 //Giao Dich Doi Phuong
	   jz ShowItemTradeAnotherUser
	   cmp ecx,0x7 //Giao Dich Local User
	   jz ShowItemTradeUser
	   cmp ecx,0xA //Shop
	   jz ShowItemInShopUser
       cmp ecx,0x10//Shop
	   jz ShowItemUserWear
	   jmp Default

	   ShowItemUserWear:
	   mov eax,[esi+0x0000583C]
       mov edx,[esi+0x00005B04]
	   lea ecx,[eax+eax*0x8]
	   shl ecx,0x4
       lea eax,[ecx+edx+0x000005CC]
	   push eax
       call ProcessShowInfo
	   jmp Default

	   ShowItemTradeAnotherUser:
	   mov eax,[esi+0x0000583C]
	   lea ecx,[eax+eax*0x8]
	   lea edx,[eax+ecx*0x2]
	   mov eax,[esi+0x00005AE4]
	   lea ecx,[eax+edx*0x8+0x00000240]
	   push ecx
	   call ProcessShowInfo
	   jmp Default

	   ShowItemTradeUser:
	   mov eax,[esi+0x0000583C]
	   lea ecx,[eax+eax*0x8]
	   lea edx,[eax+ecx*0x2]
	   mov eax,[esi+0x00005AE4]
	   lea ecx,[eax+edx*0x8+0x00000834]
	   push ecx
	   call ProcessShowInfo
	   jmp Default

	   ShowItemInShopUser:
	   mov eax,[esi+0x0000583C]
	   lea ecx,[eax+eax*0x8]
	   lea edx,[eax+ecx*0x2]
	   mov eax,[esi+0x00005AFC]
	   lea ecx,[eax+edx*0x8+0x000002CC]
	   push ecx
	   call ProcessShowInfo
	   jmp Default

	   ShowItemClothInInventory:
       xor eax,eax
	   mov eax,[esi+0x5840]
	   test eax,eax
	   jz Default
       xor eax,eax
	   mov eax,[esi+0x583C]
	   cmp eax,0x0
	   jb Default
       cmp eax,0x96
	   ja Default
       mov eax,[esi+0x583C]
	   imul eax,0x90
       xor edx,edx
	   lea edx,[eax+0x1107258+0x22DC8]
	   push edx
	   call ProcessShowInfo
	   jmp Default

	   ProcessShowInfo:
	   // Check Giao Dich
        push 0
	   mov eax,[esi+0x18]
	   add eax,0x13
	   push eax
	   mov eax,[esi+0x14]
	   add eax,0xE
	   push eax
	   mov eax,[esp+0x30]
       push eax
       call Show3DongThongTin
	   //
       mov eax,[esp+0x4]
	   xor ecx,ecx
	   mov cx,[eax+0x14]
	   xor cx,0xCE43
	   push ecx
	   xor ecx,ecx
	   mov cl,[eax+0x16]
	   xor cl,0x1F
	   push ecx
	   mov eax,0x00676AB0
	   call eax
       add esp,0x8
	   push eax
	   push 0x1
	   call ShowTextInfo
	   // Check Bo Kho
       mov eax,[esp+0x4]
	   xor ecx,ecx
	   mov cx,[eax+0x14]
	   xor cx,0xCE43
	   push ecx
	   xor ecx,ecx
	   mov cl,[eax+0x16]
	   xor cl,0x1F
	   push ecx
	   mov eax,0x006779D0
	   call eax
       add esp,0x8
	   push eax
	   push 0x2
	   call ShowTextInfo
	   // Check Mua Ban
       mov eax,[esp+0x4]
	   xor ecx,ecx
	   mov cx,[eax+0x14]
	   xor cx,0xCE43
	   push ecx
	   xor ecx,ecx
	   mov cl,[eax+0x16]
	   xor cl,0x1F
	   push ecx
	   mov eax,0x00676F40
	   call eax
       add esp,0x8
	   push eax
	   push 0x3
	   call ShowTextInfo
	   ret 0x4

	   Default:
	   //
	   popad
	   mov eax,[esi+0x0000020C]
	   push 0x004D7EE9
	   ret

	   ShowTextInfo:
	   mov eax,[esp+0x4]
	   cmp eax,0x1
	   jnz CheckBoKhoUser
	   // Check Giao Dich
		xor eax,eax
        mov al,[esp+0x8]
		cmp eax,0x1
		jnz CoTheGiaoDich
		ret 0x8

		CoTheGiaoDich:
		push 1
		mov eax,[esi+0x18]
		add eax,0x15
		push eax
		mov eax,[esi+0x14]
		add eax,0x3C
		push eax
		mov eax,[esp+0x3C]
		push eax
		call Show3DongThongTin
		ret 0x8

		CheckBoKhoUser:
		cmp eax,0x2
		jnz CheckMuaBanUser
	    // Check Bo Kho
		xor eax,eax
		mov al,[esp+0x8]
		cmp eax,0x1
		jnz CoTheBoKho
		ret 0x8

		CoTheBoKho:
        push 1
		mov eax,[esi+0x18]
		add eax,0x29
		push eax
		mov eax,[esi+0x14]
		add eax,0x3C
		push eax
		mov eax,[esp+0x3C]
		push eax
		call Show3DongThongTin
		ret 0x8

	    CheckMuaBanUser:
	   // Check Mua Ban
        xor eax,eax
		mov al,[esp+0x8]
		cmp eax,0x1
		jnz CoTheMuaBan
		ret 0x8

		CoTheMuaBan:
        push 1
		mov eax,[esi+0x18]
		add eax,0x3D
		push eax
		mov eax,[esi+0x14]
		add eax,0x3C
		push eax
		mov eax,[esp+0x3C]
		push eax
		call Show3DongThongTin
		ret 0x8

	   Show3DongThongTin:
	   mov eax,[esp+0x10]
	   cmp eax,1
	   jz HienThiTick
       push 4108
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
	   mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0
	   mov  DWORD PTR SS : [ecx + 0xA0] , 59
	   mov  DWORD PTR SS : [ecx + 0x98] , 0
	   mov  DWORD PTR SS : [ecx + 0xA4] , 58
	   jmp ProcessShowNut

	   HienThiTick:
       push 4108
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
	   mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0
	   mov  DWORD PTR SS : [ecx + 0xA0] , 229
	   mov  DWORD PTR SS : [ecx + 0x98] , 217
	   mov  DWORD PTR SS : [ecx + 0xA4] , 12

	   ProcessShowNut:
	   push 0xFF7F0000
	   push 5188
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,[esp+0x14]
	   mov edx,[esp+0x10]
	   push ecx
	   push edx
	   mov ecx, [esp+0x14]
	   mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
	   call eax
	   mov ecx,[esp+0x4]
	   push 0x1732CC8
	   mov eax, 0x7B9850
	   call eax //Draw1
	   ret 0x10


	   AddOptionImage:
	   sub esp,0x4
	   xor ecx,ecx
	   mov [esp],ecx
	   BackGetOptionImage:
	   mov ecx,[esp]
	   mov eax, 0x010CC088
	   mov edx,[eax+ecx]
	   mov eax,[esp+0x8]
	   mov [eax+ecx],edx
	   add ecx,4
	   mov [esp],ecx
	   cmp ecx,0xB8
	   jl BackGetOptionImage
	   add esp,0x4
	   ret 0x4

	}
}
__declspec(naked)void ShowAccessory1()  //004D8454
{
	__asm
	{
    	nop
	   nop
	   nop
	   nop
	   nop
	   pushad
       mov ecx,[eax]
	   test ecx,ecx
       jnz DaCoThongTin
	   push eax
	   call AddOptionImage
	   DaCoThongTin:
	   mov ecx,[esi+0x20C]
	   cmp ecx,0x1
	   jz ShowItemClothInInventory
	   cmp ecx,0x2
	   jz ShowItemClothInInventory
	   cmp ecx,0x6 //Giao Dich Doi Phuong
	   jz ShowItemTradeAnotherUser
	   cmp ecx,0x7 //Giao Dich Local User
	   jz ShowItemTradeUser
	   cmp ecx,0xA //Shop
	   jz ShowItemInShopUser
       cmp ecx,0x10//Shop
	   jz ShowItemUserWear
	   jmp Default

	   ShowItemUserWear:
	   mov eax,[esi+0x0000583C]
       mov edx,[esi+0x00005B04]
	   lea ecx,[eax+eax*0x8]
	   shl ecx,0x4
       lea eax,[ecx+edx+0x000005CC]
	   push eax
       call ProcessShowInfo
	   jmp Default

	   ShowItemTradeAnotherUser:
	   mov eax,[esi+0x0000583C]
	   lea ecx,[eax+eax*0x8]
	   lea edx,[eax+ecx*0x2]
	   mov eax,[esi+0x00005AE4]
	   lea ecx,[eax+edx*0x8+0x00000240]
	   push ecx
	   call ProcessShowInfo
	   jmp Default

	   ShowItemTradeUser:
	   mov eax,[esi+0x0000583C]
	   lea ecx,[eax+eax*0x8]
	   lea edx,[eax+ecx*0x2]
	   mov eax,[esi+0x00005AE4]
	   lea ecx,[eax+edx*0x8+0x00000834]
	   push ecx
	   call ProcessShowInfo
	   jmp Default

	   ShowItemInShopUser:
	   mov eax,[esi+0x0000583C]
	   lea ecx,[eax+eax*0x8]
	   lea edx,[eax+ecx*0x2]
	   mov eax,[esi+0x00005AFC]
	   lea ecx,[eax+edx*0x8+0x000002CC]
	   push ecx
	   call ProcessShowInfo
	   jmp Default

	   ShowItemClothInInventory:
       xor eax,eax
	   mov eax,[esi+0x5840]
	   test eax,eax
	   jz Default
       xor eax,eax
	   mov eax,[esi+0x583C]
	   cmp eax,0x0
	   jb Default
       cmp eax,0x96
	   ja Default
       mov eax,[esi+0x583C]
	   imul eax,0x90
       xor edx,edx
	   lea edx,[eax+0x1107258+0x22DC8]
	   push edx
	   call ProcessShowInfo
	   jmp Default

	   ProcessShowInfo:
	   // Check Giao Dich
       push 0
	   mov eax,[esi+0x18]
	   add eax,0x13
	   push eax
	   mov eax,[esi+0x14]
	   add eax,0xE
	   push eax
	   mov eax,[esp+0x30]
       push eax
	   call Show3DongThongTin
	   //
       mov eax,[esp+0x4]
	   xor ecx,ecx
	   mov cx,[eax+0x14]
	   xor cx,0xCE43
	   push ecx
	   xor ecx,ecx
	   mov cl,[eax+0x16]
	   xor cl,0x1F
	   push ecx
	   mov eax,0x00676AB0
	   call eax
       add esp,0x8
	   push eax
	   push 0x1
	   call ShowTextInfo
	   // Check Bo Kho
       mov eax,[esp+0x4]
	   xor ecx,ecx
	   mov cx,[eax+0x14]
	   xor cx,0xCE43
	   push ecx
	   xor ecx,ecx
	   mov cl,[eax+0x16]
	   xor cl,0x1F
	   push ecx
	   mov eax,0x006779D0
	   call eax
       add esp,0x8
	   push eax
	   push 0x2
	   call ShowTextInfo
	   // Check Mua Ban
       mov eax,[esp+0x4]
	   xor ecx,ecx
	   mov cx,[eax+0x14]
	   xor cx,0xCE43
	   push ecx
	   xor ecx,ecx
	   mov cl,[eax+0x16]
	   xor cl,0x1F
	   push ecx
	   mov eax,0x00676F40
	   call eax
       add esp,0x8
	   push eax
	   push 0x3
	   call ShowTextInfo
	   ret 0x4

	   Default:
	   //
	   popad
	   mov ecx,DWORD PTR SS:[0x01733AC4]
	   push 0x004D845A
	   ret

	   ShowTextInfo:
	   mov eax,[esp+0x4]
	   cmp eax,0x1
	   jnz CheckBoKhoUser
	   // Check Giao Dich
		xor eax,eax
        mov al,[esp+0x8]
		cmp eax,0x1
		jnz CoTheGiaoDich
		ret 0x8

		CoTheGiaoDich:
		push 1
		mov eax,[esi+0x18]
		add eax,0x15
		push eax
		mov eax,[esi+0x14]
		add eax,0x3C
		push eax
		mov eax,[esp+0x3C]
		push eax
		call Show3DongThongTin
		ret 0x8

		CheckBoKhoUser:
		cmp eax,0x2
		jnz CheckMuaBanUser
	    // Check Bo Kho
		xor eax,eax
		mov al,[esp+0x8]
		cmp eax,0x1
		jnz CoTheBoKho
		ret 0x8

		CoTheBoKho:
        push 1
		mov eax,[esi+0x18]
		add eax,0x29
		push eax
		mov eax,[esi+0x14]
		add eax,0x3C
		push eax
		mov eax,[esp+0x3C]
		push eax
		call Show3DongThongTin
		ret 0x8

	    CheckMuaBanUser:
	   // Check Mua Ban
        xor eax,eax
		mov al,[esp+0x8]
		cmp eax,0x1
		jnz CoTheMuaBan
		ret 0x8

		CoTheMuaBan:
        push 1
		mov eax,[esi+0x18]
		add eax,0x3D
		push eax
		mov eax,[esi+0x14]
		add eax,0x3C
		push eax
		mov eax,[esp+0x3C]
		push eax
		call Show3DongThongTin
		ret 0x8

	   Show3DongThongTin:
	   mov eax,[esp+0x10]
	   cmp eax,1
	   jz HienThiTick
       push 4108
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
	   mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0
	   mov  DWORD PTR SS : [ecx + 0xA0] , 59
	   mov  DWORD PTR SS : [ecx + 0x98] , 0
	   mov  DWORD PTR SS : [ecx + 0xA4] , 58
	   jmp ProcessShowNut

	   HienThiTick:
       push 4108
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
	   mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0
	   mov  DWORD PTR SS : [ecx + 0xA0] , 229
	   mov  DWORD PTR SS : [ecx + 0x98] , 217
	   mov  DWORD PTR SS : [ecx + 0xA4] , 12

	   ProcessShowNut:
	   push 0xFF7F0000
	   push 5188
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,[esp+0x14]
	   mov edx,[esp+0x10]
	   push ecx
	   push edx
	   mov ecx, [esp+0x14]
	   mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
	   call eax
	   mov ecx,[esp+0x4]
	   push 0x1732CC8
	   mov eax, 0x7B9850
	   call eax //Draw1
	   ret 0x10


	   AddOptionImage:
	   sub esp,0x4
	   xor ecx,ecx
	   mov [esp],ecx
	   BackGetOptionImage:
	   mov ecx,[esp]
	   mov eax, 0x010CC088
	   mov edx,[eax+ecx]
	   mov eax,[esp+0x8]
	   mov [eax+ecx],edx
	   add ecx,4
	   mov [esp],ecx
	   cmp ecx,0xB8
	   jl BackGetOptionImage
	   add esp,0x4
	   ret 0x4
	}
}
__declspec(naked)void ShowLife1()  //004D8DC5
{
	__asm
	{
		nop
	   nop
	   nop
	   nop
	   nop
	   pushad
       mov ecx,[eax]
	   test ecx,ecx
       jnz DaCoThongTin
	   push eax
	   call AddOptionImage
       DaCoThongTin:
	   mov ecx,[esi+0x20C]
	   cmp ecx,0x1
	   jz ShowItemClothInInventory
	   cmp ecx,0x2
	   jz ShowItemClothInInventory
	   cmp ecx,0x6 //Giao Dich Doi Phuong
	   jz ShowItemTradeAnotherUser
	   cmp ecx,0x7 //Giao Dich Local User
	   jz ShowItemTradeUser
	   cmp ecx,0xA //Shop
	   jz ShowItemInShopUser
       cmp ecx,0x10//Shop
	   jz ShowItemUserWear
	   jmp Default

	   ShowItemUserWear:
	   mov eax,[esi+0x0000583C]
       mov edx,[esi+0x00005B04]
	   lea ecx,[eax+eax*0x8]
	   shl ecx,0x4
       lea eax,[ecx+edx+0x000005CC]
	   push eax
       call ProcessShowInfo
	   jmp Default

	   ShowItemTradeAnotherUser:
	   mov eax,[esi+0x0000583C]
	   lea ecx,[eax+eax*0x8]
	   lea edx,[eax+ecx*0x2]
	   mov eax,[esi+0x00005AE4]
	   lea ecx,[eax+edx*0x8+0x00000240]
	   push ecx
	   call ProcessShowInfo
	   jmp Default

	   ShowItemTradeUser:
	   mov eax,[esi+0x0000583C]
	   lea ecx,[eax+eax*0x8]
	   lea edx,[eax+ecx*0x2]
	   mov eax,[esi+0x00005AE4]
	   lea ecx,[eax+edx*0x8+0x00000834]
	   push ecx
	   call ProcessShowInfo
	   jmp Default

	   ShowItemInShopUser:
	   mov eax,[esi+0x0000583C]
	   lea ecx,[eax+eax*0x8]
	   lea edx,[eax+ecx*0x2]
	   mov eax,[esi+0x00005AFC]
	   lea ecx,[eax+edx*0x8+0x000002CC]
	   push ecx
	   call ProcessShowInfo
	   jmp Default

	   ShowItemClothInInventory:
       xor eax,eax
	   mov eax,[esi+0x5840]
	   test eax,eax
	   jz Default
       xor eax,eax
	   mov eax,[esi+0x583C]
	   cmp eax,0x0
	   jb Default
       cmp eax,0x96
	   ja Default
       mov eax,[esi+0x583C]
	   imul eax,0x90
       xor edx,edx
	   lea edx,[eax+0x1107258+0x22DC8]
	   push edx
	   call ProcessShowInfo
	   jmp Default

	   ProcessShowInfo:
	   // Check Giao Dich
       push 0
	   mov eax,[esi+0x18]
	   add eax,0x13
	   push eax
	   mov eax,[esi+0x14]
	   add eax,0xE
	   push eax
	   mov eax,[esp+0x30]
       push eax
	   call Show3DongThongTin
	   //
       mov eax,[esp+0x4]
	   xor ecx,ecx
	   mov cx,[eax+0x14]
	   xor cx,0xCE43
	   push ecx
	   xor ecx,ecx
	   mov cl,[eax+0x16]
	   xor cl,0x1F
	   push ecx
	   mov eax,0x00676AB0
	   call eax
       add esp,0x8
	   push eax
	   push 0x1
	   call ShowTextInfo
	   // Check Bo Kho
       mov eax,[esp+0x4]
	   xor ecx,ecx
	   mov cx,[eax+0x14]
	   xor cx,0xCE43
	   push ecx
	   xor ecx,ecx
	   mov cl,[eax+0x16]
	   xor cl,0x1F
	   push ecx
	   mov eax,0x006779D0
	   call eax
       add esp,0x8
	   push eax
	   push 0x2
	   call ShowTextInfo
	   // Check Mua Ban
       mov eax,[esp+0x4]
	   xor ecx,ecx
	   mov cx,[eax+0x14]
	   xor cx,0xCE43
	   push ecx
	   xor ecx,ecx
	   mov cl,[eax+0x16]
	   xor cl,0x1F
	   push ecx
	   mov eax,0x00676F40
	   call eax
       add esp,0x8
	   push eax
	   push 0x3
	   call ShowTextInfo
	   ret 0x4

	   Default:
	   //
	   popad
	   mov eax,[esi+0x0000020C]
	   push 0x004D8DCB
	   ret

	   ShowTextInfo:
	   mov eax,[esp+0x4]
	   cmp eax,0x1
	   jnz CheckBoKhoUser
	   // Check Giao Dich
		xor eax,eax
        mov al,[esp+0x8]
		cmp eax,0x1
		jnz CoTheGiaoDich
		ret 0x8

		CoTheGiaoDich:
		push 1
		mov eax,[esi+0x18]
		add eax,0x15
		push eax
		mov eax,[esi+0x14]
		add eax,0x3C
		push eax
		mov eax,[esp+0x3C]
		push eax
		call Show3DongThongTin
		ret 0x8

		CheckBoKhoUser:
		cmp eax,0x2
		jnz CheckMuaBanUser
	    // Check Bo Kho
		xor eax,eax
		mov al,[esp+0x8]
		cmp eax,0x1
		jnz CoTheBoKho
		ret 0x8

		CoTheBoKho:
        push 1
		mov eax,[esi+0x18]
		add eax,0x29
		push eax
		mov eax,[esi+0x14]
		add eax,0x3C
		push eax
		mov eax,[esp+0x3C]
		push eax
		call Show3DongThongTin
		ret 0x8

	    CheckMuaBanUser:
	   // Check Mua Ban
        xor eax,eax
		mov al,[esp+0x8]
		cmp eax,0x1
		jnz CoTheMuaBan
		ret 0x8

		CoTheMuaBan:
        push 1
		mov eax,[esi+0x18]
		add eax,0x3D
		push eax
		mov eax,[esi+0x14]
		add eax,0x3C
		push eax
		mov eax,[esp+0x3C]
		push eax
		call Show3DongThongTin
		ret 0x8

	   Show3DongThongTin:
	   mov eax,[esp+0x10]
	   cmp eax,1
	   jz HienThiTick
       push 4108
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
	   mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0
	   mov  DWORD PTR SS : [ecx + 0xA0] , 59
	   mov  DWORD PTR SS : [ecx + 0x98] , 0
	   mov  DWORD PTR SS : [ecx + 0xA4] , 58
	   jmp ProcessShowNut

	   HienThiTick:
       push 4108
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
	   mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0
	   mov  DWORD PTR SS : [ecx + 0xA0] , 229
	   mov  DWORD PTR SS : [ecx + 0x98] , 217
	   mov  DWORD PTR SS : [ecx + 0xA4] , 12

	   ProcessShowNut:
	   push 0xFF7F0000
	   push 5188
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,[esp+0x14]
	   mov edx,[esp+0x10]
	   push ecx
	   push edx
	   mov ecx, [esp+0x14]
	   mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
	   call eax
	   mov ecx,[esp+0x4]
	   push 0x1732CC8
	   mov eax, 0x7B9850
	   call eax //Draw1
	   ret 0x10


	   AddOptionImage:
	   sub esp,0x4
	   xor ecx,ecx
	   mov [esp],ecx
	   BackGetOptionImage:
	   mov ecx,[esp]
	   mov eax, 0x010CC088
	   mov edx,[eax+ecx]
	   mov eax,[esp+0x8]
	   mov [eax+ecx],edx
	   add ecx,4
	   mov [esp],ecx
	   cmp ecx,0xB8
	   jl BackGetOptionImage
	   add esp,0x4
	   ret 0x4
	}
}
__declspec(naked)void ShowSocket1()  //004D8EA0
{
	__asm
	{
		nop
	   nop
	   nop
	   nop
	   nop
	   pushad
       mov ecx,[eax]
	   test ecx,ecx
       jnz DaCoThongTin
	   push eax
	   call AddOptionImage
	   DaCoThongTin:
	   mov ecx,[esi+0x20C]
	   cmp ecx,0x1
	   jz ShowItemClothInInventory
	   cmp ecx,0x2
	   jz ShowItemClothInInventory
	   cmp ecx,0x6 //Giao Dich Doi Phuong
	   jz ShowItemTradeAnotherUser
	   cmp ecx,0x7 //Giao Dich Local User
	   jz ShowItemTradeUser
	   cmp ecx,0xA //Shop
	   jz ShowItemInShopUser
       cmp ecx,0x10//Shop
	   jz ShowItemUserWear
	   jmp Default

	   ShowItemUserWear:
	   mov eax,[esi+0x0000583C]
       mov edx,[esi+0x00005B04]
	   lea ecx,[eax+eax*0x8]
	   shl ecx,0x4
       lea eax,[ecx+edx+0x000005CC]
	   push eax
       call ProcessShowInfo
	   jmp Default

	   ShowItemTradeAnotherUser:
	   mov eax,[esi+0x0000583C]
	   lea ecx,[eax+eax*0x8]
	   lea edx,[eax+ecx*0x2]
	   mov eax,[esi+0x00005AE4]
	   lea ecx,[eax+edx*0x8+0x00000240]
	   push ecx
	   call ProcessShowInfo
	   jmp Default

	   ShowItemTradeUser:
	   mov eax,[esi+0x0000583C]
	   lea ecx,[eax+eax*0x8]
	   lea edx,[eax+ecx*0x2]
	   mov eax,[esi+0x00005AE4]
	   lea ecx,[eax+edx*0x8+0x00000834]
	   push ecx
	   call ProcessShowInfo
	   jmp Default

	   ShowItemInShopUser:
	   mov eax,[esi+0x0000583C]
	   lea ecx,[eax+eax*0x8]
	   lea edx,[eax+ecx*0x2]
	   mov eax,[esi+0x00005AFC]
	   lea ecx,[eax+edx*0x8+0x000002CC]
	   push ecx
	   call ProcessShowInfo
	   jmp Default

	   ShowItemClothInInventory:
       xor eax,eax
	   mov eax,[esi+0x5840]
	   test eax,eax
	   jz Default
       xor eax,eax
	   mov eax,[esi+0x583C]
	   cmp eax,0x0
	   jb Default
       cmp eax,0x96
	   ja Default
       mov eax,[esi+0x583C]
	   imul eax,0x90
       xor edx,edx
	   lea edx,[eax+0x1107258+0x22DC8]
	   push edx
	   call ProcessShowInfo
	   jmp Default

	   ProcessShowInfo:
	   // Check Giao Dich
       push 0
	   mov eax,[esi+0x18]
	   add eax,0x13
	   push eax
	   mov eax,[esi+0x14]
	   add eax,0xE
	   push eax
	   mov eax,[esp+0x30]
       push eax
	   call Show3DongThongTin
	   //
       mov eax,[esp+0x4]
	   xor ecx,ecx
	   mov cx,[eax+0x14]
	   xor cx,0xCE43
	   push ecx
	   xor ecx,ecx
	   mov cl,[eax+0x16]
	   xor cl,0x1F
	   push ecx
	   mov eax,0x00676AB0
	   call eax
       add esp,0x8
	   push eax
	   push 0x1
	   call ShowTextInfo
	   // Check Bo Kho
       mov eax,[esp+0x4]
	   xor ecx,ecx
	   mov cx,[eax+0x14]
	   xor cx,0xCE43
	   push ecx
	   xor ecx,ecx
	   mov cl,[eax+0x16]
	   xor cl,0x1F
	   push ecx
	   mov eax,0x006779D0
	   call eax
       add esp,0x8
	   push eax
	   push 0x2
	   call ShowTextInfo
	   // Check Mua Ban
       mov eax,[esp+0x4]
	   xor ecx,ecx
	   mov cx,[eax+0x14]
	   xor cx,0xCE43
	   push ecx
	   xor ecx,ecx
	   mov cl,[eax+0x16]
	   xor cl,0x1F
	   push ecx
	   mov eax,0x00676F40
	   call eax
       add esp,0x8
	   push eax
	   push 0x3
	   call ShowTextInfo
	   ret 0x4

	   Default:
	   //
	   popad
	   mov ecx,DWORD PTR SS:[0x01733AC4]
	   push 0x004D8EA6
	   ret

	   ShowTextInfo:
	   mov eax,[esp+0x4]
	   cmp eax,0x1
	   jnz CheckBoKhoUser
	   // Check Giao Dich
		xor eax,eax
        mov al,[esp+0x8]
		cmp eax,0x1
		jnz CoTheGiaoDich
		ret 0x8

		CoTheGiaoDich:
		push 1
		mov eax,[esi+0x18]
		add eax,0x15
		push eax
		mov eax,[esi+0x14]
		add eax,0x3C
		push eax
		mov eax,[esp+0x3C]
		push eax
		call Show3DongThongTin
		ret 0x8

		CheckBoKhoUser:
		cmp eax,0x2
		jnz CheckMuaBanUser
	    // Check Bo Kho
		xor eax,eax
		mov al,[esp+0x8]
		cmp eax,0x1
		jnz CoTheBoKho
		ret 0x8

		CoTheBoKho:
        push 1
		mov eax,[esi+0x18]
		add eax,0x29
		push eax
		mov eax,[esi+0x14]
		add eax,0x3C
		push eax
		mov eax,[esp+0x3C]
		push eax
		call Show3DongThongTin
		ret 0x8

	    CheckMuaBanUser:
	   // Check Mua Ban
        xor eax,eax
		mov al,[esp+0x8]
		cmp eax,0x1
		jnz CoTheMuaBan
		ret 0x8

		CoTheMuaBan:
        push 1
		mov eax,[esi+0x18]
		add eax,0x3D
		push eax
		mov eax,[esi+0x14]
		add eax,0x3C
		push eax
		mov eax,[esp+0x3C]
		push eax
		call Show3DongThongTin
		ret 0x8

	   Show3DongThongTin:
	   mov eax,[esp+0x10]
	   cmp eax,1
	   jz HienThiTick
       push 4108
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
	   mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0
	   mov  DWORD PTR SS : [ecx + 0xA0] , 59
	   mov  DWORD PTR SS : [ecx + 0x98] , 0
	   mov  DWORD PTR SS : [ecx + 0xA4] , 58
	   jmp ProcessShowNut

	   HienThiTick:
       push 4108
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
	   mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0
	   mov  DWORD PTR SS : [ecx + 0xA0] , 229
	   mov  DWORD PTR SS : [ecx + 0x98] , 217
	   mov  DWORD PTR SS : [ecx + 0xA4] , 12

	   ProcessShowNut:
	   push 0xFF7F0000
	   push 5188
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,[esp+0x14]
	   mov edx,[esp+0x10]
	   push ecx
	   push edx
	   mov ecx, [esp+0x14]
	   mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
	   call eax
	   mov ecx,[esp+0x4]
	   push 0x1732CC8
	   mov eax, 0x7B9850
	   call eax //Draw1
	   ret 0x10


	   AddOptionImage:
	   sub esp,0x4
	   xor ecx,ecx
	   mov [esp],ecx
	   BackGetOptionImage:
	   mov ecx,[esp]
	   mov eax, 0x010CC088
	   mov edx,[eax+ecx]
	   mov eax,[esp+0x8]
	   mov [eax+ecx],edx
	   add ecx,4
	   mov [esp],ecx
	   cmp ecx,0xB8
	   jl BackGetOptionImage
	   add esp,0x4
	   ret 0x4
	}
}
__declspec(naked)void DrawResource()  //004FCFFA
{
	__asm
	{
	  mov eax,[ebx+0x10]
	  test eax,eax
      jz Default
	  mov eax,[ebx+0x3C4]
	  cmp eax,0xFFFFFFFF
	  jz Default
	  mov eax,[ebx+0x3D0]
	  cmp eax,0x1
	  jnz KiemTraTinhNangKhac
	  // Thu Thap
	  push 0x2836
	  mov ecx,0x017323A8
	  mov eax,0x007D8550
	  call eax
	  push eax
	  mov ecx,[eax+0x10]
	  test ecx,ecx
	  jnz DaChay1LanResource
	  ReloadResource:
      mov eax,[esp]
	  push 0x1
	  mov ecx,[ebx+0x3C4]
      mov [eax+0x2E0],ecx
	  mov ecx,[esp+0x4]
	  mov eax,0x530C90
	  call eax
	  mov ecx,[esp]
	  mov eax,0x530D70
	  call eax
      KhongCanLoadLaiResource:
	  mov ecx,[esp]
	  push 0x01732CC8
	  mov eax,[ecx]
	  call dword ptr [eax+0x24]
	  mov eax,[esp]
	  mov DWORD PTR [eax+0x10],0x1
	  mov ecx,[eax+0x2D0]
      mov DWORD PTR SS:[ecx+0x10],0x0
	  pop eax
	  jmp Default

      KiemTraTinhNangKhac:
      cmp eax,0x2
	  jnz Default
      //Ket Hop
      push 0x28AA
	  mov ecx,0x017323A8
	  mov eax,0x007D8550
	  call eax
	  push eax
	  mov ecx,[eax+0x10]
	  test ecx,ecx
	  jnz DaChay1LanCombine
	  ReloadCombine:
      mov eax,[esp]
	  push 0x1
	  mov ecx,[ebx+0x3C4]
      mov [eax+0x2E4],ecx
	  mov ecx,[esp+0x4]
	  mov eax,0x5DEC90
	  call eax
	  mov ecx,[esp]
	  mov eax,0x5DED20
	  call eax
      KhongCanLoadLaiCombine:
	  mov ecx,[esp]
	  push 0x01732CC8
	  mov eax,[ecx]
	  call dword ptr [eax+0x24]
	  mov eax,[esp]
	  mov DWORD PTR [eax+0x10],0x1
	  mov ecx,[eax+0x2D8]
      mov DWORD PTR SS:[ecx+0x10],0x0
	  pop eax
	  jmp Default

	  Default:
      mov eax,[esp+0x0000033C]
	  push 0x004FD001
	  ret

	  DaChay1LanResource:
	  mov ecx,[eax+0x2E0]
	  mov eax,[ebx+0x3C4]
	  cmp eax,ecx
	  jz KhongCanLoadLaiResource
	  jmp ReloadResource


      DaChay1LanCombine:
	  mov ecx,[eax+0x2E4]
	  mov eax,[ebx+0x3C4]
	  cmp eax,ecx
	  jz KhongCanLoadLaiCombine
	  jmp ReloadCombine
	}
}
__declspec(naked)void KhoiPhucNutGiaoDich()  //005D9CF3
{
	__asm
	{
	  mov eax,0x006B3170
	  call eax
	  push 0x2836
	  mov ecx,0x017323A8
	  mov eax,0x007D8550
	  call eax
	  mov ecx,[eax+0x2CC]
	  mov DWORD PTR [ecx+0xC],0x1
	  mov DWORD PTR [ecx+0x3C],0x1
	  push 0x005D9CF8
	  ret
	}
}
__declspec(naked)void TatBangResource()  //0053045F
{
	__asm
	{
      pushad
	  mov eax,DWORD PTR SS :[0x0161589C]
	  test eax,eax
	  jnz Default
	  push 0x275A
      mov ecx,0x017323A8
	  mov eax,0x007D8550
	  call eax
	  test eax,eax
	  jz TatBang
      mov ecx,[eax+0x10]
	  test ecx,ecx
      jz TatBang
	  mov ecx,[eax+0x36C]
	  test ecx,ecx
	  jz TatBang
	  mov eax,[ecx+0x10]
	  cmp eax,0x1
	  jnz TatBang
	  mov eax,[ecx+0x3D0]
	  cmp eax,0x1
      jnz TatBang
	  mov eax,[ecx+0x3C4]
	  cmp eax,0xFFFFFFFF
	  jz TatBang
	  Default:
      popad
	  mov eax,[esi+0x000002E0]
	  push 0x00530465
	  ret

	  TatBang:
      popad
	  mov DWORD PTR [esi+0x10],0x0
	  push 0x0053068D
	  ret

	}
}
__declspec(naked)void TatBangCombine()  //005DE1A3
{
	__asm
	{
      pushad
	  mov eax,DWORD PTR SS :[0x0161589C]
	  test eax,eax
	  jnz Default
	  push 0x275A
	  mov ecx,0x017323A8
	  mov eax,0x007D8550
	  call eax
	  test eax,eax
	  jz TatBangCombineIngame
	  mov ecx,[eax+0x10]
      test ecx,ecx
	  jz TatBangCombineIngame
	  mov ecx,[eax+0x36C]
	  test ecx,ecx
	  jz TatBangCombineIngame
	  mov eax,[ecx+0x10]
	  test eax,eax
	  jz TatBangCombineIngame
	  mov eax,[ecx+0x3D0]
	  cmp eax,0x2
	  jnz TatBangCombineIngame
	  mov eax,[ecx+0x3C4]
	  cmp eax,0xFFFFFFFF
      jz TatBangCombineIngame
	  Default:
	  popad
	  mov edx,DWORD PTR [0x010D8FE4]
	  push 0x005DE1A9
	  ret

	  TatBangCombineIngame:
      popad
	  mov DWORD PTR [esi+0x10],0x0
	  push 0x005DE611
	  ret

	}
}
__declspec(naked)void OptRiengCuaVuKhiClass()  //004D5482
{
	__asm
	{
      nop
	  nop
	  nop
	  nop
	  nop
	  push eax
      mov ecx,[esi+0x20C]
	  cmp ecx,0x1
	  jnz DefaultnotLoadMore
      xor eax,eax
	  mov eax,[esi+0x5840]
	  test eax,eax
	  jz DefaultnotLoadMore
	  mov eax,[esi+0x583C]
	  cmp eax,0x0
	  jb DefaultnotLoadMore
	  cmp eax,0x96
	  ja DefaultnotLoadMore
	  cmp eax,0xA
	  jz DangMacTrangBi
	  mov eax,[esi+0x228]
	  push eax
	  push 0x0
	  mov eax,[esp+0x8]
	  push eax
	  call ShowTextNewOptWeapon
	  call DrawKhung
      jmp Default

	  ShowTextNewOptWeapon:
	  
	  //Can Chien
      push 0x1616
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push 0xD
	  push eax
	  mov eax,[esp+0xC]
	  push eax
	  mov eax,0x00848162
	  call eax
	  add esp,0xC
	  mov eax,[esp+0x8]
	  cmp eax,0x1
	  jnz KhongCoOptTanker
	  push 0xFF00F200
      mov ecx,DWORD PTR SS :[0x01733AC4]
	  mov eax,[ecx]
	  call dword ptr [eax+0xC]
	  push 0x2
	  push 0x1
	  push 0xB
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax  
	  push eax
	  push 0x100
	  mov eax,[esp+0x10]
	  lea eax,[eax+0xD]
	  push eax
	  mov eax,0x0085C538
	  call dword ptr [eax]
	  add esp,0x10
	  jmp ShowOptTanker
	  KhongCoOptTanker:
	  push 0xFF9F9F9F
      mov ecx,DWORD PTR SS :[0x01733AC4]
	  mov eax,[ecx]
	  call dword ptr [eax+0xC]
	  push 0x161A
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  push 0x100
	  mov eax,[esp+0xC]
	  lea eax,[eax+0xD]
	  push eax
	  mov eax,0x0085C538
	  call dword ptr [eax]
	  add esp,0xC
	  ShowOptTanker:
	  mov eax,[esp+0x4] 
	  push eax
	  call ShowStringInGame
	  //HoTro
	  push 0x1617
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push 0xA
	  push eax
	  mov eax,[esp+0xC]
	  push eax
	  mov eax,0x00848162
	  call eax
	  add esp,0xC
	  mov eax,[esp+0x8]
	  cmp eax,0x2
	  jnz KhongCoOptBuff
	  push 0xFF00F200
      mov ecx,DWORD PTR SS :[0x01733AC4]
	  mov eax,[ecx]
	  call dword ptr [eax+0xC]
	  push 0x12C
	  push 0xE3
	  push 0xB
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax  
	  push eax
	  push 0x100
	  mov eax,[esp+0x10]
	  lea eax,[eax+0xA]
	  push eax
	  mov eax,0x0085C538
	  call dword ptr [eax]
	  add esp,0x10
	  jmp ShowOptBuff
	  KhongCoOptBuff:
	  push 0xFF9F9F9F
      mov ecx,DWORD PTR SS :[0x01733AC4]
	  mov eax,[ecx]
	  call dword ptr [eax+0xC]
	  push 0x161A
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  push 0x100
	  mov eax,[esp+0xC]
	  lea eax,[eax+0xA]
	  push eax
	  mov eax,0x0085C538
	  call dword ptr [eax]
	  add esp,0xC
	  ShowOptBuff:
	  mov eax,[esp+0x4] 
	  push eax
	  call ShowStringInGame
	  //HoanHao
	  push 0x1618
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push 0xB
	  push eax
	  mov eax,[esp+0xC]
	  push eax
	  mov eax,0x00848162
	  call eax
	  add esp,0xC
	  mov eax,[esp+0x8]
	  cmp eax,0x3
	  jnz KhongCoOptHoanHao
	  push 0xFF00F200
      mov ecx,DWORD PTR SS :[0x01733AC4]
	  mov eax,[ecx]
	  call dword ptr [eax+0xC]
	  push 0x2
	  push 0x29
	  push 0xB
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax  
	  push eax
	  push 0x100
	  mov eax,[esp+0x10]
	  lea eax,[eax+0xB]
	  push eax
	  mov eax,0x0085C538
	  call dword ptr [eax]
	  add esp,0x10
	  jmp ShowOptHoanHao
	  KhongCoOptHoanHao:
	  push 0xFF9F9F9F
      mov ecx,DWORD PTR SS :[0x01733AC4]
	  mov eax,[ecx]
	  call dword ptr [eax+0xC]
	  push 0x161A
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  push 0x100
	  mov eax,[esp+0xC]
	  lea eax,[eax+0xB]
	  push eax
	  mov eax,0x0085C538
	  call dword ptr [eax]
	  add esp,0xC
	  ShowOptHoanHao:
	  mov eax,[esp+0x4] 
	  push eax
	  call ShowStringInGame
	  //Nuker
	  push 0x1619
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push 0xA
	  push eax
	  mov eax,[esp+0xC]
	  push eax
	  mov eax,0x00848162
	  call eax
	  add esp,0xC
	  mov eax,[esp+0x8]
	  cmp eax,0x4
	  jnz KhongCoOptNuker
	  push 0xFF00F200
      mov ecx,DWORD PTR SS :[0x01733AC4]
	  mov eax,[ecx]
	  call dword ptr [eax+0xC]
	  push 0x2
	  push 0x88
	  push 0xB
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax  
	  push eax
	  push 0x100
	  mov eax,[esp+0x10]
	  lea eax,[eax+0xA]
	  push eax
	  mov eax,0x0085C538
	  call dword ptr [eax]
	  add esp,0x10
	  jmp ShowOptNuker
	  KhongCoOptNuker:
	  push 0xFF9F9F9F
      mov ecx,DWORD PTR SS :[0x01733AC4]
	  mov eax,[ecx]
	  call dword ptr [eax+0xC]
	  push 0x161A
	  push 0x19
	  mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  push 0x100
	  mov eax,[esp+0xC]
	  lea eax,[eax+0xA]
	  push eax
	  mov eax,0x0085C538
	  call dword ptr [eax]
	  add esp,0xC
	  ShowOptNuker:
	  mov eax,[esp+0x4] 
	  push eax
	  call ShowStringInGame
	  ret 0x8


	  DangMacTrangBi:
	  mov eax,[esi+0x228]
	  push eax
	  xor eax,eax
	  mov al,[0x1107258+0x82B4]
	  xor al,0x1F
	  //push eax
	  push 0x0
	  mov eax,[esp+0x8]
	  push eax
	  call ShowTextNewOptWeapon
	  call DrawKhung
	  Default:
	  mov eax,0x1
	  mov ecx,DWORD PTR SS:[0x008970EC]
	  imul ecx,eax
	  add [esi+0x00000228],ecx
	  DefaultnotLoadMore:
      pop eax
	  lea ebx,[esi+0x00000F2C]
	  push 0x004D5488
	  ret

	  ShowStringInGame:
	  mov 	  ebx,[esp+0x4]
	  mov     eax, [esi+0x210]
	  mov     edi, [esi+0x18]
	  mov 	  ecx,DWORD PTR SS:[0x01733AC4]
	  push    0x3
	  sub     eax, 0x10
	  push    0x3F800000
	  push    eax
	  mov     eax, [esi+0x228]
	  mov     edx, [ecx]
	  add     eax, edi
	  add     eax,0x14
	  push    ebx
	  push    eax
	  mov     eax, [esi+0x14]
	  add     eax, 0xA
	  push    eax
	  call    dword ptr [edx+0x18]
	  mov     eax, [esi+0x210]
	  mov     ecx, DWORD PTR SS:[0x01733AC4]
	  sub     eax, 0x10
	  mov     edx, [ecx]
	  push    eax
	  push    ebx
	  call    dword ptr [edx+0x48]
	  mov ecx,DWORD PTR SS:[0x008970EC]
	  imul ecx,eax
	  add [esi+0x00000228],ecx
	  ret 0x4

	  DrawKhung:
	  mov ebp,[0x008970EC]
	  imul ebp,0x3
	  push 0xAAFFFFFF
	  push 0x0
	  mov ecx,[esi+0x00000228]
	  add ecx,0x14
	  mov edi,[esi+0x18]
	  add ecx,edi
	  push ecx
	  mov ecx,[esi+0x00000210]
	  mov eax,[esi+0x14]
	  lea eax,[eax+ecx-0x8]
	  push eax
	  mov ecx,[esp+0x14]
	  add ecx,edi
	  add ecx,0x11
      push ecx
	  mov ecx,[esi+0x00000210]
	  mov eax,[esi+0x14]
	  lea eax,[eax+ecx-0xF8]
      push eax
      fild    dword ptr [esp+0xC]
	  fstp    dword ptr [esp+0xC]
	  fild    dword ptr [esp+0x8]
	  fstp    dword ptr [esp+0x8]
	  fild    dword ptr [esp+0x4]
	  fstp    dword ptr [esp+0x4]
	  fild    dword ptr [esp]
	  fstp    dword ptr [esp]
	  mov eax,0x007C7880
	  call    eax
	  add esp,0x18
	  //Hien thi nen
	  push 0xFF000000
	  mov ecx,[esi+0x00000228]
	  add ecx,0x14
	  mov edi,[esi+0x18]
	  add ecx,edi
	  push ecx
	  mov ecx,[esi+0x00000210]
	  mov eax,[esi+0x14]
	  lea eax,[eax+ecx-0x8]
	  push eax
	  mov ecx,[esp+0x10]
	  add ecx,edi
	  add ecx,0x12
	  push ecx
	  mov ecx,[esi+0x00000210]
	  mov eax,[esi+0x14]
	  lea eax,[eax+ecx-0xF7]
      push eax
      fild    dword ptr [esp+0xC]
	  fstp    dword ptr [esp+0xC]
	  fild    dword ptr [esp+0x8]
	  fstp    dword ptr [esp+0x8]
	  fild    dword ptr [esp+0x4]
	  fstp    dword ptr [esp+0x4]
	  fild    dword ptr [esp]
	  fstp    dword ptr [esp]
	  mov eax,0x007C7BB0
	  call    eax
	  add esp,0x14
	  ret 0x4

	}
}
__declspec(naked) void LoadLanguageVNTest()   //007C2517
{
    __asm
	{
		nop
		nop
		nop
		nop
		nop
		pop edx
		lea edx,[esp+0x91C]
		push edx
		push eax
		call ProcessConvertCode
		lea ecx,[esp+0xDC]
		lea edx,[esp+0x91C]
		push ecx
		push edx
		call ConvertWtoB
		lea edx,[esp+0xDC]
		call GetCountNumberTextB
		test eax,eax
        jz KhongCoGiaTri
		add eax,0x1
        KhongCoGiaTri:
		push 0x007C253B
        ret


		ConvertWtoB:
		sub esp,0x8
		xor ecx,ecx
		mov [esp+0x4],ecx
		mov [esp],ecx
		BackConvertWtoB22:
		mov edx,[esp+0xC]
		xor eax,eax
		mov ax,[edx+ecx]
		test eax,eax
        jz EndFuncConvertWtoB22
		cmp eax,0xFF
		ja HaiByte
        mov edx,[esp+0x10]
        mov ecx,[esp+0x4]
		mov [edx+ecx],al
		add ecx,0x1
		mov [esp+0x4],ecx
        Jmp CheckNextCodeText22
		HaiByte:
		mov edx,[esp+0x10]
        mov ecx,[esp+0x4]
		mov [edx+ecx],ax
		add ecx,0x2
		mov [esp+0x4],ecx
		CheckNextCodeText22:
		mov ecx,[esp]
		add ecx,0x2
		mov [esp],ecx
		jmp BackConvertWtoB22
        EndFuncConvertWtoB22:
        add esp,0x8
        ret 0x8

		GetCountNumberTextB:
		xor ecx,ecx
		BackLoopCountTextB:
		xor ebx,ebx
		mov bl,[edx+ecx]
		test ebx,ebx
		jnz NextCountTextB
        mov eax,ecx
		ret

		NextCountTextB:
		add ecx,0x1
		jmp BackLoopCountTextB


		ProcessConvertCode:
		sub esp,0x4
		xor ecx,ecx
		mov [esp],ecx
        BackLoopConvertText:
		mov edx,[esp+0xC]
		xor eax,eax
		mov ax,[edx+ecx]
		test eax,eax
        jz CompleteConvertText
		push eax
		mov eax,[esp+0xC]
        push eax
		call GetTextConvert
		mov edx,[esp+0xC]
		mov ecx,[esp]
		mov [edx+ecx],ax
		CheckNextText:
		mov ecx,[esp]
		add ecx,0x2
		mov [esp],ecx
		jmp BackLoopConvertText
        CompleteConvertText:
		add esp,0x4
        ret 0x8

		GetTextConvert:
		xor ecx,ecx
        LoopBackCheckText:
		mov eax,[esp+0x8]
		mov edx,[esp+0x4]
        xor ebx,ebx
		mov bx,[edx+ecx+0x1B2]
		cmp eax,ebx
        jnz CheckNextTextConvert
		xor eax,eax
		mov ax,[edx+ecx+0x2]
        jmp EndFunCoonvet
		CheckNextTextConvert:
		add ecx,0x2
		cmp ecx,0x1AC
		jl LoopBackCheckText
		mov eax,[esp+0x8]
        EndFunCoonvet:
        ret 0x8
    }
}
__declspec(naked) void LoadLanguageVNTest2()   //007C254B
{
    __asm
	{
	   push 0x00891D1C
	   mov eax,0x7918E0
	   call eax
       add esp,0x4
	   mov ecx, [esp+0x14]
	   lea edi, [esp+0xE0]
	   push 0x007C2556
       ret
    }
}
__declspec(naked) void LoadLanguageVNTestPrint()   //007CF166
{
    __asm
	{
		nop
		nop
		nop
		nop
		nop
		pushad
		sub esp,0x8
		xor ecx,ecx
		mov [esp],ecx
        mov [esp+0x4],ecx
        BackConvertText:
		xor eax,eax
		mov al,[esi+ecx]
		test eax,eax
		jz Default
		test ecx,ecx
		jz KhongCanKiemTraLoi
		mov ecx,[esp]
		xor eax,eax
		mov al,[esi+ecx-0x1]
		test eax,eax
        jz Default
        KhongCanKiemTraLoi:
		xor eax,eax
		mov ecx,[esp]
		mov ax,[esi+ecx]
		push eax
		mov eax,[esp+0x28]
        push eax
        call GetASIIText
		test eax,eax
		jnz Byte2CodeConvert
		xor eax,eax
		mov ecx,[esp]
		mov al,[esi+ecx]
		push eax
		mov eax,[esp+0x28]
        push eax
        call GetASIIText
	  	test eax,eax
		jnz NextCvTextStep
		xor eax,eax
        mov ecx,[esp]
		mov al,[esi+ecx]
		NextCvTextStep:
		mov edi,0x01774788
		mov ecx,[esp+0x4]
        imul ecx,0x2
		mov [edi+ecx],ax
		mov ecx,[esp+0x4]
		add ecx,0x1
        mov [esp+0x4],ecx
		mov ecx,[esp]
		add ecx,0x1
		mov [esp],ecx
		jmp BackConvertText

		Default:
        add esp,0x8
		popad
		push 0x007CF18D
		ret

		Byte2CodeConvert:
		mov edi,0x01774788
		mov ecx,[esp+0x4]
        imul ecx,0x2
		mov [edi+ecx],ax
        mov ecx,[esp+0x4]
		add ecx,0x1
        mov [esp+0x4],ecx
		mov ecx,[esp]
		add ecx,0x2
		mov [esp],ecx
		jmp BackConvertText

		GetASIIText:
		sub esp,0x4
		xor ecx,ecx
		mov [esp],ecx
        LoopBackGetASII:
		mov eax,[esp+0xC]
		mov ebx,[esp+0x8]
		xor edx,edx
		mov dx,[ebx+ecx+0x2]
		cmp ax,dx
		jnz CheckGetASII
		xor edx,edx
		mov dx,[ebx+ecx+0x1B2]
        mov eax,edx
        add esp,0x4
		ret 0x8
		CheckGetASII:
		mov ecx,[esp]
		add ecx,0x2
		mov [esp],ecx
		cmp ecx,0x1AC
		jbe LoopBackGetASII
        mov eax,0x00
        add esp,0x4
		ret 0x8
    }
};
__declspec(naked)void FixKhoangCachText()  //007CDD0A
{
__asm
	{
		cmp ax,0x00C0
		jz KhongTangThemSpace
		cmp ax,0x00C1
		jz KhongTangThemSpace
		cmp ax,0x00C3
		jz KhongTangThemSpace
		cmp ax,0x00C4
		jz KhongTangThemSpace
		cmp ax,0x00C5
		jz KhongTangThemSpace
		cmp ax,0x00C6
		jz KhongTangThemSpace
		cmp ax,0x00C7
		jz KhongTangThemSpace
		cmp ax,0x00C8
		jz KhongTangThemSpace
		cmp ax,0x00C9
		jz KhongTangThemSpace
		cmp ax,0x00CB
		jz KhongTangThemSpace
		cmp ax,0x00CC
		jz KhongTangThemSpace
		cmp ax,0x00CD
		jz KhongTangThemSpace
		cmp ax,0x00CE
		jz KhongTangThemSpace
		cmp ax,0x00CF
		jz KhongTangThemSpace
		cmp ax,0x00D1
		jz KhongTangThemSpace
		cmp ax,0x00D2
		jz KhongTangThemSpace
		cmp ax,0x00D3
		jz KhongTangThemSpace
		cmp ax,0x00D5
		jz KhongTangThemSpace
		cmp ax,0x00D6
		jz KhongTangThemSpace
		cmp ax,0x00D7
		jz KhongTangThemSpace
		cmp ax,0x00D8
		jz KhongTangThemSpace
		cmp ax,0x00D9
		jz KhongTangThemSpace
		cmp ax,0x00DA
		jz KhongTangThemSpace
		cmp ax,0x00DB
		jz KhongTangThemSpace
		cmp ax,0x00DC
		jz KhongTangThemSpace
		cmp ax,0x00DD
		jz KhongTangThemSpace
		cmp ax,0x00DE
		jz KhongTangThemSpace
		cmp ax,0x00DF
		jz KhongTangThemSpace
		cmp ax,0x00E0
		jz KhongTangThemSpace
		cmp ax,0x00E1
		jz KhongTangThemSpace
		cmp ax,0x00E4
		jz KhongTangThemSpace
		cmp ax,0x00E5
		jz KhongTangThemSpace
		cmp ax,0x00E6
		jz KhongTangThemSpace
		cmp ax,0x00E7
		jz KhongTangThemSpace
		cmp ax,0x00E8
		jz KhongTangThemSpace
		cmp ax,0x00E9
		jz KhongTangThemSpace
		cmp ax,0x00EB
		jz KhongTangThemSpace
		cmp ax,0x00EC
		jz KhongTangThemSpace
		cmp ax,0x00ED
		jz KhongTangThemSpace
		cmp ax,0x00EE
		jz KhongTangThemSpace
		cmp ax,0x00EF
		jz KhongTangThemSpace
		cmp ax,0x00F0
		jz KhongTangThemSpace
		cmp ax,0x00F1
		jz KhongTangThemSpace
		cmp ax,0x00F2
		jz KhongTangThemSpace
		cmp ax,0x00F3
		jz KhongTangThemSpace
		cmp ax,0x00F6
		jz KhongTangThemSpace
		cmp ax,0x00F8
		jz KhongTangThemSpace
		cmp ax,0x00F9
		jz KhongTangThemSpace
		cmp ax,0x00FA
		jz KhongTangThemSpace
		cmp ax,0x00FB
		jz KhongTangThemSpace
		cmp ax,0x00FC
		jz KhongTangThemSpace
		cmp ax,0x00FE
		jz KhongTangThemSpace
		cmp ax,0x00FF
		jz KhongTangThemSpace
		push eax
		mov ecx, ebx
		mov eax,0x007D4910
		call eax
        push 0x007CDD12
		ret

		KhongTangThemSpace:
		mov eax,0
		push 0x007CDD12
        ret
	}
};
__declspec(naked) void FormResetOptionVuKhi()   //004AE084
{
    __asm
	{
		nop
		nop
		nop
		nop
		nop
		push eax
		//Show Form
		mov eax,[ebx+0x14]
		add eax,0x6
		push eax
		mov eax,[ebx+0x18]
		add eax,0x110
		push eax
		push 0x126B
		push 0xFFFFFFF
		call ShowTextForm
		//Show Lua chon Option
		mov eax,[ebx+0x14]
		add eax,0x49
		push eax
		mov eax,[ebx+0x18]
		add eax,0x11C
		push eax
		mov eax,[esp+0x8]
		add eax,0x10
		push eax
		call ShowLuaChon
        //Show Lua chon Rs Cuong Do
		mov eax,[ebx+0x14]
		add eax,0x46
		push eax
		mov eax,[ebx+0x18]
		add eax,0x110
		push eax
		push 0x126C
		push 0xFFFFFFF
		call ShowTextForm
		mov eax,[ebx+0x14]
		add eax,0x89
		push eax
		mov eax,[ebx+0x18]
		add eax,0x11C
		push eax
		mov eax,[esp+0x8]
		add eax,0x10
		push eax
		call ShowLuaChon
		// Show Phan Giai
        mov eax,[ebx+0x14]
		add eax,0x83
		push eax
		mov eax,[ebx+0x18]
		add eax,0x110
		push eax
		push 0x116A
		push 0xFFFFFFF
		call ShowTextForm
		mov eax,[ebx+0x14]
		add eax,0xCA
		push eax
		mov eax,[ebx+0x18]
		add eax,0x11C
		push eax
		mov eax,[esp+0x8]
		add eax,0x10
		push eax
		call ShowLuaChon
		// Tinh Che Vu Khi
        mov eax,[ebx+0x14]
		add eax,0x6
		push eax
		mov eax,[ebx+0x18]
		add eax,0x12D
		push eax
		push 4702
		push 0xFFFFFFF
		call ShowTextForm
		//Show Lua chon Option
		mov eax,[ebx+0x14]
		add eax,0x49
		push eax
		mov eax,[ebx+0x18]
		add eax,0x138
		push eax
		mov eax,[esp+0x8]
		add eax,0x10
		push eax
		call ShowLuaChon
		// Show Reset Opt Quan Ao
        mov eax,[ebx+0x14]
		add eax,0xC4
		push eax
		mov eax,[ebx+0x18]
		add eax,0x110
		push eax
		push 0x116B
		push 0xFFFFFFF
		call ShowTextForm
		mov eax,[ebx+0x14]
		add eax,0x10A
		push eax
		mov eax,[ebx+0x18]
		add eax,0x11C
		push eax
		mov eax,[esp+0x8]
		add eax,0x10
		push eax
		call ShowLuaChon
		// Show Nang Cap Opt Vk
        mov eax,[ebx+0x14]
		add eax,0x107
		push eax
		mov eax,[ebx+0x18]
		add eax,0x110
		push eax
		push 0x116C
		push 0xFFFFFFF
		call ShowTextForm
		mov eax,[ebx+0x14]
		add eax,0x14D
		push eax
		mov eax,[ebx+0x18]
		add eax,0x11C
		push eax
		mov eax,[esp+0x8]
		add eax,0x10
		push eax
		call ShowLuaChon
        pop eax
		push 0x80FFFFFF
		push 0x004AE089
		ret


		ShowTextForm:
		mov ecx,DWORD PTR SS:[0x01733AC4]
        mov eax,[esp+0x4]
		push eax
		mov edx,[ecx]
		call dword ptr [edx+0xC]
        mov eax,[esp+0x8]
		push eax
		push 0x19
        mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push 0x0
		mov ecx,[esp+0x10]
		mov edx,[esp+0x14]
		push eax
        push 0x0
		push ecx
		push edx
		mov ecx,DWORD PTR SS:[0x01733AC4]
		mov eax,[ecx]
		call dword ptr [eax+0x24]
        ret 0x10



		ShowLuaChon:
		push 5314
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,eax
		mov eax,[esp+0x4]
        mov  DWORD PTR SS : [eax + 0x70] , ecx
		mov  DWORD PTR SS : [eax + 0x9C] , 0x97
		mov  DWORD PTR SS : [eax + 0xA0] , 0xF8
		mov  DWORD PTR SS : [eax + 0x98] , 0xBC
		mov  DWORD PTR SS : [eax + 0xA4] , 0xAF
		push 0x00000000
		push 0x0089E914
		mov ecx,[esp+0x10]
		push ecx
		mov ecx,[esp+0x18]
		push ecx
		mov edx,[esp+0x14]
		mov ecx, edx
		mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
		call eax
		mov eax,[esp+0x4]
		push 0x1732CC8
		mov ecx, eax
		mov eax, 0x7B9850
		call eax //Draw1
		ret 0xC

	}
}
 __declspec(naked) void FormReset1()   //004AE3D8 5
{
    __asm
	{
		nop
		nop
		nop
		nop
		nop
		xor ecx,ecx
		mov cl,[eax]
		cmp ecx,0x1
		jnz KiemTraTinhNang2
        push 0x1276
		push 0x004AE3DD
		ret

		KiemTraTinhNang2:
        cmp ecx,0x2
		jnz CnPhanGiai
        push 0x1276
        push 0x004AE3DD
		ret

        CnPhanGiai:
		cmp ecx,0x3
		jnz CnQuayOptCD
        push 0x116D
        push 0x004AE3DD
		ret

        CnQuayOptCD:
		cmp ecx,0x4
		jnz CnNangCapOptVk
		push 0x116E
        push 0x004AE3DD
		ret

        CnNangCapOptVk:
		cmp ecx,0x5
		jnz DefaulTinhNang
        push 0x116F
        push 0x004AE3DD
		ret

		DefaulTinhNang:
		push 0x1031
        push 0x004AE3DD
        ret

    }
}
 __declspec(naked) void DrawTinhNangOptionMoi()   //004AE25E 5
{
    __asm
	{
		nop
		nop
		nop
		nop
		nop
        push eax
		xor ecx,ecx
		mov cl,[eax]
		cmp ecx,0x1
		jnz KiemTraTinhNang2
        mov eax,[ebx+0x18]
		mov ecx,[ebx+0x14]
		add eax,0x4C
		add ecx,0xC
		push eax
		push ecx
		lea ecx,[ebx+0x000002A0]
		mov eax,0x007E00F0
		call eax
		//
        mov eax,[ebx+0x14]
		mov ecx,[ebx+0x18]
		add eax,0x3D
		push eax
		add ecx,0x32
		push ecx
		push 0x126E
		push 0x19
		push 0xFFFFFFFF
		call ShowTextInFormDefault
		//
		mov eax,[ebx+0x14]
		mov ecx,[ebx+0x18]
		add eax,0x35
		push eax
		add ecx,0x55
		push ecx
		push 0x1279
		push 0x19
		push 0xFFFFFFFF
		call ShowTextInFormDefault
        mov eax,[esp]
		xor ecx,ecx
		mov cl,[eax+0x1]
		test ecx,ecx
        jz DefaulTinhNang
		push 0x0
        imul ecx,0x90
        lea ecx,[0x1107258+0x22DC8+ecx]
		push 0x1
		push 0x1
		push ecx
		mov ecx, [ebx+0x14]
		mov eax, [ebx+0x18]
		add ecx,0xD
		add eax,0x4D
		push eax
		push ecx
		mov ecx, DWORD PTR SS:[0x1615E90]
        push 0x1
		mov eax,0x004913F0
		call eax
		jmp DefaulTinhNang

		KiemTraTinhNang2:
        cmp ecx,0x2
		jnz cnPhanGiaiVk
		mov eax,[ebx+0x18]
		mov ecx,[ebx+0x14]
		add eax,0x4C
		add ecx,0xC
		push eax
		push ecx
		lea ecx,[ebx+0x000002A0]
		mov eax,0x007E00F0
		call eax
		//
		mov eax,[ebx+0x14]
		mov ecx,[ebx+0x18]
		add eax,0x3D
		push eax
		add ecx,0x32
		push ecx
		push 0x126F
		push 0x19
		push 0xFFFFFFFF
		call ShowTextInFormDefault
		//
		mov eax,[ebx+0x14]
		mov ecx,[ebx+0x18]
		add eax,0x35
		push eax
		add ecx,0x55
		push ecx
		push 0x1278
		push 0x19
		push 0xFFFFFFFF
		call ShowTextInFormDefault
        mov eax,[esp]
		xor ecx,ecx
		mov cl,[eax+0x1]
		test ecx,ecx
        jz DefaulTinhNang
		push 0x0
        imul ecx,0x90
        lea ecx,[0x1107258+0x22DC8+ecx]
		push 0x1
		push 0x1
		push ecx
		mov ecx, [ebx+0x14]
		mov eax, [ebx+0x18]
		add ecx,0xD
		add eax,0x4D
		push eax
		push ecx
		mov ecx, DWORD PTR SS:[0x1615E90]
        push 0x1
		mov eax,0x004913F0
		call eax
		DefaulTinhNang:
		pop eax
		mov  ecx, [ebx+0x14]
		push ebp
        push edi
        push 0x004AE263
		ret

		cnPhanGiaiVk:
		cmp ecx,0x3
		jnz cnDoioptCucDai
        mov eax,[ebx+0x14]
		mov ecx,[ebx+0x18]
		add eax,0x3D
		push eax
		add ecx,0x32
		push ecx
		push 0x1170
		push 0x19
		push 0xFFFFFFFF
		call ShowTextInFormDefault
		jmp DefaulTinhNang

		cnDoioptCucDai:
		cmp ecx,0x4
		jnz cnNangCapOptionVK
		mov eax,[ebx+0x18]
		mov ecx,[ebx+0x14]
		add eax,0x4C
		add ecx,0xC
		push eax
		push ecx
		lea ecx,[ebx+0x000002A0]
		mov eax,0x007E00F0
		call eax
		//
		mov eax,[ebx+0x14]
		mov ecx,[ebx+0x18]
		add eax,0x3D
		push eax
		add ecx,0x32
		push ecx
		push 0x1171
		push 0x19
		push 0xFFFFFFFF
		call ShowTextInFormDefault
		//
		mov eax,[ebx+0x14]
		mov ecx,[ebx+0x18]
		add eax,0x35
		push eax
		add ecx,0x55
		push ecx
		push 0x117E
		push 0x19
		push 0xFFFFFFFF
		call ShowTextInFormDefault
        mov eax,[esp]
		xor ecx,ecx
		mov cl,[eax+0x1]
		test ecx,ecx
        jz DefaulTinhNang
		push 0x0
        imul ecx,0x90
        lea ecx,[0x1107258+0x22DC8+ecx]
		push 0x1
		push 0x1
		push ecx
		mov ecx, [ebx+0x14]
		mov eax, [ebx+0x18]
		add ecx,0xD
		add eax,0x4D
		push eax
		push ecx
		mov ecx, DWORD PTR SS:[0x1615E90]
        push 0x1
		mov eax,0x004913F0
		call eax
		jmp DefaulTinhNang


		cnNangCapOptionVK:
        cmp ecx,0x5
		jnz DefaulTinhNang
        mov eax,[ebx+0x18]
		mov ecx,[ebx+0x14]
		add eax,0x4C
		add ecx,0xC
		push eax
		push ecx
		lea ecx,[ebx+0x000002A0]
		mov eax,0x007E00F0
		call eax
		//  Hien Thi O 2
        mov eax,[ebx+0x18]
		mov ecx,[ebx+0x14]
		add eax,0x4C
		add ecx,0xBC
		push eax
		push ecx
		lea ecx,[ebx+0x000002A0]
		mov eax,0x007E00F0
		call eax
		//
		mov eax,[ebx+0x14]
		mov ecx,[ebx+0x18]
		add eax,0x3D
		push eax
		add ecx,0x32
		push ecx
		push 0x1172
		push 0x19
		push 0xFFFFFFFF
		call ShowTextInFormDefault
		//
		mov eax,[ebx+0x14]
		mov ecx,[ebx+0x18]
		add eax,0x35
		push eax
		add ecx,0x55
		push ecx
		lea eax,[ebx+0x210]
		push eax
		mov eax,[esp+0xC]
		xor ecx,ecx
		mov cl,[eax+0x6]
		push ecx
		call GetItemRequest
		cmp eax,4107
        jz KhongCanThemVao
		mov ecx,[esp+0x8]
		mov [ecx+0x8],ax
        KhongCanThemVao:
		push eax
		push 0x2C
		push 0xFFFFFFFF
		call ShowTextInFormDefault
		//
        mov eax,[ebx+0x14]
		mov ecx,[ebx+0x18]
		add eax,0xE5
		push eax
		add ecx,0x55
		push ecx
        lea eax,[ebx+0x210]
		mov edx,[esp+0x8]
		xor ecx,ecx
		mov cl,[edx+0x6]
		test ecx,ecx
		jz ChuaChonOptionDeShowRequest
		mov edx,[esp+0x8]
        push edx
		xor edx,edx
        sub ecx,0x1
        imul ecx,0x6
		mov dl,[eax+0x2A+0x5+ecx]
		xor dl,0xC5
		push edx
		call GetTextForRequestCountItem
		push eax
		ProcessShowRequestItemCount:
		push 0x19
		push 0xFFFFFFFF
		call ShowTextInFormDefault
		//Hien Thi Opt
		lea eax,[ebx+0x210]
		push eax
		mov eax,[esp+0x4]
		add eax,0x210
        push eax
        call ShowListOption
		//
        mov eax,[esp]
		xor ecx,ecx
		mov cl,[eax+0x4]
		test ecx,ecx
        jz KiemTraHienThiVp2
		push 0x0
        imul ecx,0x90
        lea ecx,[0x1107258+0x22DC8+ecx]
		push 0x1
		push 0x1
		push ecx
		mov ecx, [ebx+0x14]
		mov eax, [ebx+0x18]
		add ecx,0xD
		add eax,0x4D
		push eax
		push ecx
		mov ecx, DWORD PTR SS:[0x1615E90]
        push 0x1
		mov eax,0x004913F0
		call eax
		//
        KiemTraHienThiVp2:
        mov eax,[esp]
		xor ecx,ecx
		mov cl,[eax+0x5]
		test ecx,ecx
		jz DefaulTinhNang
        push 0x0
        imul ecx,0x90
        lea ecx,[0x1107258+0x22DC8+ecx]
		push 0x1
		push 0x1
		push ecx
		mov ecx, [ebx+0x14]
		mov eax, [ebx+0x18]
		add ecx,0xBD
		add eax,0x4D
		push eax
		push ecx
		mov ecx, DWORD PTR SS:[0x1615E90]
        push 0x1
		mov eax,0x004913F0
		call eax
		jmp DefaulTinhNang


		ChuaChonOptionDeShowRequest:
		push 4542
        jmp ProcessShowRequestItemCount


		GetTextForRequestCountItem:
		mov eax,[esp+0x4]
		cmp eax,0x0
		jnz KiemTraRankRequest2
        mov eax,[esp+0x8]
        mov word ptr [eax+0xA],0x5
		mov eax,4530
		ret 0x8

		KiemTraRankRequest2:
		cmp eax,0x1
		jnz KiemTraRankRequest3
        mov eax,[esp+0x8]
        mov word ptr [eax+0xA],0xA
		mov eax,4531
		ret 0x8

		KiemTraRankRequest3:
		cmp eax,0x2
		jnz KiemTraRankRequest4
        mov eax,[esp+0x8]
        mov word ptr [eax+0xA],0xF
		mov eax,4532
		ret 0x8

		KiemTraRankRequest4:
		cmp eax,0x3
		jnz KiemTraRankRequest5
        mov eax,[esp+0x8]
		mov word ptr [eax+0xA],0x14
		mov eax,4533
		ret 0x8

		KiemTraRankRequest5:
		cmp eax,0x4
		jnz KiemTraRankRequest6
        mov eax,[esp+0x8]
		mov word ptr [eax+0xA],0x19
		mov eax,4534
		ret 0x8

		KiemTraRankRequest6:
		cmp eax,0x5
		jnz KiemTraRankRequest7
        mov eax,[esp+0x8]
        mov word ptr [eax+0xA],0x1E
		mov eax,4535
		ret 0x8

		KiemTraRankRequest7:
		cmp eax,0x6
		jnz KiemTraRankRequest8
        mov eax,[esp+0x8]
        mov word ptr [eax+0xA],0x23
		mov eax,4536
		ret 0x8

		KiemTraRankRequest8:
		cmp eax,0x7
		jnz KiemTraRankRequest9
        mov eax,[esp+0x8]
        mov word ptr [eax+0xA],0x28
		mov eax,4537
		ret 0x8

		KiemTraRankRequest9:
		cmp eax,0x8
		jnz KiemTraRankRequest10
        mov eax,[esp+0x8]
        mov word ptr [eax+0xA],0x2D
		mov eax,4538
		ret 0x8

        KiemTraRankRequest10:
		cmp eax,0x9
		jnz MaxRequestItemCount
        mov eax,[esp+0x8]
		mov word ptr [eax+0xA],0x32
		mov eax,4539
		ret 0x8

        MaxRequestItemCount:
        mov eax,4540
		ret 0x8

		GetItemRequest:
		mov eax,[esp+0x8]
		mov ecx,[esp+0x4]
        sub ecx,0x1
		imul ecx,0x6
		xor edx,edx
		mov dx,[eax+ecx+0x2A]
        xor dx,0xCE43
		cmp edx,0x3
		jnz KiemTraOpt2
        xor edx,edx
		mov dl,[eax+ecx+0x2A+0x5]
		xor dl,0xC5
        mov eax,edx
		add eax,0x297
        ret 0x8

		KiemTraOpt2:
		cmp edx,0xB
		jnz KiemTraOpt3
        xor edx,edx
		mov dl,[eax+ecx+0x2A+0x5]
		xor dl,0xC5
        mov eax,edx
		add eax,0x2A1
		ret 0x8

		KiemTraOpt3:
		cmp edx,0xC
		jnz KiemTraOpt4
        xor edx,edx
		mov dl,[eax+ecx+0x2A+0x5]
		xor dl,0xC5
        mov eax,edx
		add eax,0x2AB
		ret 0x8

		KiemTraOpt4:
		cmp edx,0xD
		jnz KiemTraOpt5
        xor edx,edx
		mov dl,[eax+ecx+0x2A+0x5]
		xor dl,0xC5
        mov eax,edx
		add eax,0x2B5
		ret 0x8

		KiemTraOpt5:
		cmp edx,0xE
		jnz KiemTraOpt6
        xor edx,edx
		mov dl,[eax+ecx+0x2A+0x5]
		xor dl,0xC5
        mov eax,edx
		add eax,0x2BF
		ret 0x8

		KiemTraOpt6:
		cmp edx,0xF
		jnz KiemTraOpt7
        xor edx,edx
		mov dl,[eax+ecx+0x2A+0x5]
		xor dl,0xC5
        mov eax,edx
		add eax,0x2C9
		ret 0x8

		KiemTraOpt7:
        cmp edx,0x10
		jnz KiemTraOpt8
        xor edx,edx
		mov dl,[eax+ecx+0x2A+0x5]
		xor dl,0xC5
        mov eax,edx
		add eax,0x2D3
		ret 0x8

		KiemTraOpt8:
		cmp edx,0x2F
		jnz KiemTraOpt9
        xor edx,edx
		mov dl,[eax+ecx+0x2A+0x5]
		xor dl,0xC5
        mov eax,edx
		add eax,0x2DD
		ret 0x8

		KiemTraOpt9:
		cmp edx,0x30
		jnz KiemTraOpt10
        xor edx,edx
		mov dl,[eax+ecx+0x2A+0x5]
		xor dl,0xC5
        mov eax,edx
		add eax,0x2E7
		ret 0x8

		KiemTraOpt10:
		cmp edx,0x31
		jnz KiemTraOpt11
        xor edx,edx
		mov dl,[eax+ecx+0x2A+0x5]
		xor dl,0xC5
        mov eax,edx
		add eax,0x2F1
		ret 0x8

		KiemTraOpt11:
		cmp edx,0x32
		jnz KiemTraOpt12
        xor edx,edx
		mov dl,[eax+ecx+0x2A+0x5]
		xor dl,0xC5
        mov eax,edx
		add eax,0x2FB
		ret 0x8

		KiemTraOpt12:
		cmp edx,0x33
		jnz KiemTraOpt13
        xor edx,edx
		mov dl,[eax+ecx+0x2A+0x5]
		xor dl,0xC5
        mov eax,edx
		add eax,0x305
		ret 0x8

		KiemTraOpt13:
		cmp edx,0x34
		jnz KiemTraOpt14
        xor edx,edx
		mov dl,[eax+ecx+0x2A+0x5]
		xor dl,0xC5
        mov eax,edx
		add eax,0x30F
		ret 0x8

		KiemTraOpt14:
		cmp edx,0x35
		jnz KiemTraOpt15
        xor edx,edx
		mov dl,[eax+ecx+0x2A+0x5]
		xor dl,0xC5
        mov eax,edx
		add eax,0x319
		ret 0x8

		KiemTraOpt15:
		cmp edx,0x36
		jnz KiemTraOpt16
        xor edx,edx
		mov dl,[eax+ecx+0x2A+0x5]
		xor dl,0xC5
        mov eax,edx
		add eax,0x323
		ret 0x8

		KiemTraOpt16:
		cmp edx,0x37
		jnz KiemTraOpt17
        xor edx,edx
		mov dl,[eax+ecx+0x2A+0x5]
		xor dl,0xC5
        mov eax,edx
		add eax,0x32D
		ret 0x8

		KiemTraOpt17:
        cmp edx,0x38
		jnz KiemTraOpt18
        xor edx,edx
		mov dl,[eax+ecx+0x2A+0x5]
		xor dl,0xC5
        mov eax,edx
		add eax,0x337
		ret 0x8

		KiemTraOpt18:
		cmp edx,0x3D
		jnz KiemTraOpt19
        xor edx,edx
		mov dl,[eax+ecx+0x2A+0x5]
		xor dl,0xC5
        mov eax,edx
		add eax,0x341
		ret 0x8

		KiemTraOpt19:
		cmp edx,0x3F
		jnz KiemTraOpt20
        xor edx,edx
		mov dl,[eax+ecx+0x2A+0x5]
		xor dl,0xC5
        mov eax,edx
		add eax,0x34B
		ret 0x8

		KiemTraOpt20:
		cmp edx,0x5D
		jnz KiemTraOpt21
        xor edx,edx
		mov dl,[eax+ecx+0x2A+0x5]
		xor dl,0xC5
        mov eax,edx
		add eax,0x355
		ret 0x8

		KiemTraOpt21:
		cmp edx,0x5F
		jnz KiemTraOpt22
        xor edx,edx
		mov dl,[eax+ecx+0x2A+0x5]
		xor dl,0xC5
        mov eax,edx
		add eax,0x35F
		ret 0x8

		KiemTraOpt22:
		cmp edx,0x60
		jnz KiemTraOpt23
        xor edx,edx
		mov dl,[eax+ecx+0x2A+0x5]
		xor dl,0xC5
        mov eax,edx
		add eax,0x369
		ret 0x8

		KiemTraOpt23:
		cmp edx,0x86
		jnz KiemTraOpt24
        xor edx,edx
		mov dl,[eax+ecx+0x2A+0x5]
		xor dl,0xC5
        mov eax,edx
		add eax,0x373
		ret 0x8

		KiemTraOpt24:
		cmp edx,0x8A
		jnz KiemTraOpt25
        xor edx,edx
		mov dl,[eax+ecx+0x2A+0x5]
		xor dl,0xC5
        mov eax,edx
		add eax,0x37D
		ret 0x8

		KiemTraOpt25:
		cmp edx,0x17
		jnz KiemTraOpt26
        xor edx,edx
		mov dl,[eax+ecx+0x2A+0x5]
		xor dl,0xC5
        mov eax,edx
		add eax,0x387
		ret 0x8

		KiemTraOpt26:
		cmp edx,0x91
		jnz KiemTraOpt27
        xor edx,edx
		mov dl,[eax+ecx+0x2A+0x5]
		xor dl,0xC5
        mov eax,edx
		add eax,0x391
		ret 0x8

		KiemTraOpt27:
		cmp edx,0x92
		jnz KiemTraOpt28
        xor edx,edx
		mov dl,[eax+ecx+0x2A+0x5]
		xor dl,0xC5
        mov eax,edx
		add eax,0x39B
		ret 0x8

		KiemTraOpt28:
		cmp edx,0xD0
		jnz KiemTraOpt29
        xor edx,edx
		mov dl,[eax+ecx+0x2A+0x5]
		xor dl,0xC5
        mov eax,edx
		add eax,0x3A5
		ret 0x8

		KiemTraOpt29:
		cmp edx,0xD1
		jnz KiemTraOpt30
        xor edx,edx
		mov dl,[eax+ecx+0x2A+0x5]
		xor dl,0xC5
        mov eax,edx
		add eax,0x3AF
		ret 0x8

		KiemTraOpt30:
		cmp edx,0xD3
		jnz KiemTraOpt31
        xor edx,edx
		mov dl,[eax+ecx+0x2A+0x5]
		xor dl,0xC5
        mov eax,edx
		add eax,0x3B9
		ret 0x8

		KiemTraOpt31:
		cmp edx,0xD4
		jnz KiemTraOpt32
        xor edx,edx
		mov dl,[eax+ecx+0x2A+0x5]
		xor dl,0xC5
        mov eax,edx
		add eax,0x3C3
		ret 0x8

		KiemTraOpt32:
		cmp edx,0xD5
		jnz KiemTraOpt33
        xor edx,edx
		mov dl,[eax+ecx+0x2A+0x5]
		xor dl,0xC5
        mov eax,edx
		add eax,0x3CD
		ret 0x8

        KiemTraOpt33:
		cmp edx,0xD6
		jnz UnknowItem
        xor edx,edx
		mov dl,[eax+ecx+0x2A+0x5]
		xor dl,0xC5
        mov eax,edx
		add eax,0x3D7
		ret 0x8

		UnknowItem:
        mov eax,4107
        ret 0x8



        ShowTextInFormDefault:
        mov ecx,DWORD PTR SS:[0x01733AC4]
        mov eax,[esp+0x4]
		push eax
		mov edx,[ecx]
		call dword ptr [edx+0xC]
		push 0x3
		push 0x3F800000
		push 0x00000141
		mov eax,[esp+0x18]
		push eax
		mov eax,[esp+0x18]
		push eax
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		mov ecx,[esp+0x1C]
		mov edx,[esp+0x20]
		push eax
		push ecx
		mov ecx,[0x01733AC4]
		push edx
		mov eax,DWORD PTR SS:[0x01733AC4]
        mov eax,[eax]
		call dword ptr [eax+0x18]
		mov ecx,[0x01733AC4]
		mov eax,[ecx]
		call dword ptr [eax+0x38]
		ret 0x14


		ShowListOption:
		sub esp,0x4
		xor ecx,ecx
		mov [esp],ecx
        BackLoopCheckOption:
		mov ecx,[esp+0x10]
		xor eax,eax
		mov al,[ecx+0x6]
		test eax,eax
		jz KhongDungHoacChuaChon
        sub eax,0x1
		mov ecx,[esp]
		cmp eax,ecx
		jnz KhongDungHoacChuaChon
        mov ecx,DWORD PTR SS:[0x01733AC4]
		push 0xFFFF0000
		mov edx,[ecx]
		call dword ptr [edx+0xC]
        jmp CompleteCheckText
        KhongDungHoacChuaChon:
        mov ecx,DWORD PTR SS:[0x01733AC4]
		push 0xFFFFFFFF
		mov edx,[ecx]
		call dword ptr [edx+0xC]
		//
        CompleteCheckText:
		mov eax,[esp+0xC]
		xor edx,edx
		mov ecx,[esp]
        imul ecx,0x6
		mov dx,[eax+0x2A+ecx]
		xor dx,0xCE43
		test edx,edx
        jz EndOfCheckFun
		push edx
		xor edx,edx
		mov dx,[eax+0x2A+ecx+0x2]
		xor dx,0xCE43
		push edx
        xor edx,edx
		mov dl,[eax+0x2A+ecx+0x5]
		xor dl,0xC5
		push edx
		mov edx,[esp+0x14]
        push edx
        call GetStringOption
		mov ecx,[ebx+0x14]
        add ecx,0x45
        push ecx
		mov ecx,[ebx+0x18]
		mov edx,[esp+0x4]
		imul edx,0x10
        add ecx,edx
		add ecx,0x7A
		push ecx
		push eax
		call FuncShowTextOption
		mov ecx,[esp]
		add ecx,0x1
		mov [esp],ecx
        jmp BackLoopCheckOption
        EndOfCheckFun:
        //
        add esp,0x4
		ret 0x8

        FuncShowTextOption:
        push 0x3
		push 0x3F800000
		push 0x00000141
		mov eax,[esp+0x10]
		mov ecx,[esp+0x14]
		mov edx,[esp+0x18]
		push eax
		push ecx
		mov ecx,[0x01733AC4]
		push edx
		mov eax,DWORD PTR SS:[0x01733AC4]
        mov eax,[eax]
		call dword ptr [eax+0x18]
		mov ecx,[0x01733AC4]
		mov eax,[ecx]
		call dword ptr [eax+0x38]
		ret 0xC

		GetStringOption:
		mov eax,[esp+0x8]
		add eax,0x1173
		push eax
		push 0x19
        mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
        mov ecx,[esp+0x4]
		push 0x8
		push eax
		push ecx
		mov eax,0x00848162
		call eax
		add esp,0xC
		mov eax,[esp+0xC]
		push eax
		mov eax,[esp+0x14]
		push eax
		push 0xB
		mov ecx,0x1733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov eax,[esp+0xC]
		lea eax,[eax+0x8]
		push 0x100
		push eax
		mov eax,0x0085C538
		call dword ptr [eax]
        add esp,0x10
        mov eax,[esp+0x4]
        ret 0x10

    }
}
 __declspec(naked) void FormReset2()   //004AE40C 5
{
    __asm
	{
		nop
		nop
		nop
		nop
		nop
		xor ecx,ecx
		mov cl,[eax]
		cmp ecx,0x1
		jnz KiemTraTinhNang2
		xor eax,eax
		mov ax,[ebx+0x224]
		xor ax,0xCE43
		jnz OutPrintText
		mov ecx,[0x01733AC4]
		push 0xFFFF0000
		mov edx,[ecx]
		call dword ptr [edx+0xC]
		mov eax,DWORD PTR SS:[0x01733AC4]
		push 0x3
		push 0x3F800000
		push 0x00000141
		mov esi,[eax]
		push 0x1270
		push 0x004AE434
		ret

		KiemTraTinhNang2:
        cmp ecx,0x2
		jnz CnPhanGiai
        xor eax,eax
		mov ax,[ebx+0x224]
		xor ax,0xCE43
		jnz OutPrintText
        mov ecx,[0x01733AC4]
		push 0xFFFF0000
		mov edx,[ecx]
		call dword ptr [edx+0xC]
		mov eax,DWORD PTR SS:[0x01733AC4]
		push 0x3
		push 0x3F800000
		push 0x00000141
		mov esi,[eax]
		push 0x1273
		push 0x004AE434
		ret

        CnPhanGiai:
		cmp ecx,0x3
		jnz CnQuayOptQuanAo
        xor eax,eax
		mov ax,[ebx+0x224]
		xor ax,0xCE43
		jnz OutPrintText
        mov ecx,[0x01733AC4]
		push 0xFFFF0000
		mov edx,[ecx]
		call dword ptr [edx+0xC]
		mov eax,DWORD PTR SS:[0x01733AC4]
		push 0x3
		push 0x3F800000
		push 0x00000141
		mov esi,[eax]
		push 0x1170
		push 0x004AE434
		ret

        CnQuayOptQuanAo:
		cmp ecx,0x4
		jnz CnNangCapOptionVk
        xor eax,eax
		mov ax,[ebx+0x224]
		xor ax,0xCE43
		jnz OutPrintText
        mov ecx,[0x01733AC4]
		push 0xFFFF0000
		mov edx,[ecx]
		call dword ptr [edx+0xC]
		mov eax,DWORD PTR SS:[0x01733AC4]
		push 0x3
		push 0x3F800000
		push 0x00000141
		mov esi,[eax]
		push 0x1171
		push 0x004AE434
		ret

        CnNangCapOptionVk:
		cmp ecx,0x5
		jnz DefaulTinhNang
        xor eax,eax
		mov ax,[ebx+0x224]
		xor ax,0xCE43
		jnz OutPrintText
        mov ecx,[0x01733AC4]
		push 0xFFFF0000
		mov edx,[ecx]
		call dword ptr [edx+0xC]
		mov eax,DWORD PTR SS:[0x01733AC4]
		push 0x3
		push 0x3F800000
		push 0x00000141
		mov esi,[eax]
		push 0x1172
		push 0x004AE434
		ret

		DefaulTinhNang:
		mov ecx,DWORD PTR SS:[0x01733AC4]
		push 0x004AE412
		ret

		OutPrintText:
		push 0x004AE4B7
        ret

    }
}
 __declspec(naked) void FormReset3()   //004AE463 6
{
    __asm
	{
		nop
		nop
		nop
		nop
		nop
		xor ecx,ecx
		mov cl,[eax]
        test ecx,ecx
		jnz DefaulTinhNang
		push 0x004AE4B7
		ret

		DefaulTinhNang:
		mov ecx,DWORD PTR SS:[0x01733AC4]
		push 0x004AE469
        ret

    }
}
__declspec(naked) void GetPozAndProcess()   //004AE20B 6
{
    __asm
	{
		nop
		nop
		nop
		nop
		nop
		push eax
        mov ecx,DWORD PTR SS:[0x01733AD0]
		xor eax,eax
		mov al,[ecx+0x210]
		cmp eax,0x1
        jnz Default
		mov ecx,DWORD PTR SS:[0x01733AD0]
		mov eax,0x007D7FE0
		call eax
		mov edx,[ebx+0x18]
        add edx,0x10E
		mov ecx,[eax+0x8]
		cmp ecx,edx
		jb CheckPozTinhCheVuKhi
		add edx,0x11
		mov ecx,[eax+0x8]
		cmp ecx,edx
		ja CheckPozTinhCheVuKhi
		//
		mov edx,[ebx+0x14]
		mov ecx,[eax]
		cmp ecx,edx
		jb CheckPozTinhCheVuKhi
		add edx,0x36
		mov ecx,[eax]
		cmp ecx,edx
		ja CheckPozTinhCheVuKhi
		//Accept Rs 0/30
		mov eax,[esp]
		xor ecx,ecx
		mov cl,[eax+0x2]
		test ecx,ecx
        jnz Default2
		mov byte ptr [eax],0x1
		mov byte ptr [eax+0x2],0x1
        mov byte ptr [eax+0x1],0x0
		jmp Default2

		CheckPozTinhCheVuKhi:
        mov edx,[ebx+0x18]
		add edx,298
		mov ecx,[eax+0x8]
		cmp ecx,edx
		jb CheckAnotherPoz
		add edx,0x11
		mov ecx,[eax+0x8]
		cmp ecx,edx
		ja CheckAnotherPoz
		//
		mov edx,[ebx+0x14]
		mov ecx,[eax]
		cmp ecx,edx
		jb CheckAnotherPoz
		add edx,0x36
		mov ecx,[eax]
		cmp ecx,edx
		ja CheckAnotherPoz
		//Accept Rs CD
		mov eax,[esp]
        xor ecx,ecx
		mov cl,[eax+0x2]
		test ecx,ecx
		jnz Default2
		mov byte ptr [eax],0x0
		mov byte ptr [eax+0x2],0x1
		mov byte ptr [eax+0x1],0x0
		jmp Default2

		CheckAnotherPoz:
		mov edx,[ebx+0x18]
		add edx,0x10E
		mov ecx,[eax+0x8]
		cmp ecx,edx
		jb CheckAnotherPozPhanGiai
		add edx,0x11
		mov ecx,[eax+0x8]
		cmp ecx,edx
		ja CheckAnotherPozPhanGiai
		//
		mov edx,[ebx+0x14]
		mov ecx,[eax]
		add edx,0x41
		cmp ecx,edx
		jb CheckAnotherPozPhanGiai
		add edx,0x36
		mov ecx,[eax]
		cmp ecx,edx
		ja CheckAnotherPozPhanGiai
		//Accept Rs CD
		mov eax,[esp]
        xor ecx,ecx
		mov cl,[eax+0x2]
		test ecx,ecx
		jnz Default2
		mov byte ptr [eax],0x2
		mov byte ptr [eax+0x2],0x1
		mov byte ptr [eax+0x1],0x0
		jmp Default2

		CheckAnotherPozPhanGiai:
		mov edx,[ebx+0x18]
        add edx,0x10E
		mov ecx,[eax+0x8]
		cmp ecx,edx
		jb CheckAnotherPozRsOptionCucDai
		add edx,0x11
		mov ecx,[eax+0x8]
		cmp ecx,edx
		ja CheckAnotherPozRsOptionCucDai
		//
		mov edx,[ebx+0x14]
		mov ecx,[eax]
        add edx,0x82
		cmp ecx,edx
		jb CheckAnotherPozRsOptionCucDai
		add edx,0x36
		mov ecx,[eax]
		cmp ecx,edx
		ja CheckAnotherPozRsOptionCucDai
		//Accept Rs CD
		mov eax,[esp]
        xor ecx,ecx
		mov cl,[eax+0x2]
		test ecx,ecx
        jnz Default2
		mov byte ptr [eax],0x3
		mov byte ptr [eax+0x2],0x1
		mov byte ptr [eax+0x1],0x0
		jmp Default2

		CheckAnotherPozRsOptionCucDai:
        mov edx,[ebx+0x18]
        add edx,0x10E
		mov ecx,[eax+0x8]
		cmp ecx,edx
		jb CheckAnotherPozNangCapOptionVK
		add edx,0x11
		mov ecx,[eax+0x8]
		cmp ecx,edx
		ja CheckAnotherPozNangCapOptionVK
		//
		mov edx,[ebx+0x14]
		mov ecx,[eax]
        add edx,0xC1
		cmp ecx,edx
		jb CheckAnotherPozNangCapOptionVK
		add edx,0x36
		mov ecx,[eax]
		cmp ecx,edx
		ja CheckAnotherPozNangCapOptionVK
		//Accept Rs CD
		mov eax,[esp]
        xor ecx,ecx
		mov cl,[eax+0x2]
		test ecx,ecx
        jnz Default2
		mov byte ptr [eax],0x4
		mov byte ptr [eax+0x2],0x1
		mov byte ptr [eax+0x1],0x0
		jmp Default2

        CheckAnotherPozNangCapOptionVK:
        mov edx,[ebx+0x18]
        add edx,0x10E
		mov ecx,[eax+0x8]
		cmp ecx,edx
		jb KiemTraChonGiaTri
		add edx,0x11
		mov ecx,[eax+0x8]
		cmp ecx,edx
		ja KiemTraChonGiaTri
		//
		mov edx,[ebx+0x14]
		mov ecx,[eax]
        add edx,0x106
		cmp ecx,edx
		jb KiemTraChonGiaTri
		add edx,0x36
		mov ecx,[eax]
		cmp ecx,edx
		ja KiemTraChonGiaTri
		//Accept Rs CD
		mov eax,[esp]
        xor ecx,ecx
		mov cl,[eax+0x2]
		test ecx,ecx
        jnz Default2
		mov byte ptr [eax],0x5
		mov byte ptr [eax+0x2],0x1
		mov byte ptr [eax+0x1],0x0
		jmp Default2

		KiemTraChonGiaTri:
		mov eax,[esp]
		xor ecx,ecx
		mov cl,[eax]
		cmp ecx,0x5
		jnz Default
		//
        mov ecx,DWORD PTR SS:[0x01733AD0]
		mov eax,0x007D7FE0
		call eax
        mov edx,[ebx+0x18]
		add edx,0x78
		mov ecx,[eax+0x8]
		cmp ecx,edx
		jb KiemTraPozOption2
		add edx,0xE
		mov ecx,[eax+0x8]
		cmp ecx,edx
		ja KiemTraPozOption2
		//
		mov edx,[ebx+0x14]
		mov ecx,[eax]
		add edx,0x43
		cmp ecx,edx
		jb KiemTraPozOption2
		add edx,0xE7
		mov ecx,[eax]
		cmp ecx,edx
		ja KiemTraPozOption2
		//Accept Rs CD
		mov eax,[esp]
        xor ecx,ecx
		mov cl,[eax+0x2]
		test ecx,ecx
		jnz Default2
		mov byte ptr [eax+0x2],0x1
		mov byte ptr [eax+0x6],0x1
		mov byte ptr [eax+0x4],0x0
		mov byte ptr [eax+0x5],0x0
		jmp Default2

		KiemTraPozOption2:
        mov edx,[ebx+0x18]
		add edx,0x88
		mov ecx,[eax+0x8]
		cmp ecx,edx
		jb KiemTraPozOption3
		add edx,0xE
		mov ecx,[eax+0x8]
		cmp ecx,edx
		ja KiemTraPozOption3
		//
		mov edx,[ebx+0x14]
		mov ecx,[eax]
		add edx,0x43
		cmp ecx,edx
		jb KiemTraPozOption3
		add edx,0xE7
		mov ecx,[eax]
		cmp ecx,edx
		ja KiemTraPozOption3
		//Accept Rs CD
		mov eax,[esp]
        xor ecx,ecx
		mov cl,[eax+0x2]
		test ecx,ecx
		jnz Default2
		mov byte ptr [eax+0x2],0x1
		mov byte ptr [eax+0x6],0x2
        mov byte ptr [eax+0x4],0x0
		mov byte ptr [eax+0x5],0x0
		jmp Default2

		KiemTraPozOption3:
        mov edx,[ebx+0x18]
		add edx,0x98
		mov ecx,[eax+0x8]
		cmp ecx,edx
		jb KiemTraPozOption4
		add edx,0xE
		mov ecx,[eax+0x8]
		cmp ecx,edx
		ja KiemTraPozOption4
		//
		mov edx,[ebx+0x14]
		mov ecx,[eax]
		add edx,0x43
		cmp ecx,edx
		jb KiemTraPozOption4
		add edx,0xE7
		mov ecx,[eax]
		cmp ecx,edx
		ja KiemTraPozOption4
		//Accept Rs CD
		mov eax,[esp]
        xor ecx,ecx
		mov cl,[eax+0x2]
		test ecx,ecx
		jnz Default2
		mov byte ptr [eax+0x2],0x1
		mov byte ptr [eax+0x6],0x3
        mov byte ptr [eax+0x4],0x0
		mov byte ptr [eax+0x5],0x0
		jmp Default2

		KiemTraPozOption4:
        mov edx,[ebx+0x18]
		add edx,0xA8
		mov ecx,[eax+0x8]
		cmp ecx,edx
		jb KiemTraPozOption5
		add edx,0xE
		mov ecx,[eax+0x8]
		cmp ecx,edx
		ja KiemTraPozOption5
		//
		mov edx,[ebx+0x14]
		mov ecx,[eax]
		add edx,0x43
		cmp ecx,edx
		jb KiemTraPozOption5
		add edx,0xE7
		mov ecx,[eax]
		cmp ecx,edx
		ja KiemTraPozOption5
		//Accept Rs CD
		mov eax,[esp]
        xor ecx,ecx
		mov cl,[eax+0x2]
		test ecx,ecx
		jnz Default2
		mov byte ptr [eax+0x2],0x1
		mov byte ptr [eax+0x6],0x4
        mov byte ptr [eax+0x4],0x0
		mov byte ptr [eax+0x5],0x0
		jmp Default2

        KiemTraPozOption5:
        mov edx,[ebx+0x18]
		add edx,0xB8
		mov ecx,[eax+0x8]
		cmp ecx,edx
		jb KiemTraPozOption7
		add edx,0xE
		mov ecx,[eax+0x8]
		cmp ecx,edx
		ja KiemTraPozOption7
		//
		mov edx,[ebx+0x14]
		mov ecx,[eax]
		add edx,0x43
		cmp ecx,edx
		jb KiemTraPozOption7
		add edx,0xE7
		mov ecx,[eax]
		cmp ecx,edx
		ja KiemTraPozOption7
		//Accept Rs CD
		mov eax,[esp]
        xor ecx,ecx
		mov cl,[eax+0x2]
		test ecx,ecx
		jnz Default2
		mov byte ptr [eax+0x2],0x1
		mov byte ptr [eax+0x6],0x5
        mov byte ptr [eax+0x4],0x0
		mov byte ptr [eax+0x5],0x0
		jmp Default2

		KiemTraPozOption7:
        mov edx,[ebx+0x18]
		add edx,0xC8
		mov ecx,[eax+0x8]
		cmp ecx,edx
		jb Default
		add edx,0xE
		mov ecx,[eax+0x8]
		cmp ecx,edx
		ja Default
		//
		mov edx,[ebx+0x14]
		mov ecx,[eax]
		add edx,0x43
		cmp ecx,edx
		jb Default
		add edx,0xE7
		mov ecx,[eax]
		cmp ecx,edx
		ja Default
		//Accept Rs CD
		mov eax,[esp]
        xor ecx,ecx
		mov cl,[eax+0x2]
		test ecx,ecx
		jnz Default2
		mov byte ptr [eax+0x2],0x1
		mov byte ptr [eax+0x6],0x6
        mov byte ptr [eax+0x4],0x0
		mov byte ptr [eax+0x5],0x0
		jmp Default2
		//



		Default:
		pop eax
        mov byte ptr [eax+0x2],0x0
		mov ecx,DWORD PTR SS:[0x01733AD0]
		mov eax,0x007D7FE0
		call eax
        mov ecx,DWORD PTR SS:[0x01733AD0]
		push 0x004AE211
		ret

		Default2:
		pop eax
		mov ecx,DWORD PTR SS:[0x01733AD0]
		mov eax,0x007D7FE0
		call eax
        mov ecx,DWORD PTR SS:[0x01733AD0]
		push 0x004AE211
		ret

	}
}
__declspec(naked) void ProcessTinhNangMoi()   //006B54DC 6
{
    __asm
	{
		nop
		nop
		nop
		nop
		nop
		push eax
		push 0x284D
		mov ecx,0x017323A8
		mov eax,0x007D8550
		call eax
		test eax,eax
		jz Default
		mov ecx,[eax+0x10]
		test ecx,ecx
        jz Default
        mov eax,[esp]
		xor ecx,ecx
		mov cl,[eax]
		test ecx,ecx
		jz Default // Kiem Tra Da Chon Tinh Nang Chua
		cmp ecx,0x5
		jz TinhNangNangCapOptionVk
        xor ecx,ecx
		mov cl,[eax]
		cmp ecx,0x3
		jz PhanGiaiVuKhi // Kiem Tra Da Chon Vat Pham Chua
        xor ecx,ecx
		mov cl,[eax+0x1]
		test ecx,ecx
		jz ChuaChonVatPham // Kiem Tra Da Chon Vat Pham Chua
        PhanGiaiVuKhi:
		sub esp,0x8
		mov eax,esp
        push 0x8
		push eax
        call XoaChuoi
		mov eax,esp
		mov word ptr[eax],0x7
		mov byte ptr [eax+0x2],0x7C
		mov ecx,[esp+0x8]
		xor edx,edx
		mov dl,[ecx]
		cmp edx,0x1
		jnz KiemTranTinhNang2
		mov byte ptr [eax+0x3],0xA5
		jmp ContinueProcessFunc

		KiemTranTinhNang2:
		cmp edx,0x2
		jnz cnPhanGiai
		mov byte ptr [eax+0x3],0xA6
		jmp ContinueProcessFunc

		cnPhanGiai:
		cmp edx,0x3
		jnz cnQuayOptQuanAo
		mov byte ptr [eax+0x3],0xA7
		jmp ContinueProcessFunc

		cnQuayOptQuanAo:
		cmp edx,0x4
		jnz ChuaChonTinhNang
		mov byte ptr [eax+0x3],0xA8
		ContinueProcessFunc:
		mov ecx,[esp+0x8]
		xor edx,edx
		push 0x284D
		mov ecx,0x017323A8
		mov eax,0x007D8550
		call eax
		xor edx,edx
		mov dl,[eax+0x31C]
        mov eax,esp
		mov [eax+0x4],dl
		xor edx,edx
        mov ecx,[esp+0x8]
		mov dl,[ecx+0x1]
		mov [eax+0x5],dl
		mov eax,esp
		push eax
		mov ecx,ebp
		mov eax,0x006B2F60
        call eax
		add esp,0x8
		pop eax
		mov dword ptr [eax],0x0
        push 0x284D
		mov ecx,0x017323A8
		mov eax,0x007D8550
		call eax
		test eax,eax
        jz BoQuaXoaThongTin
		mov ecx,eax
		mov eax,0x4ADFA0
		call eax
        BoQuaXoaThongTin:
        push 0x006B550C
        ret


		TinhNangNangCapOptionVk:
        sub esp,0x8
		mov eax,esp
        push 0x8
		push eax
        call XoaChuoi
		mov eax,esp
		mov word ptr[eax],0x8
		mov byte ptr [eax+0x2],0x7C
		mov byte ptr [eax+0x3],0xA9
		xor edx,edx
		push 0x284D
		mov ecx,0x017323A8
		mov eax,0x007D8550
		call eax
		xor edx,edx
		mov dl,[eax+0x31C]
        mov eax,esp
		mov [eax+0x4],dl
		xor edx,edx
        mov ecx,[esp+0x8]
		mov dl,[ecx+0x4]
		mov [eax+0x5],dl
		xor edx,edx
		mov dl,[ecx+0x5]
		mov [eax+0x6],dl
        xor edx,edx
		mov dl,[ecx+0x6]
		mov [eax+0x7],dl
		mov eax,esp
		push eax
		mov ecx,ebp
		mov eax,0x006B2F60
        call eax
		add esp,0x8
		pop eax
		mov dword ptr [eax],0x0
		mov dword ptr [eax+0x4],0x0
        push 0x284D
		mov ecx,0x017323A8
		mov eax,0x007D8550
		call eax
		test eax,eax
        jz BoQuaXoaThongTinNangCapOption
		mov ecx,eax
		mov eax,0x4ADFA0
		call eax
        BoQuaXoaThongTinNangCapOption:
        push 0x006B550C
		ret

		Default:
		pop eax
		mov eax,[esp+0x8DC]
        mov ecx,[esp+0x000008EC]
		push 0x006B54E3
		ret

		XoaChuoi:
		mov eax,[esp+0x4]
		xor ecx,ecx
		BackLoopXoaChuoi:
        mov byte ptr[eax+ecx],0x0
		cmp ecx,[esp+0x8]
		jb NextChuoi
        ret 0x8
		NextChuoi:
		add ecx,0x1
		jmp BackLoopXoaChuoi


		ChuaChonTinhNang:
        add esp,0x8
		push 0xFFFAE6AA
		push 0x1
		push 0xC
		push 0x1289
        jmp ProcessShowError

		ChuaChonVatPham:
		push 0xFFFAE6AA
		push 0x1
		push 0xC
		push 0x128A
		jmp ProcessShowError

		ProcessShowError:
		push 0x19
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x0155EE60
		mov eax,0x006A9800
		call eax
        pop eax
		push 0x006B550C
        ret


    }
}
__declspec(naked) void CheckVatPhamTinhChe()   //0048BCEF 6
{
    __asm
	{
		nop
		nop
		nop
		nop
		nop
		push eax
		xor eax,eax
		mov al,[ecx+0x22DC8+0x16]
		xor al,0x1F
		cmp al,0xA
		jnz KiemTraVatPhamType7
		mov eax,[esp]
		xor edx,edx
		mov dl,[eax]
		cmp edx,0x1
        jnz ChucNangKhacRS
		xor eax,eax
		mov ax,[ecx+0x22DC8+0x14]
		xor ax,0xCE43
		cmp eax,78
		jnz KhongPhaiVatPhamRSCD
		mov edx,[esi]
		mov eax,[esp]
		mov [eax+0x1],dl
		pop eax
		push 0x0048C006
        ret


		KiemTraVatPhamType7:
		cmp al,0x7
		jz KiemTraVatPhamVaoCuaNangCapoption
        cmp al,0x1
		jz BoQuanAoVaoOChon
		jmp Default

		ChucNangKhacRS:
		cmp edx,0x2
		jnz ChucNangQuayOptQuanAo
        xor eax,eax
		mov ax,[ecx+0x22DC8+0x14]
		xor ax,0xCE43
		cmp eax,77
		jnz KhongPhaiVatPhamRSSLTinhChe
        mov edx,[esi]
		mov eax,[esp]
		mov [eax+0x1],dl
        pop eax
		push 0x0048C006
		ret

        ChucNangQuayOptQuanAo:
		cmp edx,0x4
		jnz ChucNangNangCapOptVk
        xor eax,eax
		mov ax,[ecx+0x22DC8+0x14]
		xor ax,0xCE43
		cmp eax,89
		jz AcceptItemRsQuayOptQuanAo
        cmp eax,90
		jz AcceptItemRsQuayOptQuanAo
        jmp KhongPhaiVatPhamRSSLTinhChe

		AcceptItemRsQuayOptQuanAo:
        mov edx,[esi]
		mov eax,[esp]
		mov [eax+0x1],dl
        pop eax
		push 0x0048C006
		ret

        ChucNangNangCapOptVk:
		cmp edx,0x5
		jnz Default
        KiemTraVatPhamVaoCuaNangCapoption:
		xor eax,eax
		mov eax,[esp]
		xor edx,edx
		mov dx,[eax+0x8]
        add edx,0x5F
        xor eax,eax
		mov al,[ecx+0x22DC8+0x16]
		xor al,0x1F
		cmp eax,0x7
		jnz KhongPhaiVatPhamNangCapOptVk
        xor eax,eax
		mov ax,[ecx+0x22DC8+0x14]
		xor ax,0xCE43
		cmp eax,edx
		jnz KiemTraVatPhamNangCapOptionVk2
        mov edx,[esi]
		mov eax,[esp]
		mov [eax+0x4],dl
        pop eax
		push 0x0048C006
		ret



		KiemTraVatPhamNangCapOptionVk2:
		cmp eax,0xD45
		jnz KhongPhaiVatPhamNangCapOptVk
        xor eax,eax
		mov al,[ecx+0x22DC8+0x19]
		xor al,0xC5
		mov edx,[esp]
        xor ecx,ecx
		mov cx,[edx+0xA]
		cmp eax,ecx
		jb KhongDuSoLuongKimHat
        mov eax,[esi]
		imul eax,0x90
		lea ecx,[0x1107258+eax]
        mov edx,[esi]
		mov eax,[esp]
		mov [eax+0x5],dl
        pop eax
		push 0x0048C006
		ret

        BoQuanAoVaoOChon:
		mov eax,[esp]
		xor edx,edx
		mov dl,[eax]
		cmp edx,0x4
		jnz Default
        pop eax
		push 0x0048BDA4
		ret


        Default:
		pop eax
		xor eax,eax
		mov al,[ecx+0x22DDE]
		push 0x0048BCF5
		ret


		KhongPhaiVatPhamRSCD:
        pop eax
        push 0xFFFAE6AA
		push 0x1
		push 0xC
		push 0x127D
		push 0x0048BFEF
		ret

        KhongDuSoLuongKimHat:
        pop eax
        push 0xFFFAE6AA
		push 0x1
		push 0xC
		push 0x118E
		push 0x0048BFEF
        ret


		KhongPhaiVatPhamRSSLTinhChe:
        pop eax
		push 0xFFFAE6AA
		push 0x1
		push 0xC
		push 0x127C
		push 0x0048BFEF
		ret

        KhongPhaiVatPhamNangCapOptVk:
        pop eax
		push 0xFFFAE6AA
		push 0x1
		push 0xC
		push 4511
		push 0x0048BFEF
        ret

    }
}
__declspec(naked) void ByPassMaxTinhChe() //0048BD58 6
{
    __asm
	{
		nop
		nop
		nop
		nop
		nop
		xor edx,edx
		mov dl,[eax]
		test edx,edx
		jz Default
        mov eax,[esi]
		lea ecx,[eax+eax*0x8]
		mov edx,DWORD PTR SS:[0x010D94A8]
		shl ecx,0x4
		lea eax,[ecx+edx]
        xor edx,edx
		push 0x0048BD7D
        ret


		Default:
		mov eax,[esi]
		lea ecx,[eax+eax*0x8]
		mov edx,DWORD PTR SS:[0x010D94A8]
		shl ecx,0x4
		lea eax,[ecx+edx]
        xor edx,edx
		mov dx,[eax+0x00022DEC]
		xor dx,0xCE43
		push 0x0048BD64
        ret
    }
}
__declspec(naked) void ByPassHienFormHoi() //005DCC08 6
{
    __asm
	{
		push 0x005DCC75
        ret
    }
}
__declspec(naked) void ByPassCheckQuanAo() //0048BD7D 7
{
    __asm
	{
		nop
		nop
		nop
		nop
		nop
		xor ecx,ecx
		mov cl,[eax]
		cmp ecx,0x4
		jnz Default
		mov eax,[esi]
		mov edx,[0x010D94A8]
		lea ecx,[eax+eax*0x8]
		shl ecx,0x4
		lea eax,[ecx+edx]
		push 0x0048BDA4
		ret


		Default:
		mov eax,[esi]
		mov edx,[0x010D94A8]
		lea ecx,[eax+eax*0x8]
		shl ecx,0x4
		lea eax,[ecx+edx]
		mov cx,[eax+0x00022DDC]
		push 0x0048BD84
		ret
    }
}
__declspec(naked) void HienThiThoiGianPetDao() //00660673 7
{
    __asm
	{
		nop
		nop
		nop
		nop
		nop
		xor ecx,ecx
		mov ecx,[eax+0x4]
        test ecx,ecx
		jz HienThiFormPetDao
		push eax
		//



        //
		mov eax,DWORD PTR SS:[0x01733B04]
		sub ecx,eax
		mov eax,0x10624DD3
		mul ecx
		mov ecx,edx
		shr ecx,0x6
		push ebp
		mov eax,[esp+0x4]
        push eax
		mov eax,ecx
		xor edx,edx
		mov ebp,0x0000003C
		div ebp
		mov eax,88888889
		push edx
		mul ecx
		shr edx,0x5
		push edx
		mov ebp,0x18
		mov eax,edx
        xor edx,edx
		div ebp
		push eax
		call ShowTimeDao
        //Show texxt
		pop ebp
        pop eax
		push 0x0048BDA4
		ret


		HienThiFormPetDao:
		xor ecx,ecx
		add eax,0x10
		mov ecx,[eax+0x10]
		test ecx,ecx
		jz Default
		sub eax,0x10
		push eax
		xor ecx,ecx
		mov cl,[eax]  // Chon time dao
		push ecx
		xor ecx,ecx
		mov cl,[eax+0x1]   // Vi tri Pet
		push ecx
		xor ecx,ecx
		mov cl,[eax+0x2]   // Vi tri vp chon time dao
		push ecx
		xor ecx,ecx
		mov cl,[eax+0x3]   // Vi tri thuc an
		push ecx
		mov ecx,DWORD PTR SS:[0x01733AD0]
		mov eax,0x007D7FE0
		call eax
		push eax
		call DrawFormPetFunc
		jmp Default

		DrawFormPetFunc:
		mov eax,[esp+0x18]
		nop
		nop
		nop
		nop
		nop
		cmp eax,0x1
		jnz KiemtraTimeDao2
		push 0xFFFFFFFF
        push 0x12C4
        jmp ProcessHienThiTimeDao
		KiemtraTimeDao2:
		cmp eax,0x2
		jnz KiemtraTimeDao3
		push 0xFFFFFFFF
		push 0x12C5
		jmp ProcessHienThiTimeDao

		KiemtraTimeDao3:
		cmp eax,0x3
		jnz KiemtraTimeDao4
		push 0xFFFFFFFF
		push 0x12C6
		jmp ProcessHienThiTimeDao

		KiemtraTimeDao4:
		cmp eax,0x4
		jnz KiemtraTimeDao5
		push 0xFFFFFFFF
		push 0x12C7
		jmp ProcessHienThiTimeDao

		KiemtraTimeDao5:
		cmp eax,0x5
		jnz KiemtraTimeDao6
		push 0xFFFFFFFF
		push 0x12C8
		jmp ProcessHienThiTimeDao

		KiemtraTimeDao6:
		cmp eax,0x6
		jnz UnknowVatPham
		push 0xFFFFFFFF
		push 0x12C9
		jmp ProcessHienThiTimeDao

		UnknowVatPham:
        push 0xFFFFFFFF
		push 0x12CA
		ProcessHienThiTimeDao:
		mov eax,[esp+0xC]
		mov eax,[eax+0x2C]
		xor edx,edx
		mov ecx,0x2
		div ecx
		mov edx,eax
		mov eax,0x50
        nop
		nop
		nop
		nop
		nop
		sub edx,0x20
		nop
		nop
		nop
		nop
		nop
        push eax
		push edx
		call ShowTextPet
		//
        mov eax,[esp+0x18]
		nop
		nop
		nop
		nop
		nop
        test eax,eax
		jz ChuaChonDuThucAn
        push 0xFFFFFFFF
		push 0x12CF
        jmp ProcessHienThiThucAn
        ChuaChonDuThucAn:
        mov eax,[esp+0x18]
		nop
		nop
		nop
		nop
		nop
		cmp eax,0x1
		jnz KiemtraThucAn2
		push 0xFFFFFFFF
        push 0x12CE
		jmp ProcessHienThiThucAn
		KiemtraThucAn2:
		cmp eax,0x2
		jnz KiemtraThucAn3
		push 0xFFFFFFFF
		push 0x12D0
		jmp ProcessHienThiThucAn

		KiemtraThucAn3:
		cmp eax,0x3
		jnz KiemtraThucAn4
		push 0xFFFFFFFF
		push 0x12D1
		jmp ProcessHienThiThucAn

		KiemtraThucAn4:
		cmp eax,0x4
		jnz KiemtraThucAn5
		push 0xFFFFFFFF
		push 0x12D2
		jmp ProcessHienThiThucAn

		KiemtraThucAn5:
		cmp eax,0x5
		jnz KiemtraThucAn6
		push 0xFFFFFFFF
		push 0x12D3
		jmp ProcessHienThiThucAn

		KiemtraThucAn6:
		cmp eax,0x6
		jnz UnknowVatPhamThucAn
		push 0xFFFFFFFF
		push 0x12D4
		jmp ProcessHienThiThucAn

		UnknowVatPhamThucAn:
        push 0xFFFFFFFF
		push 0x12D5
		ProcessHienThiThucAn:
		mov eax,[esp+0xC]
		mov eax,[eax+0x2C]
		xor edx,edx
		mov ecx,0x2
		div ecx
		mov edx,eax
		mov eax,0x78
        nop
		nop
		nop
		nop
		nop
		sub edx,0x8
		nop
		nop
		nop
		nop
		nop
        push eax
		push edx
		call ShowTextPet
		//
		mov eax,[esp+0x18]
		nop
		nop
		nop
		nop
		test eax,eax
        jz ChuaChonPet
        mov eax,[esp+0x18]
		add eax,0x10
		mov  DWORD PTR SS : [eax + 0x70] , 0x123
		mov  DWORD PTR SS : [eax + 0x9C] , 0x00
		mov  DWORD PTR SS : [eax + 0xA0] , 0xB7
		mov  DWORD PTR SS : [eax + 0x98] , 0x00
		mov  DWORD PTR SS : [eax + 0xA4] , 0x58
		push 0x00000000
		push 0x0089E914
		mov eax,[esp+0xC]
		mov eax,[eax+0x2C]
		xor edx,edx
		mov ecx,0x2
		div ecx
		mov edx,eax
		mov ecx,0x50
		mov eax,[esp+0x20]
		add eax,0x10
        add ecx,0x20
		nop
		nop
		nop
		nop
		nop
        nop
		push ecx
        add ecx,0x20
        nop
		nop
		nop
		nop
		nop
        nop
		push edx
		mov edx,eax
		mov ecx, edx
		mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
		call eax
		mov eax,[esp+0x18]
		add eax,0x10
		push 0x1732CC8
		mov ecx, eax
		mov eax, 0x7B9850
		call eax //Draw1
        ChuaChonPet:
		//
		mov eax,[esp+0x18]
		add eax,0x10
		mov  DWORD PTR SS : [eax + 0x70] , 0x123
		mov  DWORD PTR SS : [eax + 0x9C] , 0x00
		mov  DWORD PTR SS : [eax + 0xA0] , 0xB7
		mov  DWORD PTR SS : [eax + 0x98] , 0x00
		mov  DWORD PTR SS : [eax + 0xA4] , 0x58
		push 0x00000000
		push 0x0089E914
		mov eax,[esp+0xC]
		mov eax,[eax+0x2C]
		xor edx,edx
		mov ecx,0x2
		div ecx
		mov edx,eax
		mov ecx,0x50
		mov eax,[esp+0x20]
		add eax,0x10
		push ecx
		push edx
		mov edx,eax
		mov ecx, edx
		mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
		call eax
		mov eax,[esp+0x18]
		add eax,0x10
		push 0x1732CC8
		mov ecx, eax
		mov eax, 0x7B9850
		call eax //Draw1

		ret 0x18






		Default:
		mov eax,[esp+0x40]
        mov eax,[eax+0x00000080]
		push 0x0066067D
		ret


		ShowTextPet:
        mov ecx,DWORD PTR SS:[0x01733AC4]
		mov eax,[esp+0x10]
		push eax
		mov edx,[ecx]
		call dword ptr [edx+0xC]
        mov eax,[esp+0xC]
		push eax
		push 0x19
        mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push 0x0
		mov ecx,[esp+0xC]
		mov edx,[esp+0x8]
		push eax
        push 0x0
		push ecx
		push edx
		mov ecx,DWORD PTR SS:[0x01733AC4]
		mov eax,[ecx]
		call dword ptr [eax+0x24]
		ret 0x10

		ShowTimeDao:
		mov eax,[esp+0xC]
		nop
		nop
		nop
        nop
		push eax
		mov eax,[esp+0x8]
        nop
		nop
		nop
		nop
		push eax
		mov eax,[esp+0x4]
        nop
		nop
		nop
        nop
		push eax
		push 0x163E
		push 0x19
        mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov eax,[esp+0x10]
		nop
		nop
		nop
		nop
		push 0x100
		lea eax,[eax+0x100]
		push eax
        mov eax,0x0085C538
		call dword ptr [eax]
        add esp,0x18
        mov eax,[esp+0x10]
		nop
		nop
		nop
		nop
		lea eax,[eax+0x100]
		ret 0x10
    }
}
__declspec(naked) void BlockSortWareHouse() //006ACB45 7
{
    __asm
	{
		push 0x2746
        mov ecx, 0x017323A8
        mov eax, 0x7D8550
		call eax
		test eax,eax
		jz Default
		mov ecx,[eax+0x10]
		test ecx,ecx
		jz Default
		push 0x005CD785
        ret

		Default:
		mov ecx,0x0155EE60
		push 0x005CD780
		ret
    }
}
__declspec(naked) void DisableLoDiemNutQuick() //007C06F1 7
{
    __asm
	{

		cmp edi,0x15B8
        jnz Default
        mov eax,[esp+0x00000238]
		test eax,eax
        jz Default
		push 0x007C0700
		ret
		Default:
        mov eax,[esp+0x00000238]
		push 0x007C06F8
		ret
    }
}
__declspec(naked) void KhongChoNhanESCKhiLoDiem() //005AD715 7
{
    __asm
	{
		push 0x27D9
        mov ecx, 0x017323A8
        mov eax, 0x7D8550
		call eax
		test eax,eax
		jz Default
		mov ecx,[eax+0x10]
		test ecx,ecx
		jz Default
		mov al, 0x1
		pop edi
		pop esi
		pop ebp
		pop ebx
		add esp, 0x60
		ret 0x8

		Default:
		mov ecx,0x017323A8
        push 0x005AD71A
		ret
    }
}
__declspec(naked) void ByPassErrorDiss() //006A5584 7
{
    __asm
	{
        push 0x006A563B
		ret
    }
}
__declspec(naked) void FixLoiMatOptPhongAnSlotMoi() //006EC4CF 7
{
    __asm
	{
       cmp esi,0x00004EC0
	   push 0x006EC4D5
       ret
    }
}
__declspec(naked) void GetTimeLastTimeActivate() //00623886 7
{
    __asm
	{
		nop
		nop
		nop
		nop
		nop
		mov [edx+0x4],ecx
		mov ecx,DWORD PTR SS:[0x1733B04]
		mov [eax],ecx
        mov DWORD PTR [eax+0x4],0x0
		mov eax,[esp+0x28]
		mov [edx+0x8],eax
		Default:
        push 0x0062388C
		ret
    }
}
__declspec(naked) void CheckTimeActivate() //0065FC76 7
{
    __asm
	{
		nop
		nop
		nop
		nop
		nop
        pushad
		mov ecx,[eax]
		test ecx,ecx
        jz Default
		mov edx,DWORD PTR SS:[0x1733B04]
		cmp edx,ecx
		jb Default
		sub edx,ecx
		cmp edx,0x493E0
		jb Default
		mov ecx,[eax+0x4]
		cmp ecx,0x1
		jz NghiNgoiProcess
		mov DWORD PTR SS:[eax+0x4],0x1
		mov ecx,DWORD PTR SS:[0x010D94A8]
		mov eax,0x006467D0
		call eax
		mov ecx,DWORD PTR SS:[0x010D94A8]
		push 0x0
		mov eax,[ecx]
		call dword ptr [eax+0x20]
		//
		mov ecx,DWORD PTR SS:[0x01733A9C]
		mov eax,0x004B0001
		push eax
		push 0x64
		mov edx,[ecx]
		call dword ptr [edx+0x48]
		jmp NghiNgoiProcess
		//

		Default:
		popad
        mov ecx,DWORD PTR SS:[0x010D94A8]
        push 0x0065FC7C
		ret

		NghiNgoiProcess:
		mov ecx,DWORD PTR SS:[0x01733AC4]
		push 0xFFE6E6E6
		mov edx,[ecx]
		call dword ptr [edx+0xC]
        push 3391
		push 0x19
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		push 0x2
		push 0x3F800000
		mov eax,ebx
		add eax,0x16
		push eax
		mov eax,ebp
		push eax
		mov eax,DWORD PTR SS:[0x01733AC4]
		push eax
		mov edx,[eax]
		call dword ptr [edx+0x30]
		mov ecx,DWORD PTR SS:[0x01733AC4]
		add esp,0x18
		mov edx,[ecx]
		call dword ptr [edx+0x38]
		jmp Default
    }
}
__declspec(naked) void CheckTimeActivate2() //0065FC52 7
{
    __asm
	{
		nop
		nop
		nop
		nop
		nop
        pushad
		mov ecx,[eax]
        test ecx,ecx
        jz Default
		mov edx,DWORD PTR SS:[0x1733B04]
		cmp edx,ecx
		jb Default
		sub edx,ecx
		cmp edx,0x493E0
		jb Default
		mov ecx,[eax+0x4]
		cmp ecx,0x1
		jz NghiNgoiProcess
		mov DWORD PTR SS:[eax+0x4],0x1
		mov ecx,DWORD PTR SS:[0x010D94A8]
		mov eax,0x006467D0
		call eax
		mov ecx,DWORD PTR SS:[0x010D94A8]
		push 0x0
		mov eax,[ecx]
		call dword ptr [eax+0x20]
		//
		mov ecx,DWORD PTR SS:[0x01733A9C]
		mov eax,0x004B0001
		push eax
		push 0x64
		mov edx,[ecx]
		call dword ptr [edx+0x48]
		jmp NghiNgoiProcess
		//

		Default:
		popad
        mov eax,DWORD PTR SS:[0x010D94A8]
        push 0x0065FC57
		ret

		NghiNgoiProcess:
		mov ecx,DWORD PTR SS:[0x01733AC4]
		push 0xFFE6E6E6
		mov edx,[ecx]
		call dword ptr [edx+0xC]
        push 3391
		push 0x19
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		push 0x2
		push 0x3F800000
		mov eax,ebx
		add eax,0x16
		push eax
		mov eax,ebp
		push eax
		mov eax,DWORD PTR SS:[0x01733AC4]
		push eax
		mov edx,[eax]
		call dword ptr [edx+0x30]
		mov ecx,DWORD PTR SS:[0x01733AC4]
		add esp,0x18
		mov edx,[ecx]
		call dword ptr [edx+0x38]
		jmp Default
    }
}
__declspec(naked) void CheckNghiNgoiANotherUser() //00660D16 7
{
    __asm
	{
        pushad
		mov ecx,[esi+0x84FC]
        cmp ecx,0x41
        jnz Default
		jmp NghiNgoiProcess
		//

		Default:
		popad
		mov eax,[esi+0x00009F44]
        push 0x00660D1C
		ret

		NghiNgoiProcess:
		mov ecx,DWORD PTR SS:[0x01733AC4]
		push 0xFFE6E6E6
		mov edx,[ecx]
		call dword ptr [edx+0xC]
        push 3391
		push 0x19
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		push 0x2
		push 0x3F800000
		mov eax,ebp
		add eax,0x16
		push eax
		mov eax,ebx
		push eax
		mov eax,DWORD PTR SS:[0x01733AC4]
		push eax
		mov edx,[eax]
		call dword ptr [edx+0x30]
		mov ecx,DWORD PTR SS:[0x01733AC4]
		add esp,0x18
		mov edx,[ecx]
		call dword ptr [edx+0x38]
		jmp Default
    }
}
__declspec(naked) void UpdateTimeNghiNgoiKhiSuDungSkill() //006ABB96
{
    __asm
	{
        nop
		nop
		nop
		nop
		nop
		xor edx,edx
		mov dl,[ebp+0x8]
		cmp edx,[0x0110F620]
		jnz Default
		mov edx,DWORD PTR SS:[0x1733B04]
		add edx,300000
		mov [eax],edx
		Default:
		xor eax,eax
		mov al,[ebp+0x3]
		mov dl,al
		push 0x006ABB9B
        ret

    }
}
__declspec(naked) void DrawAutoInGame()//0065F9BD
{
	  __asm {
		nop
        nop
		nop
        nop
		nop
		//
        push eax
		mov edx,[eax+0x8]
		test edx,edx
        jnz DaCoGiaTriImage
		add eax,0x8
		push eax
		call AddOptionImage
		//
		DaCoGiaTriImage:
        mov eax,[esp]
        mov edx,dword ptr [0x01733B04]
		mov ecx,[eax+0x4]
		sub edx,ecx
		cmp edx,0x40
		jna ContinueShowGrade
        mov edx,dword ptr [0x01733B04]
		mov [eax+0x4],edx
		mov ecx,[eax]
		add ecx,1
        cmp ecx,7
		ja DaMaxCount
		mov [eax],ecx
		jmp ContinueShowGrade
		DaMaxCount:
		mov DWORD PTR [eax],0x0
		ContinueShowGrade:
		mov eax,[esp]
        mov ecx,[eax]
		push ecx
		add eax,0x8
        push eax
		call GetImageAuto
		push 0x00000000
		push 0x0089E914
		mov ecx,DWORD PTR SS:[0x01733AD0]
		mov eax,0x007D7FE0
		call eax
		mov eax,[eax+0x30]
		xor edx,edx
		mov ecx,0x2
		div ecx
		mov edx,eax
		sub edx,0x50
        push edx
        mov ecx,DWORD PTR SS:[0x01733AD0]
		mov eax,0x007D7FE0
		call eax
		mov ecx,[eax+0x2C]
		add ecx,0x22
		push ecx
		mov ecx, [esp+0x10]
        add ecx,0x8
		mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
		call eax
		pop ecx
        add ecx,0x8
		push 0x1732CC8
		mov eax, 0x7B9850
		call eax //Draw1
		//
		mov edx,[0x10D94A8]
		mov eax,[edx+0x84BC]
		push 0x0065F9C3
		ret

		GetImageAuto:
		mov ecx,[esp+0x8]
		cmp ecx,0x0
		jnz CheckNextImageAuto
        push 5623
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,[esp+0x4]
		mov  DWORD PTR SS : [ecx + 0x70] , eax
		mov  DWORD PTR SS : [ecx + 0x9C] , 0x0
		mov  DWORD PTR SS : [ecx + 0xA0] , 0x30
		mov  DWORD PTR SS : [ecx + 0x98] , 0x00
		mov  DWORD PTR SS : [ecx + 0xA4] , 0x35
		ret 0x8

		CheckNextImageAuto:
		cmp ecx,0x1
		jnz CheckNextImageAuto1
        push 5623
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
        mov ecx,eax
		mov eax,[esp+0x4]
        mov  DWORD PTR SS : [eax + 0x70] , ecx
		mov  DWORD PTR SS : [eax + 0x9C] , 0x0
		mov  DWORD PTR SS : [eax + 0xA0] , 0x62
		mov  DWORD PTR SS : [eax + 0x98] , 0x28
		mov  DWORD PTR SS : [eax + 0xA4] , 0x35
		ret 0x8

		CheckNextImageAuto1:
		cmp ecx,0x2
		jnz CheckNextImageAuto2
        push 5623
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
        mov ecx,eax
		mov eax,[esp+0x4]
		mov  DWORD PTR SS : [eax + 0x70] , ecx
		mov  DWORD PTR SS : [eax + 0x9C] , 0x0
		mov  DWORD PTR SS : [eax + 0xA0] , 0x92
		mov  DWORD PTR SS : [eax + 0x98] , 0x50
		mov  DWORD PTR SS : [eax + 0xA4] , 0x35
		ret 0x8

		CheckNextImageAuto2:
		cmp ecx,0x3
		jnz CheckNextImageAuto3
		push 5623
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
        mov ecx,eax
		mov eax,[esp+0x4]
		mov  DWORD PTR SS : [eax + 0x70] , ecx
		mov  DWORD PTR SS : [eax + 0x9C] , 0x0
		mov  DWORD PTR SS : [eax + 0xA0] , 0xA5
		mov  DWORD PTR SS : [eax + 0x98] , 0x78
		mov  DWORD PTR SS : [eax + 0xA4] , 0x35
		ret 0x8


		CheckNextImageAuto3:
		cmp ecx,0x4
		jnz CheckNextImageAuto4
        push 5623
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
        mov ecx,eax
		mov eax,[esp+0x4]
		mov  DWORD PTR SS : [eax + 0x70] , ecx
		mov  DWORD PTR SS : [eax + 0x9C] , 0x0
		mov  DWORD PTR SS : [eax + 0xA0] , 0xC7
		mov  DWORD PTR SS : [eax + 0x98] , 0xA0
		mov  DWORD PTR SS : [eax + 0xA4] , 0x35
		ret 0x8

		CheckNextImageAuto4:
		cmp ecx,0x5
		jnz CheckNextImageAuto5
		push 5623
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
        mov ecx,eax
		mov eax,[esp+0x4]
		mov  DWORD PTR SS : [eax + 0x70] , ecx
		mov  DWORD PTR SS : [eax + 0x9C] , 0x0
		mov  DWORD PTR SS : [eax + 0xA0] , 0xF1
		mov  DWORD PTR SS : [eax + 0x98] , 0xA0
		mov  DWORD PTR SS : [eax + 0xA4] , 0x35
		ret 0x8

		CheckNextImageAuto5:
		cmp ecx,0x6
		jnz CheckNextImageAuto6
		push 5623
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,eax
		mov eax,[esp+0x4]
		mov  DWORD PTR SS : [eax + 0x70] , ecx
		mov  DWORD PTR SS : [eax + 0x9C] , 0x0
		mov  DWORD PTR SS : [eax + 0xA0] , 0x10D
		mov  DWORD PTR SS : [eax + 0x98] , 0xC8
		mov  DWORD PTR SS : [eax + 0xA4] , 0x35
		ret 0x8

		CheckNextImageAuto6:
		cmp ecx,0x7
		jnz CheckNextImageAuto7
		push 5623
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,eax
		mov eax,[esp+0x4]
		mov  DWORD PTR SS : [eax + 0x70] , ecx
		mov  DWORD PTR SS : [eax + 0x9C] , 0x0
		mov  DWORD PTR SS : [eax + 0xA0] , 0x117
		mov  DWORD PTR SS : [eax + 0x98] , 0xF0
		mov  DWORD PTR SS : [eax + 0xA4] , 0x35
		ret 0x8

		CheckNextImageAuto7:
		push 5623
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,eax
		mov eax,[esp+0x4]
		mov  DWORD PTR SS : [eax + 0x70] , ecx
		mov  DWORD PTR SS : [eax + 0x9C] , 0x0
		mov  DWORD PTR SS : [eax + 0xA0] , 0x13F
		mov  DWORD PTR SS : [eax + 0x98] , 0x118
		mov  DWORD PTR SS : [eax + 0xA4] , 0x35
		ret 0x8


        AddOptionImage:
		sub esp,0x4
		xor ecx,ecx
		mov [esp],ecx
        BackGetOptionImage:
		mov ecx,[esp]
		mov eax,0x010CC088
		mov edx,[eax+ecx]
		mov eax,[esp+0x8]
		mov [eax+ecx],edx
		add ecx,4
		mov [esp],ecx
		cmp ecx,0xB8
        jl BackGetOptionImage
        add esp,0x4
		ret 0x4
	}
}
__declspec(naked)void HeThongPetReceivePackage()  //006AAC57
{
	__asm
	{
		nop
		nop
		nop
		nop
		nop
		push eax
        xor eax,eax
		mov al, [ebp+0x2]
		cmp al,0xC1
		jnz Default
		mov al,[ebp+0x3]
		cmp al,0xEF
		jnz Default
        mov al,[ebp+0x4]
		cmp al,0xB1 //KiemTra Thanh Cong
		jnz KhongPhaiPet
		// Get Info Pet from Package
		lea eax,[ebp+0x5]
		push eax
		call GetInforPetFromPackage
        xor eax,eax
		mov al,[ebp+0x41]
        imul eax,0x90
		lea ecx,[eax+0x1107258+0x00022DC8]
		mov eax,[eax+0x1107258+0x00022DC8]
		call dword ptr [eax+0x4]
        push 5250
		call ShowTextInforPackage
        push 0x006B0660
		ret

        KhongPhaiPet:
        cmp al,0xB2 //Ko Phai Pet
		jnz DaMaxGioiHanPet
		push 5251
		call ShowTextInforPackage
		jmp KhongTimThayPackage

		DaMaxGioiHanPet:
        cmp al,0xB3 //Da Max Gioi Han
		jnz ReloadPetInfo
        push 5252
		call ShowTextInforPackage
		jmp KhongTimThayPackage

		ReloadPetInfo:
		cmp al,0xB4 //Reload Pet
		jnz KhongPhaiVpThucTInh
        lea eax,[ebp+0x5]
		push eax
		call GetInforPetFromPackage
        push 0x006B0660
		ret


		KhongPhaiVpThucTInh:
		cmp al,0xB5 //Reload Pet
		jnz KhongDuSLVpThucTinh
		push 5253
		call ShowTextInforPackage
		jmp KhongTimThayPackage

		KhongDuSLVpThucTinh:
		cmp al,0xB9 //Reload Pet
		jnz KhongTimThayPet
		push 5254
		call ShowTextInforPackage
		jmp KhongTimThayPackage

		KhongTimThayPet:
		cmp al,0xB6 //Reload Pet
		jnz PetDaThucTinh
		push 5252
		call ShowTextInforPackage
		jmp KhongTimThayPackage

		PetDaThucTinh:
		cmp al,0xB7 //Reload Pet
		jnz KoThePhaPhongAnPet
		push 5247
		call ShowTextInforPackage
		jmp KhongTimThayPackage

        KoThePhaPhongAnPet:
		cmp al,0xCA //Reload Pet
		jnz VPDaCoPhongAn
		push 5526
		call ShowTextInforPackage
		jmp KhongTimThayPackage

		VPDaCoPhongAn:
		cmp al,0xCB //Reload Pet
		jnz KhongDuDiemHonNang
		push 5527
		call ShowTextInforPackage
		jmp KhongTimThayPackage

        KhongDuDiemHonNang:
		cmp al,0xCC //Reload Pet
		jnz KhongDuLevelBuff
		push 5528
		call ShowTextInforPackage
		jmp KhongTimThayPackage

		KhongDuLevelBuff:
		cmp al,0xCD //Reload Pet
		jnz PetHienTaiKhongTrieuHoi
		push 5529
		call ShowTextInforPackage
		jmp KhongTimThayPackage

		PetHienTaiKhongTrieuHoi:
		cmp al,0xCE //Reload Pet
		jnz KhongRoLoiBuffPet
		push 5530
		call ShowTextInforPackage
		jmp KhongTimThayPackage

		KhongRoLoiBuffPet:
		cmp al,0xD0 //Reload Pet
		jnz BuffPetThanhCong
		push 5531
		call ShowTextInforPackage
		jmp KhongTimThayPackage

		BuffPetThanhCong:
		cmp al,0xCF //Reload Pet
		jnz PhaBoPhongAnThanhCong
        lea eax,[ebp+0x5]
		push eax
		call GetInforPetFromPackage
        push 5255
		call ShowTextInforPackage
        push 0x006B0660
		ret

		PhaBoPhongAnThanhCong:
		cmp al,0xC9 //Reload Pet
		jnz ThucTinhPetThanhCong
		lea eax,[ebp+0x5]
		push eax
		call GetInforPetFromPackage
        xor eax,eax
		mov al,[ebp+0x41]
        imul eax,0x90
		lea ecx,[eax+0x1107258+0x00022DC8]
		mov eax,[eax+0x1107258+0x00022DC8]
		call dword ptr [eax+0x4]
        push 5249
		call ShowTextInforPackage
        push 0x006B0660
		ret

		ThucTinhPetThanhCong:
        cmp al,0xB8 //Reload Pet
		jnz NangCapPetThanhCong
		lea eax,[ebp+0x5]
		push eax
		call GetInforPetFromPackage
        xor eax,eax
		mov al,[ebp+0x41]
		test eax,eax
		jz EndFuncThucTinhPet
        mov al,[ebp+0x42]
		test eax,eax
		jnz ConVPThucTinhPet
        xor eax,eax
		mov al,[ebp+0x41]
        imul eax,0x90
		lea ecx,[eax+0x1107258+0x00022DC8]
		mov eax,[eax+0x1107258+0x00022DC8]
		call dword ptr [eax+0x4]
		jmp EndFuncThucTinhPet
		ConVPThucTinhPet:
        xor eax,eax
        mov al,[ebp+0x41]
		imul eax,0x90
		xor ecx,ecx
		mov cl,[ebp+0x42]
		xor cl,0xC5
	  	mov [0x1107258+0x22DC8+eax+0x19],cl
		EndFuncThucTinhPet:
        push 5250
		call ShowTextInforPackage
        push 0x006B0660
		ret

        NangCapPetThanhCong:
		cmp al,0xBA // Nang Cap Pet Thanh Cong
		jnz NangCapPetThatBai
		lea eax,[ebp+0x5]
		push eax
		call GetInforPetFromPackage
        xor eax,eax
		mov al,[ebp+0x41]
		test eax,eax
		jz EndFuncNangCapPet
        mov al,[ebp+0x42]
		test eax,eax
		jnz ConVPNangCapPet
        xor eax,eax
		mov al,[ebp+0x41]
        imul eax,0x90
		lea ecx,[eax+0x1107258+0x00022DC8]
		mov eax,[eax+0x1107258+0x00022DC8]
		call dword ptr [eax+0x4]
		jmp EndFuncNangCapPet
		ConVPNangCapPet:
        xor eax,eax
        mov al,[ebp+0x41]
		imul eax,0x90
		xor ecx,ecx
		mov cl,[ebp+0x42]
		xor cl,0xC5
	  	mov [0x1107258+0x22DC8+eax+0x19],cl
		EndFuncNangCapPet:
        push 5250
		call ShowTextInforPackage
        push 0x006B0660
		ret

        NangCapPetThatBai:
		cmp al,0xBB // N/c That Bai
		jnz PhongAnPetThanhCong
        lea eax,[ebp+0x5]
		push eax
		call GetInforPetFromPackage
        xor eax,eax
		mov al,[ebp+0x41]
		test eax,eax
		jz EndFuncNangCapPetThatBai
        mov al,[ebp+0x42]
		test eax,eax
		jnz ConVPNangCapPetThatBai
        xor eax,eax
		mov al,[ebp+0x41]
        imul eax,0x90
		lea ecx,[eax+0x1107258+0x00022DC8]
		mov eax,[eax+0x1107258+0x00022DC8]
		call dword ptr [eax+0x4]
		jmp EndFuncNangCapPetThatBai
		ConVPNangCapPetThatBai:
        xor eax,eax
        mov al,[ebp+0x41]
		imul eax,0x90
		xor ecx,ecx
		mov cl,[ebp+0x42]
		xor cl,0xC5
	  	mov [0x1107258+0x22DC8+eax+0x19],cl
		EndFuncNangCapPetThatBai:
		push 5247
		call ShowTextInforPackage
		push 0x006B0660
		ret

		PhongAnPetThanhCong:
		cmp al,0xBD // Phong An Pet Thanh Cong
		jnz PhongAnPetThatBai
		lea eax,[ebp+0x5]
		push eax
		call GetInforPetFromPackage
        xor eax,eax
		mov al,[ebp+0x41]
		test eax,eax
		jz EndFuncPhongAnPetThanhCong
        mov al,[ebp+0x42]
		test eax,eax
		jnz EndFuncPhongAnPetThanhCong
        xor eax,eax
		mov al,[ebp+0x41]
        imul eax,0x90
		lea ecx,[eax+0x1107258+0x00022DC8]
		mov eax,[eax+0x1107258+0x00022DC8]
		call dword ptr [eax+0x4]
        jmp EndFuncPhongAnPettThatBai111
		EndFuncPhongAnPetThanhCong:
        xor eax,eax
        mov al,[ebp+0x41]
		imul eax,0x90
		xor ecx,ecx
		mov cl,[ebp+0x42]
		xor cl,0xC5
		mov [0x1107258+0x22DC8+eax+0x19],cl
		EndFuncPhongAnPettThatBai111:
        push 5250
		call ShowTextInforPackage
        push 0x006B0660
		ret

		PhongAnPetThatBai:
		cmp al,0xBE // P/A That Bai
		jnz KoroLoiPetNangCap
		push 5531
		call ShowTextInforPackage
		jmp KhongTimThayPackage

        KoroLoiPetNangCap:
		cmp al,0xC3 // P/A That Bai
		jnz DaMaxCapPet
		push 5248
		call ShowTextInforPackage
		jmp KhongTimThayPackage

		DaMaxCapPet:
		cmp al,0xC2 // P/A That Bai
		jnz KoPhaiThucAnPet
		push 5532
		call ShowTextInforPackage
		jmp KhongTimThayPackage

        KoPhaiThucAnPet:
		cmp al,0xC4 // P/A That Bai
		jnz KoDuSlThucAnPet
		push 5526
		call ShowTextInforPackage
		jmp KhongTimThayPackage

        KoDuSlThucAnPet:
		cmp al,0xC6 // P/A That Bai
		jnz KhongDuLevelDeDao
		push 5535
		call ShowTextInforPackage
		jmp KhongTimThayPackage

		KhongDuLevelDeDao:
		cmp al,0xD1 // P/A That Bai
		jnz DaoMap5KhongCoVpHoTro
		push 5536
		call ShowTextInforPackage
		jmp KhongTimThayPackage

		DaoMap5KhongCoVpHoTro:
		cmp al,0xD2 // P/A That Bai
		jnz HuyDaoThanhCong
		push 5537
		call ShowTextInforPackage
		jmp KhongTimThayPackage

		HuyDaoThanhCong:
		cmp al,0xD5 // P/A That Bai
		jnz PetChuaDaoKoHuyDc
        lea eax,[ebp+0x5]
		push eax
		call GetInforPetFromPackage
		push 5538
		call ShowTextInforPackage
		push 0x006B0660
		ret

		PetChuaDaoKoHuyDc:
		cmp al,0xD6 // P/A That Bai
		jnz KhongTheTrieuHoiPet
		push 5539
		call ShowTextInforPackage
		jmp KhongTimThayPackage

		//Huy Trieu Hoi va Trieu Hoi
		KhongTheTrieuHoiPet:
		cmp al,0xDA // P/A That Bai
		jnz PetDangCoHoatDongKhac
		push 5540
		call ShowTextInforPackage
		jmp KhongTimThayPackage

		PetDangCoHoatDongKhac:
		cmp al,0xDC // P/A That Bai
		jnz KhongTheHuyTrieuHoi
		push 5541
		call ShowTextInforPackage
		jmp KhongTimThayPackage

		KhongTheHuyTrieuHoi:
		cmp al,0xDE // P/A That Bai
		jnz KhongRoLoiXinLienHeGM
		push 5542
		call ShowTextInforPackage
		jmp KhongTimThayPackage

		KhongRoLoiXinLienHeGM:
		cmp al,0xDF // P/A That Bai
		jnz TrieuHoiThanhCong
		push 5543
		call ShowTextInforPackage
		jmp KhongTimThayPackage

		TrieuHoiThanhCong:
		cmp al,0xDB // P/A That Bai
		jnz HuyTrieuHoiThanhCong
		lea eax,[ebp+0x5]
		push eax
		call GetInforPetFromPackage
		push 5544
		call ShowTextInforPackage
		push 0x006B0660
		ret

		HuyTrieuHoiThanhCong:
		cmp al,0xDD // P/A That Bai
		jnz ChuaDuThoiGianNhanQua
		lea eax,[ebp+0x5]
		push eax
		call GetInforPetFromPackage
		push 5545
		call ShowTextInforPackage
		push 0x006B0660
		ret
		//

		ChuaDuThoiGianNhanQua:
		cmp al,0xD7 // P/A That Bai
		jnz KhongRoLoiKhiNhanQua
		push 5546
		call ShowTextInforPackage
		jmp KhongTimThayPackage

		KhongRoLoiKhiNhanQua:
		cmp al,0xD8 // P/A That Bai
		jnz NhanQuaDaoThanhCong
		push 5547
		call ShowTextInforPackage
		jmp KhongTimThayPackage


		NhanQuaDaoThanhCong:
		cmp al,0xD9 // P/A That Bai
		jnz PetDaoThanhCong
		lea eax,[ebp+0x5]
		push eax
		call GetInforPetFromPackage
		push 5548
		call ShowTextInforPackage
		push 0x006B0660
		ret


		PetDaoThanhCong:
		cmp al,0xD3 // P/A That Bai
		jnz PetAnThanhCong
        lea eax,[ebp+0x5]
		push eax
		call GetInforPetFromPackage
		xor eax,eax
		mov al,[ebp+0x41]
		test eax,eax
		jz EndFuncDaoProcessPet
		mov al,[ebp+0x42]
		test eax,eax
		jnz ConVPHoTroDaoPet
		xor eax,eax
		mov al,[ebp+0x41]
		imul eax,0x90
		lea ecx,[eax+0x1107258+0x00022DC8]
		mov eax,[eax+0x1107258+0x00022DC8]
		call dword ptr [eax+0x4]
		jmp EndFuncDaoProcessPet
		ConVPHoTroDaoPet:
		xor eax,eax
		mov al,[ebp+0x41]
		imul eax,0x90
		xor ecx,ecx
		mov cl,[ebp+0x42]
		xor cl,0xC5
		mov [0x1107258+0x22DC8+eax+0x19],cl
		EndFuncDaoProcessPet:
		push 5549
		call ShowTextInforPackage
		push 0x006B0660
		ret

        PetAnThanhCong:
		cmp al,0xBF // Phong An Pet Thanh Cong
		jnz KhongTimThayPackage
		lea eax,[ebp+0x5]
		push eax
		call GetInforPetFromPackage
		xor eax,eax
		mov al,[ebp+0x41]
		test eax,eax
		jz EndFuncThucAnPet
		mov al,[ebp+0x42]
		test eax,eax
		jnz ConVPThucAnPet
		xor eax,eax
		mov al,[ebp+0x41]
		imul eax,0x90
		lea ecx,[eax+0x1107258+0x00022DC8]
		mov eax,[eax+0x1107258+0x00022DC8]
		call dword ptr [eax+0x4]
		jmp EndFuncThucAnPet
		ConVPThucAnPet:
		xor eax,eax
		mov al,[ebp+0x41]
		imul eax,0x90
		xor ecx,ecx
		mov cl,[ebp+0x42]
		xor cl,0xC5
		mov [0x1107258+0x22DC8+eax+0x19],cl
		EndFuncThucAnPet:
        push 5250
		call ShowTextInforPackage
        push 0x006B0660
		ret


		KhongTimThayPackage:
		pop eax
		mov DWORD PTR [eax+0x50],0x0
		mov byte ptr [eax+0x54],0x0
		mov byte ptr [eax+0x55],0x0
		mov byte ptr [eax+0x57],0x0
		mov byte ptr [eax+0x58],0x0
		push 0x006B0660
        ret


		Default:
        pop eax
		xor ecx,ecx
        xor eax,eax
		mov al,[ebp+0x2]
        mov cl,[eax+0x006B2494]
		push 0x006AAC5F
		ret

		ShowTextInforPackage:
		push 0xFFFAE6AA
		push 0x1
		push 0xC
		mov eax,[esp+0x10]
        push eax
		push 0x19
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x0155EE60
		mov eax,0x006A9800
		call eax
		ret 0x4



		GetInforPetFromPackage:
		sub esp,0x8
		xor ecx,ecx
		mov [esp],ecx
		mov [esp+0x4],ecx
        BackLoopCheckPet:
		mov eax,[esp+0xC]
        mov ecx,[esp+0x4]
		imul ecx,0xF
		xor edx,edx
		mov dl,[eax+ecx]
		mov ebx,[esp+0x10]
		mov edi,[esp]
        imul edi,0x10
		mov [ebx+edi],dl // typet
		xor edx,edx
		mov dx,[eax+ecx+0x2]
		mov [ebx+edi+0x2],dx // idpet
		//
        xor edx,edx
		mov dl,[eax+ecx+0x4]
		mov [ebx+edi+0x4],dl // lvpet
		//
        xor edx,edx
		mov dl,[eax+ecx+0x5]
		mov [ebx+edi+0x5],dl // statuspet
        //
        xor edx,edx
		mov dx,[eax+ecx+0x6]
		cmp edx,0xFFFF
		jnz KiemTraSkill5Pet
		mov edx,0x1
		jmp AddSkillPet5

		KiemTraSkill5Pet:
        cmp edx,0xFFFF
		jnz KiemTraSkill5Pet1
		mov edx,0x2
		jmp AddSkillPet5

		KiemTraSkill5Pet1:
        cmp edx,0xFFFF
		jnz KiemTraSkill5Pet2
		mov edx,0x3
		jmp AddSkillPet5

		KiemTraSkill5Pet2:
        cmp edx,0xFFFF
		jnz KiemTraSkill5Pet3
		mov edx,0x4
		jmp AddSkillPet5

		KiemTraSkill5Pet3:
        cmp edx,0xFFFF
		jnz KiemTraSkill5Pet4
		mov edx,0x5
		jmp AddSkillPet5

		KiemTraSkill5Pet4:
        cmp edx,0xFFFF
		jnz KiemTraSkill5Pet5
		mov edx,0x6
		jmp AddSkillPet5

		KiemTraSkill5Pet5:
		mov edx,0x0
		AddSkillPet5:
		mov [ebx+edi+0x1],dl // statuspet
		//
		xor edx,edx
		mov dx,[eax+ecx+0x8]
		mov [ebx+edi+0x6],dx // honnang
		//
        xor edx,edx
		mov edx,[eax+ecx+0xA]
		mov [ebx+edi+0x8],edx // timeleft
		//
		mov edx,DWORD PTR SS:[0x01733B04]
		mov [ebx+edi+0xC],edx // currenttimestart
		//
		mov edi,[esp]
		add edi,0x1
		mov [esp],edi
		cmp edi,0x4
        ja EndFunGetInforPet
		CheckAnotherPet:
		mov ecx,[esp+0x4]
		add ecx,0x1
		mov [esp+0x4],ecx
		cmp ecx,0x4
		jb BackLoopCheckPet
		EndFunGetInforPet:
		mov eax,[esp+0x10]
		mov DWORD PTR [eax+0x50],0x0
		mov byte ptr [eax+0x54],0x0
		mov byte ptr [eax+0x55],0x0
		mov byte ptr [eax+0x57],0x0
		mov byte ptr [eax+0x58],0x0
		mov byte ptr [eax+0x59],0x0
		add esp,0x8
		ret 0x8


	}
}
__declspec(naked) void GetViTriPetDao() //0048C340 7
{
    __asm
	{
		nop
		nop
		nop
		nop
		nop
        push eax
		push 0x275A
        mov ecx, 0x017323A8
        mov eax, 0x7D8550
		call eax
		test eax,eax
		jz Default
		mov ecx,[eax+0x33C]
		cmp ecx,0x4
		jnz Default
        mov eax,[eax+0x36C]
		mov ecx,[eax+0x10]
        test ecx,ecx
		jz Default
		mov ecx,[eax+0x3D0]
		cmp ecx,0x4
		jnz Default
		mov eax,[esi+0x98]
		imul eax,0x90
		xor edx,edx
		mov dx,[eax+0x1107258+0x22DC8+0x14]
		xor dx,0xCE43
		cmp edx,1183
		jb VpPhongAnPet
		cmp edx,1202
		ja VpPhongAnPet
		pop eax
        mov ecx,[esi+0x98]
		mov [eax+0x52],cl
		mov byte ptr[eax+0x53],0x0
		mov byte ptr[eax+0x54],0x0
		mov byte ptr[eax+0x55],0x0
		mov byte ptr[eax+0x57],0x0
		mov byte ptr[eax+0x58],0x0
		mov byte ptr[eax+0x59],0x0
		push 0x0048DCCB
		ret

		Default:
		pop eax
        mov eax,[esi+0x00000098]
        mov ebx,DWORD PTR SS:[0x010D94A8]
		push 0x0048C346
		ret

		VpPhongAnPet:
		pop eax
        mov ecx,[esi+0x98]
		mov [eax+0x59],cl
		mov byte ptr[eax+0x53],0x0
		mov byte ptr[eax+0x54],0x0
		mov byte ptr[eax+0x55],0x0
		mov byte ptr[eax+0x57],0x0
		mov byte ptr[eax+0x58],0x0
		mov byte ptr[eax+0x52],0x0
		push 0x0048DCCB
		ret

		KhongPhaiPet:
        push 0xFFFAE6AA
		push 0x1
		push 0xC
		push 0x1339
		push 0x19
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x0155EE60
		mov eax,0x006A9800
		call eax
		pop eax
        push 0x0048DCCB
		ret

    }
}
__declspec(naked) void GetViTriThucAnPet() //0048C953 7
{
    __asm
	{
		nop
		nop
		nop
		nop
		nop
		push eax
		push 0x275A
		mov ecx, 0x017323A8
		mov eax, 0x7D8550
		call eax
		test eax,eax
		jz Default
		mov ecx,[eax+0x33C]
		cmp ecx,0x4
		jnz Default
		mov eax,[eax+0x36C]
		mov ecx,[eax+0x10]
		test ecx,ecx
		jz Default
		mov ecx,[eax+0x3D0]
		cmp ecx,0x4
		jnz Default
		mov eax,[esi+0x98]
		imul eax,0x90
		xor edx,edx
		mov dx,[eax+0x1107258+0x22DC8+0x14]
		xor dx,0xCE43
		cmp edx,0xFC
		jz AcceptThucAnChoPet
		cmp edx,0xFD
		jz AcceptThucAnChoPet
		cmp edx,0xFE
		jz AcceptThucAnChoPet
        jmp KhongPhaiThucAnPet

        AcceptThucAnChoPet:
		pop eax
		xor ecx,ecx
		mov cl,[eax+0x51]
		test ecx,ecx
		jz ChuaChonPet
		mov ecx,[esi+0x98]
		mov [eax+0x54],cl
		mov byte ptr[eax+0x52],0x0
		mov byte ptr[eax+0x53],0x0
		mov byte ptr[eax+0x59],0x0
		mov byte ptr[eax+0x55],0x0
		mov byte ptr[eax+0x57],0x0
		mov byte ptr[eax+0x58],0x0
		push 0x0048DCCB
		ret


		Default:
		pop eax
        mov eax,[esi+0x00000098]
		push 0x0048C959
		ret

		KhongPhaiThucAnPet:
		push 0xFFFAE6AA
		push 0x1
		push 0xC
		push 0x133A
		push 0x19
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x0155EE60
		mov eax,0x006A9800
		call eax
        pop eax
		push 0x0048DCCB
		ret

        ChuaChonPet:
		push 0xFFFAE6AA
		push 0x1
		push 0xC
		push 0x133B
		push 0x19
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x0155EE60
		mov eax,0x006A9800
		call eax
		push 0x0048DCCB
		ret

    }
}
__declspec(naked) void GetViTriVatPhamTimeDao() //0048CAA1 7
{
    __asm
	{
		nop
		nop
		nop
		nop
		nop
        push eax
		push 0x275A
        mov ecx, 0x017323A8
        mov eax, 0x7D8550
		call eax
		test eax,eax
		jz Default
		mov ecx,[eax+0x10]
		test ecx,ecx
        jz Default
		mov ecx,[eax+0x33C]
		cmp ecx,0x4
		jnz Default
		mov eax,[eax+0x36C]
		mov ecx,[eax+0x10]
        test ecx,ecx
		jz Default
		mov ecx,[eax+0x3D0]
		cmp ecx,0x4
		jnz Default
		mov eax,[esi+0x98]
		imul eax,0x90
		xor edx,edx
		mov dx,[eax+0x1107258+0x22DC8+0x14]
		xor dx,0xCE43
		cmp edx,0xFF
		jnz getVpThucTinhPet
		pop eax
		xor ecx,ecx
        mov cl,[eax+0x51]
		test ecx,ecx
		jz ChuaCoPet
		mov ecx,[esi+0x98]
		mov [eax+0x55],cl
        mov byte ptr[eax+0x52],0x0
		mov byte ptr[eax+0x53],0x0
		mov byte ptr[eax+0x54],0x0
		mov byte ptr[eax+0x57],0x0
		mov byte ptr[eax+0x58],0x0
		mov byte ptr[eax+0x59],0x0
        push 0x0048DCCB
        ret


		getVpThucTinhPet:
		cmp edx,0x101
		jnz getVPnangcapPet
		pop eax
		xor ecx,ecx
		mov cl,[eax+0x51]
		test ecx,ecx
		jz ChuaCoPet
		sub ecx,1
		imul ecx,0x10
		xor edx,edx
		mov dl,[eax+ecx+4]
		test edx,edx
        jnz PetDaThucTinh
		mov ecx,[esi+0x98]
		mov [eax+0x57],cl
		mov byte ptr[eax+0x52],0x0
		mov byte ptr[eax+0x55],0x0
		mov byte ptr[eax+0x53],0x0
		mov byte ptr[eax+0x54],0x0
		mov byte ptr[eax+0x59],0x0
        mov byte ptr[eax+0x58],0x0
		push 0x0048DCCB
		ret

		getVPnangcapPet:
		cmp edx,0x100
		jnz getVPPhongAnPet
		pop eax
		xor ecx,ecx
		mov cl,[eax+0x51]
		test ecx,ecx
		jz ChuaCoPet
		sub ecx,1
		imul ecx,0x10
		xor edx,edx
		mov dl,[eax+ecx+4]
		cmp edx,0x5
		jz PetDaMaxLevel
		mov ecx,[esi+0x98]
		mov [eax+0x58],cl
		mov byte ptr[eax+0x52],0x0
		mov byte ptr[eax+0x55],0x0
		mov byte ptr[eax+0x53],0x0
		mov byte ptr[eax+0x54],0x0
		mov byte ptr[eax+0x57],0x0
        mov byte ptr[eax+0x59],0x0
		push 0x0048DCCB
		ret

		getVPPhongAnPet:
		cmp edx,0x103
		jnz SuDungVpTangHonNang
		pop eax
		xor ecx,ecx
		mov cl,[eax+0x51]
		test ecx,ecx
		jz ChuaCoPet
		mov ecx,[esi+0x98]
		mov [eax+0x53],cl
		mov byte ptr[eax+0x52],0x0
		mov byte ptr[eax+0x55],0x0
		mov byte ptr[eax+0x54],0x0
		mov byte ptr[eax+0x57],0x0
		mov byte ptr[eax+0x59],0x0
		mov byte ptr[eax+0x58],0x0
		push 0x0048DCCB
		ret

        SuDungVpTangHonNang:
		cmp edx,252
		jnz SuDungVpTangHonNang1
		AddVPHoaNangPet:
        mov eax,[esp]
		xor ecx,ecx
		mov cl,[eax+0x51]
		test ecx,ecx
		jz ChuaCoPetHoaNang
        sub ecx,1
		imul ecx,0x10
		xor edx,edx
		mov dl,[eax+ecx+4]
		push edx
        xor edx,edx
		mov dx,[eax+ecx+6]
        push edx
		call GetDieuKienHoaNang
		cmp eax,2
		jz KhongRoLevelPetSDHoaNang
		cmp eax,1
		jz PetDaMaxHoaNang
		cmp eax,0x0
		jnz PetDaMaxHoaNang
        pop eax
		mov ecx,[esi+0x98]
		mov [eax+0x54],cl
		mov byte ptr[eax+0x52],0x0
		mov byte ptr[eax+0x53],0x0
		mov byte ptr[eax+0x55],0x0
		mov byte ptr[eax+0x57],0x0
		mov byte ptr[eax+0x59],0x0
		mov byte ptr[eax+0x58],0x0
		push 0x0048DCCB
		ret

		SuDungVpTangHonNang1:
		cmp edx,253
		jnz SuDungVpTangHonNang2
		jmp AddVPHoaNangPet

		SuDungVpTangHonNang2:
		cmp edx,254
		jnz SuDungVpTangHonNang3
		jmp AddVPHoaNangPet

		SuDungVpTangHonNang3:
		cmp edx,251
		jnz KhongPhaiVp
		jmp AddVPHoaNangPet



		Default:
		pop eax
		movsx eax, word ptr [esi+0x1C]
		mov ecx,DWORD PTR SS:[0x01733A9C]
        xor eax,0xFFFFCE43
        mov ebx,0x00000009
		push 0x0048CAA6
		ret

		KhongPhaiVp:
        push 0xFFFAE6AA
		push 0x1
		push 0xC
		push 0x1338
		push 0x19
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x0155EE60
		mov eax,0x006A9800
		call eax
		pop eax
        push 0x0048DCCB
		ret

		ChuaCoPet:
        push 0xFFFAE6AA
		push 0x1
		push 0xC
		push 0x133B
		push 0x19
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x0155EE60
		mov eax,0x006A9800
		call eax
        push 0x0048DCCB
		ret

		KhongRoLevelPetSDHoaNang:
        push 0xFFFAE6AA
		push 0x1
		push 0xC
		push 4434
		push 0x19
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x0155EE60
		mov eax,0x006A9800
		call eax
		pop eax
        push 0x0048DCCB
		ret

        ChuaCoPetHoaNang:
        push 0xFFFAE6AA
		push 0x1
		push 0xC
		push 0x133B
		push 0x19
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x0155EE60
		mov eax,0x006A9800
		call eax
		pop eax
        push 0x0048DCCB
		ret

		PetDaMaxHoaNang:
        push 0xFFFAE6AA
		push 0x1
		push 0xC
		push 4435
		push 0x19
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x0155EE60
		mov eax,0x006A9800
		call eax
		pop eax
        push 0x0048DCCB
		ret

		PetDaThucTinh:
		push 0xFFFAE6AA
		push 0x1
		push 0xC
		push 4433
		push 0x19
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x0155EE60
		mov eax,0x006A9800
		call eax
		push 0x0048DCCB
		ret

        PetDaMaxLevel:
		push 0xFFFAE6AA
		push 0x1
		push 0xC
		push 4433
		push 0x19
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x0155EE60
		mov eax,0x006A9800
		call eax
		push 0x0048DCCB
		ret

		GetDieuKienHoaNang:
		mov eax,[esp+0x8]
		cmp eax,0x1
		jnz KiemTraLevel1
		mov eax,[esp+0x4]
		cmp eax,200
		jae FullHoaNang
		mov eax,0x0
        ret 0x8

		KiemTraLevel1:
		cmp eax,0x2
		jnz KiemTraLevel2
        mov eax,[esp+0x4]
		cmp eax,300
		jae FullHoaNang
		mov eax,0x0
		ret 0x8

		KiemTraLevel2:
		cmp eax,0x3
		jnz KiemTraLevel3
        mov eax,[esp+0x4]
		cmp eax,400
		jae FullHoaNang
		mov eax,0x0
		ret 0x8

		KiemTraLevel3:
		cmp eax,0x4
		jnz KiemTraLevel4
        mov eax,[esp+0x4]
		cmp eax,500
		jae FullHoaNang
		mov eax,0x0
		ret 0x8

		KiemTraLevel4:
		cmp eax,0x5
		jnz UnknowErrorHoaNang
        mov eax,[esp+0x4]
		cmp eax,600
		jae FullHoaNang
		mov eax,0x0
		ret 0x8

		UnknowErrorHoaNang:
		mov eax,0x2
		ret 0x8

		FullHoaNang:
		mov eax,0x1
        ret 0x8

    }
}
__declspec(naked) void AcceptTab4() //004FEDDE
{
	__asm
	{
	   mov eax,[esp+0xC]
	   cmp eax,0x5
	   push 0x004FEDE5
       ret
	}
}
__declspec(naked) void TablePet() //004FC44D
{
	__asm
	{
        mov eax,[ebx+0x000003D0]
		cmp eax,0x4
        jnz Default
		// Ve Nen 1
		push 0xAAFFFFFF
		push 0x0
		mov ecx,[ebx+0x18]
		add ecx,0xC0
		mov eax,[ebx+0x14]
		add eax,0xE5
		push ecx
		push eax
		sub ecx,0x93
		push ecx
		sub eax,0xE6
		push eax
		fild    dword ptr [esp+0xC]
		fstp    dword ptr [esp+0xC]
		fild    dword ptr [esp+0x8]
		fstp    dword ptr [esp+0x8]
		fild    dword ptr [esp+0x4]
		fstp    dword ptr [esp+0x4]
		fild    dword ptr [esp]
		fstp    dword ptr [esp]
		mov eax,0x007C7880
		call eax
		add esp,0x18
		//
		push 0xBF000000
		mov ecx,[ebx+0x18]
		add ecx,0xBF
		mov eax,[ebx+0x14]
		add eax,0xE4
		push ecx
		push eax
		sub ecx,0x91
		push ecx
		sub eax,0xE4
		push eax
		fild    dword ptr [esp+0xC]
		fstp    dword ptr [esp+0xC]
		fild    dword ptr [esp+0x8]
		fstp    dword ptr [esp+0x8]
		fild    dword ptr [esp+0x4]
		fstp    dword ptr [esp+0x4]
		fild    dword ptr [esp]
		fstp    dword ptr [esp]
		mov eax,0x007C7BB0
		call    eax
		add esp,0x14
		// Ve Nen 2
        push 0xAAFFFFFF
		push 0x0
		mov ecx,[ebx+0x18]
		add ecx,0xD5
		mov eax,[ebx+0x14]
		add eax,0x15B
		push ecx
		push eax
		sub ecx,0xA8
		push ecx
		sub eax,0x74
		push eax
		fild    dword ptr [esp+0xC]
		fstp    dword ptr [esp+0xC]
		fild    dword ptr [esp+0x8]
		fstp    dword ptr [esp+0x8]
		fild    dword ptr [esp+0x4]
		fstp    dword ptr [esp+0x4]
		fild    dword ptr [esp]
		fstp    dword ptr [esp]
		mov eax,0x007C7880
		call eax
		add esp,0x18
		push 0xBF000000
		mov ecx,[ebx+0x18]
		add ecx,0xD5
		mov eax,[ebx+0x14]
		add eax,0x15A
		push ecx
		push eax
		sub ecx,0xA6
		push ecx
		sub eax,0x72
		push eax
		fild    dword ptr [esp+0xC]
		fstp    dword ptr [esp+0xC]
		fild    dword ptr [esp+0x8]
		fstp    dword ptr [esp+0x8]
		fild    dword ptr [esp+0x4]
		fstp    dword ptr [esp+0x4]
		fild    dword ptr [esp]
		fstp    dword ptr [esp]
		mov eax,0x007C7BB0
		call    eax
		add esp,0x14
		// Ve Nen 3
        push 0xAAFFFFFF
		push 0x0
		mov ecx,[ebx+0x18]
		add ecx,0x185
		mov eax,[ebx+0x14]
		add eax,0xE5
		push ecx
		push eax
		sub ecx,0xC3
		push ecx
		sub eax,0xE6
		push eax
		fild    dword ptr [esp+0xC]
		fstp    dword ptr [esp+0xC]
		fild    dword ptr [esp+0x8]
		fstp    dword ptr [esp+0x8]
		fild    dword ptr [esp+0x4]
		fstp    dword ptr [esp+0x4]
		fild    dword ptr [esp]
		fstp    dword ptr [esp]
		mov eax,0x007C7880
		call eax
		add esp,0x18
		push 0xBF000000
		mov ecx,[ebx+0x18]
		add ecx,0x184
		mov eax,[ebx+0x14]
		add eax,0xE4
		push ecx
		push eax
		sub ecx,0xC1
		push ecx
		sub eax,0xE4
		push eax
		fild    dword ptr [esp+0xC]
		fstp    dword ptr [esp+0xC]
		fild    dword ptr [esp+0x8]
		fstp    dword ptr [esp+0x8]
		fild    dword ptr [esp+0x4]
		fstp    dword ptr [esp+0x4]
		fild    dword ptr [esp]
		fstp    dword ptr [esp]
		mov eax,0x007C7BB0
		call    eax
		add esp,0x14
		// Ve Nen 4
        push 0xAAFFFFFF
		push 0x0
		mov ecx,[ebx+0x18]
		add ecx,0x185
		mov eax,[ebx+0x14]
		add eax,0x15B
		push ecx
		push eax
		sub ecx,0xAE
		push ecx
		sub eax,0x74
		push eax
		fild    dword ptr [esp+0xC]
		fstp    dword ptr [esp+0xC]
		fild    dword ptr [esp+0x8]
		fstp    dword ptr [esp+0x8]
		fild    dword ptr [esp+0x4]
		fstp    dword ptr [esp+0x4]
		fild    dword ptr [esp]
		fstp    dword ptr [esp]
		mov eax,0x007C7880
		call eax
		add esp,0x18
        push 0xBF000000
		mov ecx,[ebx+0x18]
		add ecx,0x184
		mov eax,[ebx+0x14]
		add eax,0x15B
		push ecx
		push eax
		sub ecx,0xAC
		push ecx
		sub eax,0x73
		push eax
		fild    dword ptr [esp+0xC]
		fstp    dword ptr [esp+0xC]
		fild    dword ptr [esp+0x8]
		fstp    dword ptr [esp+0x8]
		fild    dword ptr [esp+0x4]
		fstp    dword ptr [esp+0x4]
		fild    dword ptr [esp]
		fstp    dword ptr [esp]
		mov eax,0x007C7BB0
		call    eax
		add esp,0x14
		//Hien Thi Text Skill
		//Nut Tim
		mov ecx,[ebx+0x18]
		add ecx,0xD8
		mov eax,[ebx+0x14]
		add eax,0x33
		push ecx
		push eax
		mov ecx,0x13
		push ecx
		mov eax,0x31
		push eax
		call DrawButton
		// Nut Skill Pet
		mov ecx,[ebx+0x18]
		add ecx,0xD8
		mov eax,[ebx+0x14]
		add eax,0x6A
		push ecx
		push eax
		mov ecx,0x13
		push ecx
		mov eax,0x33
		push eax
		call DrawButton
		//
        // Nut Chuc Nang
		mov ecx,[ebx+0x18]
		add ecx,0x182
		mov eax,[ebx+0x14]
		add eax,0x155
		push ecx
		push eax
		mov ecx,0x14
		push ecx
		mov eax,0x68
		push eax
		call DrawButton
		//
        mov ecx,[ebx+0x18]
		add ecx,0x160
		mov eax,[ebx+0x14]
		add eax,0x155
		push ecx
		push eax
		mov ecx,0x14
		push ecx
		mov eax,0x68
		push eax
		call DrawButton
		//
        push 0xFF000000
		mov ecx,[ebx+0x18]
		add ecx,0xFE
		mov eax,[ebx+0x14]
		add eax,0x110
		push ecx
		push eax
		sub ecx,0x1F
		push ecx
		sub eax,0x20
		push eax
		fild    dword ptr [esp+0xC]
		fstp    dword ptr [esp+0xC]
		fild    dword ptr [esp+0x8]
		fstp    dword ptr [esp+0x8]
		fild    dword ptr [esp+0x4]
		fstp    dword ptr [esp+0x4]
		fild    dword ptr [esp]
		fstp    dword ptr [esp]
		mov eax,0x007C7BB0
		call    eax
		add esp,0x14
		//Hien Thi Text Maps

		//
        mov eax,[ebx+0x14]
		mov ecx,[ebx+0x18]
		add eax,0xE
		push eax
		add ecx,0xC8
		push ecx
		push 4344
		push 0x19
		push 0xFFFFFFFF
		call ShowTextInPet
		//
        mov eax,[ebx+0x14]
		mov ecx,[ebx+0x18]
		add eax,0x3A
		push eax
		add ecx,0xC8
		push ecx
		push 4345
		push 0x19
		push 0xFFFFFFFF
		call ShowTextInPet
		//
        mov eax,[ebx+0x14]
		mov ecx,[ebx+0x18]
		add eax,0x10B
		push eax
		add ecx,0x172
		push ecx
		push 4341
		push 0x19
		push 0xFFFFFFFF
		call ShowTextInPet
		//
        mov eax,[ebx+0x14]
		mov ecx,[ebx+0x18]
		add eax,0xF0
		push eax
		add ecx,0x150
		push ecx
		push 4342
		push 0x19
		push 0xFFFFFFFF
		call ShowTextInPet
		//
		push 0x004FCFFA
		ret

		Default:
        push 0x004FC453
		ret

		ShowTextInPet:
        mov ecx,DWORD PTR SS:[0x01733AC4]
        mov eax,[esp+0x4]
		push eax
		mov edx,[ecx]
		call dword ptr [edx+0xC]
		push 0x3
		push 0x3F800000
		push 0x00000141
		mov eax,[esp+0x18]
		push eax
		mov eax,[esp+0x18]
		push eax
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		mov ecx,[esp+0x1C]
		mov edx,[esp+0x20]
		push eax
		push ecx
		mov ecx,[0x01733AC4]
		push edx
		mov eax,DWORD PTR SS:[0x01733AC4]
        mov eax,[eax]
		call dword ptr [eax+0x18]
		mov ecx,[0x01733AC4]
		mov eax,[ecx]
		call dword ptr [eax+0x38]
		ret 0x14

		DrawButton:
		push 0xAAFFFFFF
		push 0x0
		mov ecx,[esp+0x18]
		mov eax,[esp+0x14]
		push ecx
		push eax
		mov edx,[esp+0x18]
        add edx,0x1
		sub ecx,edx
		push ecx
		mov edx,[esp+0x18]
        add edx,0x1
		sub eax,edx
		push eax
		fild    dword ptr [esp+0xC]
		fstp    dword ptr [esp+0xC]
		fild    dword ptr [esp+0x8]
		fstp    dword ptr [esp+0x8]
		fild    dword ptr [esp+0x4]
		fstp    dword ptr [esp+0x4]
		fild    dword ptr [esp]
		fstp    dword ptr [esp]
		mov eax,0x007C7880
		call eax
		add esp,0x18
        push 0xBF000000
		mov ecx,[esp+0x14]
		mov eax,[esp+0x10]
		push ecx
		push eax
		mov edx,[esp+0x14]
		sub ecx,edx
		push ecx
		mov edx,[esp+0x14]
		sub eax,edx
		push eax
		fild    dword ptr [esp+0xC]
		fstp    dword ptr [esp+0xC]
		fild    dword ptr [esp+0x8]
		fstp    dword ptr [esp+0x8]
		fild    dword ptr [esp+0x4]
		fstp    dword ptr [esp+0x4]
		fild    dword ptr [esp]
		fstp    dword ptr [esp]
		mov eax,0x007C7BB0
		call    eax
		add esp,0x14
		ret 0x10



    }
}
__declspec(naked) void DrawInforPet() //004FD022
{
	__asm
	{
	   nop
	   nop
	   nop
	   nop
       nop
	   mov ecx,[ebx+0x000003D0]
	   cmp ecx,0x4
	   jnz Default
	   push eax
	   sub esp,0x8
	   xor ecx,ecx
	   mov [esp],ecx
       mov [esp+0x4],ecx
	   BackCheckPetExist:
	   mov eax,[esp+0x8]
       xor edx,edx
	   mov dl,[eax+ecx]
	   test edx,edx
	   jz CheckNextPetInList
	   mov dl,[eax+ecx]  // type pet
	   push edx
	   xor edx,edx
	   mov dx,[eax+ecx+0x2] // ID pet
	   push edx
	   xor edx,edx
	   mov dl,[eax+ecx+0x4]  // Level Pet
	   push edx
	   xor edx,edx
	   mov dl,[eax+ecx+0x5]  // Tinh Trang Pet
	   push edx
       xor edx,edx
	   mov dx,[eax+ecx+0x6]  //Hoa Nang
	   push edx
	   mov edx,[eax+ecx+0x8] //TimeDaoBatdau
	   push edx
	   mov edx,[eax+ecx+0xC]  //TimeDaoConLai
	   push edx
	   push eax    //DiaChi
	   push ebx //AddressForm
	   mov ecx,[esp+0x28]
	   push ecx
	   call DrawInforPetList
	   mov ecx,[esp+0x4]
	   add ecx,0x1
	   mov [esp+0x4],ecx
       mov ecx,[esp]
	   add ecx,0x10
	   mov [esp],ecx
	   cmp ecx,0x40
	   jl BackCheckPetExist
       jmp EndOfCheckListPet
	   CheckNextPetInList:
	   //
	   mov ecx,[ebx+0x18]
	   add ecx,0x52
	   mov edx,[esp+0x4]
	   imul edx,0x23
	   add ecx,edx
       push ecx
	   mov ecx,[ebx+0x14]
	   add ecx,0xE3
	   mov edx,[esp+0x8]
	   push ecx
	   mov ecx,0x20
	   push ecx
	   mov eax,0xDF
	   push eax
	   call DrawOVP
	   //
	   mov edx,[ebx+0x14]
	   mov ecx,[ebx+0x18]
	   add edx,0x60
	   push edx
	   add ecx,0x3B
	   mov eax,[esp+0x8]
	   imul eax,0x23
	   add ecx,eax
	   push ecx
	   push 4340
	   push 0x19
	   push 0xFFFFFFFF
	   call DrawTextPetInfor
	   //
       mov ecx,[esp+0x4]
	   add ecx,0x1
	   mov [esp+0x4],ecx
	   mov ecx,[esp]
	   add ecx,0x10
	   mov [esp],ecx
	   cmp ecx,0x40
	   jl BackCheckPetExist
	   //
       EndOfCheckListPet:
	   mov eax,[esp+0x8]
       xor ecx,ecx
	   mov cl,[eax+0x52]
	   test ecx,ecx
	   jz ChuaCoVPChonMoPet
       imul ecx,0x90
	   lea ecx,[ecx+0x1107258+0x22DC8]
	   push ecx
	   mov eax,[ebx+0x18]
	   add eax,0xE0
	   push eax
	   mov eax,[ebx+0x14]
	   add eax,0xF1
	   push eax
	   call ShowIconItempet
	   ChuaCoVPChonMoPet:
       mov eax,[esp+0x8]
       xor ecx,ecx
	   mov cl,[eax+0x59]
	   test ecx,ecx
	   jz ChuaCoVPChonMoPhongAn
       imul ecx,0x90
	   lea ecx,[ecx+0x1107258+0x22DC8]
	   push ecx
	   mov eax,[ebx+0x18]
	   add eax,0xE0
	   push eax
	   mov eax,[ebx+0x14]
	   add eax,0xF1
	   push eax
       call ShowIconItempet
	   ChuaCoVPChonMoPhongAn:
	   //
       add esp,0x8
	   pop eax
	   push 0x004FDDD2
       ret


	   Default:
	   mov eax,[ebx+0x000003D0]
	   push 0x004FD028
	   ret




	   DrawInforPetList:
       // Vie Khung vien
	   mov eax,[esp+0x8]
	   mov ecx,[eax+0x18]
	   add ecx,0x52
	   mov edx,[esp+0x4]
	   imul edx,0x23
	   add ecx,edx
       push ecx
	   mov ecx,[eax+0x14]
	   add ecx,0xE3
	   mov edx,[esp+0x8]
	   push ecx
	   mov ecx,0x20
	   push ecx
	   mov eax,0xDF
	   push eax
	   call DrawOVP
	   //Kiem Tra Level
	   mov edx,[esp+0x20]
	   push edx
	   push 0x0
	   push 0x0
	   push 0x0
	   push 0x0
       push 0x0
	   mov eax,[esp+0x24]
	   add eax,0x64
	   push eax          // dia chi moi
	   mov eax,[esp+0x24]
	   mov edx,[eax+0x14]
	   add edx,0x4D
	   push edx            // toa do x
	   mov edx,[eax+0x18]	 // toa do y
	   add edx,0x46
	   mov ecx,[esp+0x24]
	   imul ecx,0x23
	   add edx,ecx
	   push edx
	   call DrawImagePet
	   ChuaChonPetShowImage:
       //Kiem Tra Ten
	   mov eax,[esp+0x8]
	   mov edx,[eax+0x14]
	   mov ecx,[eax+0x18]
	   add edx,0x2B
	   push edx
	   add ecx,0x3B
	   mov eax,[esp+0x8]
	   imul eax,0x23
	   add ecx,eax
	   push ecx
	   mov eax,[esp+0x30]
	   push eax
	   mov eax,[esp+0x30]
	   push eax
	   call GetNameofPetInForm
	   push eax
	   push 0x19
	   mov eax,[esp+0x1C]
	   xor ecx,ecx
	   mov cl,[eax+0x51]
	   test ecx,ecx
       jz KoPhaiPetDaChon
	   mov edx,[esp+0x14]
	   sub ecx,0x1
	   cmp edx,ecx
       jnz KoPhaiPetDaChon
	   //
       push 0xFFFF0000
	   jmp ProcessShowInfoPetText
	   KoPhaiPetDaChon:
	   push 0xFFFFFFFF
       ProcessShowInfoPetText:
	   call DrawTextPetInfor

	   //Kiem Tra Tinh Trang
       mov eax,[esp+0x1C]
	   test eax,eax
	   jnz KTShowTextTinhTrangPetDefault
       mov eax,[esp+0x8]
	   mov edx,[eax+0x14]
	   mov ecx,[eax+0x18]
	   add edx,0xA0
	   push edx
	   add ecx,0x3B
	   mov eax,[esp+0x8]
	   imul eax,0x23
	   add ecx,eax
	   push ecx
	   push 4346
	   push 0x19
	   push 0xFFFFFFFF
	   call DrawTextPetInfor
	   jmp KhongShowTextTinhTrangPetDefault
	   KTShowTextTinhTrangPetDefault:
	   cmp eax,0x1
	   jnz CheckHienThiTimeDaoTTPet
	   mov eax,[esp+0x8]
	   mov edx,[eax+0x14]
	   mov ecx,[eax+0x18]
	   add edx,0xA0
	   push edx
	   add ecx,0x3B
	   mov eax,[esp+0x8]
	   imul eax,0x23
	   add ecx,eax
	   push ecx
	   push 4343
	   push 0x19
	   push 0xFFFFFFFF
	   call DrawTextPetInfor
	   jmp KhongShowTextTinhTrangPetDefault
       CheckHienThiTimeDaoTTPet:
       cmp eax,0x2
	   jnz KhongShowTextTinhTrangPetDefault
       mov eax,[esp+0x8]
	   mov edx,[eax+0x14]
	   mov ecx,[eax+0x18]
	   add edx,0xA0
	   push edx
	   add ecx,0x3B
	   mov eax,[esp+0x8]
	   imul eax,0x23
	   add ecx,eax
	   push ecx
       //
	   mov eax,[esp+0xC]
       imul eax,0x10
	   mov ecx,[esp+0x14]
	   mov edx,[eax+ecx+0x8]
	   mov ecx,[eax+ecx+0xC]
	   add ecx,edx
       mov eax,DWORD PTR SS:[0x01733B04]
	   cmp ecx,eax
	   ja DangTimPetDaoTinhTrang
	   push 4481
	   jmp ProcessHienThiTinhTrangPetDao
       DangTimPetDaoTinhTrang:
       push 4815
	   ProcessHienThiTinhTrangPetDao:
       push 0x19
	   push 0xFFFFFFFF
	   call DrawTextPetInfor
       KhongShowTextTinhTrangPetDefault:
	   //Kiem Tra Hinh Anh pet
	   mov eax,[esp+0xC]
	   xor ecx,ecx
	   mov cl,[eax+0x51]
	   test ecx,ecx
	   jz ChuaChonPetHIenThi
	   xor ecx,ecx
	   mov cl,[eax+0x51]
       sub ecx,0x1
	   imul ecx,0x10
	   xor edx,edx
       mov dx,[eax+ecx+0x2]
       push edx
	   push 0x0
	   push 0x0
	   push 0x0
	   push 0x0
       push 0x0
	   mov eax,[esp+0x24]
	   add eax,0x64
	   push eax          // dia chi moi
	   mov eax,[esp+0x24]
	   mov edx,[eax+0x14]
	   add edx,0x14B
	   push edx            // toa do x
	   mov edx,[eax+0x18]	 // toa do y
       add edx,0x40
	   push edx
	   call DrawImagePet
	   mov eax,[esp+0xC]
	   xor ecx,ecx
	   mov cl,[eax+0x50]
	   test ecx,ecx
	   jz HienThiSkillCuaPet
	   xor ecx,ecx
	   mov cl,[eax+0x51]
       sub ecx,0x1
	   imul ecx,0x10
	   xor edx,edx
	   mov dl,[eax+ecx+0x4]
	   test edx,edx
       jz ChuaChonPetHIenThi
	   push edx
	   mov eax,[esp+0xC]
	   push eax
	   call LoopShowMapsPet
       jmp ChuaChonPetHIenThi
	   HienThiSkillCuaPet:
       xor ecx,ecx
	   mov cl,[eax+0x51]
       sub ecx,0x1
	   imul ecx,0x10
	   xor edx,edx
	   mov dl,[eax+ecx+0x4]
	   test edx,edx
       jz ChuaChonPetHIenThi
	   push edx
	   mov eax,[esp+0xC]
	   push eax
       call LoopShowSkillPet
	   ChuaChonPetHIenThi:
	   //Hien Thi Hoa Nang
       mov eax,[esp+0xC]
	   xor ecx,ecx
	   mov cl,[eax+0x51]
	   test ecx,ecx
	   jz ChuaChonPetDeShowHoaNang
       mov ecx,DWORD PTR SS:[0x01733AC4]
	   mov eax,[esp+0x4]
	   push 0xFFFF0000
	   mov edx,[ecx]
	   call dword ptr [edx+0xC]
	   //
	   mov eax,[esp+0xC]
       xor ecx,ecx
	   mov cl,[eax+0x51]
       sub ecx,0x1
	   imul ecx,0x10
	   xor edx,edx
	   mov dx,[eax+ecx+0x6]
	   push edx
	   push 0x1356
	   push 0x19
       mov ecx,0x1733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov eax,[esp+0x14]
	   lea eax,[eax+0x160]
	   push 0x100
	   push eax
	   mov eax,0x0085C538
	   call dword ptr [eax]
	   add esp,0x10
	   push 0x3
	   push 0x3F800000
	   push 0x00000141
	   mov eax,[esp+0x18]
	   lea ecx,[eax+0x160]
       push ecx
	   mov eax,[esp+0x18]
	   mov edx,[eax+0x18]
	   add edx,0xC7
	   push edx
       mov edx,[eax+0x14]
	   add edx,0x95
	   push edx
	   mov ecx,[0x01733AC4]
	   mov eax,DWORD PTR SS:[0x01733AC4]
	   mov eax,[eax]
	   call dword ptr [eax+0x18]
	   mov ecx,[0x01733AC4]
	   mov eax,[ecx]
	   call dword ptr [eax+0x38]
	   ChuaChonPetDeShowHoaNang:
	   //Draw Time
	   mov eax,[esp+0xC]
	   xor ecx,ecx
	   mov cl,[eax+0x51]
	   test ecx,ecx
	   jz KhongCoVpPhuTroDao
	   sub ecx,0x1
	   imul ecx,0x10
	   xor edx,edx
	   mov dl,[eax+ecx+0x5]
	   cmp edx,0x2
	   jnz KhongShowNutTrieuHoi
	   mov edx,[eax+ecx+0x8]
	   mov ecx,[eax+ecx+0xC]
	   add ecx,edx
	   mov eax,DWORD PTR SS:[0x01733B04]
	   cmp ecx,eax
       jb HienThiNutNhanQuaPetDao
       sub ecx,eax
	   mov eax, 0x10624DD3
	   mul ecx
	   mov ecx, edx
	   shr ecx, 0x6
	   push ebp
	   mov eax, ecx
	   xor edx, edx
	   mov ebp, 0x3C
	   div ebp
	   mov eax, 0x88888889
	   push edx
	   mul ecx
	   shr edx, 0x5
	   push edx
	   push 0x12D1
	   push 0x19
       mov ecx,0x1733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov eax,[esp+0x1C]
	   lea eax,[eax+0x160]
	   push 0x100
	   push eax
	   mov eax,0x0085C538
	   call dword ptr [eax]
	   add esp,0x14
	   push 0x3
	   push 0x3F800000
	   push 0x00000141
	   mov eax,[esp+0x1C]
	   lea ecx,[eax+0x160]
       push ecx
	   mov eax,[esp+0x1C]
	   mov edx,[eax+0x18]
	   add edx,0xC0
	   push edx
       mov edx,[eax+0x14]
	   add edx,0x102
	   push edx
	   mov ecx,[0x01733AC4]
	   mov eax,DWORD PTR SS:[0x01733AC4]
	   mov eax,[eax]
	   call dword ptr [eax+0x18]
	   mov ecx,[0x01733AC4]
	   mov eax,[ecx]
	   call dword ptr [eax+0x38]
	   pop ebp
	   jmp KhongShowTimeDao

	   //Hien Thi Nut Nhan Qua Dao
       HienThiNutNhanQuaPetDao:
	   mov eax,[esp+0x8]
	   mov ecx,[eax+0x18]
	   add ecx,0xD1
       push ecx
	   mov ecx,[eax+0x14]
	   add ecx,0x145
	   push ecx
	   mov ecx,0x15
	   push ecx
	   mov eax,0x45
	   push eax
	   call DrawOVP
	   //
	   mov eax,[esp+0x8]
	   mov edx,[eax+0x14]
	   mov ecx,[eax+0x18]
	   add edx,0x107
	   push edx
	   add ecx,0xC0
	   push ecx
	   mov eax,[esp+0x24]
	   push 4480
	   push 0x19
	   push 0xFFFFFFFF
	   call DrawTextPetInfor
	   //
       jmp KhongShowTimeDao
	   //
	   KhongShowNutTrieuHoi:

	   mov eax,[esp+0x8]
	   mov ecx,[eax+0x18]
	   add ecx,0xD1
       push ecx
	   mov ecx,[eax+0x14]
	   add ecx,0x145
	   push ecx
	   mov ecx,0x15
	   push ecx
	   mov eax,0x45
	   push eax
	   call DrawOVP
	   //
	   mov eax,[esp+0x8]
	   mov edx,[eax+0x14]
	   mov ecx,[eax+0x18]
	   add edx,0x109
	   push edx
	   add ecx,0xC0
	   push ecx
	   mov eax,[esp+0x14]
	   xor ecx,ecx
	   mov cl,[eax+0x51]
	   sub ecx,0x1
	   imul ecx,0x10
	   xor edx,edx
	   mov dl,[eax+ecx+0x5]
       test edx,edx
	   jnz KiemTraTinhTrangPet2
	   push 4951
	   jmp ProcessHienThiNutPetShoworTrieuHoi

	   KiemTraTinhTrangPet2:
	   cmp edx,0x1
	   jnz KiemTraTinhTrangPet3
	   push 4407
	   jmp ProcessHienThiNutPetShoworTrieuHoi

	   KiemTraTinhTrangPet3:
	   cmp edx,0x2
       jnz KhongRoLoiShowText
	   push 4408
	   jmp ProcessHienThiNutPetShoworTrieuHoi

	   KhongRoLoiShowText:
       push 4952
	   ProcessHienThiNutPetShoworTrieuHoi:
	   push 0x19
	   push 0xFFFFFFFF
	   call DrawTextPetInfor
	   KhongShowTimeDao:
	   //Draw Icon Choose
       mov eax,[esp+0xC]
	   xor ecx,ecx
	   mov cl,[eax+0x53]
	   test ecx,ecx
	   jz KhongCoDaPet
	   jmp ProcessShowIconVpPet
	   KhongCoDaPet:
       xor ecx,ecx
	   mov cl,[eax+0x54]
	   test ecx,ecx
	   jz KhongCoThucAnPet
	   jmp ProcessShowIconVpPet
	   KhongCoThucAnPet:
       xor ecx,ecx
	   mov cl,[eax+0x55]
	   test ecx,ecx
	   jz KiemTraThucTinhPet
       jmp ProcessShowIconVpPet
	   KiemTraThucTinhPet:
       xor ecx,ecx
	   mov cl,[eax+0x57]
	   test ecx,ecx
	   jz KiemTraVPNangCapPet
       jmp ProcessShowIconVpPet
	   KiemTraVPNangCapPet:
       xor ecx,ecx
	   mov cl,[eax+0x58]
	   test ecx,ecx
       jz KhongCoVpPhuTroDao
       ProcessShowIconVpPet:
	   imul ecx,0x90
	   lea ecx,[ecx+0x1107258+0x22DC8]
	   push ecx
	   mov ecx,[esp+0xC]
	   mov eax,[ecx+0x18]
	   add eax,0xE0
	   push eax
	   mov eax,[ecx+0x14]
	   add eax,0xF1
	   push eax
	   call ShowIconItempet
	   KhongCoVpPhuTroDao:
	   // Hien Thi Nut
       mov eax,[esp+0xC]
	   xor ecx,ecx
	   mov cl,[eax+0x51]
	   test ecx,ecx
       jz KhongCoNutHuyPetDao
	   sub ecx,0x1
	   imul ecx,0x10
	   xor edx,edx
	   mov dl,[eax+ecx+0x5]
	   cmp edx,0x2
       jnz KhongCoNutHuyPetDao
       mov eax,[esp+0x8]
	   mov ecx,[eax+0x18]
	   add ecx,0x145
       push ecx
	   mov ecx,[eax+0x14]
	   add ecx,0x145
	   push ecx
	   mov ecx,0x15
	   push ecx
	   mov eax,0x45
	   push eax
	   call DrawOVP
	   //
	   mov eax,[esp+0x8]
	   mov edx,[eax+0x14]
	   mov ecx,[eax+0x18]
	   add edx,0x10B
	   push edx
	   add ecx,0x135
	   push ecx
	   mov eax,[esp+0x24]
	   push 4479
	   push 0x19
	   push 0xFFFFFFFF
	   call DrawTextPetInfor
	   //
	   KhongCoNutHuyPetDao:
	   ret 0x28


	   ShowIconItempet:
	   push 0x0
	   mov ecx,[esp+0x10]
	   push 0x1
	   push 0x1
	   push ecx
	   mov ecx,[esp+0x14]
	   mov eax,[esp+0x18]
	   push eax
	   push ecx
	   mov ecx, DWORD PTR SS:[0x1615E90]
	   push 0x1
	   mov eax,0x004913F0
	   call eax
       ret 0xC

	   LoopShowMapsPet:
	   sub esp,0x8
	   xor ecx,ecx
       mov [esp],ecx
	   mov ecx,[esp+0x10]
	   mov [esp+0x4],ecx
       LoopShowMapsDao:
	   mov eax,[esp+0xC]
	   mov ecx,[eax+0x18]
	   add ecx,0xF8
	   mov edx,[esp]
	   imul edx,0x23
	   add ecx,edx
       push ecx
	   mov ecx,[eax+0x14]
	   add ecx,0xE1
	   push ecx
	   mov ecx,0x20
	   push ecx
	   mov eax,0xDF
	   push eax
	   call DrawOVP
	   //
	   mov eax,[esp+0xC]
	   mov edx,[eax+0x14]
	   mov ecx,[eax+0x18]
	   add edx,0x10
	   push edx
	   add ecx,0xE2
	   mov eax,[esp+0x4]
	   imul eax,0x23
	   add ecx,eax
	   push ecx
	   mov eax,[esp+0x8]
       push eax
	   call GetNameofMaps
	   push eax
	   push 0x19
	   push 0xFFFFFFFF
	   call DrawTextPetInfor
	   // Draw Hoa Nang
	   mov eax,[esp+0xC]
	   mov edx,[eax+0x14]
	   mov ecx,[eax+0x18]
	   add edx,0x87
	   push edx
	   add ecx,0xE2
	   mov eax,[esp+0x4]
	   imul eax,0x23
	   add ecx,eax
	   push ecx
       push 0x1355
	   push 0x19
	   push 0xFFFFFFFF
	   call DrawTextPetInfor
	   //
	   mov ecx,[esp]
	   add ecx,0x1
       mov [esp],ecx
	   mov ecx,[esp+0x4]
	   sub ecx,0x1
       mov [esp+0x4],ecx
	   test ecx,ecx
	   jnz LoopShowMapsDao
	   add esp,0x8
	   ret 0x8


	   LoopShowSkillPet:
	   sub esp,0x8
	   xor ecx,ecx
       mov [esp],ecx
	   mov ecx,[esp+0x10]
       push ecx
       call GetNumberskill
	   mov [esp+0x4],eax
       LoopShowSkillPetBack:
	   mov eax,[esp+0xC]
	   mov ecx,[eax+0x18]
	   add ecx,0xF8
	   mov edx,[esp]
	   imul edx,0x23
	   add ecx,edx
       push ecx
	   mov ecx,[eax+0x14]
	   add ecx,0xE1
	   push ecx
	   mov ecx,0x20
	   push ecx
	   mov eax,0xDF
	   push eax
	   call DrawOVP
	   //
	   mov eax,[esp]
	   add eax,0x2000
       push eax
	   push 0x0
	   push 0x0
	   push 0x0
	   push 0x0
       push 0x0
	   mov eax,[esp+0x38]
	   add eax,0x64
	   push eax          // dia chi moi
	   mov eax,[esp+0x28]
	   mov edx,[eax+0x14]
	   add edx,0x4B
	   push edx            // toa do x
	   mov edx,[eax+0x18]	 // toa do y
	   add edx,0xEB
	   mov ecx,[esp+0x20]
	   imul ecx,0x23
	   add edx,ecx
	   push edx
	   call DrawImagePet
	   //
	   mov eax,[esp+0xC]
	   mov edx,[eax+0x14]
	   mov ecx,[eax+0x18]
	   add edx,0x2A
	   push edx
	   add ecx,0xE2
	   mov eax,[esp+0x4]
	   imul eax,0x23
	   add ecx,eax
	   push ecx
	   mov eax,[esp+0x8]
       push eax
	   call GetNameofSkillPet
	   push eax
	   push 0x14
	   push 0xFFFFFFFF
	   call DrawTextPetInfor
	   // Draw Hoa Nang
	   mov eax,[esp+0xC]
	   mov edx,[eax+0x14]
	   mov ecx,[eax+0x18]
	   add edx,0x8D
	   push edx
	   add ecx,0xE2
	   mov eax,[esp+0x4]
	   imul eax,0x23
	   add ecx,eax
	   push ecx
	   mov eax,[esp+0x8]
	   cmp eax,0x4
	   jz PetCap5KhacHonNang
	   push 0x134F
       jmp ProcessShowTextofHonNang
       PetCap5KhacHonNang:
	   push 0x134E
       ProcessShowTextofHonNang:
	   push 0x19
	   push 0xFFFFFFFF
	   call DrawTextPetInfor
	   //
	   mov ecx,[esp]
	   add ecx,0x1
       mov [esp],ecx
	   mov ecx,[esp+0x4]
	   sub ecx,0x1
       mov [esp+0x4],ecx
	   test ecx,ecx
       jnz LoopShowSkillPetBack
	   EndLoopShowSkillPet:
       add esp,0x8
	   ret 0x8

	   GetNameofSkillPet:
	   mov eax,[esp+0x4]
	   cmp eax,0x0
	   jnz KiemTraSkillPetCo2
	   mov eax,8275
	   ret 0x4

	   KiemTraSkillPetCo2:
	   cmp eax,0x1
	   jnz KiemTraSkillPetCo3
	   mov eax,8274
	   ret 0x4

	   KiemTraSkillPetCo3:
	   cmp eax,0x2
	   jnz KiemTraSkillPetCo4
	   mov eax,8272
	   ret 0x4

	   KiemTraSkillPetCo4:
	   cmp eax,0x3
	   jnz KiemTraSkillPetCo5
	   mov eax,8271
	   ret 0x4

	   KiemTraSkillPetCo5:
	   mov eax,0x134E
	   ret 0x4

	   GetNameofMaps:
	   mov eax,[esp+0x4]
	   cmp eax,0x0
	   jnz KiemTraMapsIDText1
	   mov eax,0x1354
	   ret 0x4

	   KiemTraMapsIDText1:
	   cmp eax,0x1
	   jnz KiemTraMapsIDText2
	   mov eax,0x1353
	   ret 0x4

	   KiemTraMapsIDText2:
	   cmp eax,0x2
	   jnz KiemTraMapsIDText3
	   mov eax,0x1352
	   ret 0x4

	   KiemTraMapsIDText3:
	   cmp eax,0x3
	   jnz KiemTraMapsIDText4
	   mov eax,0x1351
	   ret 0x4

	   KiemTraMapsIDText4:
	   mov eax,0x1350
	   ret 0x4

	   GetNumberskill:
	   mov eax,[esp+0x4]
	   cmp eax,0x1
	   jnz CheckNumberSKillLevel
	   mov eax,0x2
       ret 0x4

	   CheckNumberSKillLevel:
	   cmp eax,0x2
	   jnz CheckNumberSKillLevel1
	   mov eax,0x2
	   ret 0x4

	   CheckNumberSKillLevel1:
	   cmp eax,0x3
	   jnz CheckNumberSKillLevel2
	   mov eax,0x3
	   ret 0x4

	   CheckNumberSKillLevel2:
	   cmp eax,0x4
	   jnz CheckNumberSKillLevel3
	   mov eax,0x4
	   ret 0x4

	   CheckNumberSKillLevel3:
	   mov eax,0x5
	   ret 0x4

	   GetStringHienThiTimeDao:
	   mov eax,[esp+0x4]
	   push eax
	   push 0x19
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   mov ecx,[esp+0x8]
	   push 0x2F
	   push eax
	   push ecx
	   mov eax,0x00848162
	   call eax
	   add esp,0xC
	   mov eax,[esp+0x8]
	   ret 0x8

		DrawOVP:
		push 0xAAFFFFFF
		push 0x0
		mov ecx,[esp+0x18]
		mov eax,[esp+0x14]
		push ecx
		push eax
		mov edx,[esp+0x18]
        add edx,0x1
		sub ecx,edx
		push ecx
		mov edx,[esp+0x18]
        add edx,0x1
		sub eax,edx
		push eax
		fild    dword ptr [esp+0xC]
		fstp    dword ptr [esp+0xC]
		fild    dword ptr [esp+0x8]
		fstp    dword ptr [esp+0x8]
		fild    dword ptr [esp+0x4]
		fstp    dword ptr [esp+0x4]
		fild    dword ptr [esp]
		fstp    dword ptr [esp]
		mov eax,0x007C7880
		call eax
		add esp,0x18
        push 0xBF000000
		mov ecx,[esp+0x14]
		mov eax,[esp+0x10]
		push ecx
		push eax
		mov edx,[esp+0x14]
		sub ecx,edx
		push ecx
		mov edx,[esp+0x14]
		sub eax,edx
		push eax
		fild    dword ptr [esp+0xC]
		fstp    dword ptr [esp+0xC]
		fild    dword ptr [esp+0x8]
		fstp    dword ptr [esp+0x8]
		fild    dword ptr [esp+0x4]
		fstp    dword ptr [esp+0x4]
		fild    dword ptr [esp]
		fstp    dword ptr [esp]
		mov eax,0x007C7BB0
		call    eax
		add esp,0x14
		ret 0x10

        DrawTextPetInfor:
        mov ecx,DWORD PTR SS:[0x01733AC4]
        mov eax,[esp+0x4]
		push eax
		mov edx,[ecx]
		call dword ptr [edx+0xC]
		push 0x3
		push 0x3F800000
		push 0x00000141
		mov eax,[esp+0x18]
		push eax
		mov eax,[esp+0x18]
		push eax
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		mov ecx,[esp+0x1C]
		mov edx,[esp+0x20]
		push eax
		push ecx
		mov ecx,[0x01733AC4]
		push edx
		mov eax,DWORD PTR SS:[0x01733AC4]
        mov eax,[eax]
		call dword ptr [eax+0x18]
		mov ecx,[0x01733AC4]
		mov eax,[ecx]
		call dword ptr [eax+0x38]
		ret 0x14

		GetNameofPetInForm:
		mov eax,[esp+0x8]
		cmp eax,0x9
		jnz KhongPhaiPet
		mov eax,[esp+0x4]
		cmp eax,1183
		jnz KiemTraTenCuaPet1
		mov eax,4963
		ret 0x8

		KiemTraTenCuaPet1:
		cmp eax,1184
		jnz KiemTraTenCuaPet2
		mov eax,4964
		ret 0x8

		KiemTraTenCuaPet2:
		cmp eax,1185
		jnz KiemTraTenCuaPet3
		mov eax,4965
		ret 0x8

		KiemTraTenCuaPet3:
		cmp eax,1186
		jnz KiemTraTenCuaPet4
		mov eax,4966
		ret 0x8

		KiemTraTenCuaPet4:
		cmp eax,1187
		jnz KiemTraTenCuaPet5
		mov eax,4967
		ret 0x8

		KiemTraTenCuaPet5:
		cmp eax,1188
		jnz KiemTraTenCuaPet6
		mov eax,4968
		ret 0x8

		KiemTraTenCuaPet6:
		cmp eax,1189
		jnz KiemTraTenCuaPet7
		mov eax,4969
		ret 0x8

		KiemTraTenCuaPet7:
		cmp eax,1190
		jnz KiemTraTenCuaPet8
		mov eax,4970
		ret 0x8

		KiemTraTenCuaPet8:
		cmp eax,1191
		jnz KiemTraTenCuaPet9
		mov eax,4971
		ret 0x8


		KiemTraTenCuaPet9:
		cmp eax,1192
		jnz KiemTraTenCuaPet10
		mov eax,4972
		ret 0x8

		KiemTraTenCuaPet10:
		cmp eax,1193
		jnz KiemTraTenCuaPet11
		mov eax,4973
		ret 0x8

		KiemTraTenCuaPet11:
		cmp eax,1194
		jnz KiemTraTenCuaPet12
		mov eax,4974
		ret 0x8

		KiemTraTenCuaPet12:
		cmp eax,1195
		jnz KiemTraTenCuaPet13
		mov eax,4975
		ret 0x8

		KiemTraTenCuaPet13:
		cmp eax,1196
		jnz KiemTraTenCuaPet14
		mov eax,4976
		ret 0x8

		KiemTraTenCuaPet14:
		cmp eax,1197
		jnz KiemTraTenCuaPet15
		mov eax,4977
		ret 0x8

		KiemTraTenCuaPet15:
		cmp eax,1198
		jnz KiemTraTenCuaPet16
		mov eax,4978
		ret 0x8

		KiemTraTenCuaPet16:
		cmp eax,1199
		jnz KiemTraTenCuaPet17
		mov eax,4979
		ret 0x8

		KiemTraTenCuaPet17:
		cmp eax,1200
		jnz KiemTraTenCuaPet18
		mov eax,4980
		ret 0x8

		KiemTraTenCuaPet18:
		cmp eax,1201
		jnz KiemTraTenCuaPet19
		mov eax,4981
		ret 0x8

		KiemTraTenCuaPet19:
		cmp eax,1202
		jnz KiemTraTenCuaPet20
		mov eax,4982
		ret 0x8

		KiemTraTenCuaPet20:
		cmp eax,0x4B3
		jnz KiemTraTenCuaPet21
		mov eax,4983
		ret 0x8

		KiemTraTenCuaPet21:
		cmp eax,0x4B4
		jnz KiemTraTenCuaPet22
		mov eax,4984
		ret 0x8

		KiemTraTenCuaPet22:
		cmp eax,0x4B5
		jnz KhongPhaiPet
		mov eax,4985
		ret 0x8

		KhongPhaiPet:
		mov eax,0x12CC
		ret 0x8


		GetNameofStatusInForm:
		mov eax,[esp+0x4]
		cmp eax,0x0
		jnz KiemTraTinhTrangPetKhac2
		mov eax,0x12CD
		ret 0x4

		KiemTraTinhTrangPetKhac2:
		cmp eax,0x1
		jnz KiemTraTinhTrangPetKhac3
		mov eax,0x12CE
		ret 0x4

		KiemTraTinhTrangPetKhac3:
		cmp eax,0x2
		jnz KiemTraTinhTrangPetKhac4
		mov eax,0x12CF
		ret 0x4

		KiemTraTinhTrangPetKhac4:
        mov eax,0x12D0
		ret 0x4


		DrawImagePet:
		mov eax,[esp+0xC]
		mov ecx,[esp+0x24]
		cmp ecx,0x8
		ja AddInfoNgoai
		cmp ecx,0x0
		jnz KiemTraRankPetLv1
		push 5318
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,eax
        mov eax,[esp+0xC]
		mov  DWORD PTR SS : [eax + 0x70] , ecx
		mov  DWORD PTR SS : [eax + 0x9C] , 0x63
		mov  DWORD PTR SS : [eax + 0xA0] , 0xC0
		mov  DWORD PTR SS : [eax + 0x98] , 0xA0
		mov  DWORD PTR SS : [eax + 0xA4] , 0x7F
        jmp ProceesShowImageInFormPet
		KiemTraRankPetLv1:
		cmp ecx,0x1
		jnz KiemTraRankPetLv2
		push 5318
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,eax
        mov eax,[esp+0xC]
		mov  DWORD PTR SS : [eax + 0x70] , ecx
		mov  DWORD PTR SS : [eax + 0x9C] , 0x63
		mov  DWORD PTR SS : [eax + 0xA0] , 0x1D
		mov  DWORD PTR SS : [eax + 0x98] , 0x00
		mov  DWORD PTR SS : [eax + 0xA4] , 0x7F
		jmp ProceesShowImageInFormPet
		KiemTraRankPetLv2:
		cmp ecx,0x2
		jnz KiemTraRankPetLv3
		push 5318
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,eax
        mov eax,[esp+0xC]
		mov  DWORD PTR SS : [eax + 0x70] , ecx
		mov  DWORD PTR SS : [eax + 0x9C] , 0x63
		mov  DWORD PTR SS : [eax + 0xA0] , 0x3F
		mov  DWORD PTR SS : [eax + 0x98] , 0x23
		mov  DWORD PTR SS : [eax + 0xA4] , 0x7F
        jmp ProceesShowImageInFormPet
		KiemTraRankPetLv3:
		cmp ecx,0x3
		jnz KiemTraRankPetLv4
		push 5318
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,eax
        mov eax,[esp+0xC]
		mov  DWORD PTR SS : [eax + 0x70] , ecx
		mov  DWORD PTR SS : [eax + 0x9C] , 0x63
		mov  DWORD PTR SS : [eax + 0xA0] , 0x5F
		mov  DWORD PTR SS : [eax + 0x98] , 0x43
		mov  DWORD PTR SS : [eax + 0xA4] , 0x7F
        jmp ProceesShowImageInFormPet

		KiemTraRankPetLv4:
		cmp ecx,0x4
		jnz KiemTraRankPetLv5
		push 5318
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,eax
        mov eax,[esp+0xC]
		mov  DWORD PTR SS : [eax + 0x70] , ecx
		mov  DWORD PTR SS : [eax + 0x9C] , 0x63
		mov  DWORD PTR SS : [eax + 0xA0] , 0x7F
		mov  DWORD PTR SS : [eax + 0x98] , 0x63
		mov  DWORD PTR SS : [eax + 0xA4] , 0x7F
		jmp ProceesShowImageInFormPet

		KiemTraRankPetLv5:
        push 5318
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,eax
        mov eax,[esp+0xC]
		mov  DWORD PTR SS : [eax + 0x70] , ecx
		mov  DWORD PTR SS : [eax + 0x9C] , 0x63
		mov  DWORD PTR SS : [eax + 0xA0] , 0xA0
		mov  DWORD PTR SS : [eax + 0x98] , 0x83
		mov  DWORD PTR SS : [eax + 0xA4] , 0x7F
		jmp ProceesShowImageInFormPet

		AddInfoNgoai:
		//Show Skill Pet
		cmp ecx,0x2000
		jnz CheckSkillIconPet1
		push 5319
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,eax
        mov eax,[esp+0xC]
		mov  DWORD PTR SS : [eax + 0x70] , ecx
		mov  DWORD PTR SS : [eax + 0x9C] , 0x41
		mov  DWORD PTR SS : [eax + 0xA0] , 30
		mov  DWORD PTR SS : [eax + 0x98] , 0
		mov  DWORD PTR SS : [eax + 0xA4] , 0x5F
		jmp ProceesShowImageInFormPet

		CheckSkillIconPet1:
		cmp ecx,0x2001
		jnz CheckSkillIconPet2
		push 5319
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,eax
        mov eax,[esp+0xC]
		mov  DWORD PTR SS : [eax + 0x70] , ecx
		mov  DWORD PTR SS : [eax + 0x9C] , 0x40
		mov  DWORD PTR SS : [eax + 0xA0] , 62
		mov  DWORD PTR SS : [eax + 0x98] , 32
		mov  DWORD PTR SS : [eax + 0xA4] , 0x5F
		jmp ProceesShowImageInFormPet

		CheckSkillIconPet2:
		cmp ecx,0x2002
		jnz CheckSkillIconPet3
		push 5319
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,eax
        mov eax,[esp+0xC]
		mov  DWORD PTR SS : [eax + 0x70] , ecx
		mov  DWORD PTR SS : [eax + 0x9C] , 0x40
		mov  DWORD PTR SS : [eax + 0xA0] , 94
		mov  DWORD PTR SS : [eax + 0x98] , 64
		mov  DWORD PTR SS : [eax + 0xA4] , 0x5F
		jmp ProceesShowImageInFormPet

		CheckSkillIconPet3:
		cmp ecx,0x2003
		jnz CheckSkillIconPet4
		push 5319
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,eax
        mov eax,[esp+0xC]
		mov  DWORD PTR SS : [eax + 0x70] , ecx
		mov  DWORD PTR SS : [eax + 0x9C] , 0x40
		mov  DWORD PTR SS : [eax + 0xA0] , 126
		mov  DWORD PTR SS : [eax + 0x98] , 96
		mov  DWORD PTR SS : [eax + 0xA4] , 0x5F
		jmp ProceesShowImageInFormPet

		CheckSkillIconPet4:
		cmp ecx,0x2004
		jnz ShowImagePetIcon
        push 5319
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,eax
        mov eax,[esp+0xC]
		mov  DWORD PTR SS : [eax + 0x70] , ecx
		mov  DWORD PTR SS : [eax + 0x9C] , 0x63
		mov  DWORD PTR SS : [eax + 0xA0] , 158
		mov  DWORD PTR SS : [eax + 0x98] , 128
		mov  DWORD PTR SS : [eax + 0xA4] , 0x7F
		jmp ProceesShowImageInFormPet


		//Show Image Pet
        ShowImagePetIcon:
		cmp ecx,1183
		jnz KiemTraHinhAnhPet2
		push 5317
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,eax
        mov eax,[esp+0xC]
		mov  DWORD PTR SS : [eax + 0x70] , ecx
		mov  DWORD PTR SS : [eax + 0x9C] , 0xB8
		mov  DWORD PTR SS : [eax + 0xA0] , 0x40
		mov  DWORD PTR SS : [eax + 0x98] , 0x00
		mov  DWORD PTR SS : [eax + 0xA4] , 0x140
		jmp ProceesShowImageInFormPet

		KiemTraHinhAnhPet2:
		cmp ecx,1184
		jnz KiemTraHinhAnhPet3
		push 5317
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,eax
        mov eax,[esp+0xC]
		mov  DWORD PTR SS : [eax + 0x70] , ecx
		mov  DWORD PTR SS : [eax + 0x9C] , 0xB8
		mov  DWORD PTR SS : [eax + 0xA0] , 0x8D
		mov  DWORD PTR SS : [eax + 0x98] , 0x48
		mov  DWORD PTR SS : [eax + 0xA4] , 0x140
		jmp ProceesShowImageInFormPet

		KiemTraHinhAnhPet3:
		cmp ecx,1185
		jnz KiemTraHinhAnhPet4
		push 5317
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,eax
        mov eax,[esp+0xC]
		mov  DWORD PTR SS : [eax + 0x70] , ecx
		mov  DWORD PTR SS : [eax + 0x9C] , 0xB8
		mov  DWORD PTR SS : [eax + 0xA0] , 0xD3
		mov  DWORD PTR SS : [eax + 0x98] , 0x90
		mov  DWORD PTR SS : [eax + 0xA4] , 0x140
		jmp ProceesShowImageInFormPet

		KiemTraHinhAnhPet4:
		cmp ecx,1186
		jnz KiemTraHinhAnhPet5
        push 5317
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,eax
        mov eax,[esp+0xC]
		mov  DWORD PTR SS : [eax + 0x70] , ecx
		mov  DWORD PTR SS : [eax + 0x9C] , 0xB8
		mov  DWORD PTR SS : [eax + 0xA0] , 0x115
		mov  DWORD PTR SS : [eax + 0x98] , 0xD0
		mov  DWORD PTR SS : [eax + 0xA4] , 0x140
		jmp ProceesShowImageInFormPet

		KiemTraHinhAnhPet5:
		cmp ecx,1187
		jnz KiemTraHinhAnhPet6
        push 5317
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,eax
        mov eax,[esp+0xC]
		mov  DWORD PTR SS : [eax + 0x70] , ecx
		mov  DWORD PTR SS : [eax + 0x9C] , 0x63
		mov  DWORD PTR SS : [eax + 0xA0] , 0xA0
		mov  DWORD PTR SS : [eax + 0x98] , 0x83
		mov  DWORD PTR SS : [eax + 0xA4] , 0x7F
		jmp ProceesShowImageInFormPet

		KiemTraHinhAnhPet6:
		cmp ecx,1188
		jnz KiemTraHinhAnhPet7
        push 5317
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,eax
        mov eax,[esp+0xC]
		mov  DWORD PTR SS : [eax + 0x70] , ecx
		mov  DWORD PTR SS : [eax + 0x9C] , 0x63
		mov  DWORD PTR SS : [eax + 0xA0] , 0xA0
		mov  DWORD PTR SS : [eax + 0x98] , 0x83
		mov  DWORD PTR SS : [eax + 0xA4] , 0x7F
		jmp ProceesShowImageInFormPet

		KiemTraHinhAnhPet7:
		cmp ecx,1189
		jnz OtherImage
        push 5317
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,eax
        mov eax,[esp+0xC]
		mov  DWORD PTR SS : [eax + 0x70] , ecx
		mov  DWORD PTR SS : [eax + 0x9C] , 0x63
		mov  DWORD PTR SS : [eax + 0xA0] , 0xA0
		mov  DWORD PTR SS : [eax + 0x98] , 0x83
		mov  DWORD PTR SS : [eax + 0xA4] , 0x7F
		jmp ProceesShowImageInFormPet

		OtherImage:
		mov ecx,[esp+0x10]
		mov  DWORD PTR SS : [eax + 0x70] , ecx
		mov ecx,[esp+0x14]
		mov  DWORD PTR SS : [eax + 0x9C] , ecx
		mov ecx,[esp+0x18]
		mov  DWORD PTR SS : [eax + 0xA0] , ecx
		mov ecx,[esp+0x1C]
		mov  DWORD PTR SS : [eax + 0x98] , ecx
		mov ecx,[esp+0x20]
		mov  DWORD PTR SS : [eax + 0xA4] , ecx
		ProceesShowImageInFormPet:
		push 0x00000000
		push 0x0089E914
		mov ecx,[esp+0xC]
		mov edx,[esp+0x10]
		push ecx
		push edx
		mov ecx, [esp+0x1C]
		mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
		call eax
		mov ecx,[esp+0xC]
		push 0x1732CC8
		mov eax, 0x7B9850
		call eax //Draw1
		ret 0x24
	}
}
__declspec(naked) void LoadInfoPet()//005EA2ED
{
	  __asm {
        nop
        nop
		nop
        nop
		nop
		mov ebx,0x000000AA
        add eax,0x64
		pushad
        mov ebp, 0x0
        LoopLoad2:
		mov ecx, 0x010CC088
            mov edi, ebp
			mov ecx, [ecx + edi]
            mov[eax + edi], ecx
            add ebp, 0x4
            cmp ebp, 0xB8
			jnz LoopLoad2
			mov dword ptr [eax+0x10],0x0
		popad
		mov ecx,[esp+0x24]
        push 0x72
		push 0x32
		mov  edx, [ecx]
		call dword ptr [edx+0x1C]
		push 0x005EA2F4
		ret
	}
}

__declspec(naked) void DrawInfoCTC() //00590666
{
	  __asm {
		nop
		nop
		nop
		nop
		nop
		push eax
		mov ecx,[esi+0x22C]
		test ecx,ecx
        jz Default
		push ecx
		add eax,0x34
		push eax
		call ViTriBangHoiChiem
		cmp eax,0xFFFFFFFF
		jz Default
		mov 	ecx,[esp]
		mov 	[ecx],eax
		mov     ecx,[0x01733AC4]
		push    0xFFFFFFFF
		mov 	eax,[ecx]
		call    dword ptr [eax+0xC]
		// Hien thi ten bang hoi
        mov     ecx, [edi+0x10]
		mov 	eax,[0x01733AC4]
		push    0x3
		push    0x3F800000
		mov     ebx, [eax]
		push    0
		push    0x131
		mov     eax,[esp+0x10]
		mov 	ecx,[eax]
		push 	ecx
		push 	eax
		call 	GetStringTenBangHoi
		mov     ecx, [esi+0x240]
		push    eax
		mov     eax, [esi+0x244]
		add     ecx, 0x28
		add     eax, 0x1B0
		push    eax
		push    ecx
		mov 	ecx,[0x01733AC4]
		call    dword ptr [ebx+0x20]
		// Hien thi ten bang chu
        mov     ecx, [edi+0x10]
		mov 	eax,[0x01733AC4]
		push    0x3
		push    0x3F800000
		mov     ebx, [eax]
		push    0
		push    0x131
		mov     eax,[esp+0x10]
		mov 	ecx,[eax]
		push 	ecx
		push 	eax
		call 	GetStringTenBangChu
		mov     ecx, [esi+0x240]
		push    eax
		mov     eax, [esi+0x244]
		add     ecx, 0x28
		add     eax, 0x1C0
		push    eax
		push    ecx
		mov 	ecx,[0x01733AC4]
		call    dword ptr [ebx+0x20]
        jmp EndFunc
		// Hien thi thoi gian chiem dc
        mov     ecx, [edi+0x10]
		mov 	eax,[0x01733AC4]
		push    0x3
		push    0x3F800000
		mov     ebx, [eax]
		push    0
		push    0x131
		push    4611
		push    0x19
		mov 	ecx,0x01733B30
		mov 	eax,0x7C2CF0
		call	eax
		mov     ecx, [esi+0x240]
		push    eax
		mov     eax, [esi+0x244]
		add     ecx, 0x28
		add     eax, 0x1D0
		push    eax
		push    ecx
		mov 	ecx,[0x01733AC4]
		call    dword ptr [ebx+0x20]
		EndFunc:
        pop eax
		push 	0x005906C0
        ret
        Default:
        pop eax
		mov edx,[edi+0x10]
        mov ecx,[0x01733AC4]
		push 0x0059066F
		ret


		ViTriBangHoiChiem:
        sub esp,0x4
		mov edx,[esp+0xC]
		mov eax,[esp+0x8]
		xor ecx,ecx
		mov [esp],ecx
        BackLoopCheckMaps:
		mov ecx,[esp]
		imul ecx,0x34
		lea eax,[eax+ecx]
		xor ecx,ecx
		mov cl,[eax]
		cmp edx,ecx
		jnz KhongPhuHopMap
		mov ecx,[esp]
		mov eax,ecx
        add esp,0x4
        ret 0x8

		KhongPhuHopMap:
		mov ecx,[esp]
		add ecx,1
		mov [esp],ecx
		cmp ecx,10
		jl BackLoopCheckMaps
		mov eax,0xFFFFFFFF
        add esp,0x4
		ret 0x8


		GetStringTenBangHoi:
        push    4609
		push    0x19
		mov 	ecx,0x01733B30
		mov 	eax,0x7C2CF0
		call	eax
		mov 	ecx,[esp+0x4]
        add ecx,0x4
		push 	18
		push 	eax
		push 	ecx
		mov 	eax,0x00848162
		call 	eax
		add 	esp,0xC
		mov 	eax,[esp+0x4]
		add 	eax,0x34
		mov 	ecx,[esp+0x8]
		imul    ecx,0x34
		lea     eax,[eax+ecx]
        add     eax,0x1
		mov 	ecx,[esp+0x4]
        add     ecx,0x15
		push 	24
		push 	eax
		push 	ecx
		mov 	eax,0x00848162
		call 	eax
		add 	esp,0xC
		mov 	eax,[esp+0x4]
		add eax,0x4
        ret 0x8





		GetStringTenBangChu:
        push    4608
		push    0x19
		mov 	ecx,0x01733B30
		mov 	eax,0x7C2CF0
		call	eax
		mov 	ecx,[esp+0x4]
        add ecx,0x4
		push 	11
		push 	eax
		push 	ecx
		mov 	eax,0x00848162
		call 	eax
		add 	esp,0xC
		mov 	eax,[esp+0x4]
		add 	eax,0x34
		mov 	ecx,[esp+0x8]
		imul    ecx,0x34
		lea     eax,[eax+ecx]
		add     eax,0x19
		mov 	ecx,[esp+0x4]
        add     ecx,0xF
		push 	16
		push 	eax
		push 	ecx
		mov 	eax,0x00848162
		call 	eax
		add 	esp,0xC
		mov 	eax,[esp+0x4]
		add 	eax,0x4
        ret 0x8

		GetStringThoiGianChiem:


		GetStringThoiGianTaiChien:


		GetStringThue:



	}
}
__declspec(naked) void GetPozPet()//004FDDD6
{
	  __asm {
        nop
        nop
		nop
        nop
		nop
		mov ecx,[ebx+0x10]
		test ecx,ecx
        jz Default
		mov ecx,[ebx+0x3D0]
		cmp ecx,0x4
		jnz Default
		push eax
		mov ecx,[ebx+0x18]   //y
		push ecx
		mov ecx,[ebx+0x14]   //x
		push ecx
		call GetProcessFuncPet
		jmp Default



		GetProcessFuncPet:
        mov ecx,DWORD PTR SS:[0x01733AD0]
		mov eax,0x007D7FD0
		call eax
		xor ecx,ecx
		mov cl,[eax+0xC]
		cmp ecx,0x1
		jnz HoverPoz
        mov ecx,[esp+0xC]
		xor eax,eax
		mov al,[ecx+0x56]
		test eax,eax
        jnz CheckNextSkillPoz4
        mov ecx,DWORD PTR SS:[0x01733AD0]
		mov eax,0x007D7FD0
		call eax
		mov ecx,[eax+0x18]
		mov edx,[esp+0x8]
        add edx,0x34
		cmp ecx,edx
		jb CheckNextPetPoz
		add edx,0x1B
		cmp ecx,edx
		ja CheckNextPetPoz
        mov ecx,[eax+0x10]
		mov edx,[esp+0x4]
		add edx,0x5
		cmp ecx,edx
		jb CheckNextPetPoz
		add edx,0xD9
		cmp ecx,edx
		ja CheckNextPetPoz
		mov ecx,[esp+0xC]
        xor eax,eax
		mov ax,[ecx]
		test eax,eax
        jz CheckNextSkillPoz4
		xor eax,eax
		mov byte ptr [ecx+0x51],0x1
		mov byte ptr [ecx+0x56],0x1
		jmp CheckNextSkillPoz4
		//

		CheckNextPetPoz:
        mov ecx,[eax+0x18]
		mov edx,[esp+0x8]
        add edx,0x56
		cmp ecx,edx
		jb CheckNextPetPoz1
		add edx,0x1B
		cmp ecx,edx
		ja CheckNextPetPoz1
        mov ecx,[eax+0x10]
		mov edx,[esp+0x4]
		add edx,0x5
		cmp ecx,edx
		jb CheckNextPetPoz1
		add edx,0xD9
		cmp ecx,edx
		ja CheckNextPetPoz1
        mov ecx,[esp+0xC]
        xor eax,eax
		mov ax,[ecx+0x10]
		test eax,eax
        jz CheckNextSkillPoz4
		xor eax,eax
		mov byte ptr [ecx+0x51],0x2
        mov byte ptr [ecx+0x56],0x1
		jmp CheckNextSkillPoz4

		CheckNextPetPoz1:
        mov ecx,[eax+0x18]
		mov edx,[esp+0x8]
        add edx,0x7A
		cmp ecx,edx
		jb CheckNextPetPoz2
		add edx,0x1B
		cmp ecx,edx
		ja CheckNextPetPoz2
        mov ecx,[eax+0x10]
		mov edx,[esp+0x4]
		add edx,0x5
		cmp ecx,edx
		jb CheckNextPetPoz2
		add edx,0xD9
		cmp ecx,edx
		ja CheckNextPetPoz2
        mov ecx,[esp+0xC]
		xor eax,eax
		mov ax,[ecx+0x20]
		test eax,eax
        jz CheckNextSkillPoz4
		xor eax,eax
		mov byte ptr [ecx+0x51],0x3
        mov byte ptr [ecx+0x56],0x1
		jmp CheckNextSkillPoz4


		CheckNextPetPoz2:
        mov ecx,[eax+0x18]
		mov edx,[esp+0x8]
        add edx,0x9C
		cmp ecx,edx
		jb CheckProcessFunSend
		add edx,0x1B
		cmp ecx,edx
		ja CheckProcessFunSend
        mov ecx,[eax+0x10]
		mov edx,[esp+0x4]
		add edx,0x5
		cmp ecx,edx
		jb CheckProcessFunSend
		add edx,0xD9
		cmp ecx,edx
		ja CheckProcessFunSend
		mov ecx,[esp+0xC]
		xor eax,eax
		mov ax,[ecx+0x30]
		test eax,eax
        jz CheckNextSkillPoz4
		xor eax,eax
		mov byte ptr [ecx+0x51],0x4
		mov byte ptr [ecx+0x56],0x1
		jmp CheckNextSkillPoz4

		CheckProcessFunSend:
        mov ecx,[eax+0x18]
		mov edx,[esp+0x8]
        add edx,0x16E
		cmp ecx,edx
		jb CheckProcessFunSendPhaBoPhongAn
		add edx,0x12
		cmp ecx,edx
		ja CheckProcessFunSendPhaBoPhongAn
        mov ecx,[eax+0x10]
		mov edx,[esp+0x4]
		add edx,0xED
		cmp ecx,edx
		jb CheckProcessFunSendPhaBoPhongAn
		add edx,0x66
		cmp ecx,edx
		ja CheckProcessFunSendPhaBoPhongAn
        mov ecx,[esp+0xC]
		xor eax,eax
		mov al,[ecx+0x52]
		test eax,eax    // Pet
		jz KiemTraFuncThucTInh
        mov byte ptr [ecx+0x56],0x1
		push 0xB0  // ID
		push 0x0
		push eax
		push 0x0
		call ProcessFunSendPakcageOtherFunc
		ret 0xC

        KiemTraFuncThucTInh:
		xor eax,eax    //
		mov al,[ecx+0x57]
		test eax,eax
		jz KiemTraPhongAn
		xor edx,edx
        mov dl,[ecx+0x51]
		test edx,edx
		jz ChuaChonPet
        mov byte ptr [ecx+0x56],0x1
        push 0xB1  // ID
		push 0x0
		push eax
		push edx//Pet chon
		call ProcessFunSendPakcageOtherFunc
		ret 0xC

		KiemTraPhongAn:
		xor eax,eax   //
		mov al,[ecx+0x53]
		test eax,eax
		jz KiemTraThucAn
        xor edx,edx
		mov dl,[ecx+0x51]
		test edx,edx
		jz ChuaChonPet
        sub edx,0x1
		imul edx,0x10
		xor eax,eax
		mov al,[ecx+edx+0x4]
		test eax,eax
		jz KhongThePhongAnLv0
        xor edx,edx
		mov dl,[ecx+0x51]
        xor eax,eax   //
		mov al,[ecx+0x53]
        mov byte ptr [ecx+0x56],0x1
		push 0xB2  // ID
		push 0x0
		push eax
		push edx//Pet chon
		call ProcessFunSendPakcageOtherFunc
		ret 0xC


        KiemTraThucAn:
		xor eax,eax   //
		mov al,[ecx+0x54]
		test eax,eax
		jz KiemTraVPNangCapPet
        xor edx,edx
		mov dl,[ecx+0x51]
		test edx,edx
		jz ChuaChonPet
        mov byte ptr [ecx+0x56],0x1
		push 0xB4  // ID
		push 0x0
		push eax
		push edx//Pet chon
		call ProcessFunSendPakcageOtherFunc
		ret 0xC

        KiemTraVPNangCapPet:
		xor eax,eax    //
		mov al,[ecx+0x58]
		test eax,eax
		jz KhongCoVPDao5
		xor edx,edx
		mov dl,[ecx+0x51]
		test edx,edx
		jz ChuaChonPet
		mov byte ptr [ecx+0x56],0x1
		push 0xB3  // ID
		push 0x0
		push eax
		push edx//Pet chon
		call ProcessFunSendPakcageOtherFunc
		ret 0xC

        CheckProcessFunSendPhaBoPhongAn:
        mov ecx,[eax+0x18]
		mov edx,[esp+0x8]
        add edx,0x14B
		cmp ecx,edx
		jb ProcessFuncSendTrieuHoi
		add edx,0x12
		cmp ecx,edx
		ja ProcessFuncSendTrieuHoi
        mov ecx,[eax+0x10]
		mov edx,[esp+0x4]
		add edx,0xED
		cmp ecx,edx
		jb ProcessFuncSendTrieuHoi
		add edx,0x66
		cmp ecx,edx
		ja ProcessFuncSendTrieuHoi
		mov ecx,[esp+0xC]
		xor eax,eax   //
		mov al,[ecx+0x59]
		test eax,eax
		jz KhongCoVPDao5
		mov byte ptr [ecx+0x56],0x1
		push 0xB8 // ID
		push 0x0
		push eax
		push 0x0//Pet chon
		call ProcessFunSendPakcageOtherFunc
		ret 0xC

		ProcessFuncSendTrieuHoi:
        mov ecx,[eax+0x18]
		mov edx,[esp+0x8]
        add edx,0xBB
		cmp ecx,edx
		jb HuyDaoPetDao
		add edx,0x14
		cmp ecx,edx
		ja HuyDaoPetDao
        mov ecx,[eax+0x10]
		mov edx,[esp+0x4]
		add edx,0xFE
		cmp ecx,edx
		jb HuyDaoPetDao
		add edx,0x44
		cmp ecx,edx
		ja HuyDaoPetDao
        mov ecx,[esp+0xC]
		xor eax,eax   //
        xor edx,edx
		mov dl,[ecx+0x51]
		test edx,edx
		jz ChuaChonPet
		sub edx,0x1
		imul edx,0x10
		xor eax,eax
		mov al,[ecx+edx+0x5]
		test eax,eax
		jnz HuyTrieuHoi
        mov ecx,[esp+0xC]
		xor eax,eax   //
        xor edx,edx
		mov dl,[ecx+0x51]
		mov byte ptr [ecx+0x56],0x1
		push 0xB7  // ID
		push 0x0
		push 0x0
		push edx//Pet chon
		call ProcessFunSendPakcageOtherFunc
		ret 0xC

		HuyTrieuHoi:
		cmp eax,0x1
		jnz NhanQuaDaoXong
        mov ecx,[esp+0xC]
		xor eax,eax   //
        xor edx,edx
		mov dl,[ecx+0x51]
		mov byte ptr [ecx+0x56],0x1
		push 0xB9  // ID
		push 0x0
		push 0x0
		push edx//Pet chon
		call ProcessFunSendPakcageOtherFunc
		ret 0xC

		NhanQuaDaoXong:
        cmp eax,0x2
		jnz CheckNextSkillPoz4
        xor eax,eax
		mov eax,[ecx+edx+0x8]
		mov edx,[ecx+edx+0xC]
		add eax,edx
        mov edx,DWORD PTR SS:[0x01733B04]
		cmp eax,edx
		ja CheckNextSkillPoz4
        push 0x282C
		mov ecx,0x017323A8
		mov eax,0x007D8550
		call eax
		test eax,eax
		jz NotFoundPageHanhTrang
		mov ecx,eax
		mov eax,0x00578300
		call eax
		cmp eax,-1
	  	jz FullHanhTrangNhanQua
        mov ecx,[esp+0xC]
		xor eax,eax   //
        xor edx,edx
		mov dl,[ecx+0x51]
		mov byte ptr [ecx+0x56],0x1
		push 0xBB  // ID
		push 0x0
		push 0x0
		push edx//Pet chon
		call ProcessFunSendPakcageOtherFunc
		ret 0xC

        NotFoundPageHanhTrang:
        mov ecx,[esp+0xC]
		mov byte ptr [ecx+0x56],0x1
		ret 0xC

		FullHanhTrangNhanQua:
        push 0xFFFF2323
		push 0x1
		push 0xC
		push 207
		push 74
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x0155EE60
		mov eax,0x006A9800
		call eax
		mov ecx,[esp+0xC]
		mov byte ptr [ecx+0x56],0x1
        ret 0xC

		HuyDaoPetDao:
        mov ecx,[eax+0x18]
		mov edx,[esp+0x8]
        add edx,0x130
		cmp ecx,edx
		jb ChangeTabMaps
		add edx,0x14
		cmp ecx,edx
		ja ChangeTabMaps
        mov ecx,[eax+0x10]
		mov edx,[esp+0x4]
		add edx,0x100
		cmp ecx,edx
		jb ChangeTabMaps
		add edx,0x42
		cmp ecx,edx
		ja ChangeTabMaps
        mov ecx,[esp+0xC]
		xor eax,eax   //
        xor edx,edx
		mov dl,[ecx+0x51]
		test edx,edx
		jz ChuaChonPet
		sub edx,0x1
		imul edx,0x10
		xor eax,eax
		mov al,[ecx+edx+0x5]
		cmp eax,0x2
		jnz CheckNextSkillPoz4
        mov ecx,[esp+0xC]
		xor eax,eax   //
        xor edx,edx
		mov dl,[ecx+0x51]
		mov byte ptr [ecx+0x56],0x1
		push 0xBA  // ID
		push 0x0
		push 0x0
		push edx//Pet chon
		call ProcessFunSendPakcageOtherFunc
		ret 0xC

		ChangeTabMaps:
        mov ecx,[eax+0x18]
		mov edx,[esp+0x8]
        add edx,0xC6
		cmp ecx,edx
		jb ChangeTabSkillPet
		add edx,0xE
		cmp ecx,edx
		ja ChangeTabSkillPet
        mov ecx,[eax+0x10]
		mov edx,[esp+0x4]
		add edx,0x3
		cmp ecx,edx
		jb ChangeTabSkillPet
		add edx,0x2D
		cmp ecx,edx
		ja ChangeTabSkillPet
        mov ecx,[esp+0xC]
		xor eax,eax
		mov byte ptr [ecx+0x50],0x1
		mov byte ptr [ecx+0x56],0x1
		jmp CheckNextSkillPoz4

		ChangeTabSkillPet:
        mov ecx,[eax+0x18]
		mov edx,[esp+0x8]
		add edx,0xC6
		cmp ecx,edx
		jb ProcessBuffAnSearch
		add edx,0xE
		cmp ecx,edx
		ja ProcessBuffAnSearch
        mov ecx,[eax+0x10]
		mov edx,[esp+0x4]
		add edx,0x37
		cmp ecx,edx
		jb ProcessBuffAnSearch
		add edx,0x2D
		cmp ecx,edx
		ja ProcessBuffAnSearch
		mov ecx,[esp+0xC]
		xor eax,eax
		mov byte ptr [ecx+0x50],0x0
		mov byte ptr [ecx+0x56],0x1
		jmp CheckNextSkillPoz4

		//Choose Skill
		ProcessBuffAnSearch:
		mov ecx,DWORD PTR SS:[0x01733AD0]
		mov eax,0x007D7FD0
		call eax
		mov ecx,[eax+0x18]
		mov edx,[esp+0x8]
        add edx,0xDA
		cmp ecx,edx
		jb CheckNextFunSendFunc
		add edx,0x1B
		cmp ecx,edx
		ja CheckNextFunSendFunc
		//
		mov ecx,[eax+0x10]
		mov edx,[esp+0x4]
		add edx,0x5
		cmp ecx,edx
		jb CheckNextFunSendFunc
		add edx,0xD9
		cmp ecx,edx
		ja CheckNextFunSendFunc
		mov ecx,[esp+0xC]
		xor eax,eax
		mov al,[ecx+0x50]
		test eax,eax
		jz ChooseSkill1
        xor eax,eax
		mov al,[ecx+0x51]
		test eax,eax
		jz CheckNextSkillPoz4
		mov ecx,[esp+0xC]
        mov byte ptr [ecx+0x56],0x1
		sub eax,0x1
		imul eax,0x10
		xor edx,edx
		mov dl,[ecx+eax+0x4]
		cmp edx,0x1
		jb CheckNextSkillPoz4
		xor edx,edx
        mov dl,[ecx+0x51]
		test edx,edx
		jz ChuaChonPet
        mov byte ptr [ecx+0x56],0x1
        push 0xB6 // ID
		push 0x1
		push 0x0
		push edx //Pet chon
		call ProcessFunSendPakcageOtherFunc
		ret 0xC

		ChooseSkill1:
        xor eax,eax
		mov al,[ecx+0x51]
		test eax,eax
		jz CheckNextSkillPoz4
		mov ecx,[esp+0xC]
		mov byte ptr [ecx+0x56],0x1
		sub eax,0x1
		imul eax,0x10
		xor edx,edx
		mov dl,[ecx+eax+0x4]
		cmp edx,0x1
		jb CheckNextSkillPoz4
		xor edx,edx
        mov dl,[ecx+0x51]
		test edx,edx
		jz ChuaChonPet
        mov byte ptr [ecx+0x56],0x1
		push 0xB5 // ID
		push 0x1
		push 0x0
		push edx //Pet chon
		call ProcessFunSendPakcageOtherFunc
		ret 0xC

        ////
		CheckNextFunSendFunc:
		mov ecx,[eax+0x18]
		mov edx,[esp+0x8]
        add edx,0xFD
		cmp ecx,edx
		jb CheckNextFunSendFunc1
		add edx,0x1B
		cmp ecx,edx
		ja CheckNextFunSendFunc1
		//
		mov ecx,[eax+0x10]
		mov edx,[esp+0x4]
		add edx,0x5
		cmp ecx,edx
		jb CheckNextFunSendFunc1
		add edx,0xD9
		cmp ecx,edx
		ja CheckNextFunSendFunc1
		mov ecx,[esp+0xC]
		xor eax,eax
		mov al,[ecx+0x50]
		test eax,eax
		jz ChooseSkill2
        xor eax,eax
		mov al,[ecx+0x51]
		test eax,eax
		jz CheckNextSkillPoz4
		mov ecx,[esp+0xC]
        mov byte ptr [ecx+0x56],0x1
		sub eax,0x1
		imul eax,0x10
		xor edx,edx
		mov dl,[ecx+eax+0x4]
		cmp edx,0x2
		jb CheckNextSkillPoz4
		xor edx,edx
        mov dl,[ecx+0x51]
		test edx,edx
		jz ChuaChonPet
        mov byte ptr [ecx+0x56],0x1
		push 0xB6 // ID
		push 0x2
		push 0x0
		push edx //Pet chon
		call ProcessFunSendPakcageOtherFunc
		ret 0xC

		ChooseSkill2:
        xor eax,eax
		mov al,[ecx+0x51]
		test eax,eax
		jz CheckNextSkillPoz4
		mov ecx,[esp+0xC]
        mov byte ptr [ecx+0x56],0x1
		sub eax,0x1
		imul eax,0x10
		xor edx,edx
		mov dl,[ecx+eax+0x4]
		cmp edx,0x1
		jb CheckNextSkillPoz4
		xor eax,eax
		mov al,[ecx+0x51]
        xor edx,edx
        mov dl,[ecx+0x51]
		test edx,edx
		jz ChuaChonPet
        mov byte ptr [ecx+0x56],0x1
		push 0xB5 // ID
		push 0x2
		push 0x0
		push edx //Pet chon
		call ProcessFunSendPakcageOtherFunc
		ret 0xC

		////
		CheckNextFunSendFunc1:
		mov ecx,[eax+0x18]
		mov edx,[esp+0x8]
        add edx,0x11F
		cmp ecx,edx
		jb CheckNextFunSendFunc2
		add edx,0x1B
		cmp ecx,edx
		ja CheckNextFunSendFunc2
		//
		mov ecx,[eax+0x10]
		mov edx,[esp+0x4]
		add edx,0x5
		cmp ecx,edx
		jb CheckNextFunSendFunc2
		add edx,0xD9
		cmp ecx,edx
		ja CheckNextFunSendFunc2
		mov ecx,[esp+0xC]
		xor eax,eax
		mov al,[ecx+0x50]
		test eax,eax
		jz ChooseSkill3
        xor eax,eax
		mov al,[ecx+0x51]
		test eax,eax
		jz CheckNextSkillPoz4
		mov ecx,[esp+0xC]
		mov byte ptr [ecx+0x56],0x1
		sub eax,0x1
		imul eax,0x10
		xor edx,edx
		mov dl,[ecx+eax+0x4]
		cmp edx,0x3
		jb CheckNextSkillPoz4
		xor edx,edx
        mov dl,[ecx+0x51]
		test edx,edx
		jz ChuaChonPet
        mov byte ptr [ecx+0x56],0x1
		push 0xB6 // ID
		push 0x3
		push 0x0
		push edx //Pet chon
		call ProcessFunSendPakcageOtherFunc
		ret 0xC

		ChooseSkill3:
        xor eax,eax
		mov al,[ecx+0x51]
		test eax,eax
		jz CheckNextSkillPoz4
		mov ecx,[esp+0xC]
        mov byte ptr [ecx+0x56],0x1
		sub eax,0x1
		imul eax,0x10
		xor edx,edx
		mov dl,[ecx+eax+0x4]
		cmp edx,0x3
		jb CheckNextSkillPoz4
		xor edx,edx
        mov dl,[ecx+0x51]
		test edx,edx
		jz ChuaChonPet
        mov byte ptr [ecx+0x56],0x1
		push 0xB5 // ID
		push 0x3
		push 0x0
		push edx //Pet chon
		call ProcessFunSendPakcageOtherFunc
		ret 0xC



		////
		CheckNextFunSendFunc2:
		mov ecx,[eax+0x18]
		mov edx,[esp+0x8]
		add edx,0x142
		cmp ecx,edx
		jb CheckNextFunSendFunc3
		add edx,0x1B
		cmp ecx,edx
		ja CheckNextFunSendFunc3
		//
		mov ecx,[eax+0x10]
		mov edx,[esp+0x4]
		add edx,0x5
		cmp ecx,edx
		jb CheckNextFunSendFunc3
		add edx,0xD9
		cmp ecx,edx
		ja CheckNextFunSendFunc3
		mov ecx,[esp+0xC]
		xor eax,eax
		mov al,[ecx+0x50]
		test eax,eax
		jz ChooseSkill4
		mov ecx,[esp+0xC]
        mov byte ptr [ecx+0x56],0x1
		sub eax,0x1
		imul eax,0x10
		xor edx,edx
		mov dl,[ecx+eax+0x4]
		cmp edx,0x4
		jb CheckNextSkillPoz4
		xor edx,edx
        mov dl,[ecx+0x51]
		test edx,edx
		jz ChuaChonPet
        mov byte ptr [ecx+0x56],0x1
		push 0xB6 // ID
		push 0x4
		push 0x0
		push edx //Pet chon
		call ProcessFunSendPakcageOtherFunc
		ret 0xC

		ChooseSkill4:
        xor eax,eax
		mov al,[ecx+0x51]
		test eax,eax
		jz CheckNextSkillPoz4
		mov ecx,[esp+0xC]
        mov byte ptr [ecx+0x56],0x1
        sub eax,0x1
		imul eax,0x10
		xor edx,edx
		mov dl,[ecx+eax+0x4]
		cmp edx,0x4
		jb CheckNextSkillPoz4
		xor edx,edx
        mov dl,[ecx+0x51]
		test edx,edx
		jz ChuaChonPet
        mov byte ptr [ecx+0x56],0x1
		push 0xB5 // ID
		push 0x4
		push 0x0
		push edx //Pet chon
		call ProcessFunSendPakcageOtherFunc
		ret 0xC


		////
		CheckNextFunSendFunc3:
		mov ecx,[eax+0x18]
		mov edx,[esp+0x8]
        add edx,0x166
		cmp ecx,edx
		jb CheckNextSkillPoz4
		add edx,0x1B
		cmp ecx,edx
		ja CheckNextSkillPoz4
		//
		mov ecx,[eax+0x10]
		mov edx,[esp+0x4]
		add edx,0x5
		cmp ecx,edx
		jb CheckNextSkillPoz4
		add edx,0xD9
		cmp ecx,edx
		ja CheckNextSkillPoz4
		mov ecx,[esp+0xC]
		xor eax,eax
		mov al,[ecx+0x50]
		test eax,eax
		jz ChooseSkill5
        xor eax,eax
		mov al,[ecx+0x51]
		test eax,eax
		jz CheckNextSkillPoz4
		mov ecx,[esp+0xC]
		mov byte ptr [ecx+0x56],0x1
		sub eax,0x1
		imul eax,0x10
		xor edx,edx
		mov dl,[ecx+eax+0x4]
		cmp edx,0x5
		jb CheckNextSkillPoz4
		xor eax,eax
		mov al,[ecx+0x55]
		test al,al
		jz KhongCoVPDao5
		xor edx,edx
		mov dl,[ecx+0x51]
		test edx,edx
		jz ChuaChonPet
        mov byte ptr [ecx+0x56],0x1
		push 0xB6 // ID
		push 0x5
		push eax
		push edx //Pet chon
		call ProcessFunSendPakcageOtherFunc
		ret 0xC

		ChooseSkill5:
        xor eax,eax
		mov al,[ecx+0x51]
		test eax,eax
		jz CheckNextSkillPoz4
		mov ecx,[esp+0xC]
        mov byte ptr [ecx+0x56],0x1
        sub eax,0x1
		imul eax,0x10
		xor edx,edx
		mov dl,[ecx+eax+0x4]
		cmp edx,0x5
		jb CheckNextSkillPoz4
		xor edx,edx
		mov dl,[ecx+0x51]
		test edx,edx
		jz ChuaChonPet
        mov byte ptr [ecx+0x56],0x1
		push 0xB5 // ID
		push 0x5
		push 0x0
		push edx //Pet chon
		call ProcessFunSendPakcageOtherFunc
		ret 0xC

        WaitForPass:
		mov eax,[esp+0x10]
        mov byte ptr [eax+0x56],0x0
        ret

		KhongCoVPDao5:
		push 0xFFFAE6AA
		push 0x1
		push 0xC
		push 0x133C
		push 0x19
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x0155EE60
		mov eax,0x006A9800
		call eax
		ret 0xC

        KhongThePhongAnLv0:
		push 0xFFFAE6AA
		push 0x1
		push 0xC
		push 5207
		push 0x19
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x0155EE60
		mov eax,0x006A9800
		call eax
		ret 0xC

        ChuaChonPet:
		push 0xFFFAE6AA
		push 0x1
		push 0xC
		push 4987
		push 0x19
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x0155EE60
		mov eax,0x006A9800
		call eax
		ret 0xC

		HoverPoz:
        call WaitForPass
		mov ecx,[esp+0xC]
		xor eax,eax
		mov al,[ecx+0x51]
        test eax,eax
		jz CheckNextSkillPoz4
        mov ecx,[esp+0xC]
		xor eax,eax
        mov al,[ecx+0x51]
		sub eax,0x1
		imul eax,0x10
		xor edx,edx
		mov dl,[ecx+eax+0x4]
		test edx,edx
        jz CheckNextSkillPoz4
        //
        mov ecx,DWORD PTR SS:[0x01733AD0]
		mov eax,0x007D7FD0
		call eax
		mov ecx,[eax+0x18]
		mov edx,[esp+0x8]
        add edx,0xDA
		cmp ecx,edx
		jb CheckNextSkillPoz
		add edx,0x1B
		cmp ecx,edx
		ja CheckNextSkillPoz
		//
		mov ecx,[eax+0x10]
		mov edx,[esp+0x4]
		add edx,0x5
		cmp ecx,edx
		jb CheckNextSkillPoz
		add edx,0xD9
		cmp ecx,edx
		ja CheckNextSkillPoz
		mov ecx,[esp+0xC]
		xor eax,eax
		mov al,[ecx+0x50]
		test eax,eax
		jz ShowSkill1
        xor eax,eax
		mov al,[ecx+0x51]
		sub eax,0x1
		imul eax,0x10
		xor edx,edx
		mov dx,[ecx+eax]
		test edx,edx
		jz CheckNextSkillPoz4
        xor edx,edx
		mov dl,[ecx+eax+0x4]
		cmp edx,0x1
        jb CheckNextSkillPoz4
		mov eax,0x201
        jmp ShowSkillPetHover
		ShowSkill1:
        xor eax,eax
		mov al,[ecx+0x51]
		sub eax,0x1
		imul eax,0x10
		xor edx,edx
		mov dx,[ecx+eax]
		test edx,edx
		jz CheckNextSkillPoz4
        xor edx,edx
		mov dl,[ecx+eax+0x4]
		cmp edx,0x1
        jb CheckNextSkillPoz4
		mov eax,0x101
        jmp ShowSkillPetHover

        ////
		CheckNextSkillPoz:
		mov ecx,[eax+0x18]
		mov edx,[esp+0x8]
        add edx,0xFD
		cmp ecx,edx
		jb CheckNextSkillPoz1
		add edx,0x1B
		cmp ecx,edx
		ja CheckNextSkillPoz1
		//
		mov ecx,[eax+0x10]
		mov edx,[esp+0x4]
		add edx,0x5
		cmp ecx,edx
		jb CheckNextSkillPoz1
		add edx,0xD9
		cmp ecx,edx
		ja CheckNextSkillPoz1
		mov ecx,[esp+0xC]
		xor eax,eax
		mov al,[ecx+0x50]
		test eax,eax
		jz ShowSkill2
        xor eax,eax
		mov al,[ecx+0x51]
		sub eax,0x1
		imul eax,0x10
		xor edx,edx
		mov dx,[ecx+eax]
		test edx,edx
		jz CheckNextSkillPoz4
        xor edx,edx
		mov dl,[ecx+eax+0x4]
		cmp edx,0x2
        jb CheckNextSkillPoz4
		mov eax,0x202
        jmp ShowSkillPetHover
		ShowSkill2:
        xor eax,eax
		mov al,[ecx+0x51]
		sub eax,0x1
		imul eax,0x10
		xor edx,edx
		mov dx,[ecx+eax]
		test edx,edx
		jz CheckNextSkillPoz4
        xor edx,edx
		mov dl,[ecx+eax+0x4]
		cmp edx,0x1
        jb CheckNextSkillPoz4
		mov eax,0x102
        jmp ShowSkillPetHover

		////
		CheckNextSkillPoz1:
		mov ecx,[eax+0x18]
		mov edx,[esp+0x8]
        add edx,0x11F
		cmp ecx,edx
		jb CheckNextSkillPoz2
		add edx,0x1B
		cmp ecx,edx
		ja CheckNextSkillPoz2
		//
		mov ecx,[eax+0x10]
		mov edx,[esp+0x4]
		add edx,0x5
		cmp ecx,edx
		jb CheckNextSkillPoz2
		add edx,0xD9
		cmp ecx,edx
		ja CheckNextSkillPoz2
		mov ecx,[esp+0xC]
		xor eax,eax
		mov al,[ecx+0x50]
		test eax,eax
		jz ShowSkill3
        xor eax,eax
		mov al,[ecx+0x51]
		sub eax,0x1
		imul eax,0x10
		xor edx,edx
		mov dx,[ecx+eax]
		test edx,edx
		jz CheckNextSkillPoz4
        xor edx,edx
		mov dl,[ecx+eax+0x4]
		cmp edx,0x3
		jb CheckNextSkillPoz4
		mov eax,0x203
        jmp ShowSkillPetHover
		ShowSkill3:
        xor eax,eax
		mov al,[ecx+0x51]
		sub eax,0x1
		imul eax,0x10
		xor edx,edx
		mov dx,[ecx+eax]
		test edx,edx
		jz CheckNextSkillPoz4
        xor edx,edx
		mov dl,[ecx+eax+0x4]
		cmp edx,0x3
        jb CheckNextSkillPoz4
		mov eax,0x103
        jmp ShowSkillPetHover



		////
		CheckNextSkillPoz2:
		mov ecx,[eax+0x18]
		mov edx,[esp+0x8]
		add edx,0x142
		cmp ecx,edx
		jb CheckNextSkillPoz3
		add edx,0x1B
		cmp ecx,edx
		ja CheckNextSkillPoz3
		//
		mov ecx,[eax+0x10]
		mov edx,[esp+0x4]
		add edx,0x5
		cmp ecx,edx
		jb CheckNextSkillPoz3
		add edx,0xD9
		cmp ecx,edx
		ja CheckNextSkillPoz3
		mov ecx,[esp+0xC]
		xor eax,eax
		mov al,[ecx+0x50]
		test eax,eax
		jz ShowSkill4
        xor eax,eax
		mov al,[ecx+0x51]
		sub eax,0x1
		imul eax,0x10
		xor edx,edx
		mov dx,[ecx+eax]
		test edx,edx
		jz CheckNextSkillPoz4
        xor edx,edx
		mov dl,[ecx+eax+0x4]
		cmp edx,0x4
        jb CheckNextSkillPoz4
		mov eax,0x204
        jmp ShowSkillPetHover
		ShowSkill4:
        xor eax,eax
		mov al,[ecx+0x51]
		sub eax,0x1
		imul eax,0x10
		xor edx,edx
		mov dx,[ecx+eax]
		test edx,edx
		jz CheckNextSkillPoz4
        xor edx,edx
		mov dl,[ecx+eax+0x4]
		cmp edx,0x4
        jb CheckNextSkillPoz4
		mov eax,0x104
        jmp ShowSkillPetHover


		////
		CheckNextSkillPoz3:
		mov ecx,[eax+0x18]
		mov edx,[esp+0x8]
        add edx,0x166
		cmp ecx,edx
		jb CheckNextSkillPoz4
		add edx,0x1B
		cmp ecx,edx
		ja CheckNextSkillPoz4
		//
		mov ecx,[eax+0x10]
		mov edx,[esp+0x4]
		add edx,0x5
		cmp ecx,edx
		jb CheckNextSkillPoz4
		add edx,0xD9
		cmp ecx,edx
		ja CheckNextSkillPoz4
		mov ecx,[esp+0xC]
		xor eax,eax
		mov al,[ecx+0x50]
		test eax,eax
		jz ShowSkill5
        xor eax,eax
		mov al,[ecx+0x51]
		sub eax,0x1
		imul eax,0x10
		xor edx,edx
		mov dx,[ecx+eax]
		test edx,edx
		jz CheckNextSkillPoz4
        xor edx,edx
		mov dl,[ecx+eax+0x4]
		cmp edx,0x5
        jb CheckNextSkillPoz4
		mov eax,0x205
        jmp ShowSkillPetHover
		ShowSkill5:
        xor eax,eax
		mov al,[ecx+0x51]
		sub eax,0x1
		imul eax,0x10
		xor edx,edx
		mov dx,[ecx+eax]
		test edx,edx
		jz CheckNextSkillPoz4
        xor edx,edx
		mov dl,[ecx+eax+0x4]
		cmp edx,0x5
        jb CheckNextSkillPoz4
		mov eax,0x105
		ShowSkillPetHover:
        push eax
		mov eax,[esp+0x8]
		add eax,0x1A5
		push eax
		mov eax,[esp+0x10]
		push eax
		mov eax,[esp+0x18]
        add eax,0x64
		push eax
        call DrawListReward
		ret 0xC

		CheckNextSkillPoz4:
        ret 0xC

		Default:
		pop ebp
        pop ebx
        add esp,0x00000328
		push 0x004FDDDC
		ret


		ProcessFunSendPakcage:
        sub esp,0x8
		mov eax,esp
        push 0x7
		push eax
        call XoaChuoi
		mov eax,esp
		mov word ptr[eax],0x8
		mov byte ptr [eax+0x2],0x7C
		mov byte ptr [eax+0x3],0xE0
		mov ecx,[esp+0x8]
		nop
		nop
		nop
		nop
		mov eax,esp
		mov edx,[esp+0x8]
		nop
		nop
        nop
		mov [eax+0x4],dl // Loai Map/Skill
		mov edx,[esp+0x8]
		nop
		nop
		nop
		mov [eax+0x5],dl  // Vp Phu Tro
		mov edx,[esp+0x8]
		nop
		nop
        nop
		mov [eax+0x6],dl // Vi tri pet
        mov edx,[esp+0x8]
		nop
		nop
		nop // Skill Chon / Map Chon
		mov [eax+0x7],dl
		mov eax,esp
		push eax
		mov ecx,0x155EE60
		mov eax,0x006B2F60
		call eax
		add esp,0x8
		ret 0x10

		ProcessFunSendPakcageOtherFunc:
        sub esp,0x8
		mov eax,esp
		push 0x7
		push eax
        call XoaChuoi
		mov eax,esp
		mov word ptr[eax],0x8
		mov byte ptr [eax+0x2],0x7C
		mov ecx,[esp+0x18]
		mov byte ptr [eax+0x3],cl
		mov eax,esp
		mov edx,[esp+0x10]
		mov [eax+0x4],dl // vi tri pet
        mov eax,esp
		mov edx,[esp+0xC]
		mov [eax+0x5],dl // vi tri vat pham pet
        mov edx,[esp+0x14]
		mov [eax+0x6],dl // Loai Map/ SKill
		mov eax,esp
		push eax
		mov ecx,0x155EE60
		mov eax,0x006B2F60
		call eax
		add esp,0x8
		ret 0x10

        XoaChuoi:
		mov eax,[esp+0x4]
		xor ecx,ecx
		BackLoopXoaChuoi:
        mov byte ptr[eax+ecx],0x0
		cmp ecx,[esp+0x8]
		jb NextChuoi
        ret 0x8
		NextChuoi:
		add ecx,0x1
		jmp BackLoopXoaChuoi

		DrawListReward:
		mov eax,[esp+0x4]
		mov ecx,[esp+0x10]
		cmp ecx,0x201
		jnz KiemTraMapsHover
        push 5320
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,eax
		mov eax,[esp+0x4]
		mov  DWORD PTR SS : [eax + 0x70] , ecx
		mov  DWORD PTR SS : [eax + 0x9C] , 0x00
		mov  DWORD PTR SS : [eax + 0xA0] , 0xE4
		mov  DWORD PTR SS : [eax + 0x98] , 0x00
		mov  DWORD PTR SS : [eax + 0xA4] , 0x165
        jmp ProceesShowImageInFormPet
		KiemTraMapsHover:
		cmp ecx,0x202
		jnz KiemTraMapsHover1
		push 5321
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,eax
		mov eax,[esp+0x4]
		mov  DWORD PTR SS : [eax + 0x70] , ecx
		mov  DWORD PTR SS : [eax + 0x9C] , 0x00
		mov  DWORD PTR SS : [eax + 0xA0] , 0xE4
		mov  DWORD PTR SS : [eax + 0x98] , 0x00
		mov  DWORD PTR SS : [eax + 0xA4] , 0x165
		jmp ProceesShowImageInFormPet
		KiemTraMapsHover1:
		cmp ecx,0x203
		jnz KiemTraMapsHover2
		push 5322
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,eax
		mov eax,[esp+0x4]
		mov  DWORD PTR SS : [eax + 0x70] , ecx
		mov  DWORD PTR SS : [eax + 0x9C] , 0x00
		mov  DWORD PTR SS : [eax + 0xA0] , 0xE4
		mov  DWORD PTR SS : [eax + 0x98] , 0x00
		mov  DWORD PTR SS : [eax + 0xA4] , 0x165
		jmp ProceesShowImageInFormPet
		KiemTraMapsHover2:
		cmp ecx,0x204
		jnz KiemTraMapsHover3
		push 5323
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,eax
		mov eax,[esp+0x4]
		mov  DWORD PTR SS : [eax + 0x70] , ecx
		mov  DWORD PTR SS : [eax + 0x9C] , 0x00
		mov  DWORD PTR SS : [eax + 0xA0] , 0xE4
		mov  DWORD PTR SS : [eax + 0x98] , 0x00
		mov  DWORD PTR SS : [eax + 0xA4] , 0x165
		jmp ProceesShowImageInFormPet

		KiemTraMapsHover3:
        cmp ecx,0x205
		jnz KiemTraSkillHover1
		push 5324
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,eax
		mov eax,[esp+0x4]
		mov  DWORD PTR SS : [eax + 0x70] , ecx
		mov  DWORD PTR SS : [eax + 0x9C] , 0x00
		mov  DWORD PTR SS : [eax + 0xA0] , 0xE4
		mov  DWORD PTR SS : [eax + 0x98] , 0x00
		mov  DWORD PTR SS : [eax + 0xA4] , 0x165
		jmp ProceesShowImageInFormPet

		KiemTraSkillHover1:
		cmp ecx,0x101
		jnz KiemTraSkillHover2
		push 5325
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,eax
		mov eax,[esp+0x4]
		mov  DWORD PTR SS : [eax + 0x70] , ecx
		mov  DWORD PTR SS : [eax + 0x9C] , 0x00
		mov  DWORD PTR SS : [eax + 0xA0] , 0xE4
		mov  DWORD PTR SS : [eax + 0x98] , 0x00
		mov  DWORD PTR SS : [eax + 0xA4] , 0x8A
		jmp ProceesShowImageInFormPet

		KiemTraSkillHover2:
		cmp ecx,0x102
		jnz KiemTraSkillHover3
		push 5326
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,eax
		mov eax,[esp+0x4]
		mov  DWORD PTR SS : [eax + 0x70] , ecx
		mov  DWORD PTR SS : [eax + 0x9C] , 0x00
		mov  DWORD PTR SS : [eax + 0xA0] , 0xE4
		mov  DWORD PTR SS : [eax + 0x98] , 0x00
		mov  DWORD PTR SS : [eax + 0xA4] , 0x8A
		jmp ProceesShowImageInFormPet

		KiemTraSkillHover3:
		cmp ecx,0x103
		jnz KiemTraSkillHover4
		push 5327
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,eax
		mov eax,[esp+0x4]
		mov  DWORD PTR SS : [eax + 0x70] , ecx
		mov  DWORD PTR SS : [eax + 0x9C] , 0x00
		mov  DWORD PTR SS : [eax + 0xA0] , 0xE4
		mov  DWORD PTR SS : [eax + 0x98] , 0x00
		mov  DWORD PTR SS : [eax + 0xA4] , 0x8A
		jmp ProceesShowImageInFormPet

		KiemTraSkillHover4:
		cmp ecx,0x104
		jnz KiemTraSkillHover5
		push 5328
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,eax
		mov eax,[esp+0x4]
		mov  DWORD PTR SS : [eax + 0x70] , ecx
		mov  DWORD PTR SS : [eax + 0x9C] , 0x00
		mov  DWORD PTR SS : [eax + 0xA0] , 0xE4
		mov  DWORD PTR SS : [eax + 0x98] , 0x00
		mov  DWORD PTR SS : [eax + 0xA4] , 0x8A
		jmp ProceesShowImageInFormPet

        KiemTraSkillHover5:
		cmp ecx,0x105
		jnz NotFoundIDRequest
		push 5324
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,eax
		mov eax,[esp+0x4]
		mov  DWORD PTR SS : [eax + 0x70] , ecx
		mov  DWORD PTR SS : [eax + 0x9C] , 0x63
		mov  DWORD PTR SS : [eax + 0xA0] , 0x7F
		mov  DWORD PTR SS : [eax + 0x98] , 0x63
		mov  DWORD PTR SS : [eax + 0xA4] , 0x7F
		jmp ProceesShowImageInFormPet


		NotFoundIDRequest:
		ret 0x10


		ProceesShowImageInFormPet:
		push 0x00000000
		push 0x0089E914
		mov ecx,[esp+0x10]
		mov edx,[esp+0x14]
		push ecx
		push edx
		mov ecx, [esp+0x14]
		mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
		call eax
		mov ecx,[esp+0x4]
		push 0x1732CC8
		mov eax, 0x7B9850
		call eax //Draw1
		ret 0x10
	}
}
__declspec(naked) void GetPackageUsedItem() //006AC885 7
{
    __asm
	{
	   nop
	   nop
	   nop
	   nop
       nop
	   xor ecx,ecx
	   mov cl,[ebp]
	   cmp ecx,0x6
	   jz Default
       xor ecx,ecx
	   mov cl,[ebp+0x4]
	   cmp ecx,0xAA
	   jnz KiemTraPackageShowReWard
	   //
	   xor ecx,ecx
	   mov cl,[ebp+0x3]
	   cmp ecx,0x0
       jnz CheckAnotherResult
	   mov cl,[ebp+0x6]
	   test ecx,ecx
	   jz KhongConVPSuDung
	   xor ecx,ecx
	   mov cl,[ebp+0x5]
	   imul ecx,0x90
	   xor eax,eax
	   mov al,[ebp+0x6]
	   xor al,0xC5
	   mov [0x1107258+0x22DC8+ecx+0x19],al
	   jmp ProcessHienThiInfoText
	   KhongConVPSuDung:
	   xor eax,eax
	   mov al,[ebp+0x5]
	   imul eax,0x90
	   lea ecx,[eax+0x1107258+0x00022DC8]
	   mov eax,[eax+0x1107258+0x00022DC8]
	   call dword ptr [eax+0x4]
	   ProcessHienThiInfoText:
	   push 0xFFFAE6AA
	   push 0x1
	   push 0xC
	   push 4497
	   push 0x19
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x0155EE60
	   mov eax,0x006A9800
	   call eax
	   push 0x006AC89D
	   ret

	   CheckAnotherResult:
	   cmp ecx,0x2
	   jnz CheckAnotherResult1
       push 0xFFFAE6AA
	   push 0x1
	   push 0xC
	   push 4494
	   push 0x19
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x0155EE60
	   mov eax,0x006A9800
	   call eax
	   push 0x006AC89D
       ret

	   CheckAnotherResult1:
	   cmp ecx,0x3
	   jnz CheckCaseMoSlot
       push 0xFFFAE6AA
	   push 0x1
	   push 0xC
	   push 4495
	   push 0x19
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x0155EE60
	   mov eax,0x006A9800
	   call eax
       push 0x006AC89D
	   ret

	   CheckCaseMoSlot:
	   cmp ecx,0x11
	   jz CheckCaseMoSlot1
	   cmp ecx,0x12
	   jz CheckCaseMoSlot2
	   cmp ecx,0x30
	   jb KhongRoNguyenNhan
       cmp ecx,0x38
	   ja KhongRoNguyenNhan
	   sub ecx,0x30
	   mov [eax],cl
       xor ecx,ecx
       mov cl,[ebp+0x6]
	   test ecx,ecx
	   jz KhongConVPSuDungMoSlot
	   xor ecx,ecx
	   mov cl,[ebp+0x5]
	   imul ecx,0x90
	   xor eax,eax
	   mov al,[ebp+0x6]
	   xor al,0xC5
	   mov [0x1107258+0x22DC8+ecx+0x19],al
	   jmp ProcessHienThiInfoTextMoSlot
	   KhongConVPSuDungMoSlot:
	   xor eax,eax
	   mov al,[ebp+0x5]
	   imul eax,0x90
	   lea ecx,[eax+0x1107258+0x00022DC8]
	   mov eax,[eax+0x1107258+0x00022DC8]
	   call dword ptr [eax+0x4]
	   ProcessHienThiInfoTextMoSlot:
	   mov ecx,[ebp+0x7]
	   mov [0x0112F480],ecx
	   push 0xFFFAE6AA
	   push 0x1
	   push 0xC
	   push 4424
	   push 0x19
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x0155EE60
	   mov eax,0x006A9800
	   call eax
	   push 0x006AC89D
	   ret

	   CheckCaseMoSlot1:
       push 0xFFFAE6AA
	   push 0x1
	   push 0xC
	   push 4425
	   push 0x19
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x0155EE60
	   mov eax,0x006A9800
	   call eax
       push 0x006AC89D
	   ret

	   CheckCaseMoSlot2:
       push 0xFFFAE6AA
	   push 0x1
	   push 0xC
       push 4426
	   push 0x19
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x0155EE60
	   mov eax,0x006A9800
	   call eax
       push 0x006AC89D
	   ret

	   KhongRoNguyenNhan:
       push 0xFFFAE6AA
	   push 0x1
	   push 0xC
	   push 4496
	   push 0x19
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x0155EE60
	   mov eax,0x006A9800
	   call eax
	   push 0x006AC89D
	   ret

       KiemTraPackageShowReWard:
       cmp ecx,0xA1
	   jnz KhongRoNguyenNhan
	   push 10300
       mov ecx, 0x017323A8
	   mov eax, 0x7D8550
	   call eax
	   test eax,eax
	   jz KhongRoNguyenNhan
	   mov DWORD PTR SS:[eax+0x334],0x1
	   xor ecx,ecx
	   mov cl,[ebp+0x5]
	   xor cl,0x1F
	   mov [eax+0x222],cl
	   xor ecx,ecx
	   mov cx,[ebp+0x6]
	   xor cx,0xCE43
	   mov [eax+0x220],cx
       xor ecx,ecx
	   mov cl,[ebp+0x8]
	   xor cl,0xC5
	   mov [eax+0x225],cl
	   xor ecx,ecx
	   mov cl,[ebp+0x9]
	   xor cl,0xC5
	   mov [eax+0x21C],cl
	   mov DWORD PTR SS:[eax+0x10],0x1
       push 0x006AC89D
	   ret

	   Default:
       push 0x008A0CC4
	   push 0x006AC88A
       ret
    }
}
__declspec(naked)void ReceivePackageSlot()  //006ABA08
{
   __asm{
	   nop
	   nop
	   nop
	   nop
	   nop
       push eax
	   xor eax,eax
	   mov al,[ebp+0x4]
	   cmp eax,0x0
	   jnz KiemTraKetQua2
       xor eax,eax
	   mov al,[ebp+0x6]
	   test eax,eax
	   jz XoaVatPham
       xor ecx,ecx
	   mov cl,[ebp+0x5]
	   imul ecx,0x90
	   xor eax,eax
	   mov al,[ebp+0x6]
	   xor al,0xC5
	   mov [0x1107258+0x22DC8+ecx+0x19],al
	   jmp ProcessHienThiInfoTextSlot
	   XoaVatPham:
	   xor eax,eax
	   mov al,[ebp+0x5]
	   imul eax,0x90
	   lea ecx,[eax+0x1107258+0x00022DC8]
	   mov eax,[eax+0x1107258+0x00022DC8]
	   call dword ptr [eax+0x4]
	   ProcessHienThiInfoTextSlot:
	   mov eax,[esp]
	   xor ecx,ecx
       mov cl,[ebp+0x7]
	   mov [eax],cl
	   mov ecx,[ebp+0x8]
	   mov [0x0112F480],ecx
	   push 4429
	   call ShowInforText
       pop eax
       push 0x006ABA10
	   ret


	   KiemTraKetQua2:
	   cmp eax,0x1
	   jnz KiemTraKetQua3
	   push 4426
	   call ShowInforText
       pop eax
	   push 0x006ABA10
	   ret

	   KiemTraKetQua3:
	   cmp eax,0x2
	   jnz KiemTraKetQua4
       push 4427
	   call ShowInforText
       pop eax
	   push 0x006ABA10
	   ret

	   KiemTraKetQua4:
       cmp eax,0x3
	   jnz KiemTraKetQua5
	   push 4430
	   call ShowInforText
       pop eax
	   push 0x006ABA10
	   ret

	   KiemTraKetQua5:
	   cmp eax,0x4
	   jnz ErrorResult
       mov eax,[esp]
	   xor ecx,ecx
       mov cl,[ebp+0x7]
	   mov [eax],cl
       pop eax
       push 0x006ABA10
	   ret


	   ErrorResult:
	   push 4428
	   call ShowInforText
       pop eax
	   push 0x006ABA10
	   ret


	   ShowInforText:
       push 0xFFFF2323
	   push 0x1
	   push 0xC
       mov eax,[esp+0x10]
	   push eax
	   push 0x19
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x0155EE60
	   mov eax,0x006A9800
	   call eax
       ret 0x4

   }
}
/// Test AutoIngame
__declspec(naked)void TestBanDo()  //007E278C
{
   __asm{
	   nop
	   nop
	   nop
	   nop
	   nop
	   push 0x2732
       mov ecx,0x017323A8
	   mov eax,0x007D8550
	   call eax
	   test eax,eax
	   jz Default
       push 0x7532
       mov ecx,0x017323A8
	   mov eax,0x007D8550
	   call eax
	   test eax,eax
	   jz Default
	   mov ecx,[eax+0x10]
	   cmp ecx,0x1
	   jnz Default
	   mov eax,[0x01733A9C]
	   add eax,0x230
	   add eax,0x1C
	   mov edx,[eax]
	   mov ecx,[edx+0x49DC]
	   mov eax,0x540310
       call eax

	   Default:
	   mov eax,[esp+0x14]
       pop edi
	   push 0x007E2791
	   ret

   }
}
__declspec(naked)void FixNotReleaseModDieAuto()  //0062BA4A
{
   __asm{
	   mov DWORD PTR [0x1107258+0x2BF18],0x0
       push 0x00002739
	   mov ecx,0x017323A8
	   mov eax,0x007D8550
	   call eax
	   test eax,eax
	   jz Default
	   mov dword ptr [eax+0x10],0x0
       Default:
	   mov edx,[edi]
	   push 0x0
       mov ecx,edi
	   push 0x0062BA50
	   ret

   }
}
__declspec(naked) void LoadInfoAuto()//005E1DC3
{
	  __asm {
        nop
        nop
		nop
		nop
		nop
		mov ebx,0x000000AA
		add eax,0x300
		pushad
        mov ebp, 0x0
        LoopLoad2:
		mov ecx, 0x010CC088
            mov edi, ebp
			mov ecx, [ecx + edi]
            mov[eax + edi], ecx
            add ebp, 0x4
            cmp ebp, 0xB8
			jnz LoopLoad2
			mov dword ptr [eax+0x10],0x0
		popad
		mov ecx,[esp+0x00001560]
		push 0x005E1DCA
		ret
	}
}
__declspec(naked) void DisableMoveArround()//00623077
{
	  __asm {
        nop
        nop
		nop
        nop
		nop
        push eax
        xor ecx,ecx
		mov cl,[eax]
		test ecx,ecx
		jz CheckOpenAuto
        mov ecx,DWORD PTR SS:[0x01733AD0]
		mov eax,0x007D7FE0
		call eax
		mov ecx,[eax+0x8]
		cmp ecx,30
		jb CheckOpenAuto
		cmp ecx,454
		ja CheckOpenAuto
		mov ecx,[eax+0x2C]
		sub ecx,346
		mov edx,[eax]
		cmp edx,ecx
		jb CheckOpenAuto
		add ecx,180
		cmp edx,ecx
		ja CheckOpenAuto
        pop eax
        mov eax,00000000
		push 0x0062307C
		ret

		CheckOpenAuto:
        mov ecx,DWORD PTR SS:[0x01733AD0]
		mov eax,0x007D7FE0
		call eax
		//
		mov eax,[eax+0x30]
		xor edx,edx
		mov ecx,0x2
		div ecx
		mov edx,eax
		sub edx,0x70
		//
        mov ecx,DWORD PTR SS:[0x01733AD0]
		mov eax,0x007D7FE0
		call eax
		mov ecx,[eax+0x8]
		cmp ecx,edx
		jb Default
        add edx,40
		cmp ecx,edx
		ja Default
        mov ecx,DWORD PTR SS:[0x01733AD0]
		mov eax,0x007D7FE0
		call eax
		mov ecx,[eax+0x2C]
		sub ecx,38
		mov edx,[eax]
		cmp edx,ecx
		jb Default
		add ecx,38
		cmp edx,ecx
		ja Default
        pop eax
        mov eax,00000000
		push 0x0062307C
		ret


		Default:
        push 0x284D
		mov ecx,0x017323A8
		mov eax,0x007D8550
		call eax
		test eax,eax
		jz Default2
		xor ecx,ecx
		mov cl,[eax+0x10]
		test ecx,ecx
		jz Default2
        push eax
		mov ecx,DWORD PTR SS:[0x01733AD0]
		mov eax,0x007D7FE0
		call eax
		mov edx,eax
		pop eax
		mov esi,[eax+0x18]
		mov ecx,[edx+0x8]
		cmp ecx,esi
		jb Default2
        add esi,322
		cmp ecx,esi
		ja Default2
		mov esi,[eax+0x14]
		mov ecx,[edx]
		cmp ecx,esi
		jb Default2
		add esi,353
		cmp ecx,esi
		ja Default2
        pop eax
        mov eax,00000000
		push 0x0062307C
		ret

		Default2:
		//
        mov eax,[0x1107258+0x838C]
		test eax,eax
	    jz Default21
		//
        push 0x275A
		mov ecx,0x017323A8
		mov eax,0x007D8550
		call eax
		test eax,eax
		jz Default21
		xor ecx,ecx
		mov cl,[eax+0x10]
		test ecx,ecx
		jz Default21
        xor ecx,ecx
		mov cl,[eax+0x33C]
		cmp ecx,0x6
		jnz Default21
        xor ecx,ecx
		mov eax,[eax+0x374]
		mov ecx,[eax+0x10]
		test ecx,ecx
		jz Default21
        xor ecx,ecx
		mov ecx,[eax+0x1572C]
		cmp ecx,0x1
		jnz Default21
        mov ecx,DWORD PTR SS:[0x01733AD0]
		mov eax,0x007D7FE0
		call eax
		push eax
        push 0x275A
		mov ecx,0x017323A8
		mov eax,0x007D8550
		call eax
		mov ecx,[esp]
		mov edx,[ecx]
		mov ecx,[eax+0x14]
		cmp edx,ecx
		jl AcceptRunMove
		add ecx,705
		cmp edx,ecx
		ja AcceptRunMove
        mov ecx,[esp]
		mov edx,[ecx+0x8]
		mov ecx,[eax+0x18]
        sub ecx,34
        cmp edx,ecx
		jl AcceptRunMove
		add ecx,527
		cmp edx,ecx
		ja AcceptRunMove
		pop eax
        pop eax
        mov eax,00000000
		push 0x0062307C
		ret

        AcceptRunMove:
		pop eax
        jmp Default21

		Default21:
        push 0x275A
		mov ecx,0x017323A8
		mov eax,0x007D8550
		call eax
		test eax,eax
		jz FormEvent
		mov ecx,[eax+0x10]
		test ecx,ecx
		jz FormEvent
        xor ecx,ecx
		mov cl,[eax+0x33C]
		test ecx,ecx
		jnz FormEvent
		mov ecx,DWORD PTR SS:[0x01733AD0]
		mov edx,[eax+0x14]
		mov esi,[ecx+0x200+0x14]
		sub edx,30
		cmp esi,edx
		jl FormEvent
		add edx,24
		cmp esi,edx
		ja FormEvent
		mov edx,[eax+0x18]
		mov esi,[ecx+0x200+0x1C]
		add edx,146
		cmp esi,edx
		jl FormEvent
		add edx,313
		cmp esi,edx
		ja FormEvent
        pop eax
        mov eax,00000000
		push 0x0062307C
		ret

        FormEvent:
		push 10241
		mov ecx,0x017323A8
		mov eax,0x007D8550
		call eax
		test eax,eax
		jz DisableMoveFromCheTao
		mov ecx,[eax+0x10]
		test ecx,ecx
		jz DisableMoveFromCheTao
		mov ecx,DWORD PTR SS:[0x01733AD0]
		mov edx,[eax+0x14]
		add edx,333
		mov esi,[ecx+0x200+0x14]
		cmp esi,edx
		jl DisableMoveFromCheTao
		add edx,361
		cmp esi,edx
		ja DisableMoveFromCheTao
		mov edx,[eax+0x18]
		mov esi,[ecx+0x200+0x1C]
		add edx,4
		cmp esi,edx
		jl DisableMoveFromCheTao
		add edx,390
		cmp esi,edx
		ja DisableMoveFromCheTao
        pop eax
        mov eax,00000000
		push 0x0062307C
		ret

        DisableMoveFromCheTao:
        push 0x275A
		mov ecx,0x017323A8
		mov eax,0x007D8550
		call eax
		test eax,eax
		jz Default3
		mov cl,[eax+0x10]
		test cl,cl
		jz Default3
		mov eax,[eax+0x36C]
        test eax,eax
		jz Default3
		xor ecx,ecx
		mov cl,[eax+0x10]
		test cl,cl
        jz Default3
		mov ecx,[eax+0x000003D0]
		cmp ecx,0x3
		jnz Default3
        mov ecx,DWORD PTR SS:[0x01733AD0]
		mov edx,[eax+0x14]
		add edx,347
		mov esi,[ecx+0x200+0x14]
		cmp esi,edx
		jl Default3
		add edx,518
		cmp esi,edx
		ja Default3
		mov edx,[eax+0x18]
		mov esi,[ecx+0x200+0x1C]
		cmp esi,edx
		jl Default3
		add edx,424
		cmp esi,edx
		ja Default3
        pop eax
        mov eax,00000000
		push 0x0062307C
		ret

        Default3:
        pop eax
		mov eax,00000001
		push 0x0062307C
		ret
	}
};
__declspec(naked) void GetPozAutoIngame() // 00503BE0
{
	__asm
	{
        nop
        nop
		nop
        nop
		nop
        pushad
		mov ecx,DWORD PTR SS:[0x01733AD0]
		mov eax,0x007D7FD0
		call eax
		mov ecx,[esp+0x1C]
		push ecx
		push eax
		call GetPozAndCheck
		//
        mov ecx,DWORD PTR SS:[0x01733AD0]
		mov eax,0x007D7FD0
		call eax
		mov dl,[eax+0xC]
		test dl,dl
		jz MoKhoaFlagChon
        mov ecx,DWORD PTR SS:[0x01733AD0]
		mov eax,0x007D7FE0
		call eax
		//
		mov eax,[eax+0x30]
		xor edx,edx
		mov ecx,0x2
		div ecx
		mov edx,eax
		sub edx,0x70
		//
        mov ecx,DWORD PTR SS:[0x01733AD0]
		mov eax,0x007D7FE0
		call eax
		mov ecx,[eax+0x8]
		cmp ecx,edx
		jb EndPozAuto
        add edx,40
		cmp ecx,edx
		ja EndPozAuto
        mov ecx,DWORD PTR SS:[0x01733AD0]
		mov eax,0x007D7FE0
		call eax
		mov ecx,[eax+0x2C]
		sub ecx,38
		mov edx,[eax]
		cmp edx,ecx
		jb EndPozAuto
		add ecx,38
		cmp edx,ecx
		ja EndPozAuto
		mov edx,[esp+0x1C]
		mov cl,[edx+0x2]
		test cl,cl
        jnz EndPozAuto
		xor ecx,ecx
		mov cl,[edx]
		test cl,cl
		jz TurnOpenAuto
		mov byte ptr [edx],0
		mov byte ptr [edx+0x2],1
		jmp EndPozAuto

		MoKhoaFlagChon:
        mov edx,[esp+0x1C]
		mov byte ptr [edx+0x2],0
		jmp EndPozAuto

		TurnOpenAuto:
		mov byte ptr [edx],1
		mov byte ptr [edx+0x2],1
		//
		EndPozAuto:
        popad
		mov eax,[esi+0x10]
		test eax,eax
		push 0x00503BE5
		ret


		GetPozAndCheck:
		mov dl,[ecx]
		test dl,dl
        jz HoverNotClick1
		mov ecx,[esp+0x4]
		xor edx,edx
		mov dl,[ecx+0xC]
		test dl,dl
		jz HoverNotClick0032
		mov eax,[esp+0x8]
		xor edx,edx
		mov dl,[eax+0x2]
		test dl,dl
        jnz HoverNotClick1
		mov edx,[ecx+0x18]
		cmp edx,110
		jl HoverNotClick
		cmp edx,124
		ja KiemTraTinhNangHang2
		mov eax,[esp+0x4]
		mov edx,[eax+0x3C]
		sub edx,330
		mov eax,[esp+0x4]
		mov ecx,[eax+0x10]
		cmp ecx,edx
		jl HoverNotClick1
		add edx,44
		cmp ecx,edx
		ja Kiemtratinhnanghang1Func2
		mov eax,[esp+0x8]
		mov byte ptr [eax+0x2],1
		mov byte ptr [eax+0x1],0
		ret 0x8

		Kiemtratinhnanghang1Func2:
		mov eax,[esp+0x4]
		mov edx,[eax+0x3C]
		sub edx,276
		mov eax,[esp+0x4]
		mov ecx,[eax+0x10]
		cmp ecx,edx
		jl HoverNotClick1
		add edx,44
		cmp ecx,edx
		ja Kiemtratinhnanghang1Func3
		mov eax,[esp+0x8]
		mov byte ptr [eax+0x2],1
		mov byte ptr [eax+0x1],1
		ret 0x8

		Kiemtratinhnanghang1Func3:
		mov eax,[esp+0x4]
		mov edx,[eax+0x3C]
		sub edx,222
		mov eax,[esp+0x4]
		mov ecx,[eax+0x10]
		cmp ecx,edx
		jl HoverNotClick1
		add edx,44
		cmp ecx,edx
        ja HoverNotClick1
		mov eax,[esp+0x8]
		mov byte ptr [eax+0x2],1
		mov byte ptr [eax+0x1],2
		ret 0x8


		KiemTraTinhNangHang2:
        mov edx,[ecx+0x18]
		cmp edx,134
		jl HoverNotClick
		cmp edx,149
		ja KiemtratinhnangForm
		mov eax,[esp+0x4]
		mov edx,[eax+0x3C]
		sub edx,330
		mov eax,[esp+0x4]
		mov ecx,[eax+0x10]
		cmp ecx,edx
		jl HoverNotClick1
		add edx,44
		cmp ecx,edx
		ja Kiemtratinhnanghang2Func2
		mov eax,[esp+0x8]
		mov byte ptr [eax+0x2],1
		//mov byte ptr [eax+0x1],3
		ret 0x8

		Kiemtratinhnanghang2Func2:
		mov eax,[esp+0x4]
		mov edx,[eax+0x3C]
		sub edx,276
		mov eax,[esp+0x4]
		mov ecx,[eax+0x10]
		cmp ecx,edx
		jl HoverNotClick1
		add edx,44
		cmp ecx,edx
		ja Kiemtratinhnanghang2Func3
		mov eax,[esp+0x8]
		mov byte ptr [eax+0x2],1
		mov byte ptr [eax+0x1],4
		ret 0x8

		Kiemtratinhnanghang2Func3:
		mov eax,[esp+0x4]
		mov edx,[eax+0x3C]
		sub edx,222
		mov eax,[esp+0x4]
		mov ecx,[eax+0x10]
		cmp ecx,edx
		jl HoverNotClick1
		add edx,44
		cmp ecx,edx
		ja HoverNotClick1
		mov eax,[esp+0x8]
		add eax,0x4
		push eax
		call ClearMemoryAll
		mov eax,[esp+0x8]
        mov byte ptr [eax+0x2],1
        ret 0x8

		KiemtratinhnangForm:
		mov eax,[esp+0x8]
		mov dl,[eax+0x1]
		cmp dl,1
		jz ChucNangPozPhucHoi
		cmp dl,2
		jz ChucNangPozChienDau
		cmp dl,3
		jz ChucNangPozToaDo
		cmp dl,4
		jz ChucNangPozNhatDo
		mov eax,[esp+0x4]
		mov edx,[eax+0x3C]
		sub edx,329
		mov ecx,[eax+0x10]
		cmp ecx,edx
		jl HoverNotClick
        add edx,11
		cmp ecx,edx
		ja HoverNotClick
		mov eax,[esp+0x4]
		mov ecx,[eax+0x18]
		cmp ecx,161
		jl HoverNotClick1
		cmp ecx,171
		ja KTFormDieuKhienCN1
		mov eax,[esp+0x8]
		mov byte ptr [eax+0x2],1
		mov cl,[eax+0x4]
		test ecx,ecx
		jz TurnOnDieuKhienCN1
		mov byte ptr [eax+0x4],0
		//
		sub esp,0x4
        mov eax,esp
		mov dword ptr [eax],0x15970004
		push eax
		mov ecx,0x155EE60
		mov eax,0x006B2F60
		call eax
        add esp,0x4
		//
        ret 0x8

		TurnOnDieuKhienCN1:
		mov byte ptr [eax+0x4],1
		mov byte ptr [eax+0x5],0
		mov dword ptr ss:[0x1107258+0x2BF18],0x0
		mov byte ptr [eax+0x1D],1
		mov byte ptr [eax+0x2C],0
        mov ecx,[0x1107258+0x83D4]
		mov [eax+0x38],ecx
        mov ecx,[0x1107258+0x83DC]
		mov [eax+0x3C],ecx
        //
		sub esp,0x4
        mov eax,esp
		mov dword ptr [eax],0x14970004
		push eax
		mov ecx,0x155EE60
		mov eax,0x006B2F60
		call eax
        add esp,0x4
		//
		ret 0x8


		KTFormDieuKhienCN1:
		mov eax,[esp+0x4]
		mov ecx,[eax+0x18]
		cmp ecx,187
		jl HoverNotClick1
		cmp ecx,197
		ja KTFormDieuKhienCN2
		mov eax,[esp+0x8]
		mov byte ptr [eax+0x2],1
		mov cl,[eax+0x5]
		test ecx,ecx
		jz TurnOnDieuKhienCN2
		mov byte ptr [eax+0x5],0
        ret 0x8
		TurnOnDieuKhienCN2:
		mov byte ptr [eax+0x5],1
		mov byte ptr [eax+0x4],0
		push 0
		push 7
		push 0x1107258
        mov ecx,0x1107258
		mov eax,0x0062B6C0
        call eax
		ret 0x8

        KTFormDieuKhienCN2:
		mov eax,[esp+0x4]
		mov ecx,[eax+0x18]
		cmp ecx,213
		jl HoverNotClick1
		cmp ecx,223
		ja HoverNotClick1
		mov eax,[esp+0x8]
		mov byte ptr [eax+0x2],1
		mov cl,[eax+0x6]
		test ecx,ecx
		jz TurnOnDieuKhienCN3
		mov byte ptr [eax+0x6],0
        ret 0x8
		TurnOnDieuKhienCN3:
		mov byte ptr [eax+0x6],1
		ret 0x8


		ChucNangPozPhucHoi:
		mov eax,[esp+0x4]
		mov ecx,[eax+0x18]
		cmp ecx,184
		jl HoverNotClick1
        cmp ecx,194
		ja KTChucNangPH2
		mov eax,[esp+0x4]
		mov edx,[eax+0x3C]
		sub edx,328
		mov ecx,[eax+0x10]
		cmp ecx,edx
		jl HoverNotClick1
		add edx,10
		cmp ecx,edx
		ja KTChucNangPHLoai2
		mov eax,[esp+0x8]
		mov byte ptr [eax+0x2],1
		mov byte ptr [eax+0x8],3
        ret 0x8

		KTChucNangPHLoai2:
		mov eax,[esp+0x4]
		mov edx,[eax+0x3C]
		sub edx,272
		mov ecx,[eax+0x10]
		cmp ecx,edx
		jl HoverNotClick1
		add edx,10
		cmp ecx,edx
		ja KTChucNangPHLoai3
		mov eax,[esp+0x8]
		mov byte ptr [eax+0x2],1
		mov byte ptr [eax+0x8],2
		ret 0x8

		KTChucNangPHLoai3:
		mov eax,[esp+0x4]
		mov edx,[eax+0x3C]
		sub edx,216
		mov ecx,[eax+0x10]
		cmp ecx,edx
		jl HoverNotClick1
		add edx,10
		cmp ecx,edx
		ja HoverNotClick1
		mov eax,[esp+0x8]
		mov byte ptr [eax+0x2],1
		mov byte ptr [eax+0x8],1
		ret 0x8


		KTChucNangPH2:
		cmp ecx,227
		jl HoverNotClick1
		cmp ecx,237
		ja KTChucNangPH3
		mov eax,[esp+0x4]
		mov edx,[eax+0x3C]
		sub edx,328
		mov ecx,[eax+0x10]
		cmp ecx,edx
		jl HoverNotClick1
		add edx,10
		cmp ecx,edx
		ja KTChucNangPH2Loai2
		mov eax,[esp+0x8]
		mov byte ptr [eax+0x2],1
		mov byte ptr [eax+0x9],3
		ret 0x8

		KTChucNangPH2Loai2:
		mov eax,[esp+0x4]
		mov edx,[eax+0x3C]
		sub edx,272
		mov ecx,[eax+0x10]
		cmp ecx,edx
		jl HoverNotClick1
		add edx,10
		cmp ecx,edx
		ja KTChucNangPH2Loai3
		mov eax,[esp+0x8]
		mov byte ptr [eax+0x2],1
		mov byte ptr [eax+0x9],2
		ret 0x8

		KTChucNangPH2Loai3:
		mov eax,[esp+0x4]
		mov edx,[eax+0x3C]
		sub edx,216
		mov ecx,[eax+0x10]
		cmp ecx,edx
		jl HoverNotClick1
		add edx,10
		cmp ecx,edx
		ja HoverNotClick1
		mov eax,[esp+0x8]
		mov byte ptr [eax+0x2],1
		mov byte ptr [eax+0x9],1
        ret 0x8

		KTChucNangPH3:
		cmp ecx,271
		jl HoverNotClick1
        cmp ecx,281
		ja KTChucNangPH4
		mov eax,[esp+0x4]
		mov edx,[eax+0x3C]
		sub edx,328
		mov ecx,[eax+0x10]
		cmp ecx,edx
		jl HoverNotClick1
		add edx,10
		cmp ecx,edx
		ja KTChucNangPH3Loai2
		mov eax,[esp+0x8]
		mov byte ptr [eax+0x2],1
		mov byte ptr [eax+0xA],3
        ret 0x8

		KTChucNangPH3Loai2:
		mov eax,[esp+0x4]
		mov edx,[eax+0x3C]
		sub edx,272
		mov ecx,[eax+0x10]
		cmp ecx,edx
		jl HoverNotClick1
		add edx,10
		cmp ecx,edx
		ja KTChucNangPH3Loai3
		mov eax,[esp+0x8]
		mov byte ptr [eax+0x2],1
		mov byte ptr [eax+0xA],2
		ret 0x8

		KTChucNangPH3Loai3:
		mov eax,[esp+0x4]
		mov edx,[eax+0x3C]
		sub edx,216
		mov ecx,[eax+0x10]
		cmp ecx,edx
		jl HoverNotClick1
		add edx,10
		cmp ecx,edx
		ja HoverNotClick1
		mov eax,[esp+0x8]
		mov byte ptr [eax+0x2],1
		mov byte ptr [eax+0xA],1
		ret 0x8

		KTChucNangPH4:
		cmp ecx,316
		jl HoverNotClick1
		cmp ecx,326
		ja KTChucNangPH5
		mov eax,[esp+0x4]
		mov edx,[eax+0x3C]
		sub edx,328
		mov ecx,[eax+0x10]
		cmp ecx,edx
		jl HoverNotClick1
		add edx,10
		cmp ecx,edx
		ja KTChucNangPH4Loai2
		mov eax,[esp+0x8]
		mov byte ptr [eax+0x2],1
		mov byte ptr [eax+0xB],3
        ret 0x8

		KTChucNangPH4Loai2:
		mov eax,[esp+0x4]
		mov edx,[eax+0x3C]
		sub edx,272
		mov ecx,[eax+0x10]
		cmp ecx,edx
		jl HoverNotClick1
		add edx,10
		cmp ecx,edx
		ja KTChucNangPH4Loai3
		mov eax,[esp+0x8]
		mov byte ptr [eax+0x2],1
		mov byte ptr [eax+0xB],2
        ret 0x8

		KTChucNangPH4Loai3:
		mov eax,[esp+0x4]
		mov edx,[eax+0x3C]
		sub edx,216
		mov ecx,[eax+0x10]
		cmp ecx,edx
		jl HoverNotClick1
		add edx,10
		cmp ecx,edx
		ja HoverNotClick1
		mov eax,[esp+0x8]
		mov byte ptr [eax+0x2],1
		mov byte ptr [eax+0xB],1
		ret 0x8


		KTChucNangPH5:
		cmp ecx,347
		jl HoverNotClick1
		cmp ecx,357
		ja KTChucNangPH6
		mov eax,[esp+0x4]
		mov edx,[eax+0x3C]
		sub edx,328
		mov ecx,[eax+0x10]
		cmp ecx,edx
		jl HoverNotClick1
		add edx,10
		cmp ecx,edx
		ja HoverNotClick1
		mov eax,[esp+0x8]
		mov byte ptr [eax+0x2],1
		mov dl,[eax+0xC]
		test dl,dl
		jz TurnOnHStaicho
		mov byte ptr [eax+0xC],0
        ret 0x8
		TurnOnHStaicho:
        mov byte ptr [eax+0xC],1
		ret 0x8


		KTChucNangPH6:
		cmp ecx,369
		jl HoverNotClick1
		cmp ecx,379
		ja KTChucNangPH7
		mov eax,[esp+0x4]
		mov edx,[eax+0x3C]
		sub edx,328
		mov ecx,[eax+0x10]
		cmp ecx,edx
		jl HoverNotClick1
		add edx,10
		cmp ecx,edx
		ja HoverNotClick1
		mov eax,[esp+0x8]
		mov byte ptr [eax+0x2],1
		mov dl,[eax+0xD]
		test dl,dl
		jz TurnOnVeLangHetMau
		mov byte ptr [eax+0xD],0
        ret 0x8
		TurnOnVeLangHetMau:
		mov byte ptr [eax+0xD],1
		ret 0x8

		KTChucNangPH7:
		cmp ecx,391
		jl HoverNotClick1
		cmp ecx,401
		ja HoverNotClick1
		mov eax,[esp+0x4]
		mov edx,[eax+0x3C]
		sub edx,328
		mov ecx,[eax+0x10]
		cmp ecx,edx
		jl HoverNotClick1
		add edx,10
		cmp ecx,edx
		ja HoverNotClick1
		mov eax,[esp+0x8]
		mov byte ptr [eax+0x2],1
		mov dl,[eax+0xE]
		test dl,dl
		jz TurnOnSuDungTHT
		mov byte ptr [eax+0xE],0
		ret 0x8
		TurnOnSuDungTHT:
		mov byte ptr [eax+0xE],1
		ret 0x8

		ChucNangPozChienDau:
		mov eax,[esp+0x4]
		mov ecx,[eax+0x18]
		cmp ecx,166
		jl HoverNotClick1
        cmp ecx,176
		ja KTChucNangChienDau2
		mov eax,[esp+0x4]
		mov edx,[eax+0x3C]
		sub edx,327
		mov ecx,[eax+0x10]
		cmp ecx,edx
		jl HoverNotClick1
		add edx,10
		cmp ecx,edx
		ja KTChucNangChienDauLoai2
		mov eax,[esp+0x8]
		mov byte ptr [eax+0x2],1
		mov dl,[eax+0x10]
		test dl,dl
		jz TurnOnSkill1
		mov byte ptr [eax+0x10],0
		ret 0x8
		TurnOnSkill1:
		mov byte ptr [eax+0x10],1
		ret 0x8

		KTChucNangChienDauLoai2:
		mov eax,[esp+0x4]
		mov edx,[eax+0x3C]
		sub edx,247
		mov ecx,[eax+0x10]
		cmp ecx,edx
		jl HoverNotClick1
		add edx,10
		cmp ecx,edx
		ja HoverNotClick1
		mov eax,[esp+0x8]
		mov byte ptr [eax+0x2],1
		mov dl,[eax+0x16]
		test dl,dl
		jz TurnOnSkill8
		mov byte ptr [eax+0x16],0
		ret 0x8
		TurnOnSkill8:
		mov byte ptr [eax+0x16],1
		ret 0x8

		KTChucNangChienDau2:
		mov eax,[esp+0x4]
		mov ecx,[eax+0x18]
		cmp ecx,193
		jl HoverNotClick1
		cmp ecx,203
		ja KTChucNangChienDau3
		mov eax,[esp+0x4]
		mov edx,[eax+0x3C]
		sub edx,327
		mov ecx,[eax+0x10]
		cmp ecx,edx
		jl HoverNotClick1
		add edx,10
		cmp ecx,edx
		ja KTChucNangChienDau2Loai2
		mov eax,[esp+0x8]
		mov byte ptr [eax+0x2],1
		mov dl,[eax+0x11]
		test dl,dl
		jz TurnOnSkill2
		mov byte ptr [eax+0x11],0
		ret 0x8
		TurnOnSkill2:
		mov byte ptr [eax+0x11],1
		ret 0x8

		KTChucNangChienDau2Loai2:
		mov eax,[esp+0x4]
		mov edx,[eax+0x3C]
		sub edx,247
		mov ecx,[eax+0x10]
		cmp ecx,edx
		jl HoverNotClick1
		add edx,10
		cmp ecx,edx
		ja HoverNotClick1
		mov eax,[esp+0x8]
		mov byte ptr [eax+0x2],1
		mov dl,[eax+0x17]
		test dl,dl
		jz TurnOnSkill9
		mov byte ptr [eax+0x17],0
		ret 0x8
		TurnOnSkill9:
		mov byte ptr [eax+0x17],1
		ret 0x8

		KTChucNangChienDau3:
		mov eax,[esp+0x4]
		mov ecx,[eax+0x18]
		cmp ecx,220
		jl HoverNotClick1
		cmp ecx,230
		ja KTChucNangChienDau4
		mov eax,[esp+0x4]
		mov edx,[eax+0x3C]
		sub edx,327
		mov ecx,[eax+0x10]
		cmp ecx,edx
		jl HoverNotClick1
		add edx,10
		cmp ecx,edx
		ja KTChucNangChienDau3Loai2
		mov eax,[esp+0x8]
		mov byte ptr [eax+0x2],1
		mov dl,[eax+0x12]
		test dl,dl
		jz TurnOnSkill4
		mov byte ptr [eax+0x12],0
		ret 0x8
		TurnOnSkill4:
		mov byte ptr [eax+0x12],1
		ret 0x8

		KTChucNangChienDau3Loai2:
		mov eax,[esp+0x4]
		mov edx,[eax+0x3C]
		sub edx,247
		mov ecx,[eax+0x10]
		cmp ecx,edx
		jl HoverNotClick1
		add edx,10
		cmp ecx,edx
		ja HoverNotClick1
		mov eax,[esp+0x8]
		mov byte ptr [eax+0x2],1
		mov dl,[eax+0x18]
		test dl,dl
		jz TurnOnSkill10
		mov byte ptr [eax+0x18],0
		ret 0x8
		TurnOnSkill10:
		mov byte ptr [eax+0x18],1
		ret 0x8

		KTChucNangChienDau4:
		mov eax,[esp+0x4]
		mov ecx,[eax+0x18]
		cmp ecx,247
		jl HoverNotClick1
		cmp ecx,257
		ja KTChucNangChienDau5
		mov eax,[esp+0x4]
		mov edx,[eax+0x3C]
		sub edx,327
		mov ecx,[eax+0x10]
		cmp ecx,edx
		jl HoverNotClick1
		add edx,10
		cmp ecx,edx
		ja KTChucNangChienDau4Loai2
		mov eax,[esp+0x8]
		mov byte ptr [eax+0x2],1
		mov dl,[eax+0x13]
		test dl,dl
		jz TurnOnSkill5
		mov byte ptr [eax+0x13],0
		ret 0x8
		TurnOnSkill5:
		mov byte ptr [eax+0x13],1
		ret 0x8

		KTChucNangChienDau4Loai2:
		mov eax,[esp+0x4]
		mov edx,[eax+0x3C]
		sub edx,247
		mov ecx,[eax+0x10]
		cmp ecx,edx
		jl HoverNotClick1
		add edx,10
		cmp ecx,edx
		ja HoverNotClick1
		mov eax,[esp+0x8]
		mov byte ptr [eax+0x2],1
		mov dl,[eax+0x19]
		test dl,dl
		jz TurnOnSkill11
		mov byte ptr [eax+0x19],0
		ret 0x8
		TurnOnSkill11:
		mov byte ptr [eax+0x19],1
		ret 0x8

		KTChucNangChienDau5:
		mov eax,[esp+0x4]
		mov ecx,[eax+0x18]
		cmp ecx,274
		jl HoverNotClick1
		cmp ecx,284
		ja KTChucNangChienDau6
		mov eax,[esp+0x4]
		mov edx,[eax+0x3C]
		sub edx,327
		mov ecx,[eax+0x10]
		cmp ecx,edx
		jl HoverNotClick1
		add edx,10
		cmp ecx,edx
		ja KTChucNangChienDau5Loai2
		mov eax,[esp+0x8]
		mov byte ptr [eax+0x2],1
		mov dl,[eax+0x14]
		test dl,dl
		jz TurnOnSkill6
		mov byte ptr [eax+0x14],0
		ret 0x8
		TurnOnSkill6:
		mov byte ptr [eax+0x14],1
		ret 0x8

		KTChucNangChienDau5Loai2:
		mov eax,[esp+0x4]
		mov edx,[eax+0x3C]
		sub edx,247
		mov ecx,[eax+0x10]
		cmp ecx,edx
		jl HoverNotClick1
		add edx,10
		cmp ecx,edx
		ja HoverNotClick1
		mov eax,[esp+0x8]
		mov byte ptr [eax+0x2],1
		mov dl,[eax+0x1A]
		test dl,dl
		jz TurnOnSkill12
		mov byte ptr [eax+0x1A],0
		ret 0x8
		TurnOnSkill12:
		mov byte ptr [eax+0x1A],1
		ret 0x8

		KTChucNangChienDau6:
		mov eax,[esp+0x4]
		mov ecx,[eax+0x18]
		cmp ecx,301
		jl HoverNotClick1
		cmp ecx,311
		ja KTChucNangChienDau7
		mov eax,[esp+0x4]
		mov edx,[eax+0x3C]
		sub edx,327
		mov ecx,[eax+0x10]
		cmp ecx,edx
		jl HoverNotClick1
		add edx,10
		cmp ecx,edx
		ja KTChucNangChienDau6Loai2
		mov eax,[esp+0x8]
		mov byte ptr [eax+0x2],1
		mov dl,[eax+0x15]
		test dl,dl
		jz TurnOnSkill7
		mov byte ptr [eax+0x15],0
		ret 0x8
		TurnOnSkill7:
		mov byte ptr [eax+0x15],1
		ret 0x8

		KTChucNangChienDau6Loai2:
		mov eax,[esp+0x4]
		mov edx,[eax+0x3C]
		sub edx,247
		mov ecx,[eax+0x10]
		cmp ecx,edx
		jl HoverNotClick1
		add edx,10
		cmp ecx,edx
		ja HoverNotClick1
		mov eax,[esp+0x8]
		mov byte ptr [eax+0x2],1
		mov dl,[eax+0x1B]
		test dl,dl
		jz TurnOnSkill13
		mov byte ptr [eax+0x1B],0
		ret 0x8
		TurnOnSkill13:
		mov byte ptr [eax+0x1B],1
		ret 0x8

		KTChucNangChienDau7:
		mov eax,[esp+0x4]
		mov ecx,[eax+0x18]
		cmp ecx,337
		jl HoverNotClick1
		cmp ecx,347
		ja KTChucNangChienDau8
		mov eax,[esp+0x4]
		mov edx,[eax+0x3C]
		sub edx,327
		mov ecx,[eax+0x10]
		cmp ecx,edx
		jl HoverNotClick1
		add edx,10
		cmp ecx,edx
		ja HoverNotClick1
		mov eax,[esp+0x8]
		mov byte ptr [eax+0x2],1
		mov dl,[eax+0x1C]
		test dl,dl
		jz TurnOnTheoToaDo
		mov byte ptr [eax+0x1C],0
		ret 0x8
		TurnOnTheoToaDo:
		mov byte ptr [eax+0x1C],1
		ret 0x8

		KTChucNangChienDau8:
		mov eax,[esp+0x4]
		mov ecx,[eax+0x18]
		cmp ecx,360
		jl HoverNotClick1
		cmp ecx,370
		ja KTChucNangChienDau9
		mov eax,[esp+0x4]
		mov edx,[eax+0x3C]
		sub edx,327
		mov ecx,[eax+0x10]
		cmp ecx,edx
		jl HoverNotClick1
		add edx,10
		cmp ecx,edx
		ja HoverNotClick1
		mov eax,[esp+0x8]
		mov byte ptr [eax+0x2],1
		mov dl,[eax+0x1D]
		test dl,dl
		jz TurnOnXungQuanh
		mov byte ptr [eax+0x1D],0
		mov dword ptr [eax+0x38],0
		mov dword ptr [eax+0x3C],0
		ret 0x8
		TurnOnXungQuanh:
		mov byte ptr [eax+0x1D],1
		mov ecx,[0x1107258+0x83D4]
		mov [eax+0x38],ecx
        mov ecx,[0x1107258+0x83DC]
        mov [eax+0x3C],ecx
		ret 0x8

		KTChucNangChienDau9:
		mov eax,[esp+0x4]
		mov ecx,[eax+0x18]
		cmp ecx,383
		jl HoverNotClick1
        cmp ecx,393
		ja HoverNotClick1
		mov eax,[esp+0x4]
		mov edx,[eax+0x3C]
		sub edx,327
		mov ecx,[eax+0x10]
		cmp ecx,edx
		jl HoverNotClick1
		add edx,10
		cmp ecx,edx
		ja HoverNotClick1
		mov eax,[esp+0x8]
		mov byte ptr [eax+0x2],1
		mov dl,[eax+0x1E]
		test dl,dl
		jz TurnOnAutoBuff
		mov byte ptr [eax+0x1E],0
		ret 0x8
		TurnOnAutoBuff:
		mov byte ptr [eax+0x1E],1
		ret 0x8

		ChucNangPozToaDo:
		mov eax,[esp+0x4]
		mov ecx,[eax+0x18]
		cmp ecx,161
		jl HoverNotClick1
		cmp ecx,176
		ja HoverNotClick1
		mov eax,[esp+0x4]
		mov edx,[eax+0x3C]
		sub edx,327
		mov ecx,[eax+0x10]
		cmp ecx,edx
		jl HoverNotClick1
		add edx,44
		cmp ecx,edx
		ja HoverNotClick1
		mov eax,[esp+0x8]
		/*push eax
		call AddToaDoUser
		mov eax,[esp+0x8]*/
		mov byte ptr [eax+0x2],1
        ret 0x8


		AddToaDoUser:
        sub esp,0x4
		xor ecx,ecx
		mov [esp],ecx
		BackLoopAddPoz:
		mov ecx,[esp]
		imul ecx,0xC
		mov eax,[esp+0x8]
		mov edx,[eax+ecx+0x50]
		test edx,edx
		jnz IncLoop
		mov edx,[0x1107258+0x83D4]
		mov [eax+ecx+0x50],edx
		mov edx,[0x1107258+0x83D4+0x4]
		mov [eax+ecx+0x4+0x50],edx
		mov edx,[0x1107258+0x83D4+0x8]
		mov [eax+ecx+0x8+0x50],edx
		mov ecx,[esp]
		add ecx,1
		mov [eax+0x33],cl
        add esp,0x4
		ret 0x4

		IncLoop:
		mov ecx,[esp]
		add ecx,1
		mov [esp],ecx
		cmp ecx,13
		jl BackLoopAddPoz
        add esp,0x4
		ret 0x4



		ChucNangPozNhatDo:
		mov eax,[esp+0x4]
		mov ecx,[eax+0x18]
		cmp ecx,166
		jl HoverNotClick1
		cmp ecx,176
		ja KTChucNangNhatDo2
		mov eax,[esp+0x4]
		mov edx,[eax+0x3C]
		sub edx,328
		mov ecx,[eax+0x10]
		cmp ecx,edx
		jl HoverNotClick1
		add edx,10
		cmp ecx,edx
		ja HoverNotClick1
		mov eax,[esp+0x8]
		mov byte ptr [eax+0x2],1
		mov dl,[eax+0x20]
		test dl,dl
		jz TurnOnNhatAll
		mov byte ptr [eax+0x20],0
		ret 0x8
		TurnOnNhatAll:
		mov byte ptr [eax+0x20],1
		ret 0x8

		KTChucNangNhatDo2:
		mov eax,[esp+0x4]
		mov ecx,[eax+0x18]
		cmp ecx,188
		jl HoverNotClick1
		cmp ecx,198
		ja KTChucNangNhatDo3
		mov eax,[esp+0x4]
		mov edx,[eax+0x3C]
		sub edx,328
		mov ecx,[eax+0x10]
		cmp ecx,edx
		jl HoverNotClick1
		add edx,10
		cmp ecx,edx
		ja HoverNotClick1
		mov eax,[esp+0x8]
		mov byte ptr [eax+0x2],1
		mov dl,[eax+0x21]
		test dl,dl
		jz TurnOnNhatDoDo
		mov byte ptr [eax+0x21],0
		ret 0x8
		TurnOnNhatDoDo:
		mov byte ptr [eax+0x21],1
		ret 0x8

		KTChucNangNhatDo3:
		mov eax,[esp+0x4]
		mov ecx,[eax+0x18]
		cmp ecx,210
		jl HoverNotClick1
		cmp ecx,220
		ja KTChucNangNhatDo4
		mov eax,[esp+0x4]
		mov edx,[eax+0x3C]
		sub edx,328
		mov ecx,[eax+0x10]
		cmp ecx,edx
		jl HoverNotClick1
		add edx,10
		cmp ecx,edx
		ja HoverNotClick1
		mov eax,[esp+0x8]
		mov byte ptr [eax+0x2],1
		mov dl,[eax+0x22]
		test dl,dl
		jz TurnOnNhatDoTIm
		mov byte ptr [eax+0x22],0
		ret 0x8
		TurnOnNhatDoTIm:
		mov byte ptr [eax+0x22],1
		ret 0x8

		KTChucNangNhatDo4:
		mov eax,[esp+0x4]
		mov ecx,[eax+0x18]
		cmp ecx,232
		jl HoverNotClick1
		cmp ecx,242
		ja KTChucNangNhatDo5
		mov eax,[esp+0x4]
		mov edx,[eax+0x3C]
		sub edx,328
		mov ecx,[eax+0x10]
		cmp ecx,edx
		jl HoverNotClick1
		add edx,10
		cmp ecx,edx
		ja HoverNotClick1
		mov eax,[esp+0x8]
		mov byte ptr [eax+0x2],1
		mov dl,[eax+0x23]
		test dl,dl
		jz TurnOnNhatDoXanh
		mov byte ptr [eax+0x23],0
		ret 0x8
		TurnOnNhatDoXanh:
		mov byte ptr [eax+0x23],1
		ret 0x8

		KTChucNangNhatDo5:
		mov eax,[esp+0x4]
		mov ecx,[eax+0x18]
		cmp ecx,255
		jl HoverNotClick1
		cmp ecx,265
		ja HoverNotClick1
		mov eax,[esp+0x4]
		mov edx,[eax+0x3C]
		sub edx,328
		mov ecx,[eax+0x10]
		cmp ecx,edx
		jl HoverNotClick1
		add edx,10
		cmp ecx,edx
		ja HoverNotClick1
		mov eax,[esp+0x8]
		mov byte ptr [eax+0x2],1
		mov dl,[eax+0x24]
		test dl,dl
		jz TurnOnNhatTien
		mov byte ptr [eax+0x24],0
		ret 0x8
		TurnOnNhatTien:
		mov byte ptr [eax+0x24],1
		ret 0x8

		ClearMemoryAll:
		sub esp,0x4
		xor ecx,ecx
		mov [esp],ecx
		BackLoopClearMemory:
		mov ecx,[esp]
		mov eax,[esp+0x8]
		mov dword ptr [eax+ecx*0x4],0
		mov ecx,[esp]
		add ecx,1
        mov [esp],ecx
		cmp ecx,75
        jl BackLoopClearMemory
		add esp,0x4
        ret 0x4

		KTChucNangTienIch2:
		mov eax,[esp+0x4]
		mov ecx,[eax+0x18]
		cmp ecx,190
		jl HoverNotClick1
		cmp ecx,200
		ja HoverNotClick1
		mov eax,[esp+0x4]
		mov edx,[eax+0x3C]
		sub edx,328
		mov ecx,[eax+0x10]
		cmp ecx,edx
		jl HoverNotClick1
		add edx,10
		cmp ecx,edx
		ja HoverNotClick1
		mov eax,[esp+0x8]
		mov byte ptr [eax+0x2],1
		mov dl,[eax+0x26]
		test dl,dl
		jz TurnOnSDHoaDa
		mov byte ptr [eax+0x26],0
		ret 0x8
		TurnOnSDHoaDa:
		mov byte ptr [eax+0x26],1
		ret 0x8

		HoverNotClick:
		mov eax,[esp+0x8]
		ret 0x8

		HoverNotClick1:
		ret 0x8

		HoverNotClick0032:
        mov eax,[esp+0x8]
        mov byte ptr [eax+0x2],0
        ret 0x8
    }
}
__declspec(naked)void OpenAutoForm()  //005AD1D0
{
   __asm{
	   nop
	   nop
	   nop
	   nop
	   nop
	   xor ecx,ecx
	   mov cl,[eax]
	   test ecx,ecx
	   jz MoForm
	   mov BYTE PTR [eax],0x0
	   push 0x005AD1EA
       ret
	   MoForm:
	   mov BYTE PTR [eax],0x1
	   //mov ecx,[0x01733B04]
	   //add ecx,25000000
	   //mov [eax+0x5C],ecx
	   push 0x005AD1EA
	   ret
   }
}
__declspec(naked)void TestDrawImageNewGrade()  //00491676
{
   __asm{
	   mov eax,[ebp+0x00000144]
	   cmp eax,0
	   jnz KiemTraHinh2
	   mov DWORD PTR [0x01615DF8],0
	   mov DWORD PTR [0x01615DF0],29
       jmp ContineuChangeGrade
	   KiemTraHinh2:
	   cmp eax,1
	   jnz KiemTraHinh3
	   mov DWORD PTR [0x01615DF8],33
	   mov DWORD PTR [0x01615DF0],62
       jmp ContineuChangeGrade
	   KiemTraHinh3:
	   cmp eax,2
	   jnz KiemTraHinh4
	   mov DWORD PTR [0x01615DF8],66
	   mov DWORD PTR [0x01615DF0],95
       jmp ContineuChangeGrade
	   KiemTraHinh4:
	   mov DWORD PTR [0x01615DF8],99
	   mov DWORD PTR [0x01615DF0],128
       ContineuChangeGrade:
	   push edx
       push 3826
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
	   mov [0x01615DC8],eax
	   push 0x00491682
       ret
   }
}
__declspec(naked)void ThayDoiGiaTriLoopShowGrade()  //00491631
{
   __asm{
	   cmp eax,0x7
	   jnz KiemTraGiaTriKhong
	   mov eax,0x0
	   push 0x0049163F
       ret
	   KiemTraGiaTriKhong:
	   cmp eax,0x0
	   jnz Default
       mov DWORD PTR [ebp+0x00000148],0x1
       Default:
	   push 0x0049163F
       ret
   }
}
__declspec(naked)void ThayDoiGiaTriLoopShowGrade2()  //00491622
{
   __asm{
	   mov eax,[ebp+0x00000144]
	   cmp eax,0x9
	   push 0x0049162B
       ret
   }
}
__declspec(naked)void HienThiThanhGMTools()  //0065F9F9
{
   __asm{
	   mov eax,[edx+0x000082BC]
	   xor eax,0xAE1CDB23
       jle Default
	   push 0x2768
	   mov ecx,0x017323A8
	   mov eax,0x007D8550
	   call eax
	   test eax,eax
	   jz Default
       mov ecx,[eax+0x10]
	   test ecx,ecx
	   jnz Default
       mov dword ptr [eax+0x10],1

	   Default:
	   mov edx,0x1107258
	   mov eax,[edx+0x00009D88]
	   push 0x0065F9FF
       ret
   }
}
__declspec(naked)void CheckIPConnect()  //006B317C
{
   __asm{
	   nop
	   nop
	   nop
	   nop
	   nop
	   push esi
	   push edi
	   push ecx
	   add ecx,0x4
	   mov edx,[ecx]
	   test edx,edx
       jz Default
	   push eax
	   push ecx
	   mov eax,0x008481C8
	   call eax
	   add esp,0x8
	   test eax,eax
	   jz Default
	   push 0x00000000
	   ret

	   Default:
       pop ecx
       cmp [ebp+0x58],ebx
	   push 0x006B3181
       ret
   }
}
__declspec(naked)void ChangeSizeDistance()  //00623769
{
   __asm{
	   nop
	   nop
	   nop
	   nop
	   nop
	   fld dword ptr [ecx+0x00008558]
	   fcomp dword ptr [eax]
	   push 0x006237D6
       ret
   }
}
__declspec(naked)void CheckCorrectSkillOnQuick()  //0051D383
{
   __asm{
	   nop
	   nop
	   nop
	   nop
	   nop
       push eax
	   mov edx,[eax]
	   mov ecx,[0x01733B04]
	   cmp edx,ecx
	   ja Default
	   //
	   add ecx,4000
	   mov [eax],ecx

       xor ecx,ecx
	   mov cl,[0x0110FE5C]
	   cmp ecx,0x2
	   jz Default
	   //
       xor ecx,ecx
	   mov cl,[0x110F5B0]
	   cmp ecx,0xA
	   jz Default
	   //
	   xor ecx,ecx
	   mov cl,[0x110F5B0]
	   cmp ecx,0x7
	   jz Default
	   //
	   push 0x2712
	   mov ecx,0x017323A8
	   mov eax,0x007D8550
	   call eax
	   test eax,eax
	   jz NotFoundFunc
	   add eax,0x46B4
	   // Loop Check
	   mov ecx,[esp]
       mov [ecx+0x8],eax
	   xor edx,edx
	   mov dl,[ecx+0x4]
	   imul edx,0x20
	   mov ecx,[eax+edx]
	   cmp ecx,0x1
	   jnz NextCheckSkill
	   xor ecx,ecx
	   mov ecx,[eax+edx+0x4]
	   test ecx,ecx
       jz NextCheckSkill
	   mov eax,[esp]
       mov [eax+0xC],cx
	   push ecx
	   mov ecx,DWORD PTR SS:[0x010D94A8]
	   mov eax,0x0061F280
	   call eax
	   test eax,eax
	   jz Default
	   xor ecx,ecx
	   mov cl,[eax+0x19]
	   push ecx
	   mov eax,[esp+0x4]
       mov [eax+0xE],cl
	   xor ecx,ecx
	   mov cx,[eax+0xC]
       //GetDisTance   Khoang Cach
	   push ecx
	   mov eax,0x0069E110
	   call eax
	   add esp,0x4
	   mov ecx,[esp+0x4]
	   fstp DWORD PTR [ecx+0x10]
	   //GetCoolDown   Thoi gian tac dung
	   xor eax,eax
	   mov ax,[ecx+0xC]
	   push eax
	   mov eax,0x0069EA00
	   call eax
	   add esp,0x8
	   mov ecx,[esp]
	   xor edx,edx
       mov dx,ax
       mov [ecx+0x14],edx
	   //GetCast      Thoi gian thi trien
       xor eax,eax
	   mov ax,[ecx+0xE]
       push eax
       xor eax,eax
	   mov ax,[ecx+0xC]
	   push eax
	   mov eax,0x0069E790
	   call eax
	   add esp,0x8
	   mov ecx,[esp]
       xor edx,edx
       mov edx,eax
       mov [ecx+0x18],edx
	   //GetDelay     Thoi gian hoi skill
       xor eax,eax
	   mov ax,[ecx+0xE]
       push eax
       xor eax,eax
	   mov ax,[ecx+0xC]
	   push eax
	   mov eax,0x0069E930
	   call eax
	   add esp,0x8
	   mov ecx,[esp]
       xor edx,edx
       mov edx,eax
	   mov [ecx+0x1C],edx
       mov byte PTR [ecx+0x6],0x1
       add ecx,0x8
	   mov DWORD PTR [ecx],0xE57C0018
	   push ecx
	   mov ecx,0x155EE60
	   mov eax,0x006B2F60
	   call eax
       NextCheckSkill:
	   mov eax,[esp]
	   xor ecx,ecx
	   mov cl,[eax+0x4]
	   add ecx,0x1
	   cmp ecx,60
       jae maxloopcheck
	   mov [eax+0x4],cl
       jmp Default
	   maxloopcheck:
       mov byte ptr [eax+0x4],0x0
	   Default:
       pop eax
	   pop edi
	   pop esi
       ret 0x4

	   NotFoundFunc:
       pop eax
	   pop edi
	   pop esi
       push 0x0
	   ret

   }
}
__declspec(naked)void CheckSumFile()  //007CF241
{
   __asm{
	   nop
	   nop
	   nop
	   nop
	   nop
       push edx
	   mov [ebx+0x00000C18],eax
	   /*xor eax,eax
	   mov al,[edx+0x78]
	   test eax,eax
	   jz Default  */
	   mov eax,[0x01733B04]
	   xor ecx,ecx
	   mov ecx,[edx+0x20]
	   cmp ecx,eax
	   ja Default
       //Kiem Tra Delay 10s
	   add eax,600000
	   mov [edx+0x20],eax

	   xor ecx,ecx
	   mov cl,[0x0110FE5C]
	   cmp ecx,0x2
	   jz Default

       xor ecx,ecx
	   mov cl,[0x110F5B0]
	   cmp ecx,0xA
	   jz Default
	   //
	   xor ecx,ecx
	   mov cl,[0x110F5B0]
	   cmp ecx,0x7
	   jz Default
	   /*xor ecx,ecx
	   mov cl,[edx+0x70]
	   test ecx,ecx
	   jnz Default  */
	   /*xor ecx,ecx
	   mov cl,[edx+0x72]
	   cmp ecx,0x2
	   jz ProcesscontineSendPackage  */
	   /*mov edi,0x01733994
	   push edi
       mov ecx,[esp+0x4]
	   add ecx,0x10
	   push ecx
	   call CopyText   // Copy Duong Link File
       push 24
	   push 0x008921FC
	   mov eax,[esp+0x8]
	   add eax,0x10
	   push eax
	   mov eax,0x0085C48C
	   call dword ptr [eax]
	   add esp,0xC
	   push 0x00891C74
	   mov eax,[esp+0x4]
       add eax,0x10
	   push eax
	   mov eax,0x0085C554
	   call dword ptr [eax]
	   add esp,0x8
	   test eax,eax
	   jnz OutGameCheck    */
	   mov eax,[esp]
	   push eax
	   mov ecx,0x015732C8
	   mov eax,0x7B7610
	   call eax
       test eax,eax
	   jnz Default //OutGame
	   push 0x0
	   ret




	   /*mov ecx,[esp]
	   mov [ecx+0x5],ax
       //
	   mov ecx,0x015732C8
	   mov ecx,[ecx+0x8]
	   mov eax,[esp]
	   xor edx,edx
	   mov dx,[eax+0x5]
	   mov eax,[ecx+edx*4]
       mov ecx,[eax+0x14]
	   push 0
	   push ecx
	   mov eax,[esp+0x8]
	   mov [eax+0x74],ecx
       mov eax,[eax+0xC]
	   push eax
	   mov eax,0x0085C55C
	   call dword ptr [eax]
	   add esp,0xC
	   //  Get size of File
       mov ecx,0x015732C8
	   mov ecx,[ecx+0x8]
	   mov eax,[esp]
	   xor edx,edx
	   mov dx,[eax+0x5]
	   lea eax,[ecx+edx*4]
       mov edx,[eax]
	   mov ecx,[edx+0x14] // Size of CurFile
	   //--
	   add eax,0x4
       mov eax,[eax]
	   mov edx,[eax+0x14] // Size of CurFile
	   cmp edx,ecx
	   jb Default// OutGame
	   sub edx,ecx
	   mov eax,[esp]
	   mov [eax+0x8],edx
       //
	   mov eax,[esp]
	   mov ecx,[eax+0xC]
	   push ecx
	   push 1
	   push edx
	   add eax,0x84
	   push eax
	   mov eax,0x0085C540
	   call dword ptr [eax]
	   add esp,0x10
       mov eax,[esp]
	   mov ecx,[eax+0x8]
	   lea edx,[eax+0x84+ecx]
	   mov [eax+0x6C],edx
       ProcesscontineSendPackage:
       xor eax,eax
	   mov al,[0x011076D4]
	   test eax,eax
	   jz Default
	   mov eax,[esp]
	   mov byte ptr [eax+0x70],0x1
	   //
	   mov ecx,[eax+0x8]
	   cmp ecx,0x500
	   ja SoByteConLaiLonHon500
	   //
       xor ecx,ecx
	   mov cl,[eax+0x71]
	   imul ecx,0x500
	   lea edx,[eax+0x84]
	   add edx,ecx
	   mov ecx,[eax+0x8]
       push ecx
	   push edx
       mov edx,[eax+0x6C]
	   add edx,0xC
	   push edx
	   call CopyStringEvenNull
	   //
       mov eax,[esp]
	   mov byte ptr [eax+0x72],0   // thong bao ket thuc file
	   xor ecx,ecx
	   mov cl,[eax+0x4]
	   cmp ecx,0x8
       ja MaxSoFileDaCheck
	   add ecx,0x1
	   mov [eax+0x4],cl
       jmp ProcessContinueSendPackageEndofFile
	   MaxSoFileDaCheck:
	   mov byte ptr [eax+0x4],0
	   ProcessContinueSendPackageEndofFile:
	   mov byte ptr [eax+0x71],0x0
       mov ecx,[eax+0x8]
	   mov eax,[eax+0x6C]
	   mov word ptr [eax+0x2],0xE77C
	   mov [eax+0x4],ecx
	   add ecx,0xC
	   mov [eax],cx
       mov eax,[esp]
	   mov edx,[eax+0x74]
	   mov ecx,[eax+0x6C]
	   mov [ecx+0x8],edx
	   push ecx
	   mov ecx,0x155EE60
	   mov eax,0x006B2F60
	   call eax
       jmp Default
	   SoByteConLaiLonHon500:
       sub ecx,0x500
	   mov [eax+0x8],ecx
       mov byte ptr [eax+0x72],2
	   //
       xor ecx,ecx
       mov cl,[eax+0x71]
	   imul ecx,0x500
       lea edx,[eax+0x84]
	   add edx,ecx
	   mov ecx,[eax+0x8]
       push 0x500
	   push edx
       mov edx,[eax+0x6C]
	   add edx,0xC
	   push edx
	   call CopyStringEvenNull
	   //
	   mov eax,[esp]
       xor edx,edx
	   mov dl,[eax+0x71]
	   add edx,0x1
	   mov [eax+0x71],dl
	   mov edx,[eax+0x74]
	   mov ecx,[eax+0x6C]
       mov [ecx+0x8],edx
	   add edx,0x500
	   mov [eax+0x74],edx
	   ProcessSendPackage:
	   mov eax,[esp]
       mov eax,[eax+0x6C]
	   mov dword ptr [eax+0x4],0x500
	   mov dword ptr [eax],0xE77C050C
	   push eax
	   mov ecx,0x155EE60
	   mov eax,0x006B2F60
	   call eax         */
	   Default:
       pop edx
	   push 0x007CF247
	   ret

	   ClearInforPackageSend:
	   sub esp,0x4
	   xor ecx,ecx
	   mov [esp],ecx
       BacktoClearInfor:
	   mov ecx,[esp]
	   mov eax,[esp+0x8]
	   mov byte ptr [eax+ecx],0x0
	   mov ecx,[esp]
	   add ecx,0x1
       mov [esp],ecx
	   cmp ecx,0x8
       jl BacktoClearInfor
       add esp,0x4
       ret 0x4

	   XorCodeFileCheck:
	   sub esp,0x4
	   xor ecx,ecx
	   mov [esp],ecx
       BackLoopXorCode:
	   mov ecx,[esp]
	   mov eax,[esp+0x8]
	   xor edx,edx
	   mov dl,[eax+ecx]
	   xor dl,0x1D
	   xor dl,0xF1
	   xor dl,0xBE
	   mov [eax+ecx],dl
	   //
	   add ecx,1
	   mov [esp],ecx
       mov edx,[esp+0xC]
	   cmp ecx,edx
       ja EndFuncEndCode
	   mov ecx,[esp]
	   mov eax,[esp+0x8]
	   xor edx,edx
	   mov dl,[eax+ecx]
	   xor dl,0xE5
	   xor dl,0xA6
	   xor dl,0xD5
	   mov [eax+ecx],dl
	   //
	   add ecx,1
	   mov [esp],ecx
	   mov edx,[esp+0xC]
	   cmp ecx,edx
	   jbe BackLoopXorCode
       EndFuncEndCode:
	   add esp,0x4
       ret 0x8


	   GetNameOfFileCheck:
	   mov eax,[esp+0x4]
	   cmp eax,0x0
	   jnz KiemTraCheckFile2
       // CharacterCondition
	   mov eax,6481
	   ret 0x4

	   KiemTraCheckFile2:
	   cmp eax,0x1
	   jnz KiemTraCheckFile3
	   // CharacterState
	   mov eax,6482
	   ret 0x4

	   KiemTraCheckFile3:
	   cmp eax,0x2
	   jnz KiemTraCheckFile4
	   //Mastery_Table
	   mov eax,6483
	   ret 0x4

	   KiemTraCheckFile4:
	   cmp eax,0x3
	   jnz KiemTraCheckFile5
       //N_Mastery_Table
	   mov eax,6484
	   ret 0x4

	   KiemTraCheckFile5:
	   cmp eax,0x4
	   jnz KiemTraCheckFile6
       //mastery_table.bms
	   mov eax,6485
	   ret 0x4

	   KiemTraCheckFile6:
	   cmp eax,0x5
	   jnz KiemTraCheckFile7
	   //MasterySkillConcept
	   mov eax,6486
	   ret 0x4

	   KiemTraCheckFile7:
	   cmp eax,0x6
	   jnz KiemTraCheckFile8
	   //skill_table
	   mov eax,6487
	   ret 0x4

	   KiemTraCheckFile8:
	   cmp eax,0x7
	   jnz KiemTraCheckFile9
	   //zonelist
	   mov eax,6488
	   ret 0x4

	   KiemTraCheckFile9:
	   //BuffNPCRef
	   mov eax,6489
	   ret 0x4

	   CopyText:
	   sub esp,0x4
	   xor ecx,ecx
	   mov [esp],ecx
       BackLoopCopyFile:
	   mov eax,[esp+0xC]
	   xor edx,edx
	   mov dl,[eax+ecx]
	   test edx,edx
	   jz OutFuncCopyText
	   mov eax,[esp+0x8]
       mov [eax+ecx],dl
	   mov ecx,[esp]
	   add ecx,1
	   mov [esp],ecx
       jmp BackLoopCopyFile

	   OutFuncCopyText:
       add esp,0x4
	   ret 0x8

       CopyStringEvenNull:
	   sub esp,0x4
	   xor ecx,ecx
	   mov [esp],ecx
       BackLoopCopyString:
	   mov eax,[esp+0xC]
	   xor edx,edx
	   mov dl,[eax+ecx]
	   mov eax,[esp+0x8]
       mov [eax+ecx],dl
	   mov ecx,[esp]
	   add ecx,1
	   mov [esp],ecx
	   mov edx,[esp+0x10]
	   cmp ecx,edx
	   jae OutFuncCopyString
	   jmp BackLoopCopyString
	   OutFuncCopyString:
	   add esp,0x4
	   ret 0xC
   }
}
__declspec(naked)void GetPackAlly()  //006AD712
{
   __asm{
	   nop
	   nop
	   nop
	   nop
	   nop
	   push eax
       xor edx,edx
	   mov dl,[ebp+0x3]
	   cmp dl,0x5
	   jnz Default
	   mov eax,[esp]
       xor edx,edx
	   mov dl,[ebp+0x4]
	   mov [eax+0x4],dl
	   mov edx,[ebp+0x5]
	   mov [eax+0x9],edx
	   //
       xor edx,edx
       mov dl,[ebp+0x9]
	   mov [eax+0x11],dl
	   //
       xor edx,edx
       mov dl,[ebp+0xA]
	   mov [eax+0x12],dl
       //
	   xor edx,edx
	   mov dl,[ebp+0xB]
	   mov [eax+0x13],dl
	   //
       xor edx,edx
	   mov dl,[ebp+0xC]
	   mov [eax+0x14],dl
	   //
       xor edx,edx
	   mov dl,[ebp+0xD]
	   mov [eax+0x15],dl
	   //
       xor edx,edx
	   mov dl,[ebp+0xE]
	   mov [eax+0x16],dl
	   //
       xor edx,edx
	   mov dl,[ebp+0xF]
	   mov [eax+0x17],dl
	   //
       xor edx,edx
	   mov dl,[ebp+0x10]
	   mov [eax+0x18],dl
	   //
       xor edx,edx
	   mov dl,[ebp+0x11]
	   mov [eax+0x19],dl
	   //
       xor edx,edx
	   mov dl,[ebp+0x12]
	   mov [eax+0x1A],dl
	   //
	   xor edx,edx
	   mov dl,[ebp+0x13]
	   mov [eax+0x1B],dl
	   //
       xor edx,edx
	   mov dl,[ebp+0x14]
	   mov [eax+0x1C],dl

       xor edx,edx
	   mov dl,[ebp+0x1A]
	   mov [eax+0x1F],dl

	   mov edx,[ebp+0x16]
	   mov [eax+0x5],edx
	   //
       Default:
	   pop eax
	   mov  eax, 1
	   push 0x006AD717
       ret
   }
}
__declspec(naked)void HeThongAntiGetPackage2()  //006AD712
{
   __asm{
	   push eax
       xor edx,edx
	   mov dl,[ebp+0x4]
	   cmp edx,0x4 // Tat Game
	   jnz KiemTraGiaTri2
	   push 0x0
	   ret

       KiemTraGiaTri2:
	   cmp edx,0x5 // Mo Co Load
	   jnz KiemTraGiaTri4
	   mov byte ptr [eax+0x6],0x0
	   jmp Default

	   KiemTraGiaTri4:
	   cmp edx,0x2 // Mo Co Load
	   jnz KiemTraGiaTri3
	   mov byte ptr [eax+0x6],0x0
	   mov byte ptr [eax+0x4],0x0
	   jmp Default

	   KiemTraGiaTri3:
	   cmp edx,0x3 // Mo Co Load
	   jnz Default
	   mov byte ptr [eax+0x6],0x2

	   Default:
	   pop eax
       mov eax,0x1
	   push 0x006AD717
       ret
   }
}
__declspec(naked)void SendRequestListItemCombineID()  //00661C48
{
   __asm{
	   nop
	   nop
	   nop
	   nop
	   nop
	   xor ecx,ecx
	   mov ecx,[eax]
	   test ecx,ecx
	   jnz DaCoGiaTriPackage
       xor ecx,ecx
	   mov cl,[0x0110FE5C]
	   cmp ecx,0x2
	   jz DaCoGiaTriPackage
       xor ecx,ecx
	   mov cl,[0x110F5B0]
	   cmp ecx,0xA
	   jz DaCoGiaTriPackage
	   xor ecx,ecx
	   mov cl,[0x110F5B0]
	   cmp ecx,0x7
	   jz DaCoGiaTriPackage
       mov dword ptr [eax],0x1
	   sub esp,0x4
       mov DWORD PTR [esp],0x0
	   mov eax,esp
	   mov dword ptr [eax],0xE87C0004
	   push eax
	   mov ecx,0x155EE60
	   mov eax,0x006B2F60
	   call eax
	   add esp,0x4
	   DaCoGiaTriPackage:
	   pop ebx
       add esp,0x000011D4
	   push 0x00661C4F
	   ret



   }
}
__declspec(naked)void NhanPackageListIDCombine()  //006AD88F
{
   __asm{
	   nop
	   nop
	   nop
	   nop
	   nop
       xor edx,edx
	   mov dx,[ebp]
	   cmp edx,0x644
	   jl DefaultNotLoad
       add eax,0x4
	   push eax
	   mov eax,ebp
       add eax,0x4
	   push eax
	   call CopyInforFromPackageIDCombineFromServer
       DefaultNotLoad:
	   push 0x006AD897
	   ret

	   CopyInforFromPackageIDCombineFromServer:
	   sub esp,0x4
	   xor ecx,ecx
	   mov [esp],ecx
       BackLoopCopyFileIDCombine:
	   mov eax,[esp+0x8]
       mov eax,[eax+ecx]
	   mov edx,[esp+0xC]
	   mov [edx+ecx],eax
	   mov ecx,[esp]
	   add ecx,4
	   mov [esp],ecx
	   cmp ecx,1604
	   jl BackLoopCopyFileIDCombine
	   add esp,0x4
       ret 0x8
   }
}
__declspec(naked)void NhanPackageListWeaponSkill()  //006AD8A9
{
   __asm{
	   nop
	   nop
	   nop
	   nop
	   nop
       xor edx,edx
	   mov dx,[ebp]
	   cmp edx,0x320
	   jl DefaultNotLoad
	   push eax
	   mov eax,ebp
       add eax,0x4
	   push eax
	   call CopyInforFromPackageIDCombineFromServer
       DefaultNotLoad:
	   push 0x006AD897
	   ret

	   CopyInforFromPackageIDCombineFromServer:
	   sub esp,0x4
	   xor ecx,ecx
	   mov [esp],ecx
       BackLoopCopyFileIDCombine:
	   mov eax,[esp+0x8]
       mov eax,[eax+ecx]
	   mov edx,[esp+0xC]
	   mov [edx+ecx],eax
	   mov ecx,[esp]
	   add ecx,4
	   mov [esp],ecx
	   cmp ecx,0x320
	   jl BackLoopCopyFileIDCombine
	   add esp,0x4
       ret 0x8
   }
}
__declspec(naked)void ChangeFuncLoadFile()  //005E0AA6
{
   __asm{
	   push 0x00893CD8
	   push ecx
	   mov eax,0x0085C530
	   call dword ptr [eax]
	   add esp,0xC
	   test eax,eax
	   jz DisGameOut
       push 12
       push 5894
	   push 0x19
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   lea ecx, [esp+0x1C]
	   push ecx
       mov eax,0x0085C530
	   call dword ptr [eax]
	   add esp,0xC
	   test eax,eax
	   jz NextCheckFile
	   push 0x005E0ABD
	   ret

       NextCheckFile:
	   push 0x005E0BF7
       ret

	   DisGameOut:
	   push 0x0
       ret

   }
}
__declspec(naked)void TestCloseGG()  //008405E6
{
   __asm{

	   push 0x008401CD
       ret
   }
}
__declspec(naked)void TestCloseGG23()  //00840300
{
   __asm{
	   push 0x008401CD
	   ret
   }
}
__declspec(naked)void TestCloseGG24()  //008403CC
{
   __asm{
	   push 0x008403D2
       ret
   }
}
__declspec(naked)void TestCloseGG25()  //008405EC
{
   __asm{
	   push 0x008401CD
	   ret
   }
}
__declspec(naked)void TestCloseGG26()  //005A0287
{
   __asm{
	   push 0x005A028C
       ret
   }
}
__declspec(naked)void TestCloseGG1()  //00413B98
{
   __asm{
	  /* push eax
       push 0x008725F4
	   mov eax,0x0085C544
	   call dword ptr [eax]
	   add esp,0x8
	   mov eax,0x0085C544
	   push 0x00413B9D
	   ret  */
	   push 0x00413BAF
       ret
   }
}
__declspec(naked)void TestCloseGG2()  //004263AC
{
   __asm{
	  /* push eax
       push 0x008725F4
       mov eax,0x0085C544
	   call dword ptr [eax]
	   add esp,0x8
       mov edx,0x008725F4
	   push 0x004263B2
	   ret */
	   push 0x004263C8
       ret
   }
}
__declspec(naked)void TestCloseGG3()  //005A5618
{
   __asm{
	 /*  push eax
       push 0x008725F4
       mov eax,0x0085C544
	   call dword ptr [eax]
	   add esp,0x8
	   mov edx,0x008725F4
	   push 0x005A561E
	   ret  */
	   push 0x005A562E
       ret
   }
}
__declspec(naked)void TestCloseGG4()  //006A98B5
{
   __asm{
	  /* push eax
       push 0x008725F4
       mov eax,0x0085C544
	   call dword ptr [eax]
	   add esp,0x8
	   mov eax,0x008725F4
	   push 0x006A98BA
	   ret  */
	   push 0x006A98CB
       ret
   }
}
__declspec(naked)void TestCloseGG5()  //006A9C2F
{
   __asm{
	   /*push eax
       push 0x008725F4
       mov eax,0x0085C544
	   call dword ptr [eax]
	   add esp,0x8
	   mov eax,0x008725F4
	   push 0x006A9C34
	   ret     */
	   push 0x006A9C3D
       ret
   }
}
__declspec(naked)void TestCloseGG6()  //0083AF0F
{
   __asm{
	   push 0x0083AF16
       ret
   }
}
__declspec(naked)void GetPozGroupAlly()  //004ED14E
{
   __asm{
	   nop
	   nop
	   nop
	   nop
	   nop
	   push eax
	   //
	   mov eax,[ebp+0x0001572C]
	   cmp eax,0x1
	   jnz OutCheckFunPoz
	   //
	   mov eax,[0x1107258+0x838C]
	   test eax,eax
	   jz OutCheckFunPoz
	   //
       push 0x275A
	   mov ecx,0x017323A8
	   mov eax,0x007D8550
	   call eax
	   test eax,eax
	   jz OutCheckFunPoz
	   xor ecx,ecx
	   mov cl,[eax+0x10]
	   test ecx,ecx
	   jz OutCheckFunPoz
	   xor ecx,ecx
	   mov cl,[eax+0x33C]
	   cmp ecx,0x6
	   jnz OutCheckFunPoz
	   xor ecx,ecx
	   mov eax,[eax+0x374]
	   mov ecx,[eax+0x10]
	   test ecx,ecx
	   jz OutCheckFunPoz
	   xor ecx,ecx
	   mov ecx,[eax+0x1572C]
	   cmp ecx,0x1
	   jnz OutCheckFunPoz
       mov ecx,DWORD PTR SS:[0x01733AD0]
	   xor eax,eax
	   mov al,[ecx+0x210]
	   cmp eax,0x1
       jnz HoverSkill
	   //
	   xor ecx,ecx
	   mov cl,[0x1107258+0x83AA]
	   cmp ecx,0x3
       jnz HoverSkill
       mov ecx,DWORD PTR SS:[0x01733AD0]
	   mov eax,0x007D7FE0
	   call eax
	   mov edx,[esp]
	   xor ecx,ecx
	   mov cl,[edx+0x1D]
	   test ecx,ecx
       jnz OutCheckFunPoz
	   mov ecx,[eax]
       mov edx,[edx]
	   mov edx,[edx+0x14]
	   add edx,403
	   cmp ecx,edx
	   jl OutCheckFunPoz
	   add edx,52
	   cmp ecx,edx
	   ja KiemTraTinhNang6789
	   mov ecx,[eax+0x8]
	   mov edx,[esp]
       mov edx,[edx]
	   mov edx,[edx+0x18]
	   add edx,123
	   cmp ecx,edx
	   jl OutCheckFunPoz
	   add edx,16
	   cmp ecx,edx
	   ja KiemTraTinhNang2
	   mov eax,[esp]
	   mov byte ptr [eax+0x1D],0x1
	   xor ecx,ecx
	   mov cl,[eax+0x1F]
	   push ecx
	   call KhongDuDiemPotion
       test eax,eax
	   jz OutCheckFunPoz
	   // Skill 1
	   mov eax,[esp]
	   sub esp,0x8
	   mov DWORD PTR [esp],0x0
	   mov DWORD PTR [esp+0x4],0x0
	   mov byte ptr [esp+0x4],0x0
	   mov eax,esp
	   mov dword ptr [eax],0xF17C0005
	   push eax
	   mov ecx,0x155EE60
	   mov eax,0x006B2F60
	   call eax
	   add esp,0x8
	   jmp OutCheckFunPoz

	   KiemTraTinhNang2:
	   mov ecx,[eax+0x8]
	   mov edx,[esp]
       mov edx,[edx]
	   mov edx,[edx+0x18]
	   add edx,181
	   cmp ecx,edx
	   jl OutCheckFunPoz
	   add edx,16
	   cmp ecx,edx
	   ja KiemTraTinhNang3
	   // Skill 2
       mov eax,[esp]
	   mov byte ptr [eax+0x1D],0x1
	   xor ecx,ecx
	   mov cl,[eax+0x1F]
	   push ecx
	   call KhongDuDiemPotion
       test eax,eax
	   jz OutCheckFunPoz
	   sub esp,0x8
	   mov DWORD PTR [esp],0x0
	   mov DWORD PTR [esp+0x4],0x0
	   mov byte ptr [esp+0x4],0x1
	   mov eax,esp
	   mov dword ptr [eax],0xF17C0005
	   push eax
	   mov ecx,0x155EE60
	   mov eax,0x006B2F60
	   call eax
	   add esp,0x8
	   jmp OutCheckFunPoz

	   KiemTraTinhNang3:
	   mov ecx,[eax+0x8]
	   mov edx,[esp]
       mov edx,[edx]
	   mov edx,[edx+0x18]
	   add edx,240
	   cmp ecx,edx
	   jl OutCheckFunPoz
	   add edx,16
	   cmp ecx,edx
	   ja KiemTraTinhNang4
	   // Skill 3
       mov eax,[esp]
	   mov byte ptr [eax+0x1D],0x1
	   xor ecx,ecx
	   mov cl,[eax+0x1F]
	   push ecx
	   call KhongDuDiemPotion
       test eax,eax
	   jz OutCheckFunPoz
	   sub esp,0x8
	   mov DWORD PTR [esp],0x0
	   mov DWORD PTR [esp+0x4],0x0
       mov byte ptr [esp+0x4],0x2
	   mov eax,esp
	   mov dword ptr [eax],0xF17C0005
	   push eax
	   mov ecx,0x155EE60
	   mov eax,0x006B2F60
	   call eax
	   add esp,0x8
	   jmp OutCheckFunPoz

	   KiemTraTinhNang4:
	   mov ecx,[eax+0x8]
	   mov edx,[esp]
       mov edx,[edx]
	   mov edx,[edx+0x18]
	   add edx,299
	   cmp ecx,edx
	   jl OutCheckFunPoz
	   add edx,16
	   cmp ecx,edx
	   ja KiemTraTinhNang5
	   // Skill 4
       mov eax,[esp]
	   mov byte ptr [eax+0x1D],0x1
	   xor ecx,ecx
	   mov cl,[eax+0x1F]
	   push ecx
	   call KhongDuDiemPotion
       test eax,eax
	   jz OutCheckFunPoz
	   sub esp,0x8
	   mov DWORD PTR [esp],0x0
	   mov DWORD PTR [esp+0x4],0x0
	   mov byte ptr [esp+0x4],0x3
	   mov eax,esp
	   mov dword ptr [eax],0xF17C0005
	   push eax
	   mov ecx,0x155EE60
	   mov eax,0x006B2F60
	   call eax
	   add esp,0x8
	   jmp OutCheckFunPoz

	   KiemTraTinhNang5:
	   mov ecx,[eax+0x8]
	   mov edx,[esp]
       mov edx,[edx]
	   mov edx,[edx+0x18]
	   add edx,358
	   cmp ecx,edx
	   jl OutCheckFunPoz
	   add edx,16
	   cmp ecx,edx
	   ja OutCheckFunPoz
	   // Skill 5
       mov eax,[esp]
	   mov byte ptr [eax+0x1D],0x1
	   xor ecx,ecx
	   mov cl,[eax+0x1F]
	   push ecx
	   call KhongDuDiemPotion
       test eax,eax
	   jz OutCheckFunPoz
	   sub esp,0x8
	   mov DWORD PTR [esp],0x0
	   mov DWORD PTR [esp+0x4],0x0
	   mov byte ptr [esp+0x4],0x4
	   mov eax,esp
	   mov dword ptr [eax],0xF17C0005
	   push eax
	   mov ecx,0x155EE60
	   mov eax,0x006B2F60
	   call eax
	   add esp,0x8
	   jmp OutCheckFunPoz

	   KiemTraTinhNang6789:
       mov ecx,[eax]
	   mov edx,[esp]
       mov edx,[edx]
	   mov edx,[edx+0x14]
	   add edx,575
	   cmp ecx,edx
	   jl OutCheckFunPoz
	   add edx,52
	   cmp ecx,edx
	   ja OutCheckFunPoz
       mov ecx,[eax+0x8]
	   mov edx,[esp]
       mov edx,[edx]
	   mov edx,[edx+0x18]
	   add edx,123
	   cmp ecx,edx
	   jl OutCheckFunPoz
	   add edx,16
	   cmp ecx,edx
	   ja KiemTraTinhNang21
	   // Skill 6
       mov eax,[esp]
	   mov byte ptr [eax+0x1D],0x1
	   xor ecx,ecx
	   mov cl,[eax+0x1F]
	   push ecx
	   call KhongDuDiemPotion
       test eax,eax
	   jz OutCheckFunPoz
	   sub esp,0x8
	   mov DWORD PTR [esp],0x0
	   mov DWORD PTR [esp+0x4],0x0
	   mov byte ptr [esp+0x4],0x5
	   mov eax,esp
	   mov dword ptr [eax],0xF17C0005
	   push eax
	   mov ecx,0x155EE60
	   mov eax,0x006B2F60
	   call eax
	   add esp,0x8
	   jmp OutCheckFunPoz

	   KiemTraTinhNang21:
	   mov ecx,[eax+0x8]
	   mov edx,[esp]
       mov edx,[edx]
	   mov edx,[edx+0x18]
	   add edx,181
	   cmp ecx,edx
	   jl OutCheckFunPoz
	   add edx,16
	   cmp ecx,edx
	   ja KiemTraTinhNang31
	   // Skill 7
       mov eax,[esp]
	   mov byte ptr [eax+0x1D],0x1
	   xor ecx,ecx
	   mov cl,[eax+0x1F]
	   push ecx
	   call KhongDuDiemPotion
       test eax,eax
	   jz OutCheckFunPoz
	   sub esp,0x8
	   mov DWORD PTR [esp],0x0
	   mov DWORD PTR [esp+0x4],0x0
	   mov byte ptr [esp+0x4],0x6
	   mov eax,esp
	   mov dword ptr [eax],0xF17C0005
	   push eax
	   mov ecx,0x155EE60
	   mov eax,0x006B2F60
	   call eax
	   add esp,0x8
	   jmp OutCheckFunPoz

	   KiemTraTinhNang31:
	   mov ecx,[eax+0x8]
	   mov edx,[esp]
       mov edx,[edx]
	   mov edx,[edx+0x18]
	   add edx,240
	   cmp ecx,edx
	   jl OutCheckFunPoz
	   add edx,16
	   cmp ecx,edx
	   ja KiemTraTinhNang41
	   // Skill 8
       mov eax,[esp]
	   mov byte ptr [eax+0x1D],0x1
	   xor ecx,ecx
	   mov cl,[eax+0x1F]
	   push ecx
	   call KhongDuDiemPotion
       test eax,eax
	   jz OutCheckFunPoz
	   sub esp,0x8
	   mov DWORD PTR [esp],0x0
	   mov DWORD PTR [esp+0x4],0x0
	   mov byte ptr [esp+0x4],0x7
	   mov eax,esp
	   mov dword ptr [eax],0xF17C0005
	   push eax
	   mov ecx,0x155EE60
	   mov eax,0x006B2F60
	   call eax
	   add esp,0x8
	   jmp OutCheckFunPoz

	   KiemTraTinhNang41:
	   mov ecx,[eax+0x8]
	   mov edx,[esp]
       mov edx,[edx]
	   mov edx,[edx+0x18]
	   add edx,299
	   cmp ecx,edx
	   jl OutCheckFunPoz
	   add edx,16
	   cmp ecx,edx
	   ja OutCheckFunPoz
	   // Skill 9
       mov eax,[esp]
	   mov byte ptr [eax+0x1D],0x1
	   xor ecx,ecx
	   mov cl,[eax+0x1F]
	   push ecx
	   call KhongDuDiemPotion
       test eax,eax
	   jz OutCheckFunPoz
	   sub esp,0x8
	   mov DWORD PTR [esp],0x0
	   mov DWORD PTR [esp+0x4],0x0
       mov byte ptr [esp+0x4],0x8
	   mov eax,esp
	   mov dword ptr [eax],0xF17C0005
	   push eax
	   mov ecx,0x155EE60
	   mov eax,0x006B2F60
	   call eax
	   add esp,0x8
	   jmp OutCheckFunPoz

	   HoverSkill:
       mov ecx,DWORD PTR SS:[0x01733AD0]
	   mov eax,0x007D7FE0
	   call eax
       mov ecx,[eax]
	   mov edx,[esp]
       mov byte ptr [edx+0x1D],0x0
       mov edx,[edx]
	   mov edx,[edx+0x14]
	   add edx,357
	   cmp ecx,edx
	   jl OutCheckFunPoz
	   add edx,30
	   cmp ecx,edx
	   ja KiemTraHinhAnh6789
	   mov ecx,[eax+0x8]
	   mov edx,[esp]
       mov edx,[edx]
	   mov edx,[edx+0x18]
	   add edx,116
	   cmp ecx,edx
	   jl OutCheckFunPoz
	   add edx,30
	   cmp ecx,edx
	   ja KiemTraHinhAnh2
	   push 1
	   mov eax,[esp+0x4]
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,780
	   push ecx          // dia chi moi
	   mov ecx,[eax+0x18]
	   add ecx,305
	   push ecx
	   mov ecx,[esp+0xC]
	   add ecx,0x20
	   push ecx
	   call DrawIconSkill
	   jmp OutCheckFunPoz


	   KiemTraHinhAnh2:
       mov ecx,[eax+0x8]
	   mov edx,[esp]
       mov edx,[edx]
	   mov edx,[edx+0x18]
	   add edx,174
	   cmp ecx,edx
	   jl OutCheckFunPoz
	   add edx,30
	   cmp ecx,edx
	   ja KiemTraHinhAnh3
       push 2
	   mov eax,[esp+0x4]
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,780
	   push ecx          // dia chi moi
	   mov ecx,[eax+0x18]
	   add ecx,305
	   push ecx
	   mov ecx,[esp+0xC]
	   add ecx,0x20
	   push ecx
	   call DrawIconSkill
	   jmp OutCheckFunPoz


	   KiemTraHinhAnh3:
       mov ecx,[eax+0x8]
	   mov edx,[esp]
       mov edx,[edx]
	   mov edx,[edx+0x18]
	   add edx,235
	   cmp ecx,edx
	   jl OutCheckFunPoz
	   add edx,30
	   cmp ecx,edx
	   ja KiemTraHinhAnh4
	   push 3
	   mov eax,[esp+0x4]
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,780
	   push ecx          // dia chi moi
	   mov ecx,[eax+0x18]
	   add ecx,305
	   push ecx
	   mov ecx,[esp+0xC]
	   add ecx,0x20
	   push ecx
	   call DrawIconSkill
	   jmp OutCheckFunPoz


	   KiemTraHinhAnh4:
       mov ecx,[eax+0x8]
	   mov edx,[esp]
       mov edx,[edx]
	   mov edx,[edx+0x18]
	   add edx,293
	   cmp ecx,edx
	   jl OutCheckFunPoz
	   add edx,30
	   cmp ecx,edx
	   ja KiemTraHinhAnh5
	   push 4
	   mov eax,[esp+0x4]
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,780
	   push ecx          // dia chi moi
	   mov ecx,[eax+0x18]
	   add ecx,305
	   push ecx
	   mov ecx,[esp+0xC]
	   add ecx,0x20
	   push ecx
	   call DrawIconSkill
	   jmp OutCheckFunPoz


	   KiemTraHinhAnh5:
       mov ecx,[eax+0x8]
	   mov edx,[esp]
       mov edx,[edx]
	   mov edx,[edx+0x18]
	   add edx,352
	   cmp ecx,edx
	   jl OutCheckFunPoz
	   add edx,30
	   cmp ecx,edx
	   ja OutCheckFunPoz
	   push 5
	   mov eax,[esp+0x4]
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,780
	   push ecx          // dia chi moi
	   mov ecx,[eax+0x18]
	   add ecx,305
	   push ecx
	   mov ecx,[esp+0xC]
	   add ecx,0x20
	   push ecx
	   call DrawIconSkill
	   jmp OutCheckFunPoz


       KiemTraHinhAnh6789:
       mov ecx,[eax]
	   mov edx,[esp]
       mov edx,[edx]
	   mov edx,[edx+0x14]
	   add edx,529
	   cmp ecx,edx
	   jl OutCheckFunPoz
	   add edx,30
	   cmp ecx,edx
	   ja OutCheckFunPoz
	   mov ecx,[eax+0x8]
	   mov edx,[esp]
       mov edx,[edx]
	   mov edx,[edx+0x18]
	   add edx,116
	   cmp ecx,edx
	   jl OutCheckFunPoz
	   add edx,30
	   cmp ecx,edx
	   ja KiemTraHinhAnh21
	   push 6
	   mov eax,[esp+0x4]
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,780
	   push ecx          // dia chi moi
	   mov ecx,[eax+0x18]
	   add ecx,305
	   push ecx
	   mov ecx,[esp+0xC]
	   add ecx,0x20
	   push ecx
	   call DrawIconSkill
	   jmp OutCheckFunPoz


	   KiemTraHinhAnh21:
       mov ecx,[eax+0x8]
	   mov edx,[esp]
       mov edx,[edx]
	   mov edx,[edx+0x18]
	   add edx,174
	   cmp ecx,edx
	   jl OutCheckFunPoz
	   add edx,30
	   cmp ecx,edx
	   ja KiemTraHinhAnh31
	   push 7
	   mov eax,[esp+0x4]
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,780
	   push ecx          // dia chi moi
	   mov ecx,[eax+0x18]
	   add ecx,305
	   push ecx
	   mov ecx,[esp+0xC]
	   add ecx,0x20
	   push ecx
	   call DrawIconSkill
	   jmp OutCheckFunPoz


	   KiemTraHinhAnh31:
       mov ecx,[eax+0x8]
	   mov edx,[esp]
       mov edx,[edx]
	   mov edx,[edx+0x18]
	   add edx,235
	   cmp ecx,edx
	   jl OutCheckFunPoz
	   add edx,30
	   cmp ecx,edx
	   ja KiemTraHinhAnh41
	   push 8
	   mov eax,[esp+0x4]
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,780
	   push ecx          // dia chi moi
	   mov ecx,[eax+0x18]
	   add ecx,305
	   push ecx
	   mov ecx,[esp+0xC]
	   add ecx,0x20
	   push ecx
	   call DrawIconSkill
	   jmp OutCheckFunPoz

	   KiemTraHinhAnh41:
       mov ecx,[eax+0x8]
	   mov edx,[esp]
       mov edx,[edx]
	   mov edx,[edx+0x18]
	   add edx,293
	   cmp ecx,edx
	   jl OutCheckFunPoz
	   add edx,30
	   cmp ecx,edx
	   ja OutCheckFunPoz
	   push 9
	   mov eax,[esp+0x4]
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,780
	   push ecx          // dia chi moi
	   mov ecx,[eax+0x18]
	   add ecx,305
	   push ecx
	   mov ecx,[esp+0xC]
	   add ecx,0x20
	   push ecx
	   call DrawIconSkill
	   jmp OutCheckFunPoz


	   OutCheckFunPoz:
	   pop eax
	   pop ebp
	   add esp,0x00000124
	   push 0x004ED155
	   ret

	   DrawIconSkill:
	   mov ecx,[esp+0x10]
	   cmp ecx,1
	   jnz HinhAnhSkill1
	   //Draw Nen
       push 4892
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
       push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
       mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 00
	   mov  DWORD PTR SS : [ecx + 0xA0] , 181
	   mov  DWORD PTR SS : [ecx + 0x98] , 00
	   mov  DWORD PTR SS : [ecx + 0xA4] , 186
	   jmp ProceesShowImageInFormPet

       HinhAnhSkill1:
	   cmp ecx,2
	   jnz HinhAnhSkill2
	   //Draw Nen
       push 4893
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
       push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
       mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 00
	   mov  DWORD PTR SS : [ecx + 0xA0] , 181
	   mov  DWORD PTR SS : [ecx + 0x98] , 00
	   mov  DWORD PTR SS : [ecx + 0xA4] , 186
	   jmp ProceesShowImageInFormPet

       HinhAnhSkill2:
	   cmp ecx,3
	   jnz HinhAnhSkill3
	   //Draw Nen
       push 4894
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
       push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
       mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 00
	   mov  DWORD PTR SS : [ecx + 0xA0] , 181
	   mov  DWORD PTR SS : [ecx + 0x98] , 00
	   mov  DWORD PTR SS : [ecx + 0xA4] , 186
	   jmp ProceesShowImageInFormPet

       HinhAnhSkill3:
	   cmp ecx,4
	   jnz HinhAnhSkill4
	   //Draw Nen
	   push 4895
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
       push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
       mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 00
	   mov  DWORD PTR SS : [ecx + 0xA0] , 181
	   mov  DWORD PTR SS : [ecx + 0x98] , 00
	   mov  DWORD PTR SS : [ecx + 0xA4] , 186
	   jmp ProceesShowImageInFormPet

	   HinhAnhSkill4:
	   cmp ecx,5
	   jnz HinhAnhSkill5
	   push 4896
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
       push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
       mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 00
	   mov  DWORD PTR SS : [ecx + 0xA0] , 181
	   mov  DWORD PTR SS : [ecx + 0x98] , 00
	   mov  DWORD PTR SS : [ecx + 0xA4] , 186
	   jmp ProceesShowImageInFormPet

	   HinhAnhSkill5:
	   cmp ecx,6
	   jnz HinhAnhSkill6
	   push 4897
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
       push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
       mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 00
	   mov  DWORD PTR SS : [ecx + 0xA0] , 181
	   mov  DWORD PTR SS : [ecx + 0x98] , 00
	   mov  DWORD PTR SS : [ecx + 0xA4] , 186
	   jmp ProceesShowImageInFormPet

	   HinhAnhSkill6:
	   cmp ecx,7
	   jnz HinhAnhSkill7
	   push 4898
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
       push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
       mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 00
	   mov  DWORD PTR SS : [ecx + 0xA0] , 181
	   mov  DWORD PTR SS : [ecx + 0x98] , 00
	   mov  DWORD PTR SS : [ecx + 0xA4] , 186
	   jmp ProceesShowImageInFormPet

	   HinhAnhSkill7:
	   cmp ecx,8
	   jnz HinhAnhSkill8
	   push 4899
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
       push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
       mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 00
	   mov  DWORD PTR SS : [ecx + 0xA0] , 181
	   mov  DWORD PTR SS : [ecx + 0x98] , 00
	   mov  DWORD PTR SS : [ecx + 0xA4] , 186
	   jmp ProceesShowImageInFormPet

	   HinhAnhSkill8:
	   cmp ecx,9
	   jnz KhongTimThayHInhAnh
       push 4900
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
       push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
       mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 00
	   mov  DWORD PTR SS : [ecx + 0xA0] , 181
	   mov  DWORD PTR SS : [ecx + 0x98] , 00
	   mov  DWORD PTR SS : [ecx + 0xA4] , 186
	   jmp ProceesShowImageInFormPet

	   KhongTimThayHInhAnh:
	   ret 0x10

	   ProceesShowImageInFormPet:
	   push 0x00000000
	   push 0x0089E914
	   mov ecx,[esp+0x10]
	   mov edx,[esp+0x14]
	   push ecx
	   push edx
	   mov ecx, [esp+0x14]
	   mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
	   call eax
	   mov ecx,[esp+0x4]
	   push 0x1732CC8
	   mov eax, 0x7B9850
	   call eax //Draw1
	   ret 0x10

	   KhongDuDiemPotion:
	   xor eax,eax
	   mov eax,[esp+0x4]
	   cmp eax,0x0
       ja DuDiemNang
	   push 0xFFFF0000
	   push 0x1
	   push 0xC
	   push 5622
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x0155EE60
	   mov eax,0x006A9800
	   call eax
	   mov eax,0x0
	   ret 0x4

	   DuDiemNang:
	   mov eax,0x1
       ret 0x4
   }
}
__declspec(naked)void DrawNewGroupAlly()  //004EBE62
{
   __asm{
	   nop
	   nop
	   nop
	   nop
	   nop
       push eax
	   mov eax,[ebp+0x0001572C]
	   cmp eax,0x1
	   jnz Default
	   //
	   mov eax,[0x1107258+0x838C]
	   test eax,eax
       jz Default
	   //
       push 0x275A
	   mov ecx,0x017323A8
	   mov eax,0x007D8550
	   call eax
	   mov ecx,[esp]
       mov [ecx],eax
	   //  DrawNen
	   push 111
	   mov ecx,[eax+0x14]
	   add ecx,0x1A8
	   push ecx          // dia chi moi
	   mov ecx,[eax+0x18]
	   sub ecx,0x10
	   push ecx
	   mov ecx,[esp+0xC]
	   add ecx,0x20
	   push ecx
	   call DrawImageGroupGame
	   //
       mov eax,[esp]
       xor ecx,ecx
	   mov cl,[eax+0x1F]
       push ecx
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x1DF
	   push ecx
	   mov ecx,[eax+0x18]
	   add ecx,0x60
	   push ecx
	   push 5621
	   push 0x19
	   push 0xFFFFFFFF
	   call DrawTextLevelBH

	   mov eax,[esp]
       xor ecx,ecx
	   mov cl,[eax+0x4]
       push ecx
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x16A
	   push ecx
	   mov ecx,[eax+0x18]
	   add ecx,0x10
	   push ecx
	   push 4599
	   push 0x19
	   push 0xFFFFFFFF
	   call DrawTextLevelBH
	   //
	   mov eax,[esp]
	   mov ecx,[eax+0x5]
       push ecx
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x16A
	   push ecx
	   mov ecx,[eax+0x18]
	   add ecx,0x25
	   push ecx
	   push 4600
	   push 0x19
	   push 0xFFFFFFFF
	   call DrawTextLevelBH
	   //
	   mov eax,[esp]
	   xor ecx,ecx
	   mov cl,[eax+0x11]
       push ecx
	   mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x215
	   push ecx
	   mov ecx,[eax+0x18]
	   add ecx,0x10
	   push ecx
	   push 4601
	   push 0x19
	   push 0xFFFFFFFF
	   call DrawTextLevelString
	   //
	   mov eax,[esp]
       xor ecx,ecx
	   mov cl,[eax+0x12]
       push ecx
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x215
	   push ecx
	   mov ecx,[eax+0x18]
	   add ecx,0x20
	   push ecx
	   push 4602
	   push 0x19
	   push 0xFFFFFFFF
	   call DrawTextLevelString
	   //
	   mov eax,[esp]
	   xor ecx,ecx
	   mov cl,[eax+0x13]
	   push ecx
	   mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x215
	   push ecx
	   mov ecx,[eax+0x18]
	   add ecx,0x30
	   push ecx
	   push 4603
	   push 0x19
	   push 0xFFFFFFFF
	   call DrawTextLevelString
	   //
	   mov eax,[esp]
	   mov ecx,[eax+0x9]
       push ecx
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x16A
	   push ecx
	   mov ecx,[eax+0x18]
	   add ecx,0x3A
	   push ecx
       xor ecx,ecx
	   mov eax,[esp+0xC]
	   mov cl,[eax+0x4]
	   mov eax,5571
	   add eax,ecx
	   push eax
	   push 0x19
	   push 0xFFFFFFFF
	   call DrawTextLevelBH
	   //
	   mov eax,[esp]
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x1C0
	   push ecx
	   mov ecx,[eax+0x18]
	   add ecx,0x50
	   push ecx
	   push 4581
	   push 0x19
	   push 0xFFFFFFFF
	   call DrawTextPetInfor
	   //
	   push 2
	   mov eax,[esp+0x4]
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x1AD
	   push ecx          // dia chi moi
	   mov ecx,[eax+0x18]
	   add ecx,0x85
	   push ecx
	   mov ecx,[esp+0xC]
	   add ecx,0x20
	   push ecx
	   call DrawImageGroupGame
	   mov eax,[esp]
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x165
	   push ecx
	   mov ecx,[eax+0x18]
	   add ecx,0x98
	   push ecx
	   push 4510
	   push 0x19
	   push 0xFFFFFFFF
	   call DrawTextPetInfor
	   xor eax,eax
	   mov al,[0x1107258+0x83AA]
	   cmp eax,0x3
       jnz ThanhVienBangHoi1
       push 105
	   mov eax,[esp+0x4]
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x1DA
	   push ecx          // dia chi moi
	   mov ecx,[eax+0x18]
	   add ecx,0x8A
	   push ecx
	   mov ecx,[esp+0xC]
	   add ecx,0x20
	   push ecx
	   call DrawImageGroupGame
       mov eax,[esp]
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x1A3
	   push ecx
	   mov ecx,[eax+0x18]
	   add ecx,0x7D
	   push ecx
	   push 4612
	   push 0x19
	   push 0xFFFFFFFF
	   call DrawTextPetInfor
	   mov eax,[esp]
	   xor ecx,ecx
	   mov cl,[eax+0x14]
       push ecx
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x1D2
	   push ecx
	   mov ecx,[eax+0x18]
	   add ecx,0x7D
	   push ecx
	   push 4613
	   push 0x19
	   push 0xFFFFFFFF
	   call DrawTextLevelBH
       jmp ProcessHienThiSkill2
	   ThanhVienBangHoi1:
	   mov eax,[esp]
	   xor ecx,ecx
	   mov cl,[eax+0x14]
       push ecx
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x18D
	   push ecx
	   mov ecx,[eax+0x18]
	   add ecx,0x7D
	   push ecx
	   push 4613
	   push 0x19
	   push 0xFFFFFFFF
	   call DrawTextLevelBH
       ProcessHienThiSkill2:
	   //
	   push 3
	   mov eax,[esp+0x4]
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x1AD
	   push ecx          // dia chi moi
	   mov ecx,[eax+0x18]
	   add ecx,0xC0
	   push ecx
	   mov ecx,[esp+0xC]
	   add ecx,0x20
	   push ecx
	   call DrawImageGroupGame
	   mov eax,[esp]
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x165
	   push ecx
	   mov ecx,[eax+0x18]
	   add ecx,0xD3
	   push ecx
	   push 4511
	   push 0x19
	   push 0xFFFFFFFF
	   call DrawTextPetInfor
       xor eax,eax
	   mov al,[0x1107258+0x83AA]
	   cmp eax,0x3
	   jnz ThanhVienBangHoi2
       push 105
	   mov eax,[esp+0x4]
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x1DA
	   push ecx          // dia chi moi
	   mov ecx,[eax+0x18]
	   add ecx,0xC5
	   push ecx
	   mov ecx,[esp+0xC]
	   add ecx,0x20
	   push ecx
	   call DrawImageGroupGame
       mov eax,[esp]
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x1A3
	   push ecx
	   mov ecx,[eax+0x18]
	   add ecx,0xB7
	   push ecx
	   push 4612
	   push 0x19
	   push 0xFFFFFFFF
	   call DrawTextPetInfor
	   mov eax,[esp]
       xor ecx,ecx
	   mov cl,[eax+0x15]
       push ecx
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x1D2
	   push ecx
	   mov ecx,[eax+0x18]
	   add ecx,0xB7
	   push ecx
	   push 4613
	   push 0x19
	   push 0xFFFFFFFF
	   call DrawTextLevelBH
       jmp ProcessHienThiSkill3
	   ThanhVienBangHoi2:
       mov eax,[esp]
       xor ecx,ecx
	   mov cl,[eax+0x15]
       push ecx
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x18D
	   push ecx
	   mov ecx,[eax+0x18]
	   add ecx,0xB7
	   push ecx
	   push 4613
	   push 0x19
	   push 0xFFFFFFFF
	   call DrawTextLevelBH
	   //
       ProcessHienThiSkill3:
	   push 4
	   mov eax,[esp+0x4]
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x1AD
	   push ecx          // dia chi moi
	   mov ecx,[eax+0x18]
	   add ecx,0xFB
	   push ecx
	   mov ecx,[esp+0xC]
	   add ecx,0x20
	   push ecx
	   call DrawImageGroupGame
	   mov eax,[esp]
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x165
	   push ecx
	   mov ecx,[eax+0x18]
	   add ecx,0x10E
	   push ecx
	   push 4512
	   push 0x19
	   push 0xFFFFFFFF
	   call DrawTextPetInfor
       xor eax,eax
	   mov al,[0x1107258+0x83AA]
	   cmp eax,0x3
	   jnz ThanhVienBangHoi3
       push 105
	   mov eax,[esp+0x4]
	   mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x1DA
	   push ecx          // dia chi moi
	   mov ecx,[eax+0x18]
	   add ecx,0x100
	   push ecx
	   mov ecx,[esp+0xC]
	   add ecx,0x20
	   push ecx
	   call DrawImageGroupGame
       mov eax,[esp]
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x1A3
	   push ecx
	   mov ecx,[eax+0x18]
	   add ecx,0xF2
	   push ecx
	   push 4612
	   push 0x19
	   push 0xFFFFFFFF
	   call DrawTextPetInfor
	   mov eax,[esp]
	   xor ecx,ecx
	   mov cl,[eax+0x16]
	   push ecx
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x1D2
	   push ecx
	   mov ecx,[eax+0x18]
	   add ecx,0xF2
	   push ecx
	   push 4613
	   push 0x19
	   push 0xFFFFFFFF
	   call DrawTextLevelBH
       jmp ProcessHienThiSkill4
	   ThanhVienBangHoi3:
       mov eax,[esp]
	   xor ecx,ecx
	   mov cl,[eax+0x16]
	   push ecx
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x18D
	   push ecx
	   mov ecx,[eax+0x18]
	   add ecx,0xF2
	   push ecx
	   push 4613
	   push 0x19
	   push 0xFFFFFFFF
	   call DrawTextLevelBH
	   //
       ProcessHienThiSkill4:
	   push 5
	   mov eax,[esp+0x4]
	   mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x1AD
	   push ecx          // dia chi moi
	   mov ecx,[eax+0x18]
	   add ecx,0x136
	   push ecx
	   mov ecx,[esp+0xC]
	   add ecx,0x20
	   push ecx
	   call DrawImageGroupGame
	   mov eax,[esp]
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x165
	   push ecx
	   mov ecx,[eax+0x18]
	   add ecx,0x149
	   push ecx
	   push 4513
	   push 0x19
	   push 0xFFFFFFFF
	   call DrawTextPetInfor
       xor eax,eax
	   mov al,[0x1107258+0x83AA]
	   cmp eax,0x3
	   jnz ThanhVienBangHoi4
       push 105
	   mov eax,[esp+0x4]
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x1DA
	   push ecx          // dia chi moi
	   mov ecx,[eax+0x18]
	   add ecx,0x13B
	   push ecx
	   mov ecx,[esp+0xC]
	   add ecx,0x20
	   push ecx
	   call DrawImageGroupGame
       mov eax,[esp]
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x1A3
	   push ecx
	   mov ecx,[eax+0x18]
	   add ecx,0x12D
	   push ecx
	   push 4612
	   push 0x19
	   push 0xFFFFFFFF
	   call DrawTextPetInfor
	   mov eax,[esp]
       xor ecx,ecx
	   mov cl,[eax+0x17]
       push ecx
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x1D2
	   push ecx
	   mov ecx,[eax+0x18]
	   add ecx,0x12D
	   push ecx
	   push 4613
	   push 0x19
	   push 0xFFFFFFFF
	   call DrawTextLevelBH
       jmp ProcessHienThiSkill5
	   ThanhVienBangHoi4:
       mov eax,[esp]
       xor ecx,ecx
	   mov cl,[eax+0x17]
       push ecx
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x18D
	   push ecx
	   mov ecx,[eax+0x18]
	   add ecx,0x12D
	   push ecx
	   push 4613
	   push 0x19
	   push 0xFFFFFFFF
	   call DrawTextLevelBH
	   //
       ProcessHienThiSkill5:
	   push 6
	   mov eax,[esp+0x4]
	   mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x1AD
	   push ecx          // dia chi moi
	   mov ecx,[eax+0x18]
	   add ecx,0x171
	   push ecx
	   mov ecx,[esp+0xC]
	   add ecx,0x20
	   push ecx
	   call DrawImageGroupGame
	   mov eax,[esp]
	   mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x165
	   push ecx
	   mov ecx,[eax+0x18]
	   add ecx,0x184
	   push ecx
	   push 4514
	   push 0x19
	   push 0xFFFFFFFF
	   call DrawTextPetInfor
       xor eax,eax
	   mov al,[0x1107258+0x83AA]
	   cmp eax,0x3
	   jnz ThanhVienBangHoi5
       push 105
	   mov eax,[esp+0x4]
	   mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x1DA
	   push ecx          // dia chi moi
	   mov ecx,[eax+0x18]
	   add ecx,0x176
	   push ecx
	   mov ecx,[esp+0xC]
	   add ecx,0x20
	   push ecx
	   call DrawImageGroupGame
	   mov eax,[esp]
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x1A3
	   push ecx
	   mov ecx,[eax+0x18]
	   add ecx,0x168
	   push ecx
	   push 4612
	   push 0x19
	   push 0xFFFFFFFF
	   call DrawTextPetInfor
	   mov eax,[esp]
       xor ecx,ecx
	   mov cl,[eax+0x18]
	   push ecx
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x1D2
	   push ecx
	   mov ecx,[eax+0x18]
	   add ecx,0x168
	   push ecx
	   push 4613
	   push 0x19
	   push 0xFFFFFFFF
	   call DrawTextLevelBH
       jmp ProcessThanhVienBangHoi5
	   ThanhVienBangHoi5:
       mov eax,[esp]
       xor ecx,ecx
	   mov cl,[eax+0x18]
	   push ecx
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x18D
	   push ecx
	   mov ecx,[eax+0x18]
	   add ecx,0x168
	   push ecx
	   push 4613
	   push 0x19
	   push 0xFFFFFFFF
	   call DrawTextLevelBH
	   //
       ProcessThanhVienBangHoi5:
	   push 7
	   mov eax,[esp+0x4]
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x259
	   push ecx          // dia chi moi
	   mov ecx,[eax+0x18]
	   add ecx,0x85
	   push ecx
	   mov ecx,[esp+0xC]
	   add ecx,0x20
	   push ecx
	   call DrawImageGroupGame
	   mov eax,[esp]
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x211
	   push ecx
	   mov ecx,[eax+0x18]
	   add ecx,0x98
	   push ecx
	   push 4515
	   push 0x19
	   push 0xFFFFFFFF
	   call DrawTextPetInfor
       xor eax,eax
	   mov al,[0x1107258+0x83AA]
	   cmp eax,0x3
	   jnz ThanhVienBangHoi6
       push 105
	   mov eax,[esp+0x4]
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x286
	   push ecx          // dia chi moi
	   mov ecx,[eax+0x18]
	   add ecx,0x8A
	   push ecx
	   mov ecx,[esp+0xC]
	   add ecx,0x20
	   push ecx
	   call DrawImageGroupGame
       mov eax,[esp]
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x250
	   push ecx
	   mov ecx,[eax+0x18]
	   add ecx,0x7C
	   push ecx
	   push 4612
	   push 0x19
	   push 0xFFFFFFFF
	   call DrawTextPetInfor
	   mov eax,[esp]
	   xor ecx,ecx
	   mov cl,[eax+0x19]
	   push ecx
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x27F
	   push ecx
	   mov ecx,[eax+0x18]
	   add ecx,0x7D
	   push ecx
	   push 4613
	   push 0x19
	   push 0xFFFFFFFF
	   call DrawTextLevelBH
       jmp ProcessThanhVienBangHoi6
	   ThanhVienBangHoi6:
       mov eax,[esp]
	   xor ecx,ecx
	   mov cl,[eax+0x19]
	   push ecx
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x23A
	   push ecx
	   mov ecx,[eax+0x18]
	   add ecx,0x7D
	   push ecx
	   push 4613
	   push 0x19
	   push 0xFFFFFFFF
	   call DrawTextLevelBH
	   //
       ProcessThanhVienBangHoi6:
	   push 8
	   mov eax,[esp+0x4]
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x259
	   push ecx          // dia chi moi
	   mov ecx,[eax+0x18]
	   add ecx,0xC0
	   push ecx
	   mov ecx,[esp+0xC]
	   add ecx,0x20
	   push ecx
	   call DrawImageGroupGame
	   mov eax,[esp]
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x211
	   push ecx
	   mov ecx,[eax+0x18]
	   add ecx,0xD3
	   push ecx
	   push 4516
	   push 0x19
	   push 0xFFFFFFFF
	   call DrawTextPetInfor
       xor eax,eax
	   mov al,[0x1107258+0x83AA]
	   cmp eax,0x3
	   jnz ThanhVienBangHoi7
       push 105
	   mov eax,[esp+0x4]
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x286
	   push ecx          // dia chi moi
	   mov ecx,[eax+0x18]
	   add ecx,0xC5
	   push ecx
	   mov ecx,[esp+0xC]
	   add ecx,0x20
	   push ecx
	   call DrawImageGroupGame
	   mov eax,[esp]
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x24F
	   push ecx
	   mov ecx,[eax+0x18]
	   add ecx,0xB8
	   push ecx
	   push 4612
	   push 0x19
	   push 0xFFFFFFFF
	   call DrawTextPetInfor
	   mov eax,[esp]
       xor ecx,ecx
	   mov cl,[eax+0x1A]
	   push ecx
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x27F
	   push ecx
	   mov ecx,[eax+0x18]
	   add ecx,0xB7
	   push ecx
	   push 4613
	   push 0x19
	   push 0xFFFFFFFF
	   call DrawTextLevelBH
       jmp ProcessThanhVienBangHoi7
	   ThanhVienBangHoi7:
       mov eax,[esp]
       xor ecx,ecx
	   mov cl,[eax+0x1A]
	   push ecx
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x23A
	   push ecx
	   mov ecx,[eax+0x18]
	   add ecx,0xB7
	   push ecx
	   push 4613
	   push 0x19
	   push 0xFFFFFFFF
	   call DrawTextLevelBH
	   //
       ProcessThanhVienBangHoi7:
	   push 9
	   mov eax,[esp+0x4]
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x259
	   push ecx          // dia chi moi
	   mov ecx,[eax+0x18]
	   add ecx,0xFB
	   push ecx
	   mov ecx,[esp+0xC]
	   add ecx,0x20
	   push ecx
	   call DrawImageGroupGame
	   mov eax,[esp]
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x211
	   push ecx
	   mov ecx,[eax+0x18]
	   add ecx,0x10E
	   push ecx
	   push 4518
	   push 0x19
	   push 0xFFFFFFFF
	   call DrawTextPetInfor
       xor eax,eax
	   mov al,[0x1107258+0x83AA]
	   cmp eax,0x3
	   jnz ThanhVienBangHoi8
       push 105
	   mov eax,[esp+0x4]
	   mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x286
	   push ecx          // dia chi moi
	   mov ecx,[eax+0x18]
	   add ecx,0x100
	   push ecx
	   mov ecx,[esp+0xC]
	   add ecx,0x20
	   push ecx
	   call DrawImageGroupGame
	   mov eax,[esp]
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x250
	   push ecx
	   mov ecx,[eax+0x18]
	   add ecx,0xF1
	   push ecx
	   push 4612
	   push 0x19
	   push 0xFFFFFFFF
	   call DrawTextPetInfor
	   mov eax,[esp]
       xor ecx,ecx
	   mov cl,[eax+0x1B]
	   push ecx
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x27F
	   push ecx
	   mov ecx,[eax+0x18]
	   add ecx,0xF2
	   push ecx
	   push 4613
	   push 0x19
	   push 0xFFFFFFFF
	   call DrawTextLevelBH
       jmp ProcessThanhVienBangHoi8
	   ThanhVienBangHoi8:
       mov eax,[esp]
       xor ecx,ecx
	   mov cl,[eax+0x1B]
	   push ecx
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x23A
	   push ecx
	   mov ecx,[eax+0x18]
	   add ecx,0xF2
	   push ecx
	   push 4613
	   push 0x19
	   push 0xFFFFFFFF
	   call DrawTextLevelBH
	   //
       ProcessThanhVienBangHoi8:
	   push 10
	   mov eax,[esp+0x4]
	   mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x259
	   push ecx          // dia chi moi
	   mov ecx,[eax+0x18]
	   add ecx,0x136
	   push ecx
	   mov ecx,[esp+0xC]
	   add ecx,0x20
	   push ecx
	   call DrawImageGroupGame
	   mov eax,[esp]
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x211
	   push ecx
	   mov ecx,[eax+0x18]
	   add ecx,0x149
	   push ecx
	   push 4506
	   push 0x19
	   push 0xFFFFFFFF
	   call DrawTextPetInfor
       xor eax,eax
	   mov al,[0x1107258+0x83AA]
	   cmp eax,0x3
	   jnz ThanhVienBangHoi9
       push 105
	   mov eax,[esp+0x4]
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x286
	   push ecx          // dia chi moi
	   mov ecx,[eax+0x18]
	   add ecx,0x13B
	   push ecx
	   mov ecx,[esp+0xC]
	   add ecx,0x20
	   push ecx
	   call DrawImageGroupGame
	   mov eax,[esp]
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x250
	   push ecx
	   mov ecx,[eax+0x18]
	   add ecx,0x12C
	   push ecx
	   push 4612
	   push 0x19
	   push 0xFFFFFFFF
	   call DrawTextPetInfor
	   mov eax,[esp]
	   xor ecx,ecx
	   mov cl,[eax+0x1C]
	   push ecx
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x27F
	   push ecx
	   mov ecx,[eax+0x18]
	   add ecx,0x12D
	   push ecx
	   push 4613
	   push 0x19
	   push 0xFFFFFFFF
	   call DrawTextLevelBH
       jmp ProcessThanhVienBangHoi9
	   ThanhVienBangHoi9:
       mov eax,[esp]
	   xor ecx,ecx
	   mov cl,[eax+0x1C]
	   push ecx
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x23A
	   push ecx
	   mov ecx,[eax+0x18]
	   add ecx,0x12D
	   push ecx
	   push 4613
	   push 0x19
	   push 0xFFFFFFFF
	   call DrawTextLevelBH
	   ProcessThanhVienBangHoi9:
       // Draw Trang 1 / 2
	  /* push 105
	   mov eax,[esp+0x4]
	   mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x285
	   push ecx          // dia chi moi
	   mov ecx,[eax+0x18]
	   add ecx,0x198
	   push ecx
	   mov ecx,[esp+0xC]
	   add ecx,0x20
	   push ecx
	   call DrawImageGroupGame
	   mov eax,[esp]
	   mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x245
	   push ecx
	   mov ecx,[eax+0x18]
	   add ecx,0x18A
	   push ecx
	   push 4605
	   push 0x19
	   push 0xFFFFFFFF
	   call DrawTextPetInfor

       push 105
	   mov eax,[esp+0x4]
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x2C5
	   push ecx          // dia chi moi
	   mov ecx,[eax+0x18]
	   add ecx,0x198
	   push ecx
	   mov ecx,[esp+0xC]
	   add ecx,0x20
	   push ecx
	   call DrawImageGroupGame
	   mov eax,[esp]
       mov eax,[eax]
	   mov ecx,[eax+0x14]
	   add ecx,0x283
	   push ecx
	   mov ecx,[eax+0x18]
	   add ecx,0x18A
	   push ecx
	   push 4606
	   push 0x19
	   push 0xFFFFFFFF
	   call DrawTextPetInfor */
       //
	   Default:
	   pop eax
       mov eax,[ebp+0x1572C]
	   push 0x004EBE68
	   ret

	   DrawImageGroupGame:
	   mov ecx,[esp+0x10]
	   cmp ecx,111
	   jnz DrawNen1
	   //Draw Nen
       push 4580
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
       push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
       mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0x00
	   mov  DWORD PTR SS : [ecx + 0xA0] , 0x329
	   mov  DWORD PTR SS : [ecx + 0x98] , 0x1C5
	   mov  DWORD PTR SS : [ecx + 0xA4] , 0x212
	   jmp ProceesShowImageInFormPet

       DrawNen1:
	   cmp ecx,112
	   jnz DrawNen2
	   //Draw Nen
       push 4546
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
       push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
       mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0x00
	   mov  DWORD PTR SS : [ecx + 0xA0] , 0xB1
	   mov  DWORD PTR SS : [ecx + 0x98] , 0x00
	   mov  DWORD PTR SS : [ecx + 0xA4] , 0xD0
	   jmp ProceesShowImageInFormPet

       DrawNen2:
	   cmp ecx,113
	   jnz DrawNen3
	   //Draw Nen
       push 4546
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
       push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
       mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0x00
	   mov  DWORD PTR SS : [ecx + 0xA0] , 0xB6
	   mov  DWORD PTR SS : [ecx + 0x98] , 0x8
	   mov  DWORD PTR SS : [ecx + 0xA4] , 0xD2
	   jmp ProceesShowImageInFormPet

       DrawNen3:
	   cmp ecx,114
	   jnz KiemTraGiaTri2
	   //Draw Nen
	   push 4546
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
       push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
       mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0x00
	   mov  DWORD PTR SS : [ecx + 0xA0] , 0xB6
	   mov  DWORD PTR SS : [ecx + 0x98] , 0x08
	   mov  DWORD PTR SS : [ecx + 0xA4] , 0xD0
	   jmp ProceesShowImageInFormPet

	   KiemTraGiaTri2:
	   cmp ecx,2
	   jnz KiemTraGiaTri3
	   push 4582
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
       push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
       mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0xE0
	   mov  DWORD PTR SS : [ecx + 0xA0] , 0x20
	   mov  DWORD PTR SS : [ecx + 0x98] , 0x00
	   mov  DWORD PTR SS : [ecx + 0xA4] , 0x100
	   jmp ProceesShowImageInFormPet

	   KiemTraGiaTri3:
	   cmp ecx,3
	   jnz KiemTraGiaTri4
	   push 4582
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
       push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
       mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0xE0
	   mov  DWORD PTR SS : [ecx + 0xA0] , 0x40
	   mov  DWORD PTR SS : [ecx + 0x98] , 0x20
	   mov  DWORD PTR SS : [ecx + 0xA4] , 0x100
	   jmp ProceesShowImageInFormPet

	   KiemTraGiaTri4:
	   cmp ecx,4
	   jnz KiemTraGiaTri5
	   push 4582
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
       push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
       mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0xE0
	   mov  DWORD PTR SS : [ecx + 0xA0] , 0x60
	   mov  DWORD PTR SS : [ecx + 0x98] , 0x40
	   mov  DWORD PTR SS : [ecx + 0xA4] , 0x100
	   jmp ProceesShowImageInFormPet

	   KiemTraGiaTri5:
	   cmp ecx,5
	   jnz KiemTraGiaTri6
	   push 4582
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
       push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
       mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0xE0
	   mov  DWORD PTR SS : [ecx + 0xA0] , 0x80
	   mov  DWORD PTR SS : [ecx + 0x98] , 0x60
	   mov  DWORD PTR SS : [ecx + 0xA4] , 0x100
	   jmp ProceesShowImageInFormPet

	   KiemTraGiaTri6:
	   cmp ecx,6
	   jnz KiemTraGiaTri7
       push 4582
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
       push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
       mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0xE0
	   mov  DWORD PTR SS : [ecx + 0xA0] , 0xA0
	   mov  DWORD PTR SS : [ecx + 0x98] , 0x80
	   mov  DWORD PTR SS : [ecx + 0xA4] , 0x100
	   jmp ProceesShowImageInFormPet

	   KiemTraGiaTri7:
	   cmp ecx,7
	   jnz KiemTraGiaTri8
       push 4582
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
       push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
       mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0xE0
	   mov  DWORD PTR SS : [ecx + 0xA0] , 0xC0
	   mov  DWORD PTR SS : [ecx + 0x98] , 0xA0
	   mov  DWORD PTR SS : [ecx + 0xA4] , 0x100
	   jmp ProceesShowImageInFormPet

	   KiemTraGiaTri8:
	   cmp ecx,8
	   jnz KiemTraGiaTri9
       push 4582
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
       push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
	   mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0xC0
	   mov  DWORD PTR SS : [ecx + 0xA0] , 0xC0
	   mov  DWORD PTR SS : [ecx + 0x98] , 0xA0
	   mov  DWORD PTR SS : [ecx + 0xA4] , 0xE0
	   jmp ProceesShowImageInFormPet

	   KiemTraGiaTri9:
	   cmp ecx,9
	   jnz KiemTraGiaTri10
       push 4582
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
       push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
	   mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0xC0
	   mov  DWORD PTR SS : [ecx + 0xA0] , 0xA0
	   mov  DWORD PTR SS : [ecx + 0x98] , 0x80
	   mov  DWORD PTR SS : [ecx + 0xA4] , 0xE0
	   jmp ProceesShowImageInFormPet

	   KiemTraGiaTri10:
	   cmp ecx,10
	   jnz KiemTraGiaTri11
       push 4582
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
       push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
	   mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0xC0
	   mov  DWORD PTR SS : [ecx + 0xA0] , 0x80
	   mov  DWORD PTR SS : [ecx + 0x98] , 0x60
	   mov  DWORD PTR SS : [ecx + 0xA4] , 0xE0
	   jmp ProceesShowImageInFormPet

	   KiemTraGiaTri11:
	   cmp ecx,105
	   jnz OtherImage
       push 4546
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
       push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
	   mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0x80
	   mov  DWORD PTR SS : [ecx + 0xA0] , 0xF6
	   mov  DWORD PTR SS : [ecx + 0x98] , 0xBC
	   mov  DWORD PTR SS : [ecx + 0xA4] , 0x96
	   jmp ProceesShowImageInFormPet

	   OtherImage:
       mov  DWORD PTR SS : [ecx + 0x70] , 25
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0x4F
	   mov  DWORD PTR SS : [ecx + 0xA0] , 0x160
	   mov  DWORD PTR SS : [ecx + 0x98] , 0x00
	   mov  DWORD PTR SS : [ecx + 0xA4] , 0x208

	   ProceesShowImageInFormPet:
	   push 0x00000000
	   push 0x0089E914
	   mov ecx,[esp+0x10]
	   mov edx,[esp+0x14]
	   push ecx
	   push edx
	   mov ecx, [esp+0x14]
	   mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
	   call eax
	   mov ecx,[esp+0x4]
	   push 0x1732CC8
	   mov eax, 0x7B9850
	   call eax //Draw1
	   ret 0x10

       DrawTextPetInfor:
	   mov ecx,DWORD PTR SS:[0x01733AC4]
	   mov eax,[esp+0x4]
	   push eax
	   mov edx,[ecx]
	   call dword ptr [edx+0xC]
	   push 0x3
	   push 0x3F800000
	   push 0x00000141
	   mov eax,[esp+0x18]
	   push eax
	   mov eax,[esp+0x18]
	   push eax
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   mov ecx,[esp+0x1C]
	   mov edx,[esp+0x20]
	   push eax
	   push ecx
	   mov ecx,[0x01733AC4]
	   push edx
	   mov eax,DWORD PTR SS:[0x01733AC4]
	   mov eax,[eax]
	   call dword ptr [eax+0x18]
	   mov ecx,[0x01733AC4]
	   mov eax,[ecx]
	   call dword ptr [eax+0x38]
	   ret 0x14


	   DrawTextEXPAlly:
       mov ecx,DWORD PTR SS:[0x01733AC4]
	   mov eax,[esp+0x4]
	   push eax
	   mov edx,[ecx]
	   call dword ptr [edx+0xC]
	   push 0x3
	   push 0x3F800000
	   push 0x00000141
	   //
	   mov eax,[esp+0x28]
       push eax
	   mov eax,[esp+0x28]
       push eax
	   mov eax,[esp+0x20]
	   push eax
	   push 0x19
	   mov ecx,0x1733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov eax,[esp+0x38]
	   lea eax,[eax+0x100]
	   push 0x100
	   push eax
	   mov eax,0x0085C538
	   call dword ptr [eax]
	   add esp,0x14
	   mov eax,[esp+0x2C]
	   lea eax,[eax+0x100]
       //
	   mov ecx,[esp+0x1C]
	   mov edx,[esp+0x20]
	   push eax
	   push ecx
	   mov ecx,[0x01733AC4]
	   push edx
	   mov eax,DWORD PTR SS:[0x01733AC4]
	   mov eax,[eax]
	   call dword ptr [eax+0x18]
	   mov ecx,[0x01733AC4]
	   mov eax,[ecx]
	   call dword ptr [eax+0x38]
	   ret 0x1C

	   DrawTextLevelString:
       mov ecx,DWORD PTR SS:[0x01733AC4]
	   mov eax,[esp+0x4]
	   push eax
	   mov edx,[ecx]
	   call dword ptr [edx+0xC]
	   push 0x3
	   push 0x3F800000
	   push 0x00000141
	   //
	   mov eax,[esp+0x24]
	   cmp eax,0x1
	   jnz KiemTraTetMapThu2
       push 4531
	   push 0x19
	   mov ecx,0x1733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
       jmp ProcessContinueShowMaps
	   KiemTraTetMapThu2:
	   cmp eax,0x2
	   jnz KiemTraTetMapThu3
	   push 4532
	   push 0x19
	   mov ecx,0x1733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
       jmp ProcessContinueShowMaps
	   KiemTraTetMapThu3:
	   cmp eax,0x3
	   jnz KiemTraTetMapThu4
	   push 4533
	   push 0x19
	   mov ecx,0x1733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
       jmp ProcessContinueShowMaps
	   KiemTraTetMapThu4:
	   cmp eax,0x4
	   jnz KiemTraTetMapThu5
	   push 4534
	   push 0x19
	   mov ecx,0x1733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   jmp ProcessContinueShowMaps

	   KiemTraTetMapThu5:
	   cmp eax,0x5
	   jnz KiemTraTetMapThu6
	   push 4535
	   push 0x19
	   mov ecx,0x1733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   jmp ProcessContinueShowMaps

       KiemTraTetMapThu6:
	   cmp eax,0x6
	   jnz ChuaCoMapsNao
	   push 4536
	   push 0x19
	   mov ecx,0x1733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   jmp ProcessContinueShowMaps

	   ChuaCoMapsNao:
       push 4584
	   push 0x19
	   mov ecx,0x1733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax

       ProcessContinueShowMaps:
	   mov eax,[esp+0x1C]
	   push eax
	   push 0x19
	   mov ecx,0x1733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov eax,[esp+0x30]
	   lea eax,[eax+0x100]
	   push 0x100
	   push eax
	   mov eax,0x0085C538
	   call dword ptr [eax]
	   add esp,0x10
	   mov eax,[esp+0x28]
	   lea eax,[eax+0x100]
       //
	   mov ecx,[esp+0x1C]
	   mov edx,[esp+0x20]
	   push eax
	   push ecx
	   mov ecx,[0x01733AC4]
	   push edx
	   mov eax,DWORD PTR SS:[0x01733AC4]
	   mov eax,[eax]
	   call dword ptr [eax+0x18]
	   mov ecx,[0x01733AC4]
	   mov eax,[ecx]
	   call dword ptr [eax+0x38]
	   ret 0x18

	   DrawTextLevelBH:
	   mov eax,[esp+0x10]
	   cmp eax,0xFFFFFFFF
       jz KhongCoGiaTriThem
	   mov ecx,DWORD PTR SS:[0x01733AC4]
	   mov eax,[esp+0x4]
	   push eax
	   mov edx,[ecx]
	   call dword ptr [edx+0xC]
	   push 0x3
	   push 0x3F800000
	   push 0x00000141
	   //
	   mov eax,[esp+0x24]
	   push eax
	   mov eax,[esp+0x1C]
	   push eax
	   push 0x19
	   mov ecx,0x1733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov eax,[esp+0x30]
	   lea eax,[eax+0x100]
	   push 0x100
	   push eax
	   mov eax,0x0085C538
	   call dword ptr [eax]
	   add esp,0x10
	   mov eax,[esp+0x28]
	   lea eax,[eax+0x100]
       //
	   mov ecx,[esp+0x1C]
	   mov edx,[esp+0x20]
	   push eax
	   push ecx
	   mov ecx,[0x01733AC4]
	   push edx
	   mov eax,DWORD PTR SS:[0x01733AC4]
	   mov eax,[eax]
	   call dword ptr [eax+0x18]
	   mov ecx,[0x01733AC4]
	   mov eax,[ecx]
	   call dword ptr [eax+0x38]
	   ret 0x18

	   KhongCoGiaTriThem:
       mov ecx,DWORD PTR SS:[0x01733AC4]
	   mov eax,[esp+0x4]
	   push eax
	   mov edx,[ecx]
	   call dword ptr [edx+0xC]
	   push 0x3
	   push 0x3F800000
	   push 0x00000141
	   mov eax,[esp+0x18]
	   push eax
	   mov eax,[esp+0x18]
	   push eax
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   mov ecx,[esp+0x1C]
	   mov edx,[esp+0x20]
	   push eax
	   push ecx
	   mov ecx,[0x01733AC4]
	   push edx
	   mov eax,DWORD PTR SS:[0x01733AC4]
	   mov eax,[eax]
	   call dword ptr [eax+0x18]
	   mov ecx,[0x01733AC4]
	   mov eax,[ecx]
	   call dword ptr [eax+0x38]
	   ret 0x18

	   DrawTextDiemEXP:
	   mov ecx,[esp+0x10]
	   test ecx,ecx
       jz KhongCoGiaTriNgoai
	   mov ecx,DWORD PTR SS:[0x01733AC4]
	   mov eax,[esp+0x4]
	   push eax
	   mov edx,[ecx]
	   call dword ptr [edx+0xC]
	   push 0x3
	   push 0x3F800000
	   push 0x00000141
	   mov eax,[esp+0x18]
	   push eax
	   mov eax,[esp+0x18]
	   push eax
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   //


	   //
	   mov ecx,[esp+0x1C]
	   mov edx,[esp+0x20]
	   push eax
	   push ecx
	   mov ecx,[0x01733AC4]
	   push edx
	   mov eax,DWORD PTR SS:[0x01733AC4]
	   mov eax,[eax]
	   call dword ptr [eax+0x18]
	   mov ecx,[0x01733AC4]
	   mov eax,[ecx]
	   call dword ptr [eax+0x38]
	   ret 0x18

	   KhongCoGiaTriNgoai:
       mov ecx,DWORD PTR SS:[0x01733AC4]
	   mov eax,[esp+0x4]
	   push eax
	   mov edx,[ecx]
	   call dword ptr [edx+0xC]
	   push 0x3
	   push 0x3F800000
	   push 0x00000141
	   mov eax,[esp+0x18]
	   push eax
	   mov eax,[esp+0x18]
	   push eax
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   mov ecx,[esp+0x1C]
	   mov edx,[esp+0x20]
	   push eax
	   push ecx
	   mov ecx,[0x01733AC4]
	   push edx
	   mov eax,DWORD PTR SS:[0x01733AC4]
	   mov eax,[eax]
	   call dword ptr [eax+0x18]
	   mov ecx,[0x01733AC4]
	   mov eax,[ecx]
	   call dword ptr [eax+0x38]
	   ret 0x18

       DrawTextDiemCongHien:
	   mov ecx,DWORD PTR SS:[0x01733AC4]
	   mov eax,[esp+0x4]
	   push eax
	   mov edx,[ecx]
	   call dword ptr [edx+0xC]
	   push 0x3
	   push 0x3F800000
	   push 0x00000141
	   mov eax,[esp+0x18]
	   push eax
	   mov eax,[esp+0x18]
	   push eax
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   mov ecx,[esp+0x1C]
	   mov edx,[esp+0x20]
	   push eax
	   push ecx
	   mov ecx,[0x01733AC4]
	   push edx
	   mov eax,DWORD PTR SS:[0x01733AC4]
	   mov eax,[eax]
	   call dword ptr [eax+0x18]
	   mov ecx,[0x01733AC4]
	   mov eax,[ecx]
	   call dword ptr [eax+0x38]
	   ret 0x14

       DrawTextMapsChiem:
	   mov ecx,DWORD PTR SS:[0x01733AC4]
	   mov eax,[esp+0x4]
	   push eax
	   mov edx,[ecx]
	   call dword ptr [edx+0xC]
	   push 0x3
	   push 0x3F800000
	   push 0x00000141
	   mov eax,[esp+0x18]
	   push eax
	   mov eax,[esp+0x18]
	   push eax
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   mov ecx,[esp+0x1C]
	   mov edx,[esp+0x20]
	   push eax
	   push ecx
	   mov ecx,[0x01733AC4]
	   push edx
	   mov eax,DWORD PTR SS:[0x01733AC4]
	   mov eax,[eax]
	   call dword ptr [eax+0x18]
	   mov ecx,[0x01733AC4]
	   mov eax,[ecx]
	   call dword ptr [eax+0x38]
	   ret 0x14

       DrawTextLevelSkill:
	   mov ecx,DWORD PTR SS:[0x01733AC4]
	   mov eax,[esp+0x4]
	   push eax
	   mov edx,[ecx]
	   call dword ptr [edx+0xC]
	   push 0x3
	   push 0x3F800000
	   push 0x00000141
	   mov eax,[esp+0x18]
	   push eax
	   mov eax,[esp+0x18]
	   push eax
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   mov ecx,[esp+0x1C]
	   mov edx,[esp+0x20]
	   push eax
	   push ecx
	   mov ecx,[0x01733AC4]
	   push edx
	   mov eax,DWORD PTR SS:[0x01733AC4]
	   mov eax,[eax]
	   call dword ptr [eax+0x18]
	   mov ecx,[0x01733AC4]
	   mov eax,[ecx]
	   call dword ptr [eax+0x38]
	   ret 0x14

	   DrawOVP:
	   push 0xAAFFFFFF
	   push 0x0
	   mov ecx,[esp+0x18]
	   mov eax,[esp+0x14]
	   push ecx
	   push eax
	   mov edx,[esp+0x18]
	   add edx,0x1
	   sub ecx,edx
	   push ecx
	   mov edx,[esp+0x18]
	   add edx,0x1
	   sub eax,edx
	   push eax
	   fild    dword ptr [esp+0xC]
	   fstp    dword ptr [esp+0xC]
	   fild    dword ptr [esp+0x8]
	   fstp    dword ptr [esp+0x8]
	   fild    dword ptr [esp+0x4]
	   fstp    dword ptr [esp+0x4]
	   fild    dword ptr [esp]
	   fstp    dword ptr [esp]
	   mov eax,0x007C7880
	   call eax
	   add esp,0x18
	   push 0xBF000000
	   mov ecx,[esp+0x14]
	   mov eax,[esp+0x10]
	   push ecx
	   push eax
	   mov edx,[esp+0x14]
	   sub ecx,edx
	   push ecx
	   mov edx,[esp+0x14]
	   sub eax,edx
	   push eax
	   fild    dword ptr [esp+0xC]
	   fstp    dword ptr [esp+0xC]
	   fild    dword ptr [esp+0x8]
	   fstp    dword ptr [esp+0x8]
	   fild    dword ptr [esp+0x4]
	   fstp    dword ptr [esp+0x4]
	   fild    dword ptr [esp]
	   fstp    dword ptr [esp]
	   mov eax,0x007C7BB0
	   call    eax
	   add esp,0x14
	   ret 0x10
   }
}
__declspec(naked) void LoadInfoAllyGroup()//005EA32F
{
	  __asm {
		nop
		nop
		nop
		nop
		nop
		add eax,0x20
		pushad
        mov ebp, 0x0
        LoopLoad2:
		mov ecx, 0x010CC088
            mov edi, ebp
			mov ecx, [ecx + edi]
			mov[eax + edi], ecx
            add ebp, 0x4
            cmp ebp, 0xB8
			jnz LoopLoad2
		popad
		lea ecx,[esp+0x54]
		mov DWORD PTR [esp+0x00001568],0xFFFFFFFF
		push 0x005EA33E
		ret
	}
}
__declspec(naked) void DrawInfoSuKienCTC()//0059484E
{
	  __asm {
		nop
		nop
		nop
		nop
		nop
        pushad
		xor ecx,ecx
		mov cl,[eax]
		test ecx,ecx
		jz Default
		add eax,0x300
		mov ecx,[eax]
		test ecx,ecx
		jnz LoadInforCTC
		pushad
		mov edi, 0x0
		LoopLoad2:
		mov ecx, 0x010CC088
		mov ecx, [ecx + edi]
		mov [eax + edi], ecx
		add edi, 0x4
		cmp edi, 0xB8
		jnz LoopLoad2
		popad
		//
		LoadInforCTC:
		//
		xor ecx,ecx
		mov cl,[0x1107258+0x47C]
		cmp ecx,20
        jnz Default
		//
		push 1
		mov ecx,DWORD PTR SS:[0x01733AD0]
		mov eax,0x007D7FE0
		call eax
		mov edx,[eax+0x2C]
		sub edx,0x80
		push edx
		push 0x0
		mov ecx,[esp+0x28]
		add ecx,0x300
		push ecx
		call LoadImageCTC
		//
		push 0
		mov ecx,DWORD PTR SS:[0x01733AD0]
		mov eax,0x007D7FE0
		call eax
		mov edx,[eax+0x2C]
		sub edx,0x74
		push edx
		mov edx,0xD0
        push edx
		mov ecx,[esp+0x28]
		add ecx,0x300
		push ecx
		call LoadImageCTC
        mov ecx,DWORD PTR SS:[0x01733AD0]
		mov eax,0x007D7FE0
		call eax
		mov ecx,[eax+0x2C]
		sub ecx,0x1B
        mov eax,0xBC
		push eax
		push ecx
		mov ecx,0xAA
		push ecx
		mov eax,0xA0
		push eax
		call DrawOVP
		//
		mov eax,[esp+0x1C]
		push eax
        call ShowTextInfoCTC
		//
		mov eax,[esp+0x1C]
        mov eax,[eax+0x4]
        mov ecx,DWORD PTR [0x01733B04]
		sub eax,ecx
		mov eax, 0x10624DD3
		mul ecx
		mov ecx, edx
		shr ecx, 0x6
		mov eax, ecx
		xor edx, edx
		mov ebp, 0x3C
		div ebp
		mov eax, 0x88888889
		push edx
		mul ecx
		shr edx, 0x5
		push edx
		push 0x12D1
		push 0x19
		mov ecx,0x1733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov eax,[esp+0x28]
		lea eax,[eax+0x8]
		push 0x60
		push eax
		mov eax,0x0085C538
		call dword ptr [eax]
		add esp,0x14
        push 0x3
		push 0x3F800000
		push 0x00000141
		mov eax,[esp+0x28]
        add eax,8
		push eax
		mov eax,0xBE
		push eax    // Chieu Cao
        mov ecx,DWORD PTR SS:[0x01733AD0]
		mov edx,[ecx+0x240]
        sub edx,144
		push edx    // Chieu Ngan
        mov ecx,[0x01733AC4]
		mov eax,DWORD PTR SS:[0x01733AC4]
		mov eax,[eax]
		call dword ptr [eax+0x18]
		mov ecx,[0x01733AC4]
		mov eax,[ecx]
		call dword ptr [eax+0x38]
		//
        popad
		//
        jmp Adr005961E0
		Default:
        popad
		cmp [esi+0x10],ebp
		je Adr005961E0
		push 0x00594857
        ret

		Adr005961E0:
		push 0x005961E0
		ret

	   LoadImageCTC:
       mov ecx,[esp+0x10]
	   cmp ecx,1
	   jnz OtherImage
	   push 4190
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
       push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
	   mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0x2E
	   mov  DWORD PTR SS : [ecx + 0xA0] , 0xBC
	   mov  DWORD PTR SS : [ecx + 0x98] , 0x00
	   mov  DWORD PTR SS : [ecx + 0xA4] , 0x5C
	   jmp ProceesShowImageInFormPet

	   OtherImage:
	   push 4190
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
       push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
	   mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0x00
	   mov  DWORD PTR SS : [ecx + 0xA0] , 0xA2
	   mov  DWORD PTR SS : [ecx + 0x98] , 0x00
	   mov  DWORD PTR SS : [ecx + 0xA4] , 0x2C

	   ProceesShowImageInFormPet:
	   push 0x00000000
	   push 0x0089E914
	   mov ecx,[esp+0x10]
	   mov edx,[esp+0x14]
	   push ecx
	   push edx
	   mov ecx, [esp+0x14]
	   mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
	   call eax
	   mov ecx,[esp+0x4]
	   push 0x1732CC8
	   mov eax, 0x7B9850
	   call eax //Draw1
	   ret 0x10

       DrawOVP:
	   push 0xAAFFFFFF
	   push 0x0
	   mov ecx,[esp+0x18]
	   mov eax,[esp+0x14]
	   push ecx
	   push eax
	   mov edx,[esp+0x18]
	   add edx,0x1
	   sub ecx,edx
	   push ecx
	   mov edx,[esp+0x18]
	   add edx,0x1
	   sub eax,edx
	   push eax
	   fild    dword ptr [esp+0xC]
	   fstp    dword ptr [esp+0xC]
	   fild    dword ptr [esp+0x8]
	   fstp    dword ptr [esp+0x8]
	   fild    dword ptr [esp+0x4]
	   fstp    dword ptr [esp+0x4]
	   fild    dword ptr [esp]
	   fstp    dword ptr [esp]
	   mov eax,0x007C7880
	   call eax
	   add esp,0x18
	   push 0xBF000000
	   mov ecx,[esp+0x14]
	   mov eax,[esp+0x10]
	   push ecx
	   push eax
	   mov edx,[esp+0x14]
	   sub ecx,edx
	   push ecx
	   mov edx,[esp+0x14]
	   sub eax,edx
	   push eax
	   fild    dword ptr [esp+0xC]
	   fstp    dword ptr [esp+0xC]
	   fild    dword ptr [esp+0x8]
	   fstp    dword ptr [esp+0x8]
	   fild    dword ptr [esp+0x4]
	   fstp    dword ptr [esp+0x4]
	   fild    dword ptr [esp]
	   fstp    dword ptr [esp]
	   mov eax,0x007C7BB0
	   call    eax
	   add esp,0x14
	   ret 0x10

       ShowTextInfoCTC:
		sub esp,0x4
		xor ecx,ecx
		mov [esp],ecx
        mov ecx,DWORD PTR SS:[0x01733AC4]
		mov eax,[esp+0x4]
		push 0xFFFFFFFF
		mov edx,[ecx]
		call dword ptr [edx+0xC]
		BackLoopCheckAll:
        mov eax,[esp+0x8]
		mov ecx,[esp]
		imul ecx,0x1D
		mov edx,[eax+ecx+0x100]
		test edx,edx
        jz ChuaCoGiaTri
		mov edx,[eax+ecx+0x100+0x19]
		push edx
		xor edx,edx
		mov dl,[eax+ecx+0x100+0x18]
		push edx
		lea edx,[eax+ecx+0x100]
		push edx
        push 5624
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov eax,[esp+0x18]
        add eax,8
		push eax
		mov eax,0x0085C564
		call dword ptr [eax]
		add esp,0x14
        push 0x3
		push 0x3F800000
		push 0x00000141
		mov eax,[esp+0x14]
        add eax,8
		push eax
		mov eax,[esp+0x10]
		imul eax,0x10
		add eax,0x15
		nop
		nop
		nop
        nop
		push eax    // Chieu Cao
        mov ecx,DWORD PTR SS:[0x01733AD0]
		mov edx,[ecx+0x240]
        sub edx,176
		push edx    // Chieu Ngan
        mov ecx,[0x01733AC4]
		mov eax,DWORD PTR SS:[0x01733AC4]
		mov eax,[eax]
		call dword ptr [eax+0x18]
		mov ecx,[0x01733AC4]
		mov eax,[ecx]
		call dword ptr [eax+0x38]
        //
		mov ecx,[esp]
		add ecx,1
		mov [esp],ecx
		cmp ecx,11
		jl BackLoopCheckAll
        //
        ChuaCoGiaTri:
		add esp,0x4
		ret 0x4
	}
}
__declspec(naked) void ChangeEncodeClient()//007B62A2
{
	  __asm {
		mov dl, [esp+0x8]
		mov eax,[esp]
		cmp eax,0x00696859
		jz Default
		cmp eax,0x0072BC1C
		jz Default
		sub esp,0x4
        xor edx,edx
		mov dl,[ecx]
		sub edx,1
		mov [esp],edx
		add ecx,1
        Adr007B62A2:
		xor eax,eax
		mov al,[ecx]
		mov edx,[esp]
		cmp eax,edx
        jz KhongMaHOa
		xor eax,edx
        KhongMaHOa:
		mov [ecx],al
        xor eax,eax
		mov al,[ecx+0x1]
		inc ecx
		test al, al
		jnz Adr007B62A2
		add esp,0x4
        push 0x007B62AE
		ret


		Default:
        Adr007B62A2Back:
        mov al,[ecx]
		mov dl, [esp+0x8]
        xor al,dl
        mov [ecx],al
        xor eax,eax
		mov al,[ecx+0x1]
        inc ecx
        test al, al
		jnz Adr007B62A2Back
        push 0x007B62AE
		ret
	}
}
__declspec(naked) void HienThiBuffBangHoi() // 0065FB9A
{
	  __asm {
		nop
		nop
		nop
		nop
		nop
		push eax
		sub esp,0x8
		xor ecx,ecx
		mov [esp],ecx
        mov [esp+0x4],ecx
        BackLoopCheckBuff:
        xor edx,edx
		mov ecx,[esp]
		mov eax,[esp+0x8]
		mov dl,[eax+0x14+ecx]
		test edx,edx
        jz ChuaNangDiem
		mov ecx,[esp]
        mov edx,[esp+0x4]
		push ecx
		cmp edx,4
		ja CanhHang
		jmp ProcessHienThiBuffCanhNang

		CanhHang:
		cmp edx,0x5
		jnz KiemTraGiaTriHang2
		mov edx,0
        jmp ProcessHienThiBuffCanhNang
		KiemTraGiaTriHang2:
		cmp edx,0x6
		jnz KiemTraGiaTriHang3
		mov edx,1
		jmp ProcessHienThiBuffCanhNang

		KiemTraGiaTriHang3:
		cmp edx,0x7
		jnz KiemTraGiaTriHang4
		mov edx,2
		jmp ProcessHienThiBuffCanhNang

		KiemTraGiaTriHang4:
		mov edx,3

		ProcessHienThiBuffCanhNang:
		imul edx,34
		add edx,0x50
		push edx
		mov ecx,[esp+0xC]
		cmp ecx,4
        ja XuongHang
        mov ecx,0x80
        jmp ProcessHienThiBuffAgain
		XuongHang:
		mov ecx,0xA2
		ProcessHienThiBuffAgain:
		push ecx
		mov ecx,[esp+0x14]
		add ecx,0x20
		push ecx
		call DrawBuffCurBH
		mov ecx,[esp+0x4]
		add ecx,1
        mov [esp+0x4],ecx
		ChuaNangDiem:
		mov ecx,[esp]
		add ecx,1
		mov [esp],ecx
		cmp ecx,0x9
        jl BackLoopCheckBuff
		add esp,0x8
		pop eax
		mov edx,DWORD PTR SS:[0x010D94A8]
        mov eax,[edx+0x0002DC04]
		push 0x0065FBA0
        ret

	   DrawBuffCurBH:
	   mov ecx,[esp+0x10]
	   cmp ecx,0
	   jnz KiemTraGiaTri3
	   push 4582
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
	   mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0xE0
	   mov  DWORD PTR SS : [ecx + 0xA0] , 0x20
	   mov  DWORD PTR SS : [ecx + 0x98] , 0x00
	   mov  DWORD PTR SS : [ecx + 0xA4] , 0x100
	   jmp ProceesShowImageInFormPet

	   KiemTraGiaTri3:
	   cmp ecx,1
	   jnz KiemTraGiaTri4
	   push 4582
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
       push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
       mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0xE0
	   mov  DWORD PTR SS : [ecx + 0xA0] , 0x40
	   mov  DWORD PTR SS : [ecx + 0x98] , 0x20
	   mov  DWORD PTR SS : [ecx + 0xA4] , 0x100
	   jmp ProceesShowImageInFormPet

	   KiemTraGiaTri4:
	   cmp ecx,2
	   jnz KiemTraGiaTri5
	   push 4582
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
       push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
       mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0xE0
	   mov  DWORD PTR SS : [ecx + 0xA0] , 0x60
	   mov  DWORD PTR SS : [ecx + 0x98] , 0x40
	   mov  DWORD PTR SS : [ecx + 0xA4] , 0x100
	   jmp ProceesShowImageInFormPet

	   KiemTraGiaTri5:
	   cmp ecx,3
	   jnz KiemTraGiaTri6
	   push 4582
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
       push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
       mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0xE0
	   mov  DWORD PTR SS : [ecx + 0xA0] , 0x80
	   mov  DWORD PTR SS : [ecx + 0x98] , 0x60
	   mov  DWORD PTR SS : [ecx + 0xA4] , 0x100
	   jmp ProceesShowImageInFormPet

	   KiemTraGiaTri6:
	   cmp ecx,4
	   jnz KiemTraGiaTri7
       push 4582
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
       push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
       mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0xE0
	   mov  DWORD PTR SS : [ecx + 0xA0] , 0xA0
	   mov  DWORD PTR SS : [ecx + 0x98] , 0x80
	   mov  DWORD PTR SS : [ecx + 0xA4] , 0x100
	   jmp ProceesShowImageInFormPet

	   KiemTraGiaTri7:
	   cmp ecx,5
	   jnz KiemTraGiaTri8
       push 4582
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
       push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
       mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0xE0
	   mov  DWORD PTR SS : [ecx + 0xA0] , 0xC0
	   mov  DWORD PTR SS : [ecx + 0x98] , 0xA0
	   mov  DWORD PTR SS : [ecx + 0xA4] , 0x100
	   jmp ProceesShowImageInFormPet

	   KiemTraGiaTri8:
	   cmp ecx,6
	   jnz KiemTraGiaTri9
       push 4582
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
       push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
	   mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0xC0
	   mov  DWORD PTR SS : [ecx + 0xA0] , 0xC0
	   mov  DWORD PTR SS : [ecx + 0x98] , 0xA0
	   mov  DWORD PTR SS : [ecx + 0xA4] , 0xE0
	   jmp ProceesShowImageInFormPet

	   KiemTraGiaTri9:
	   cmp ecx,7
	   jnz KiemTraGiaTri10
       push 4582
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
       push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
	   mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0xC0
	   mov  DWORD PTR SS : [ecx + 0xA0] , 0xA0
	   mov  DWORD PTR SS : [ecx + 0x98] , 0x80
	   mov  DWORD PTR SS : [ecx + 0xA4] , 0xE0
	   jmp ProceesShowImageInFormPet

	   KiemTraGiaTri10:
	   cmp ecx,8
	   jnz OtherImage
       push 4582
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
       push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
	   mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0xC0
	   mov  DWORD PTR SS : [ecx + 0xA0] , 0x80
	   mov  DWORD PTR SS : [ecx + 0x98] , 0x60
	   mov  DWORD PTR SS : [ecx + 0xA4] , 0xE0
	   jmp ProceesShowImageInFormPet

	   OtherImage:
       mov  DWORD PTR SS : [ecx + 0x70] , 25
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0x4F
	   mov  DWORD PTR SS : [ecx + 0xA0] , 0x160
	   mov  DWORD PTR SS : [ecx + 0x98] , 0x00
	   mov  DWORD PTR SS : [ecx + 0xA4] , 0x208

	   ProceesShowImageInFormPet:
	   push 0x00000000
	   push 0x0089E914
	   mov ecx,[esp+0x10]
	   mov edx,[esp+0x14]
	   push ecx
	   push edx
	   mov ecx, [esp+0x14]
	   mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
	   call eax
	   mov ecx,[esp+0x4]
	   push 0x1732CC8
	   mov eax, 0x7B9850
	   call eax //Draw1
	   ret 0x10
	}
};

__declspec(naked) void ReceivePackageEventCTC()// 006AC175 8
{
	  __asm {
		nop
		nop
		nop
		nop
		nop
		push eax
		xor ecx,ecx
		mov cl,[ebp+0x3]
		cmp ecx,208
		jz ThongBaoBHChienThang
		cmp ecx,205
		jz Capnhatthongtin
        cmp ecx,209
		jz CapnhatthongtinCTCEvent
        cmp ecx,130
		jz ThongBaoEventBatDau
		cmp ecx,129
		jz KetThucEvent
        cmp ecx,131
		jz BossBHEvent
        cmp ecx,132
		jz InfoGroupAndEventEXP
		//
		pop eax
		push ebp
		mov ecx,ebx
		mov eax,0x006BC8F0
        call eax
        push 0x006AC17D
		ret

		InfoGroupAndEventEXP:
		push 0xFF00FF00
		push 0x1
		push 0xC
		mov ecx,[ebp+0x18]
		push ecx
		mov ecx,[ebp+0x14]
		push ecx
		mov ecx,[ebp+0x10]
		push ecx
		mov ecx,[ebp+0x8]
		push ecx
		mov ecx,[ebp+0xC]
		push ecx
		mov ecx,[ebp+0x4]
		push ecx
		push 5564
		push 0x19
		mov ecx,0x1733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		push 0x100
		mov eax,[esp+0x2C]
        add eax,0x8
		push eax
		mov eax,0x0085C538
		call [eax]
		add esp,0x24
		mov eax,[esp+0xC]
        add eax,0x8
		push eax
		mov ecx,0x0155EE60
		mov eax,0x6A9800
		call eax
		pop eax
        push 0x006AC17D
		ret

		BossBHEvent:
        mov eax,[esp]
		xor ecx,ecx
		mov cx,[ebp+0x4]
        sub cx,4000
		mov [eax+0x500],cx
        push eax
		lea eax,[ebp+0x6]
		push eax
		call GetNameBH
        pop eax
        push 0x006AC17D
		ret


		GetNameBH:
		sub esp,0x4
		xor ecx,ecx
		mov [esp],ecx
		BackLoopGetNameBH:
		mov ecx,[esp]
		mov eax,[esp+0x8]
		xor edx,edx
		mov dl,[eax+ecx]
		mov eax,[esp+0xC]
		mov [eax+0x502+ecx],dl
		mov ecx,[esp]
		add ecx,1
        mov [esp],ecx
		cmp ecx,24
		jl BackLoopGetNameBH
		add esp,0x4
        ret 0x8

		CapnhatthongtinCTCEvent:
		mov eax,[esp]
		xor ecx,ecx
		mov cl,[ebp+0x8]
		mov byte ptr [eax],cl
		mov ecx,[ebp+0x4]
		cmp ecx,12
		jnz KiemTraGiaTri2
		mov ecx,0
		jmp AddThongTinMap

		KiemTraGiaTri2:
		cmp ecx,14
		jnz KiemTraGiaTri3
		mov ecx,1
		jmp AddThongTinMap

		KiemTraGiaTri3:
		cmp ecx,15
		jnz KiemTraGiaTri4
		mov ecx,2
		jmp AddThongTinMap

		KiemTraGiaTri4:
		cmp ecx,17
		jnz KiemTraGiaTri5
		mov ecx,3
		jmp AddThongTinMap

		KiemTraGiaTri5:
		cmp ecx,22
		jnz KiemTraGiaTri6
		mov ecx,4
		jmp AddThongTinMap

		KiemTraGiaTri6:
		mov ecx,335
		AddThongTinMap:
		mov byte ptr [eax+0x2FC],cl
        mov ecx,[ebp+0x9]
		mov byte ptr [eax+0x2FE],cl
        mov ecx,[ebp+0xD]
		mov byte ptr [eax+0x2FD],cl
		pop eax
        push 0x006AC17D
		ret

		ThongBaoEventBatDau:
		pop eax
		mov byte ptr [eax],0x1
        mov byte ptr [ebp+0x3],127
        push ebp
		mov ecx,ebx
		mov eax,0x006BC8F0
        call eax
        push 0x006AC17D
		ret


		KetThucEvent:
		mov eax,[esp]
		xor ecx,ecx
		mov cl,[0x1107258+0x47C]
		cmp ecx,20
        jnz KhongHienThiNut
		mov byte ptr [eax],0x2
        jmp HienThiThongBaoKetThuc
		//
		KhongHienThiNut:
		mov byte ptr [eax],0x0
		HienThiThongBaoKetThuc:
		mov ecx,[ebp+0x66]
        cmp ecx,12
		jnz KiemTraGiaTri21
		mov ecx,0
		jmp AddThongTinMap2

		KiemTraGiaTri21:
		cmp ecx,14
		jnz KiemTraGiaTri31
		mov ecx,1
		jmp AddThongTinMap2

		KiemTraGiaTri31:
		cmp ecx,15
		jnz KiemTraGiaTri41
		mov ecx,2
		jmp AddThongTinMap2

		KiemTraGiaTri41:
		cmp ecx,17
		jnz KiemTraGiaTri51
		mov ecx,3
		jmp AddThongTinMap2

		KiemTraGiaTri51:
		cmp ecx,22
		jnz KiemTraGiaTri61
		mov ecx,4
		jmp AddThongTinMap2

		KiemTraGiaTri61:
		mov ecx,335
		AddThongTinMap2:
		mov [eax+0x2FC],cl
		mov ecx,[ebp+0x6E]
		mov [eax+0x2FD],cl
		mov ecx,[ebp+0x72]
		mov [eax+0x2FE],cl
		//
        mov byte ptr [ebp+0x3],127
		push ebp
		mov ecx,ebx
		mov eax,0x006BC8F0
        call eax
        call XoaDuLieuCu
        push 0x006AC17D
		ret

		ThongBaoBHChienThang:
		push 0xFFFF0000
		push 0x1
		push 0xC
        mov ecx,[ebp+0x4+0x19]
		push ecx
        xor ecx,ecx
        mov cl,[ebp+0x4+0x18]
		push ecx
        call GetTenMaps
		push eax
		lea ecx,[ebp+0x4]
        push ecx
		push 5626
		push 0x19
		mov ecx,0x1733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		push 0x100
		mov eax,[esp+0x24]
        add eax,0x8
		push eax
		mov eax,0x0085C538
		call [eax]
		add esp,0x1C
		mov eax,[esp+0xC]
        add eax,0x8
		push eax
		mov ecx,0x0155EE60
		mov eax,0x6A9800
		call eax
		pop eax
        push 0x006AC17D
		ret


		Capnhatthongtin:
		lea eax,[ebp+0x4]
		push eax
        call GetNewInforAllyMaps
        push 0x006AC17D
		ret




		GetTenMaps:
		mov ecx,[0x1107258+0x47C]
		push ecx
		push 3
        mov ecx,0x1733B30
		mov eax,0x007C2CF0
		call eax
		ret


		GetNewInforAllyMaps:
		sub esp,0x4
		xor ecx,ecx
		mov [esp],ecx
        BackLoopCopyValueAlly:
		mov ecx,[esp]
		mov eax,[esp+0x8]
		mov edx,[eax+ecx*4]
		mov eax,[esp+0xC]
		mov [eax+0x100+ecx*4],edx
		mov ecx,[esp]
		add ecx,1
		mov [esp],ecx
		cmp ecx,232
        jl BackLoopCopyValueAlly
		add esp,0x4
		ret 0x8

		XoaDuLieuCu:
        sub esp,0x4
		xor ecx,ecx
		mov [esp],ecx
		BackLoopCopyValueAlly1:
		mov ecx,[esp]
		mov eax,[esp+0x8]
		mov DWORD PTR [eax+0x100+ecx*4],0
		mov ecx,[esp]
		add ecx,1
		mov [esp],ecx
		cmp ecx,125
		jl BackLoopCopyValueAlly1
		add esp,0x4
		ret 0x4

	}
}
__declspec(naked) void HienThiInfoCTCMaps()// 00660673 10
{
	  __asm {
		nop
		nop
		nop
		nop
		nop
        push eax
		//

		//
		call ShowTextInfoCTC
		mov eax,[esp+0x40]
        mov eax,[eax+0x00000080]
        push 0x0066067D
		ret


		ShowTextInfoCTC:
		sub esp,0x4
		xor ecx,ecx
		mov [esp],ecx
        mov ecx,DWORD PTR SS:[0x01733AC4]
		mov eax,[esp+0x4]
		push 0xFF000000
		mov edx,[ecx]
		call dword ptr [edx+0xC]
		BackLoopCheckAll:
        mov eax,[esp+0x8]
		mov ecx,[esp]
		imul ecx,0x1D
		mov edx,[eax+ecx+0x100]
		test edx,edx
        jz ChuaCoGiaTri
		mov edx,[eax+ecx+0x100+0x19]
		push edx
		xor edx,edx
		mov dl,[eax+ecx+0x100+0x18]
		push edx
		lea edx,[eax+ecx+0x100]
		push edx
        push 5624
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov eax,[esp+0x18]
        add eax,4
		push eax
		mov eax,0x0085C564
		call dword ptr [eax]
		add esp,0x14
        push 0x3
		push 0x3F800000
		push 0x00000141
		mov eax,[esp+0x14]
        add eax,4
		push eax
		mov eax,[esp+0x10]
		imul eax,0x10
        add eax,0x10
		push eax    // Chieu Cao
        mov ecx,DWORD PTR SS:[0x01733AD0]
		mov edx,[ecx+0x240]
        sub edx,400
		push edx    // Chieu Ngan
        mov ecx,[0x01733AC4]
		mov eax,DWORD PTR SS:[0x01733AC4]
		mov eax,[eax]
		call dword ptr [eax+0x18]
		mov ecx,[0x01733AC4]
		mov eax,[ecx]
		call dword ptr [eax+0x38]
        //
		mov ecx,[esp]
		add ecx,1
		mov [esp],ecx
		cmp ecx,11
		jl BackLoopCheckAll
        //
        ChuaCoGiaTri:
		add esp,0x4
		ret 0x4


	   VeFormCTC:
	   mov ecx,[esp+0x10]
	   cmp ecx,1
	   jnz KiemTraHinhAnh2
       // Hien Thi Ben Trai
	   push 5628
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
       push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
	   mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0xC0
	   mov  DWORD PTR SS : [ecx + 0xA0] , 0x80
	   mov  DWORD PTR SS : [ecx + 0x98] , 0x60
	   mov  DWORD PTR SS : [ecx + 0xA4] , 0xE0
	   jmp ProceesShowImageInFormPet

	   KiemTraHinhAnh2:
	   cmp ecx,2
	   jnz KiemTraHinhAnh3
       //Hien Thi Thanh Trai
	   push 5628
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
       push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
	   mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0x4F
	   mov  DWORD PTR SS : [ecx + 0xA0] , 0x160
	   mov  DWORD PTR SS : [ecx + 0x98] , 0x00
	   mov  DWORD PTR SS : [ecx + 0xA4] , 0x208

	   KiemTraHinhAnh3:
	   cmp ecx,3
	   jnz KiemTraHinhAnh4
       //Hien Thi Thanh Trai
	   push 5628
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
       push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
	   mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0x4F
	   mov  DWORD PTR SS : [ecx + 0xA0] , 0x160
	   mov  DWORD PTR SS : [ecx + 0x98] , 0x00
	   mov  DWORD PTR SS : [ecx + 0xA4] , 0x208

	   KiemTraHinhAnh4:
	   cmp ecx,4
	   jnz KiemTraHinhAnh5
       //Hien Thi Nen1
	   push 5628
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
       push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
	   mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0x4F
	   mov  DWORD PTR SS : [ecx + 0xA0] , 0x160
	   mov  DWORD PTR SS : [ecx + 0x98] , 0x00
	   mov  DWORD PTR SS : [ecx + 0xA4] , 0x208

	   KiemTraHinhAnh5:
	   cmp ecx,5
	   jnz KiemTraHinhAnh6
	   //Hien Thi Nen2
	   push 5628
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
       push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
	   mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0x4F
	   mov  DWORD PTR SS : [ecx + 0xA0] , 0x160
	   mov  DWORD PTR SS : [ecx + 0x98] , 0x00
	   mov  DWORD PTR SS : [ecx + 0xA4] , 0x208

	   KiemTraHinhAnh6:
	   cmp ecx,6
	   jnz KiemTraHinhAnh7
	   //Hien Thi Nen3
	   push 5628
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
       push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
	   mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0x4F
	   mov  DWORD PTR SS : [ecx + 0xA0] , 0x160
	   mov  DWORD PTR SS : [ecx + 0x98] , 0x00
	   mov  DWORD PTR SS : [ecx + 0xA4] , 0x208

	   KiemTraHinhAnh7:
	   //Hien Thi Nen4
	   push 5628
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
       push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
	   mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0x4F
	   mov  DWORD PTR SS : [ecx + 0xA0] , 0x160
	   mov  DWORD PTR SS : [ecx + 0x98] , 0x00
	   mov  DWORD PTR SS : [ecx + 0xA4] , 0x208

	   ProceesShowImageInFormPet:
	   push 0x00000000
	   push 0x0089E914
	   mov ecx,[esp+0x10]
	   mov edx,[esp+0x14]
	   push ecx
	   push edx
	   mov ecx, [esp+0x14]
	   mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
	   call eax
	   mov ecx,[esp+0x4]
	   push 0x1732CC8
	   mov eax, 0x7B9850
	   call eax //Draw1
	   ret 0x10
	}
}
__declspec(naked) void FixHienThiOptMoi()// 0068C309 7
{
	  __asm {

		mov edx,[eax+0x10]
		push ecx
		test edx,edx
		jnz Default
		mov eax,[eax+0xC]
		cmp eax,836
		jz HienThiOpt
		cmp eax,830
		jz HienThiOpt
        jmp Default


        HienThiOpt:
        push eax
		push 11
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
        push 0x0068C310
		ret

		Default:
        mov eax, [edx+0x8]
		push 0x0068C310
		ret

	}
}
__declspec(naked) void FixHienThiOptMoi2()// 004CDE81 7
{
	  __asm {

		mov ecx,[edx+0x10]
		push eax
		test ecx,ecx
		jnz Default
		mov eax,[edx+0xC]
		cmp eax,836
		jz HienThiOpt
		cmp eax,830
		jz HienThiOpt
        jmp Default


		HienThiOpt:
        push eax
		push 11
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		mov edx,eax
        lea eax,[ebp+0x0000042C]
        push 0x004CDE8E
		ret

		Default:
		mov ecx,[edx+0x10]
        lea eax,[ebp+0x0000042C]
		push 0x004CDE8B
		ret

	}
}
__declspec(naked) void GetPackageInforNewOption()// 006AD70A 7
{
	  __asm {
        nop
		nop
		nop
		nop
		nop
		push eax
		xor edx,edx
		mov dl,[ebp+0x3]
		cmp edx,0xA5
		jnz Default
		xor edx,edx
		mov dl,[ebp+0x4]
		mov [eax+0x4],dl
		xor dx,0xCE43
        mov [0x1107258+0x9EAA],dx
		//
        xor edx,edx
		mov dx,[ebp+0x6]
		mov [eax+0x5],dx
		//
        xor edx,edx
		mov dx,[ebp+0x23]
		mov [eax+0x7],dx
		//
        xor edx,edx
		mov edx,[ebp+0x17]
		mov [eax+0x9],edx
		//
        xor edx,edx
		mov dx,[ebp+0x1F]
		mov [eax+0xD],dl
		//
		xor edx,edx
		mov dx,[ebp+0x21]
		mov [eax+0xE],dl
		//
		xor edx,edx
		mov edx,[ebp+0x1B]
		mov [eax+0xF],dx
		//
        xor edx,edx
		mov edx,[ebp+0xF]
		mov [eax+0x14],dl
		//
		xor edx,edx
		mov edx,[ebp+0x13]
		mov [eax+0x15],dl
		//
        xor edx,edx
		mov dx,[ebp+0xB]
		mov [eax+0x16],dx
		//
        xor edx,edx
		mov dx,[ebp+0xD]
		mov [eax+0x18],dx
		//
        xor edx,edx
		mov dx,[ebp+0x25]
		mov [eax+0x1A],dx
		//
		xor edx,edx
		mov dx,[ebp+0x27]
		mov [eax+0x1C],dx
		//
		mov edx,[ebp+0x29]
		mov [eax+0x1E],edx
		//
		mov edx,[ebp+0x2D]
		mov [eax+0x22],edx
		//
		mov edx,[ebp+0x31]
		mov [eax+0x26],edx
        //
        mov dl,[ebp+0x35]
		mov [eax+0x2B],dl
		//
		mov dl,[ebp+0x5]
		mov [eax+0x2C],dl
		//
		mov dl,[ebp+0x36]
		mov [eax+0x2D],dl
        //
		mov edx,[ebp+0x37]
		mov [eax+0x30],edx
        //
		mov edx,[ebp+0x3B]
		mov [eax+0x34],edx
		//
		mov edx,[ebp+0x3F]
		mov [eax+0x38],edx
        //
		mov edx,[ebp+0x43]
		mov [eax+0x3C],edx
        //
		mov edx,[ebp+0x47]
		mov [eax+0x40],edx
        //
		mov edx,[ebp+0x4B]
		mov [eax+0x44],edx
		//
		mov edx,[ebp+0x4F]
		mov [eax+0x48],edx
		//
		mov edx,[ebp+0x53]
		mov [eax+0x4C],edx
		//
		mov edx,[ebp+0x57]
		mov [eax+0x50],edx
		//
		mov edx,[ebp+0x5B]
		mov [eax+0x54],edx
        //
		mov dl,[ebp+0x8]
		mov [eax+0x2E],dl

		Default:
        pop eax
		push 0x006AD712
		ret

	}
}
__declspec(naked) void GetPozInfoC()// 004BA4B2
{
	  __asm {
		nop
		nop
		nop
		nop
		nop
		push eax
		mov ecx,DWORD PTR SS:[0x01733AD0]
		mov eax,0x007D7FD0
		call eax
		xor ecx,ecx
		mov cl,[eax+0xC]
		cmp ecx,1
		jnz Default
		mov edx,[esp]
		xor ecx,ecx
		mov cl,[edx+0x1]
		test ecx,ecx
        jnz WaitforProcess
		mov edx,[eax+0x10]
		mov ecx,[ebp+0x14]
		sub ecx,30
		cmp edx,ecx
		jl WaitforProcess
		add ecx,22
		cmp edx,ecx
		ja WaitforProcess
		mov edx,[eax+0x18]
		mov ecx,[ebp+0x18]
		add ecx,249
		cmp edx,ecx
		jl WaitforProcess
		add ecx,18
		cmp edx,ecx
		ja CheckShowInfor2
		pop eax
		mov byte ptr [eax+0x1],0x1
		mov byte ptr [eax],0x1
        mov eax,DWORD PTR SS:[0x01733ABC]
		push 0x004BA4B7
		ret

		CheckShowInfor2:
		mov edx,[eax+0x18]
		mov ecx,[ebp+0x18]
		add ecx,273
		cmp edx,ecx
		jl WaitforProcess
		add ecx,18
		cmp edx,ecx
		ja CheckShowInfor3
        pop eax
		mov byte ptr [eax+0x1],0x1
		mov byte ptr [eax],0x2
        mov eax,DWORD PTR SS:[0x01733ABC]
		push 0x004BA4B7
		ret

        CheckShowInfor3:
		mov edx,[eax+0x18]
		mov ecx,[ebp+0x18]
		add ecx,295
		cmp edx,ecx
		jl WaitforProcess
		add ecx,18
		cmp edx,ecx
		ja WaitforProcess
        pop eax
		mov byte ptr [eax+0x1],0x1
		mov byte ptr [eax],0x3
        mov eax,DWORD PTR SS:[0x01733ABC]
		push 0x004BA4B7
		ret

		Default:
		pop eax
        mov byte ptr [eax+0x1],0x0
        mov eax,DWORD PTR SS:[0x01733ABC]
		push 0x004BA4B7
		ret

		WaitforProcess:
		pop eax
        mov eax,DWORD PTR SS:[0x01733ABC]
		push 0x004BA4B7
		ret

	}
}
__declspec(naked) void HienThiOptionMoi2()// 004B9588
{
	__asm {
        nop
		nop
		nop
		nop
		nop
		push eax
		xor ecx,ecx
		mov cl,[eax]
		cmp ecx,1
		jz Default
		cmp ecx,2
		jz HienThiOptDmg
		cmp ecx,3
		jz HienThiOptionKhac
		Default:
		pop eax
        mov eax,[ebp+0x00000584]
		push 0x004B958E
		ret

		HienThiOptDmg:
		mov ecx,DWORD PTR SS:[0x01733AC4]
		push 0xFFFFFFFF
		mov edx,[ecx]
		call dword ptr [edx+0xC]
        mov eax,DWORD PTR SS:[0x01733AC4]
		push    0x0
		push    0x3F800000
		push    5672
		mov     esi, [eax]
		push    0x19
		mov ecx,0x01733B30
		mov 	eax,0x7C2CF0
		call 	eax
		mov     ecx, [ebp+0x18]
		mov     edx, [ebp+0x14]
		sub     ecx, ebx
		push    eax
		add     ecx, 0x4E
		add     edx, 0x7
		push    ecx
		mov ecx,DWORD PTR SS:[0x01733AC4]
		push    edx
		call    dword ptr [esi+0x14]
		// Hien Thi Opt TDD
		xor 	edx,edx
		mov 	eax,[esp]
		mov 	dl,[eax+0x4]
		push    edx
        push    5701
		push    0x19
		mov 	ecx,0x01733B30
		mov 	eax,0x7C2CF0
		call 	eax
		mov     edx, [ebp+0x18]
		sub     edx, ebx
		push    eax
		mov 	eax,DWORD PTR SS:[0x01733AC4]
		mov     ecx, [eax]
		push    1
		add     edx, 0x4E
		push    0x3F800000
		push    edx
		mov     edx, [ebp+0x14]
		add     edx, 0xB9
		push    edx
		push    eax
		call    dword ptr [ecx+0x30]
		add esp,0x1C
		//
        mov eax,DWORD PTR SS:[0x01733AC4]
		push    0x0
		push    0x3F800000
		push    5673
		mov     esi, [eax]
		push    0x19
		mov ecx,0x01733B30
		mov 	eax,0x7C2CF0
		call 	eax
		mov     ecx, [ebp+0x18]
		mov     edx, [ebp+0x14]
		sub     ecx, ebx
		push    eax
		add     ecx, 0x5E
		add     edx, 0x7
		push    ecx
		mov ecx,DWORD PTR SS:[0x01733AC4]
		push    edx
		call    dword ptr [esi+0x14]
		// Hien Thi Opt Phong Thu Cm
		xor 	edx,edx
		mov 	eax,[esp]
		mov 	dx,[eax+0x5]
		push    edx
        push    5701
		push    0x19
		mov 	ecx,0x01733B30
		mov 	eax,0x7C2CF0
		call 	eax
		mov     edx, [ebp+0x18]
		sub     edx, ebx
		push    eax
		mov 	eax,DWORD PTR SS:[0x01733AC4]
		mov     ecx, [eax]
		push    1
		add     edx, 0x5E
		push    0x3F800000
		push    edx
		mov     edx, [ebp+0x14]
		add     edx, 0xB9
		push    edx
		push    eax
		call    dword ptr [ecx+0x30]
		add esp,0x1C
		//
        mov eax,DWORD PTR SS:[0x01733AC4]
		push    0x0
		push    0x3F800000
		push    5674
		mov     esi, [eax]
		push    0x19
		mov ecx,0x01733B30
		mov 	eax,0x7C2CF0
		call 	eax
		mov     ecx, [ebp+0x18]
		mov     edx, [ebp+0x14]
		sub     ecx, ebx
		push    eax
		add     ecx, 0x6E
		add     edx, 0x7
		push    ecx
		mov ecx,DWORD PTR SS:[0x01733AC4]
		push    edx
		call    dword ptr [esi+0x14]
		// Hien Thi Opt Toc Do Di Chuyen
		xor 	edx,edx
		mov 	eax,[esp]
		mov 	dx,[eax+0x7]
		push    edx
        push    5701
		push    0x19
		mov 	ecx,0x01733B30
		mov 	eax,0x7C2CF0
		call 	eax
		mov     edx, [ebp+0x18]
		sub     edx, ebx
		push    eax
		mov 	eax,DWORD PTR SS:[0x01733AC4]
		mov     ecx, [eax]
		push    1
		add     edx, 0x6E
		push    0x3F800000
		push    edx
		mov     edx, [ebp+0x14]
		add     edx, 0xB9
		push    edx
		push    eax
		call    dword ptr [ecx+0x30]
		add esp,0x1C
		//
        mov eax,DWORD PTR SS:[0x01733AC4]
		push    0x0
		push    0x3F800000
		push    5675
		mov     esi, [eax]
		push    0x19
		mov ecx,0x01733B30
		mov 	eax,0x7C2CF0
		call 	eax
		mov     ecx, [ebp+0x18]
		mov     edx, [ebp+0x14]
		sub     ecx, ebx
		push    eax
		add     ecx, 0x7E
		add     edx, 0x7
		push    ecx
		mov ecx,DWORD PTR SS:[0x01733AC4]
		push    edx
		call    dword ptr [esi+0x14]
		// Hien Thi Opt Ti Le Tri Mang
		xor 	edx,edx
		mov 	eax,[esp]
		mov 	edx,[eax+0x9]
		push    edx
        push    5702
		push    0x19
		mov 	ecx,0x01733B30
		mov 	eax,0x7C2CF0
		call 	eax
		mov     edx, [ebp+0x18]
		sub     edx, ebx
		push    eax
		mov 	eax,DWORD PTR SS:[0x01733AC4]
		mov     ecx, [eax]
		push    1
		add     edx, 0x7E
		push    0x3F800000
		push    edx
		mov     edx, [ebp+0x14]
		add     edx, 0xB9
		push    edx
		push    eax
		call    dword ptr [ecx+0x30]
		add esp,0x1C
		//
        mov eax,DWORD PTR SS:[0x01733AC4]
		push    0x0
		push    0x3F800000
		push    5676
		mov     esi, [eax]
		push    0x19
		mov ecx,0x01733B30
		mov 	eax,0x7C2CF0
		call 	eax
		mov     ecx, [ebp+0x18]
		mov     edx, [ebp+0x14]
		sub     ecx, ebx
		push    eax
		add     ecx, 0x8E
		add     edx, 0x7
		push    ecx
		mov ecx,DWORD PTR SS:[0x01733AC4]
		push    edx
		call    dword ptr [esi+0x14]
        // Hien Thi Opt Hut Mau
		xor 	edx,edx
		mov 	eax,[esp]
		mov 	dl,[eax+0xD]
		push    edx
        push    5703
		push    0x19
		mov 	ecx,0x01733B30
		mov 	eax,0x7C2CF0
		call 	eax
		mov     edx, [ebp+0x18]
		sub     edx, ebx
		push    eax
		mov 	eax,DWORD PTR SS:[0x01733AC4]
		mov     ecx, [eax]
		push    1
		add     edx, 0x8E
		push    0x3F800000
		push    edx
		mov     edx, [ebp+0x14]
		add     edx, 0xB9
		push    edx
		push    eax
		call    dword ptr [ecx+0x30]
		add esp,0x1C
		//
        mov eax,DWORD PTR SS:[0x01733AC4]
		push    0x0
		push    0x3F800000
		push    5677
		mov     esi, [eax]
		push    0x19
		mov ecx,0x01733B30
		mov 	eax,0x7C2CF0
		call 	eax
		mov     ecx, [ebp+0x18]
		mov     edx, [ebp+0x14]
		sub     ecx, ebx
		push    eax
		add     ecx, 0x9E
		add     edx, 0x7
		push    ecx
		mov ecx,DWORD PTR SS:[0x01733AC4]
		push    edx
		call    dword ptr [esi+0x14]
		// Hien Thi Opt Hut Mana
		xor 	edx,edx
		mov 	eax,[esp]
		mov 	dl,[eax+0xE]
		push    edx
        push    5703
		push    0x19
		mov 	ecx,0x01733B30
		mov 	eax,0x7C2CF0
		call 	eax
		mov     edx, [ebp+0x18]
		sub     edx, ebx
		push    eax
		mov 	eax,DWORD PTR SS:[0x01733AC4]
		mov     ecx, [eax]
		push    1
		add     edx, 0x9E
		push    0x3F800000
		push    edx
		mov     edx, [ebp+0x14]
		add     edx, 0xB9
		push    edx
		push    eax
		call    dword ptr [ecx+0x30]
		add esp,0x1C
		//
        mov eax,DWORD PTR SS:[0x01733AC4]
		push    0x0
		push    0x3F800000
		push    5678
		mov     esi, [eax]
		push    0x19
		mov ecx,0x01733B30
		mov 	eax,0x7C2CF0
		call 	eax
		mov     ecx, [ebp+0x18]
		mov     edx, [ebp+0x14]
		sub     ecx, ebx
		push    eax
		add     ecx, 0xAE
		add     edx, 0x7
		push    ecx
		mov ecx,DWORD PTR SS:[0x01733AC4]
		push    edx
		call    dword ptr [esi+0x14]
        // Hien Thi Opt ST TM
		xor 	edx,edx
		mov 	eax,[esp]
		mov 	dx,[eax+0xF]
		push    edx
        push    5701
		push    0x19
		mov 	ecx,0x01733B30
		mov 	eax,0x7C2CF0
		call 	eax
		mov     edx, [ebp+0x18]
		sub     edx, ebx
		push    eax
		mov 	eax,DWORD PTR SS:[0x01733AC4]
		mov     ecx, [eax]
		push    1
		add     edx, 0xAE
		push    0x3F800000
		push    edx
		mov     edx, [ebp+0x14]
		add     edx, 0xB9
		push    edx
		push    eax
		call    dword ptr [ecx+0x30]
		add esp,0x1C
		// Hien Thi Opt Ti le Do Don
        mov eax,DWORD PTR SS:[0x01733AC4]
		push    0x0
		push    0x3F800000
		push    5667
		mov     esi, [eax]
		push    0x19
		mov ecx,0x01733B30
		mov 	eax,0x7C2CF0
		call 	eax
		mov     ecx, [ebp+0x18]
		mov     edx, [ebp+0x14]
		sub     ecx, ebx
		push    eax
		add     ecx, 0xBE
		add     edx, 0x7
		push    ecx
		mov ecx,DWORD PTR SS:[0x01733AC4]
		push    edx
		call    dword ptr [esi+0x14]
		//
		xor 	edx,edx
		mov 	eax,[esp]
		mov 	dx,[eax+0x1E]
		push    edx
        push    5704
		push    0x19
		mov 	ecx,0x01733B30
		mov 	eax,0x7C2CF0
		call 	eax
		mov     edx, [ebp+0x18]
		sub     edx, ebx
		push    eax
		mov 	eax,DWORD PTR SS:[0x01733AC4]
		mov     ecx, [eax]
		push    1
		add     edx, 0xBE
		push    0x3F800000
		push    edx
		mov     edx, [ebp+0x14]
		add     edx, 0xB9
		push    edx
		push    eax
		call    dword ptr [ecx+0x30]
		add esp,0x1C
        // Hien Thi Opt Tang ST Vk
        mov eax,DWORD PTR SS:[0x01733AC4]
		push    0x0
		push    0x3F800000
		push    5669
		mov     esi, [eax]
		push    0x19
		mov ecx,0x01733B30
		mov 	eax,0x7C2CF0
		call 	eax
		mov     ecx, [ebp+0x18]
		mov     edx, [ebp+0x14]
		sub     ecx, ebx
		push    eax
		add     ecx, 0xCE
		add     edx, 0x7
		push    ecx
		mov ecx,DWORD PTR SS:[0x01733AC4]
		push    edx
		call    dword ptr [esi+0x14]
		//
		xor 	edx,edx
		mov 	eax,[esp]
		mov 	dx,[eax+0x22]
		push    edx
		push    5701
		push    0x19
		mov 	ecx,0x01733B30
		mov 	eax,0x7C2CF0
		call 	eax
		mov     edx, [ebp+0x18]
		sub     edx, ebx
		push    eax
		mov 	eax,DWORD PTR SS:[0x01733AC4]
		mov     ecx, [eax]
		push    1
		add     edx, 0xCE
		push    0x3F800000
		push    edx
		mov     edx, [ebp+0x14]
		add     edx, 0xB9
		push    edx
		push    eax
		call    dword ptr [ecx+0x30]
		add esp,0x1C
        // Hien Thi Opt Ne Tri Mang
        mov eax,DWORD PTR SS:[0x01733AC4]
		push    0x0
		push    0x3F800000
		push    5668
		mov     esi, [eax]
		push    0x19
		mov ecx,0x01733B30
		mov 	eax,0x7C2CF0
		call 	eax
		mov     ecx, [ebp+0x18]
		mov     edx, [ebp+0x14]
		sub     ecx, ebx
		push    eax
		add     ecx, 0xDE
		add     edx, 0x7
		push    ecx
		mov ecx,DWORD PTR SS:[0x01733AC4]
		push    edx
		call    dword ptr [esi+0x14]
		//
		xor 	edx,edx
		mov 	eax,[esp]
		mov 	dx,[eax+0x26]
		push    edx
        push    5702
		push    0x19
		mov 	ecx,0x01733B30
		mov 	eax,0x7C2CF0
		call 	eax
		mov     edx, [ebp+0x18]
		sub     edx, ebx
		push    eax
		mov 	eax,DWORD PTR SS:[0x01733AC4]
		mov     ecx, [eax]
		push    1
		add     edx, 0xDE
		push    0x3F800000
		push    edx
		mov     edx, [ebp+0x14]
		add     edx, 0xB9
		push    edx
		push    eax
		call    dword ptr [ecx+0x30]
		add esp,0x1C
		//
        // Hien Thi Opt Ne Tri Mang
        mov eax,DWORD PTR SS:[0x01733AC4]
		push    0x0
		push    0x3F800000
		push    5774
		mov     esi, [eax]
		push    0x19
		mov ecx,0x01733B30
		mov 	eax,0x7C2CF0
		call 	eax
		mov     ecx, [ebp+0x18]
		mov     edx, [ebp+0x14]
		sub     ecx, ebx
		push    eax
		add     ecx, 0xEE
		add     edx, 0x7
		push    ecx
		mov ecx,DWORD PTR SS:[0x01733AC4]
		push    edx
		call    dword ptr [esi+0x14]
		//
		xor 	edx,edx
		mov 	eax,[esp]
		mov 	dl,[eax+0x2D]
		push    edx
        push    5701
		push    0x19
		mov 	ecx,0x01733B30
		mov 	eax,0x7C2CF0
		call 	eax
		mov     edx, [ebp+0x18]
		sub     edx, ebx
		push    eax
		mov 	eax,DWORD PTR SS:[0x01733AC4]
		mov     ecx, [eax]
		push    1
		add     edx, 0xEE
		push    0x3F800000
		push    edx
		mov     edx, [ebp+0x14]
		add     edx, 0xB9
		push    edx
		push    eax
		call    dword ptr [ecx+0x30]
		add esp,0x1C
		//
        mov eax,DWORD PTR SS:[0x01733AC4]
		push    0x0
		push    0x3F800000
		push    5955
		mov     esi, [eax]
		push    0x19
		mov ecx,0x01733B30
		mov 	eax,0x7C2CF0
		call 	eax
		mov     ecx, [ebp+0x18]
		mov     edx, [ebp+0x14]
		sub     ecx, ebx
		push    eax
		add     ecx, 0xFE
		add     edx, 0x7
		push    ecx
		mov ecx,DWORD PTR SS:[0x01733AC4]
		push    edx
		call    dword ptr [esi+0x14]
		//
		xor 	edx,edx
		mov 	eax,[esp]
		mov 	dl,[eax+0x2E]
		push    edx
        push    5701
		push    0x19
		mov 	ecx,0x01733B30
		mov 	eax,0x7C2CF0
		call 	eax
		mov     edx, [ebp+0x18]
		sub     edx, ebx
		push    eax
		mov 	eax,DWORD PTR SS:[0x01733AC4]
		mov     ecx, [eax]
		push    1
		add     edx, 0xFE
		push    0x3F800000
		push    edx
		mov     edx, [ebp+0x14]
		add     edx, 0xB9
		push    edx
		push    eax
		call    dword ptr [ecx+0x30]
		add esp,0x1C
        //
		mov ecx,DWORD PTR SS:[0x01733AC4]
		mov eax,[ecx]
		call dword ptr [eax+0x38]
		mov ecx,DWORD PTR SS:[0x01733AC4]
		mov edx,[ecx]
        call dword ptr [edx+0x64]
		pop eax
		push 0x004BA4B2
        ret


		HienThiOptionKhac:
        mov ecx,DWORD PTR SS:[0x01733AC4]
		push 0xFFFFFFFF
		mov edx,[ecx]
		call dword ptr [edx+0xC]
        mov eax,DWORD PTR SS:[0x01733AC4]
		push    0x0
		push    0x3F800000
		push    5695
		mov     esi, [eax]
		push    0x19
		mov ecx,0x01733B30
		mov 	eax,0x7C2CF0
		call 	eax
		mov     ecx, [ebp+0x18]
		mov     edx, [ebp+0x14]
		sub     ecx, ebx
		push    eax
		add     ecx, 0x4E
		add     edx, 0x7
		push    ecx
		mov ecx,DWORD PTR SS:[0x01733AC4]
		push    edx
		call    dword ptr [esi+0x14]
		// Hien Thi Opt TDD
		xor 	edx,edx
		mov 	eax,[esp]
		mov 	dl,[eax+0x14]
		push    edx
        push    5701
		push    0x19
		mov 	ecx,0x01733B30
		mov 	eax,0x7C2CF0
		call 	eax
		mov     edx, [ebp+0x18]
		sub     edx, ebx
		push    eax
		mov 	eax,DWORD PTR SS:[0x01733AC4]
		mov     ecx, [eax]
		push    1
		add     edx, 0x4E
		push    0x3F800000
		push    edx
		mov     edx, [ebp+0x14]
		add     edx, 0xB9
		push    edx
		push    eax
		call    dword ptr [ecx+0x30]
		add esp,0x1C
		//
        mov eax,DWORD PTR SS:[0x01733AC4]
		push    0x0
		push    0x3F800000
		push    5696
		mov     esi, [eax]
		push    0x19
		mov ecx,0x01733B30
		mov 	eax,0x7C2CF0
		call 	eax
		mov     ecx, [ebp+0x18]
		mov     edx, [ebp+0x14]
		sub     ecx, ebx
		push    eax
		add     ecx, 0x5E
		add     edx, 0x7
		push    ecx
		mov ecx,DWORD PTR SS:[0x01733AC4]
		push    edx
		call    dword ptr [esi+0x14]
		// Hien Thi Opt Phong Thu Cm
		xor 	edx,edx
		mov 	eax,[esp]
		mov 	dl,[eax+0x15]
		push    edx
        push    5701
		push    0x19
		mov 	ecx,0x01733B30
		mov 	eax,0x7C2CF0
		call 	eax
		mov     edx, [ebp+0x18]
		sub     edx, ebx
		push    eax
		mov 	eax,DWORD PTR SS:[0x01733AC4]
		mov     ecx, [eax]
		push    1
		add     edx, 0x5E
		push    0x3F800000
		push    edx
		mov     edx, [ebp+0x14]
		add     edx, 0xB9
		push    edx
		push    eax
		call    dword ptr [ecx+0x30]
		add esp,0x1C
		//
        mov eax,DWORD PTR SS:[0x01733AC4]
		push    0x0
		push    0x3F800000
		push    5697
		mov     esi, [eax]
		push    0x19
		mov ecx,0x01733B30
		mov 	eax,0x7C2CF0
		call 	eax
		mov     ecx, [ebp+0x18]
		mov     edx, [ebp+0x14]
		sub     ecx, ebx
		push    eax
		add     ecx, 0x6E
		add     edx, 0x7
		push    ecx
		mov ecx,DWORD PTR SS:[0x01733AC4]
		push    edx
		call    dword ptr [esi+0x14]
		// Hien Thi Opt Toc Do Di Chuyen
		xor 	edx,edx
		mov 	eax,[esp]
		mov 	dx,[eax+0x16]
		push    edx
		push    5702
		push    0x19
		mov 	ecx,0x01733B30
		mov 	eax,0x7C2CF0
		call 	eax
		mov     edx, [ebp+0x18]
		sub     edx, ebx
		push    eax
		mov 	eax,DWORD PTR SS:[0x01733AC4]
		mov     ecx, [eax]
		push    1
		add     edx, 0x6E
		push    0x3F800000
		push    edx
		mov     edx, [ebp+0x14]
		add     edx, 0xB9
		push    edx
		push    eax
		call    dword ptr [ecx+0x30]
		add esp,0x1C
		//
        mov eax,DWORD PTR SS:[0x01733AC4]
		push    0x0
		push    0x3F800000
		push    5698
		mov     esi, [eax]
		push    0x19
		mov ecx,0x01733B30
		mov 	eax,0x7C2CF0
		call 	eax
		mov     ecx, [ebp+0x18]
		mov     edx, [ebp+0x14]
		sub     ecx, ebx
		push    eax
		add     ecx, 0x7E
		add     edx, 0x7
		push    ecx
		mov ecx,DWORD PTR SS:[0x01733AC4]
		push    edx
		call    dword ptr [esi+0x14]
		// Hien Thi Opt Ti Le Tri Mang
		xor 	edx,edx
		mov 	eax,[esp]
		mov 	dx,[eax+0x18]
		push    edx
		push    5702
		push    0x19
		mov 	ecx,0x01733B30
		mov 	eax,0x7C2CF0
		call 	eax
		mov     edx, [ebp+0x18]
		sub     edx, ebx
		push    eax
		mov 	eax,DWORD PTR SS:[0x01733AC4]
		mov     ecx, [eax]
		push    1
		add     edx, 0x7E
		push    0x3F800000
		push    edx
		mov     edx, [ebp+0x14]
		add     edx, 0xB9
		push    edx
		push    eax
		call    dword ptr [ecx+0x30]
		add esp,0x1C
		//
        mov eax,DWORD PTR SS:[0x01733AC4]
		push    0x0
		push    0x3F800000
		push    5699
		mov     esi, [eax]
		push    0x19
		mov ecx,0x01733B30
		mov 	eax,0x7C2CF0
		call 	eax
		mov     ecx, [ebp+0x18]
		mov     edx, [ebp+0x14]
		sub     ecx, ebx
		push    eax
		add     ecx, 0x8E
		add     edx, 0x7
		push    ecx
		mov ecx,DWORD PTR SS:[0x01733AC4]
		push    edx
		call    dword ptr [esi+0x14]
        // Hien Thi Opt Hut Mau
		xor 	edx,edx
		mov 	eax,[esp]
		mov 	dx,[eax+0x1A]
		push    edx
		push    5701
		push    0x19
		mov 	ecx,0x01733B30
		mov 	eax,0x7C2CF0
		call 	eax
		mov     edx, [ebp+0x18]
		sub     edx, ebx
		push    eax
		mov 	eax,DWORD PTR SS:[0x01733AC4]
		mov     ecx, [eax]
		push    1
		add     edx, 0x8E
		push    0x3F800000
		push    edx
		mov     edx, [ebp+0x14]
		add     edx, 0xB9
		push    edx
		push    eax
		call    dword ptr [ecx+0x30]
		add esp,0x1C
		//
        mov eax,DWORD PTR SS:[0x01733AC4]
		push    0x0
		push    0x3F800000
		push    5700
		mov     esi, [eax]
		push    0x19
		mov ecx,0x01733B30
		mov 	eax,0x7C2CF0
		call 	eax
		mov     ecx, [ebp+0x18]
		mov     edx, [ebp+0x14]
		sub     ecx, ebx
		push    eax
		add     ecx, 0x9E
		add     edx, 0x7
		push    ecx
		mov ecx,DWORD PTR SS:[0x01733AC4]
		push    edx
		call    dword ptr [esi+0x14]
		// Hien Thi Opt Hut Mana
		xor 	edx,edx
		mov 	eax,[esp]
		mov 	dx,[eax+0x1C]
		push    edx
        push    5701
		push    0x19
		mov 	ecx,0x01733B30
		mov 	eax,0x7C2CF0
		call 	eax
		mov     edx, [ebp+0x18]
		sub     edx, ebx
		push    eax
		mov 	eax,DWORD PTR SS:[0x01733AC4]
		mov     ecx, [eax]
		push    1
		add     edx, 0x9E
		push    0x3F800000
		push    edx
		mov     edx, [ebp+0x14]
		add     edx, 0xB9
		push    edx
		push    eax
		call    dword ptr [ecx+0x30]
		add esp,0x1C
        //
        mov eax,DWORD PTR SS:[0x01733AC4]
		push    0x0
		push    0x3F800000
		push    5893
		mov     esi, [eax]
		push    0x19
		mov ecx,0x01733B30
		mov 	eax,0x7C2CF0
		call 	eax
		mov     ecx, [ebp+0x18]
		mov     edx, [ebp+0x14]
		sub     ecx, ebx
		push    eax
		add     ecx, 0xAE
		add     edx, 0x7
		push    ecx
		mov ecx,DWORD PTR SS:[0x01733AC4]
		push    edx
		call    dword ptr [esi+0x14]
		// Hien Thi Opt Hut Mana
		xor 	edx,edx
		mov 	eax,[esp]
		mov 	dl,[eax+0x2C]
		push    edx
        push    5701
		push    0x19
		mov 	ecx,0x01733B30
		mov 	eax,0x7C2CF0
		call 	eax
		mov     edx, [ebp+0x18]
		sub     edx, ebx
		push    eax
		mov 	eax,DWORD PTR SS:[0x01733AC4]
		mov     ecx, [eax]
		push    1
		add     edx, 0xAE
		push    0x3F800000
		push    edx
		mov     edx, [ebp+0x14]
		add     edx, 0xB9
		push    edx
		push    eax
		call    dword ptr [ecx+0x30]
		add esp,0x1C
        //
        mov eax,DWORD PTR SS:[0x01733AC4]
		push    0x0
		push    0x3F800000
		push    5894
		mov     esi, [eax]
		push    0x19
		mov ecx,0x01733B30
		mov 	eax,0x7C2CF0
		call 	eax
		mov     ecx, [ebp+0x18]
		mov     edx, [ebp+0x14]
		sub     ecx, ebx
		push    eax
		add     ecx, 0xBE
		add     edx, 0x7
		push    ecx
		mov ecx,DWORD PTR SS:[0x01733AC4]
		push    edx
		call    dword ptr [esi+0x14]
		// Hien Thi Opt Hut Mana
		xor 	edx,edx
		mov 	eax,[esp]
		mov 	dl,[eax+0x2B]
		push    edx
        push    5701
		push    0x19
		mov 	ecx,0x01733B30
		mov 	eax,0x7C2CF0
		call 	eax
		mov     edx, [ebp+0x18]
		sub     edx, ebx
		push    eax
		mov 	eax,DWORD PTR SS:[0x01733AC4]
		mov     ecx, [eax]
		push    1
		add     edx, 0xBE
		push    0x3F800000
		push    edx
		mov     edx, [ebp+0x14]
		add     edx, 0xB9
		push    edx
		push    eax
		call    dword ptr [ecx+0x30]
		add esp,0x1C
        mov ecx,DWORD PTR SS:[0x01733AC4]
		mov eax,[ecx]
		call dword ptr [eax+0x38]
		mov ecx,DWORD PTR SS:[0x01733AC4]
		mov edx,[ecx]
        call dword ptr [edx+0x64]
        pop eax
		push 0x004BA4B2
		ret
	}
}
__declspec(naked) void HienThiOptAn()// 004B803A
{
	  __asm {
		nop
		nop
		nop
		nop
		nop
		push eax
		mov ecx,[eax+0x64]
		test ecx,ecx
		jnz DaCoOpt
        add eax,0x64
		push eax
		call GetInforHienThiHinhAnh
        DaCoOpt:
		//
		mov eax,[ebp+0x14]
		add eax,0x22
		push eax
		mov eax,[ebp+0x18]
		add eax,0x10A
		push eax
		mov eax,[esp+0x8]
		add eax,0x64
		push eax
        call HienThiChoose
		//
		mov eax,[ebp+0x14]
		add eax,0x22
		push eax
		mov eax,[ebp+0x18]
		add eax,0x121
		push eax
		mov eax,[esp+0x8]
		add eax,0x64
		push eax
		call HienThiChoose
        //
		mov eax,[ebp+0x14]
		add eax,0x22
		push eax
		mov eax,[ebp+0x18]
		add eax,0x138
		push eax
		mov eax,[esp+0x8]
		add eax,0x64
		push eax
		call HienThiChoose

		//
		Default:
		//mov eax,[ebp+0x504]
		//mov DWORD PTR [eax+0x10],0x0
		//mov eax,[ebp+0x508]
		//mov DWORD PTR [eax+0x10],0x0
        pop eax
		mov ecx,0x10
		push 0x004B803F
		ret


       HienThiChoose:
	   push 5670
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
       push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
	   mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 68
	   mov  DWORD PTR SS : [ecx + 0xA0] , 248
	   mov  DWORD PTR SS : [ecx + 0x98] , 214
	   mov  DWORD PTR SS : [ecx + 0xA4] , 90
	   push 0x00000000
	   push 0x0089E914
	   mov ecx,[esp+0x10]
	   mov edx,[esp+0x14]
	   push ecx
	   push edx
	   mov ecx, [esp+0x14]
	   mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
	   call eax
	   mov ecx,[esp+0x4]
	   push 0x1732CC8
	   mov eax, 0x7B9850
	   call eax //Draw1
	   ret 0xC


	   GetInforHienThiHinhAnh:
	   sub esp,0x4
	   xor ecx,ecx
	   mov [esp],ecx
	   mov ecx,[esp]
       LoopLoadHienThi:
       mov eax, 0x010CC088
	   mov edx, [eax + ecx]
       mov eax,[esp+0x8]
	   mov [eax + ecx], edx
	   add ecx, 0x4
	   cmp ecx, 0xB8
	   jnz LoopLoadHienThi
	   add esp,0x4
       ret 0x4
	}
}

__declspec(naked) void ChangeEndCodeSkill()// 0069931C 6
{
	  __asm {
		nop
		nop
		nop
		nop
		nop
		pushad
        push 0x0089F5EC
		mov ecx,0x015732C8
		mov eax,0x007B7880
		call eax
		cmp eax,0xFFFFFFFF
		jz NotFound
		// Tinh Do Dai
		mov ecx,0x015732C8
		mov ecx,[ecx+0x8]
		mov edx,[ecx+eax*0x4+4]
		mov eax,[ecx+eax*0x4]
		mov edi,[edx+0x14]
		mov ecx,[eax+0x14]
		sub edi,ecx
		push edi
		mov eax,[esp+0x8]
		mov eax,[eax+0x8]
		push eax // Chuoi Value
		mov eax,[esp+0x1C]
		push eax //Chuoi Key
        call EncCodeCorrectSkill


		//
        popad
		Default:
		add esp,0x10
		cmp eax,0x1
		push 0x00699322
		ret

		NotFound:
		push 0x0
		ret

		EncCodeCorrectSkill:
		sub esp,0x8
		xor ecx,ecx
        mov [esp+0x4],ecx
		mov [esp],ecx
        BackloopEncode:
		mov ecx,[esp]
		mov eax,[esp+0x10]
        xor edx,edx
		mov dl,[eax+ecx]
		mov eax,[esp+0xC]
		mov ecx,[esp+0x4]
		xor ebx,ebx
		mov bl,[eax+ecx]
		xor edx,ebx
		mov eax,[esp+0x10]
		mov ecx,[esp]
		mov [eax+ecx],dl
		add ecx,1
        mov [esp],ecx
		cmp ecx,0x67
		ja EndFuncXOR
		mov ecx,[esp+0x4]
		add ecx,1
		cmp ecx,253
		ja QuayLaiGiaTriDau
        mov [esp+0x4],ecx
		jmp BackloopEncode

		QuayLaiGiaTriDau:
        mov DWORD PTR [esp+0x4],0x0
        jmp BackloopEncode

        EndFuncXOR:
		add esp,0x8
		ret 0xC
	}
}
__declspec(naked) void DoiUIInventory()// 005E3174
{
	  __asm {
		mov DWORD PTR [esp+0x34],320
		mov DWORD PTR [esp+0x38],410
		push 0x005E3184
        ret
	}
}
__declspec(naked) void DoiUIInventory2()// 005E3278
{
	  __asm {
		mov DWORD PTR [esp+0x000003EC],320
		mov DWORD PTR [esp+0x000003F0],410
		push 0x005E328E
        ret
	}
}
__declspec(naked) void DoiUIInventory9()// 005E324D
{
	  __asm {
		sub ecx,410
		push 0x005E3253
        ret
	}
}
__declspec(naked) void DoiUIInventory10()// 005E3256
{
	  __asm {
		shr eax, 1
        sub eax,200
        mov [esp+0x3E8], ecx
		push 0x005E325F
        ret
	}
}
__declspec(naked) void DoiUIInventory3()// 00492FC3
{
	  __asm {
		push 3802
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
        mov ecx,[esp+0x0000011C]
		push eax
		push 0x00492FC8
        ret
	}
}
__declspec(naked) void DoiUIInventory4()// 00493023
{
	  __asm {
		push 320
		push 0x00493028
        ret
	}
}
__declspec(naked) void DoiUIInventory5()// 0049303E
{
	  __asm {
		mov eax,410
		mov DWORD PTR [ebp+0x68],0x00000000
		sub eax,edi
		mov DWORD PTR [ebp+0x6C],0x00000000
		mov DWORD PTR [ebp+0x70],320
        mov [ebp+0x74],eax
		push 0x0049305D
        ret
	}
}
__declspec(naked) void DoiUIInventory6()// 00493068
{
	  __asm {
		push 0x00493246
        ret
	}
}
__declspec(naked) void DoiUIInventory8()// 0049304C
{
	  __asm {
        mov dword ptr [ebp+0x6C],0x0
		push 0x00493053
        ret
	}
}
__declspec(naked) void ThayMapThanhSuKienBH()// 00493015
{
	  __asm {
		nop
		nop
		nop
		nop
        nop
		push 0x0049301A
        ret
	}
}
__declspec(naked) void BoQuaHienThiLevel()// 0051EC02
{
	  __asm {
		mov ecx,[esi+0x0000054C]
		xor eax,eax
		mov ax,[ecx+0xE]
		lea ecx,[eax*0x8+00000000]
		sub ecx,eax
		lea edx,[ecx+ecx*0x4]
		movsx eax,byte ptr [edx*0x4+0x01623CA0]
		dec eax
		cmp eax,0xA
        jl Default
	  	mov ecx, [esi+0x208]
		push 0x0
		push 0x0051EC0A
        ret

		Default:
        mov ecx, [esi+0x208]
		push 0x1
		push 0x0051EC0A
        ret
	}
}
__declspec(naked) void HienThiTenMod()// 0051FEAE
{
	  __asm {
		mov ecx,[ebx+0x0000054C]
		xor eax,eax
		mov ax,[ecx+0xE]
		lea ecx,[eax*0x8+00000000]
		sub ecx,eax
		lea edx,[ecx+ecx*0x4]
		movsx eax,byte ptr [edx*0x4+0x01623CA0]
		dec eax
		cmp eax,0xA
		jl Default
		push    0x0
		lea     edx, [esp+0x1C]
		mov ecx,DWORD PTR [0x01733AC4]
		push    0x3F800000
		push    edx
		mov     edx, [ebx+0x18]
		mov     eax, [ecx]
		add     edx, 0x8
		push    edx
		mov     edx, [ebx+0x14]
		sar     esi, 0x1
		sub     edx, esi
		add     edx, 0x9A
		nop
		nop
		nop
        nop
		push 0x0051FED3
        ret
		Default:
        push 00
		lea edx,[esp+0x1C]
		push 0x0051FEB4
        ret
	}
}
__declspec(naked) void BoQuaHienThiLevel2()// 0051ED4F
{
	  __asm {
		mov cl,[eax+0x01623CA0]
		cmp cl,0xB
		jl Default
		push 0x0051EDEA
        ret

		Default:
		push 0x0051ED55
        ret
	}
}
__declspec(naked) void HienThiIconBoss()// 0051ECAB
{
	  __asm {
		mov ecx,[esi+0x0000054C]
		xor eax,eax
		mov ax,[ecx+0xE]
		lea ecx,[eax*0x8+00000000]
		sub ecx,eax
		lea edx,[ecx+ecx*0x4]
		movsx eax,byte ptr [edx*0x4+0x01623CA0]
		dec eax
		cmp eax,0xA
		jl Default
		mov ecx,[esi+0x0000020C]
		mov DWORD PTR [ecx+0x6C],281
		mov DWORD PTR [ecx+0x68],00
		mov DWORD PTR [ecx+0x70],31
		mov DWORD PTR [ecx+0x74],312
        push 4194
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
        mov ecx,[esi+0x0000020C]
		mov [ecx+0x40],eax
		push 0x0051ECDE
        ret
		Default:
        push 4191
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
        mov ecx,[esi+0x0000020C]
		mov [ecx+0x40],eax
		mov eax,[esi+0x0000021C]
		push 0x0051ECB1
        ret
	}
}
__declspec(naked) void DoiHienThiMauBossMoi()// 007EC4C4
{
	  __asm {
		push 4194
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,[esi+0xA8]
		cmp ecx,eax
		jnz Default
		push 0x007EC51D
        ret
		Default:
		mov eax, [esi+0x2C0]
		push 0x007EC4CA
        ret
	}
}
__declspec(naked) void DrawNewForm()// 0051D2D4
{
	  __asm {
        pushad
	 	mov eax, [esi+0x548]
		cmp  eax,0x2
		jnz Default
        mov ecx,[esi+0x0000054C]
		xor eax,eax
		mov ax,[ecx+0xE]
		lea ecx,[eax*0x8+00000000]
		sub ecx,eax
		lea edx,[ecx+ecx*0x4]
		movsx eax,byte ptr [edx*0x4+0x01623CA0]
		dec eax
		cmp eax,0xA
        jl Default
		push 4194
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov [esi+0x74],eax
		mov DWORD PTR [esi+0x9C],0
		mov DWORD PTR [esi+0xA0],0
		mov DWORD PTR [esi+0xA4],401
		mov DWORD PTR [esi+0xA8],56
		mov ecx,[esi+0x550]
		mov DWORD PTR [ecx+0xA8],eax
		mov DWORD PTR [ecx+0x124],eax
		mov DWORD PTR [ecx+0xD0],0
		mov DWORD PTR [ecx+0xD4],82
		mov DWORD PTR [ecx+0xD8],288
		mov DWORD PTR [ecx+0xDC],106
		mov DWORD PTR [ecx+0x14C],0
		mov DWORD PTR [ecx+0x150],82
		mov DWORD PTR [ecx+0x154],288
		mov DWORD PTR [ecx+0x158],106
		mov eax,[esi+0x528]
		mov DWORD PTR [eax+0x10],0x0
		mov eax,[esi+0x52C]
		mov DWORD PTR [eax+0x10],0x0
        mov eax,[esi+0x530]
		mov DWORD PTR [eax+0x10],0x0
		mov     eax, [esi+0x20]
		mov     edi, [esi+0x18]
		mov     ecx, [esi+0x550]
		lea     eax, [eax+edi-0x14]
		mov     edx, [ecx]
		push    eax
		mov     eax, [esi+0x14]
		add     eax, 0x50
		push    eax
		call    dword ptr [edx+0x1C]
        popad
		push 0x0051D2DF
        ret

		Default:
		push 4193
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov [esi+0x74],eax
		mov DWORD PTR [esi+0x9C],0
		mov DWORD PTR [esi+0xA0],157
		mov DWORD PTR [esi+0xA4],180
		mov DWORD PTR [esi+0xA8],206
        push 4193
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
        mov ecx,[esi+0x550]
		mov DWORD PTR [ecx+0xA8],eax
		mov DWORD PTR [ecx+0x124],eax
		mov DWORD PTR [ecx+0xD0],50
		mov DWORD PTR [ecx+0xD4],123
		mov DWORD PTR [ecx+0xD8],186
		mov DWORD PTR [ecx+0xDC],132
        //
		mov DWORD PTR [ecx+0x14C],50
		mov DWORD PTR [ecx+0x150],123
		mov DWORD PTR [ecx+0x154],186
		mov DWORD PTR [ecx+0x158],132
		mov eax,[esi+0x528]
		mov DWORD PTR [eax+0x10],0x1
		mov eax,[esi+0x52C]
		mov DWORD PTR [eax+0x10],0x1
        mov eax,[esi+0x530]
		mov DWORD PTR [eax+0x10],0x1
		mov eax, [esi+0x20]
		mov     edi, [esi+0x18]
		mov     ecx, [esi+0x550]
		lea     eax, [eax+edi-0x1B]
		mov     edx, [ecx]
		push    eax
		mov     eax, [esi+0x14]
		add     eax, 0x23
		push    eax
		call    dword ptr [edx+0x1C]
		LoadContinue:
        popad
		mov eax, [esi+0x548]
		push 0x0051D2DA
		ret

	}
}
__declspec(naked) void AddNewUIMod()// 0051D156
{
	  __asm {
		nop
		nop
		nop
		nop
		nop
		push eax
        push 4194
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		push 0x7C
		mov edi,eax
		mov eax,0x00848138
		call eax
		add esp,0x4
		test eax,eax
		jz Default
		mov ecx,eax
		mov eax,0x7DFE80
		call eax
		mov ecx,[esp]
        mov [ecx],eax
		push edi
		push 0x015720C8
		push 56
		push 401
		push 0
		push 0
        mov edi,eax
		mov ecx,edi
		mov eax,0x007DFFB0
		call eax
		mov dword ptr [edi+0x68],0x0
		mov dword ptr [edi+0x6C],0x0
		mov dword ptr [edi+0x70],401
		mov dword ptr [edi+0x74],56
		Default:
        pop eax
		mov ecx,[esp+0x00000084]
		push 0x0051D15D
        ret
	}
}
__declspec(naked) void ChangeSizeScrollBar()// 004B74BC
{
	  __asm {
		mov DWORD PTR [esp+0x000000D4],188
		mov DWORD PTR [esp+0x000000D8],72
		mov DWORD PTR [esp+0x000000E0],175
		mov DWORD PTR [esp+0x000000E8],22
		mov DWORD PTR [esp+0x000000EC],19
		mov DWORD PTR [esp+0x000000F0],13
		push 0x004B74FE
        ret
	}
}
__declspec(naked) void ChangeSizeButtonNK()// 004B6CC5
{
	  __asm {
		mov dword ptr [esp+0x11C], 112
		mov dword ptr [esp+0x120], 278
		push 0x004B6CDB
        ret
	}
}
__declspec(naked) void ChangeSizePhanNo()// 004B85B0
{
	  __asm {
		mov edx,[ecx]
		add eax,0xD0
		push 0x004B85B5
        ret
	}
}
__declspec(naked) void ChangeSizeKhi()// 004B8618
{
	  __asm {
		mov edx,[ecx]
		add eax,0xD0
		push 0x004B861D
        ret
	}
}
__declspec(naked) void ChangeSizeNutDropNick()// 004B6945
{
	  __asm {
		mov dword ptr [esp+0x0000017C],188
		mov dword ptr [esp+0x00000180],47
		push 0x004B695B
        ret
	}
}
__declspec(naked) void ChangeSizeImagePhanNo()// 004B65C2
{
	  __asm {
		push 0x004B65CB
		ret
	}
}
__declspec(naked) void ChangeSPozLevel()// 004B833D
{
	  __asm {
		mov ecx,[ebp+0x14]
		add ecx,0x85
        push 0x004B8343
		ret
	}
}
__declspec(naked) void ChangeSPozNgoaiHieu()// 004B6C29
{
	  __asm {
		mov eax,[esp+0x58]
		mov ecx,235
        push 0x004B6C30
		ret
	}
}
__declspec(naked) void DoiHinhAnhNgoaiHieuInfo()// 004B8404
{
	  __asm {
			nop
			nop
			nop
			nop
			nop
			push eax
			mov eax, DWORD PTR SS : [0x10D94A8]
            mov ecx, [eax + 0x470]
            mov eax, [eax + ecx * 0x4 + 0x20]
			push eax
			call GetIDNickIcon
			cmp eax,0xFF
            jz JumpOut
			mov ecx,[esp]
			push ecx
			push eax
			call ShowIconNick
			mov eax,[esp]
			add eax,0x20
			mov edx,eax
            push eax
            push 0x00000000
            push 0x0089E914
			mov eax,[ebp+0x18]
			add eax,0x41
			push eax
			mov eax,[ebp+0x14]
			add  eax, 0x5D
			push eax
			mov ecx, edx
			mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
			call eax
			pop eax
			push 0x1732CC8
			mov ecx, eax
			mov eax, 0x7B9850
			call eax //Draw1
			pop eax
			mov ecx,[ebp+0x00000554]
            push 0x004BB491
			ret



            JumpOut :
			pop eax
			mov ecx,[ebp+0x00000554]
            push 0x004BB491
			ret


            TangGiaTriByte:
			mov eax,[esp+0x4]
			xor ecx,ecx
			mov cl,[eax]
			add ecx,1
			cmp ecx,15
			ja LonHon10Lan
			mov [eax],cl
			ret

			LonHon10Lan:
			mov byte ptr [eax],0x0
			xor ecx,ecx
			mov cl,[eax+0x1]
			add ecx,0x1
			cmp ecx,9
			ja quaytrolaibandauchay
            mov byte ptr [eax+0x1],cl
			mov byte ptr [eax],0x0
			ret

			quaytrolaibandauchay:
            mov byte ptr [eax+0x1],0x0
			mov byte ptr [eax],0x0
			ret

			GetIDNickIcon:
			sub esp,0x4
			xor ecx,ecx
			mov [esp],ecx
			BackLoopGetNickIconID:
			mov eax,[0x016A2178]
			xor edx,edx
			mov edx,[eax+ecx]
			mov ecx,[esp+0x8]
			cmp ecx,edx
			jnz KiemTraGiaTriTiepTheo
			mov eax,[0x016A2178]
			xor edx,edx
			mov ecx,[esp]
			mov dl,[eax+ecx+0x90]
			mov eax,edx
			add esp,0x4
			ret 0x4

			KiemTraGiaTriTiepTheo:
			mov ecx,[esp]
			add ecx,0xBC
			mov [esp],ecx
			cmp ecx,0x20154
			jl BackLoopGetNickIconID
			add esp,0x4
			ret 0x4


			ShowIconNick:
			mov eax,[esp+0x4]
			cmp eax,10
			jae KiemTraIDICon2
			push 6523
			push 25
			mov ecx,0x01733B30
			mov eax,0x007C2CF0
			call eax
			push eax
			mov ecx,0x015720C8
			mov eax,0x007B1EC0
			call eax
			mov ecx,[esp+0x8]
			mov  DWORD PTR SS : [ecx + 0x70+0x20] , eax
			mov  DWORD PTR SS : [ecx + 0xA0+0x20] , 0x82
			mov  DWORD PTR SS : [ecx + 0x98+0x20] , 0
			mov eax,[esp+0x4]
			imul eax,20
			mov  DWORD PTR SS : [ecx + 0x9C+0x20] , eax
			add eax,20
			mov  DWORD PTR SS : [ecx + 0xA4+0x20] , eax
			ret 0x8

			KiemTraIDICon2:
			cmp eax,20
			jae KiemTraIDICon3
			push 6524
			push 25
			mov ecx,0x01733B30
			mov eax,0x007C2CF0
			call eax
			push eax
			mov ecx,0x015720C8
			mov eax,0x007B1EC0
			call eax
			mov ecx,[esp+0x8]
			mov  DWORD PTR SS : [ecx + 0x70+0x20] , eax
			mov  DWORD PTR SS : [ecx + 0xA0+0x20] , 0x82
			mov  DWORD PTR SS : [ecx + 0x98+0x20] , 0
			mov eax,[esp+0x4]
			sub eax,10
			imul eax,20
			mov  DWORD PTR SS : [ecx + 0x9C+0x20] , eax
			add eax,20
			mov  DWORD PTR SS : [ecx + 0xA4+0x20] , eax
			ret 0x8

			KiemTraIDICon3:
			cmp eax,30
			jae KiemTraIDICon4
			push 6525
			push 25
			mov ecx,0x01733B30
			mov eax,0x007C2CF0
			call eax
			push eax
			mov ecx,0x015720C8
			mov eax,0x007B1EC0
			call eax
			mov ecx,[esp+0x8]
			mov  DWORD PTR SS : [ecx + 0x70+0x20] , eax
			mov  DWORD PTR SS : [ecx + 0xA0+0x20] , 0x82
			mov  DWORD PTR SS : [ecx + 0x98+0x20] , 0
			mov eax,[esp+0x4]
			sub eax,20
			imul eax,20
			mov  DWORD PTR SS : [ecx + 0x9C+0x20] , eax
			add eax,20
			mov  DWORD PTR SS : [ecx + 0xA4+0x20] , eax
			ret 0x8

			KiemTraIDICon4:
			cmp eax,40
			jae KiemTraIDICon5
			push 6526
			push 25
			mov ecx,0x01733B30
			mov eax,0x007C2CF0
			call eax
			push eax
			mov ecx,0x015720C8
			mov eax,0x007B1EC0
			call eax
			mov ecx,[esp+0x8]
			mov  DWORD PTR SS : [ecx + 0x70+0x20] , eax
			mov  DWORD PTR SS : [ecx + 0xA0+0x20] , 0x82
			mov  DWORD PTR SS : [ecx + 0x98+0x20] , 0
			mov eax,[esp+0x4]
			sub eax,30
			imul eax,20
			mov  DWORD PTR SS : [ecx + 0x9C+0x20] , eax
			add eax,20
			mov  DWORD PTR SS : [ecx + 0xA4+0x20] , eax
			ret 0x8

			KiemTraIDICon5:
			cmp eax,50
			jae KiemTraIDICon6
			push 6527
			push 25
			mov ecx,0x01733B30
			mov eax,0x007C2CF0
			call eax
			push eax
			mov ecx,0x015720C8
			mov eax,0x007B1EC0
			call eax
			mov ecx,[esp+0x8]
			mov  DWORD PTR SS : [ecx + 0x70+0x20] , eax
			mov  DWORD PTR SS : [ecx + 0xA0+0x20] , 0x82
			mov  DWORD PTR SS : [ecx + 0x98+0x20] , 0
			mov eax,[esp+0x4]
			sub eax,40
			imul eax,20
			mov  DWORD PTR SS : [ecx + 0x9C+0x20] , eax
			add eax,20
			mov  DWORD PTR SS : [ecx + 0xA4+0x20] , eax
			ret 0x8

			KiemTraIDICon6:
			cmp eax,60
			jae KiemTraIDICon7
			push 6528
			push 25
			mov ecx,0x01733B30
			mov eax,0x007C2CF0
			call eax
			push eax
			mov ecx,0x015720C8
			mov eax,0x007B1EC0
			call eax
			mov ecx,[esp+0x8]
			mov  DWORD PTR SS : [ecx + 0x70+0x20] , eax
			mov  DWORD PTR SS : [ecx + 0xA0+0x20] , 0x82
			mov  DWORD PTR SS : [ecx + 0x98+0x20] , 0
			mov eax,[esp+0x4]
			sub eax,50
			imul eax,20
			mov  DWORD PTR SS : [ecx + 0x9C+0x20] , eax
			add eax,20
			mov  DWORD PTR SS : [ecx + 0xA4+0x20] , eax
			ret 0x8

			KiemTraIDICon7:
			cmp eax,70
			jae KiemTraIDICon8
			push 6529
			push 25
			mov ecx,0x01733B30
			mov eax,0x007C2CF0
			call eax
			push eax
			mov ecx,0x015720C8
			mov eax,0x007B1EC0
			call eax
			mov ecx,[esp+0x8]
			mov  DWORD PTR SS : [ecx + 0x70+0x20] , eax
			mov  DWORD PTR SS : [ecx + 0xA0+0x20] , 0x82
			mov  DWORD PTR SS : [ecx + 0x98+0x20] , 0
			mov eax,[esp+0x4]
			sub eax,60
			imul eax,20
			mov  DWORD PTR SS : [ecx + 0x9C+0x20] , eax
			add eax,20
			mov  DWORD PTR SS : [ecx + 0xA4+0x20] , eax
			ret 0x8

			KiemTraIDICon8:
			cmp eax,80
			jae KiemTraIDICon9
			push 6530
			push 25
			mov ecx,0x01733B30
			mov eax,0x007C2CF0
			call eax
			push eax
			mov ecx,0x015720C8
			mov eax,0x007B1EC0
			call eax
			mov ecx,[esp+0x8]
			mov  DWORD PTR SS : [ecx + 0x70+0x20] , eax
			mov  DWORD PTR SS : [ecx + 0xA0+0x20] , 0x82
			mov  DWORD PTR SS : [ecx + 0x98+0x20] , 0
			mov eax,[esp+0x4]
			sub eax,70
			imul eax,20
			mov  DWORD PTR SS : [ecx + 0x9C+0x20] , eax
			add eax,20
			mov  DWORD PTR SS : [ecx + 0xA4+0x20] , eax
			ret 0x8

			KiemTraIDICon9:
			cmp eax,90
			jae KiemTraIDICon10
			push 6531
			push 25
			mov ecx,0x01733B30
			mov eax,0x007C2CF0
			call eax
			push eax
			mov ecx,0x015720C8
			mov eax,0x007B1EC0
			call eax
			mov ecx,[esp+0x8]
			mov  DWORD PTR SS : [ecx + 0x70+0x20] , eax
			mov  DWORD PTR SS : [ecx + 0xA0+0x20] , 0x82
			mov  DWORD PTR SS : [ecx + 0x98+0x20] , 0
			mov eax,[esp+0x4]
			sub eax,80
			imul eax,20
			mov  DWORD PTR SS : [ecx + 0x9C+0x20] , eax
			add eax,20
			mov  DWORD PTR SS : [ecx + 0xA4+0x20] , eax
			ret 0x8

			KiemTraIDICon10:
			cmp eax,100
			jae KiemTraIDICon11
			push 6532
			push 25
			mov ecx,0x01733B30
			mov eax,0x007C2CF0
			call eax
			push eax
			mov ecx,0x015720C8
			mov eax,0x007B1EC0
			call eax
			mov ecx,[esp+0x8]
			mov  DWORD PTR SS : [ecx + 0x70+0x20] , eax
			mov  DWORD PTR SS : [ecx + 0xA0+0x20] , 0x82
			mov  DWORD PTR SS : [ecx + 0x98+0x20] , 0
			mov eax,[esp+0x4]
			sub eax,90
			imul eax,20
			mov  DWORD PTR SS : [ecx + 0x9C+0x20] , eax
			add eax,20
			mov  DWORD PTR SS : [ecx + 0xA4+0x20] , eax
			ret 0x8

			KiemTraIDICon11:
			cmp eax,110
			jae KiemTraIDICon12
			push 6533
			push 25
			mov ecx,0x01733B30
			mov eax,0x007C2CF0
			call eax
			push eax
			mov ecx,0x015720C8
			mov eax,0x007B1EC0
			call eax
			mov ecx,[esp+0x8]
			mov  DWORD PTR SS : [ecx + 0x70+0x20] , eax
			mov  DWORD PTR SS : [ecx + 0xA0+0x20] , 0x82
			mov  DWORD PTR SS : [ecx + 0x98+0x20] , 0
			mov eax,[esp+0x4]
			sub eax,100
			imul eax,20
			mov  DWORD PTR SS : [ecx + 0x9C+0x20] , eax
			add eax,20
			mov  DWORD PTR SS : [ecx + 0xA4+0x20] , eax
			ret 0x8

            KiemTraIDICon12:
			cmp eax,120
			jae KiemTraIDICon13
			push 6534
			push 25
			mov ecx,0x01733B30
			mov eax,0x007C2CF0
			call eax
			push eax
			mov ecx,0x015720C8
			mov eax,0x007B1EC0
			call eax
			mov ecx,[esp+0x8]
			mov  DWORD PTR SS : [ecx + 0x70+0x20] , eax
			mov  DWORD PTR SS : [ecx + 0xA0+0x20] , 0x82
			mov  DWORD PTR SS : [ecx + 0x98+0x20] , 0
			mov eax,[esp+0x4]
			sub eax,110
			imul eax,20
			mov  DWORD PTR SS : [ecx + 0x9C+0x20] , eax
			add eax,20
			mov  DWORD PTR SS : [ecx + 0xA4+0x20] , eax
			ret 0x8


			//DanhHieuDong
			KiemTraIDICon13:
			sub eax,120
            add eax,6535
            push eax
			push 25
			mov ecx,0x01733B30
			mov eax,0x007C2CF0
			call eax
			push eax
			mov ecx,0x015720C8
			mov eax,0x007B1EC0
			call eax
			mov ecx,[esp+0x8]
			mov  DWORD PTR SS : [ecx + 0x70+0x20] , eax
			mov  DWORD PTR SS : [ecx + 0xA0+0x20] , 0x82
			mov  DWORD PTR SS : [ecx + 0x98+0x20] , 0
			xor edx,edx
			mov dl,[ecx+0x1]
            mov eax,edx
			imul eax,20
			mov  DWORD PTR SS : [ecx + 0x9C+0x20] , eax
			add eax,20
			mov  DWORD PTR SS : [ecx + 0xA4+0x20] , eax
			ret 0x8
	}
}
__declspec(naked) void XoaBorderLineNo1()// 004B6885
{
	  __asm {
		mov DWORD PTR [esi+0x6C],0x00000000
		mov DWORD PTR [esi+0x70],0x00000000
		mov DWORD PTR [esi+0x74],0x00000000
        push 0x004B689A
		ret
	}
}
__declspec(naked) void XoaBorderLineNo()// 004B6800
{
	  __asm {
		mov DWORD PTR [esi+0x6C],0x00000000
		mov DWORD PTR [esi+0x70],0x00000000
		mov DWORD PTR [esi+0x74],0x00000000
        push 0x004B6815
		ret
	}
}
__declspec(naked) void ChangeSNenAccount()// 004B7A45
{
	  __asm {
		lea edx,[eax+0xA5]
		add eax,0x9
        push 0x004B7A4B
		ret
	}
}
__declspec(naked) void ChangeSizeImagePhanNo2()// 004B664C
{
	  __asm {
		push 0x004B6655
        ret
	}
}
__declspec(naked) void BoQuaLoadKhungNick()// 004B60C8
{
	  __asm {
		push 0x004B60D1
        ret
	}
}
__declspec(naked) void ChangeSizeButtonNK2()// 004B6101
{
	  __asm {
		push  390
		push  355
		push  355
		push  18
		push 0x004B6115
        ret
	}
}
__declspec(naked) void HoverMiniToolsItemEquid()// 004BB006
{
	  __asm {
		lea edx,[eax+0xA5]
        cmp ecx,edx
		push 0x004BB00B
        ret
	}
}
__declspec(naked) void HoverMiniToolsItemEquid2()// 004BB7DE
{
	  __asm {
		lea edx,[eax+0xC3]
        cmp ecx,edx
		push 0x004BB7E3
        ret
	}
}
__declspec(naked) void ShowLevel()// 004BB5D8
{
	  __asm {
		lea esi,[ecx+0xBA]
        cmp edx,esi
		push 0x004BB5DD
        ret
	}
}
__declspec(naked) void ShowLevel2()// 004BB647
{
	  __asm {
		push edx
		add eax,0x155
        push eax
		push 0x004BB64C
        ret
	}
}
__declspec(naked) void HienThiInfoNguKhi()// 0050D980
{
	  __asm {
		push 10074
		mov ecx,0x017323A8
		mov eax,0x007D8550
		call eax
		test eax,eax
		jz Default
		mov ecx,[eax+0x18]
		mov eax,[eax+0x14]
		add eax,0x00000160
		add ecx,0x00000105
        mov edx,[ebx]
        push 0x0050D987
		ret

        Default:
		mov eax, 0x184
		mov ecx,eax
        mov edx,[ebx]
		push 0x0050D987
        ret
	}
}
__declspec(naked) void ChangeCodeErro()// 007C41D9
{
	  __asm {
		push 0x0000000
        ret
	}
}
__declspec(naked) void ChangeND2()// 007B7577
{
	  __asm {
		mov ecx,[esp+0xC]
		cmp ecx,0x006992AA
		jz ProcessLoadSkill
	  	cmp ecx,0x0067441E
		jz ProcessLoadNick
		mov ebp,[esp+0x10]
        mov ecx,0x00000041
		push 0x007B7580
		ret


		ProcessLoadSkill:
        push 213
		push 75
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
        mov [esp+0x10],eax
		mov ebp,[esp+0x10]
        mov ecx,0x00000041
		push 0x007B7580
		ret

        ProcessLoadNick:
        push 214
		push 75
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
        mov [esp+0x10],eax
		mov ebp,[esp+0x10]
        mov ecx,0x00000041
		push 0x007B7580
		ret
	}
}
__declspec(naked) void CheckName()// 0069933F
{
	  __asm {
		push 333
		push 75
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov eax,[esi+0x8]
		push eax
		mov eax,0x0085C488
		call dword ptr [eax]
		add esp,0x8
		test eax,eax
		jz Default
		push 0x0
        ret
		Default:
		push esi
		push 1
        lea eax,[esp+0x30]
		push 0x00699346
		ret

		EncodeString:
		sub esp,0x4
		xor ecx,ecx
		mov [esp],ecx
        BackLoopEndCode:
		mov eax,[esp+0x8]
		xor edx,edx
		mov ecx,[esp]
		mov dl,[eax+ecx]
		test edx,edx
        jz EndEncode
		xor dl,0xA5
		mov [eax+ecx],dl
		add ecx,1
		mov [esp],ecx
        jmp BackLoopEndCode
		EndEncode:
        mov eax,[esp+0x8]
        add esp,0x4
        ret 0x4
	}
}
__declspec(naked) void ChangeUIInfor()// 004B5F0C
{
	  __asm {
		mov eax,0x00896F98
		mov dword ptr [eax],274
		mov dword ptr [eax+0x4],109
		mov dword ptr [eax+0x8],274
		mov dword ptr [eax+0xC],142
		mov dword ptr [eax+0x10],308
		mov dword ptr [eax+0x14],175
		mov dword ptr [eax+0x18],274
		mov dword ptr [eax+0x1C],175
		mov dword ptr [eax+0x20],274
		mov dword ptr [eax+0x24],76
		mov dword ptr [eax+0x28],308
		mov dword ptr [eax+0x2C],109
		mov dword ptr [eax+0x30],308
		mov dword ptr [eax+0x34],142
		mov dword ptr [eax+0x38],308
		mov dword ptr [eax+0x3C],76
		mov dword ptr [eax+0x40],0
		mov dword ptr [eax+0x44],0
		mov dword ptr [eax+0x48],0
		mov dword ptr [eax+0x4C],0
		mov dword ptr [eax+0x50],224
		mov dword ptr [eax+0x54],76
		mov dword ptr [eax+0x58],224
		mov dword ptr [eax+0x5C],109
		mov dword ptr [eax+0x60],206
		mov dword ptr [eax+0x64],210
		mov dword ptr [eax+0x68],240
		mov dword ptr [eax+0x6C],210
		mov dword ptr [eax+0x70],206
		mov dword ptr [eax+0x74],244
		mov dword ptr [eax+0x78],240
		mov dword ptr [eax+0x7C],244
		mov dword ptr [eax+0x80],206
		mov dword ptr [eax+0x84],278
		mov dword ptr [eax+0x88],240
		mov dword ptr [eax+0x8C],278
		mov dword ptr [eax+0x90],206
		mov dword ptr [eax+0x94],312
		mov dword ptr [eax+0x98],240
		mov dword ptr [eax+0x9C],312
		mov dword ptr [eax+0xA0],0
		mov dword ptr [eax+0xA4],0
		mov dword ptr [eax+0xA8],206
		mov dword ptr [eax+0xAC],142
		mov dword ptr [eax+0xB0],240
		mov dword ptr [eax+0xB4],142
		mov dword ptr [eax+0xB8],206
		mov dword ptr [eax+0xBC],175
		mov dword ptr [eax+0xC0],240
		mov dword ptr [eax+0xC4],175
		push 0x008948CC
		push 0x004B5F11
        ret
	}
}
__declspec(naked) void EncodeSkill()// 007B7C69
{
	  __asm {
		nop
		nop
		nop
		nop
        nop
        push ebx
        push eax
		push edx
		lea eax,[esp+0x20]
		push eax
		call EndCodeAgain
		pop ebx
        push ebx
		push 1
        lea ecx,[esp+0x1C]
		push 0x007B7C70
		ret

		EndCodeAgain:
		sub esp,0x8
		xor ecx,ecx
		mov [esp],ecx
        mov [esp+0x4],ecx
		BackLoopEncodeAgain:
		mov eax,[esp+0x10]
        mov ecx,[eax+0x2710]
		mov ecx,[esp]
		mov eax,[esp+0xC]
		xor edx,edx
		mov dl,[eax+ecx]
		mov eax,[esp+0x10]
        xor ebx,ebx
		mov ecx,[eax+0x2710]
        mov bl,[eax+ecx]
		xor dl,bl
		mov ecx,[esp]
		mov eax,[esp+0xC]
		mov [eax+ecx],dl
		mov ecx,[esp]
		lea ecx,[ecx+0x1]
		mov [esp],ecx
		mov eax,[esp+0x14]
		cmp ecx,eax
		jae EndFuncEncode
		mov eax,[esp+0x10]
		mov ecx,[eax+0x2710]
        lea ecx,[ecx+0x1]
		cmp ecx,10000
		jb AcceptValuePoz
		mov dword ptr [eax+0x2710],0x0
		jmp BackLoopEncodeAgain

		AcceptValuePoz:
		mov [eax+0x2710],ecx
		jmp BackLoopEncodeAgain

		EndFuncEncode:
        mov eax,[esp+0x10]
		mov ecx,[eax+0x2710]
        lea ecx,[ecx+0x1]
		cmp ecx,10000
		jb AcceptValuePoz2
		mov dword ptr [eax+0x2710],0x0
        jmp EncCheckAllOut
		AcceptValuePoz2:
		mov [eax+0x2710],ecx
		EncCheckAllOut:
		add esp,0x8
        ret 0xC

	}
}
__declspec(naked) void ShowGradeItem()// 0049153E
{
	  __asm {
		nop
		nop
		nop
		nop
        nop
		cmp eax,0xA
		jl Default
        push edx
		mov eax,[edx+0x8]
		test eax,eax
        jnz DaCoOpt
		add edx,0x8
		push edx
		call AddOptionImage
		push 3826
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,[esp]
		mov [ecx+0x48],eax
		DaCoOpt:
		mov eax,[esp]
		mov edx,dword ptr [0x01733B04]
		mov ecx,[eax+0x4]
		sub edx,ecx
		cmp edx,0x64
		jna ContinueShowGrade
		mov edx,dword ptr [0x01733B04]
		mov [eax+0x4],edx
		mov ecx,[eax]
		add ecx,1
		cmp ecx,3
		ja DaMaxCount
		mov [eax],ecx
		jmp ContinueShowGrade
		DaMaxCount:
		mov DWORD PTR [eax],0x0
		ContinueShowGrade:
		mov ecx,[eax]
		add eax,0x8
		mov edx,[esp+0x40]
		cmp edx,0xA
		jnz KiemTraRankKhac1
		mov DWORD PTR [eax+0x6C],0x0
		mov DWORD PTR [eax+0x74],31
		jmp ProcessGetLocalRank

		KiemTraRankKhac1:
		cmp edx,0xB
		jnz KiemTraRankKhac2
		mov DWORD PTR [eax+0x6C],77
		mov DWORD PTR [eax+0x74],107
		jmp ProcessGetLocalRank

		KiemTraRankKhac2:
		cmp edx,0xC
		jnz KiemTraRankKhac3
		mov DWORD PTR [eax+0x6C],120
		mov DWORD PTR [eax+0x74],150
		jmp ProcessGetLocalRank

		KiemTraRankKhac3:
		cmp edx,0xD
		jnz KiemTraRankKhac4
		mov DWORD PTR [eax+0x6C],166
		mov DWORD PTR [eax+0x74],196
		jmp ProcessGetLocalRank

		KiemTraRankKhac4:
        mov DWORD PTR [eax+0x6C],0x0
		mov DWORD PTR [eax+0x74],31
        jmp ProcessGetLocalRank

        ProcessGetLocalRank:
		mov eax,[esp]
		mov ecx,[eax]
		add eax,0x8
		cmp ecx,0
		ja KiemTraGrade1
		mov DWORD PTR [eax+0x68],0x0
		mov DWORD PTR [eax+0x70],31
		jmp ProcessShowIcon

		KiemTraGrade1:
		cmp ecx,1
		ja KiemTraGrade2
		mov DWORD PTR [eax+0x68],33
		mov DWORD PTR [eax+0x70],63
		jmp ProcessShowIcon

		KiemTraGrade2:
		cmp ecx,2
		ja KiemTraGrade3
		mov DWORD PTR [eax+0x68],66
		mov DWORD PTR [eax+0x70],96
		jmp ProcessShowIcon

		KiemTraGrade3:
		mov DWORD PTR [eax+0x68],99
		mov DWORD PTR [eax+0x70],129
		jmp ProcessShowIcon

		ProcessShowIcon:
        mov edx, [esp+0x3C]
		push edi
		push edx
		mov ecx,[esp+0x8]
		add ecx,0x8
		mov eax,0x7E00F0
        call eax
		pop eax
		mov eax, [esp+0x3C]
		push 0x00491580
		ret

		Default:
		dec eax
		mov edx,[esp+0x38]
		push 0x00491543
		ret


		AddOptionImage:
		sub esp,0x4
		xor ecx,ecx
		mov [esp],ecx
        BackGetOptionImage:
		mov ecx,[esp]
		mov eax,0x01615D88
		mov edx,[eax+ecx]
		mov eax,[esp+0x8]
		mov [eax+ecx],edx
		add ecx,4
		mov [esp],ecx
		cmp ecx,0x100
        jl BackGetOptionImage
        add esp,0x4
        ret 0x4
	}
}
__declspec(naked) void DoiIDNenBackGroundNPC()// 0052BECB
{
	  __asm {
		call dword ptr [eax+0x1C]
        push 3829
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,[esi+0x4C]
		mov [ecx+0x40],eax
		mov DWORD PTR [ecx+0x68],34
		mov DWORD PTR [ecx+0x6C],69
		mov DWORD PTR [ecx+0x70],141
		mov DWORD PTR [ecx+0x74],104
        mov ecx,[esi+0x4C]
		push 0x0052BED1
        ret
	}
}
__declspec(naked) void SpawModClient()// 006275A6
{
	  __asm {
		nop
		nop
		nop
		nop
		nop
		mov edx,[esp+0x2C]
		pushad
		cmp edx,0x50C
		jnz Default
		//
		mov edx,[0x1107258+0x83D4]
		mov [eax+0x4],edx
		mov edx,[0x1107258+0x83D4+0x4]
		mov DWORD PTR [eax+0x8],0x0
		mov edx,[0x1107258+0x83D4+0x8]
		mov [eax+0xC],edx

        mov edx,[0x1107258+0x83D4]
		mov [eax+0x20],edx
		mov edx,[0x1107258+0x83D4+0x4]
		mov DWORD PTR [eax+0x24],0x0
		mov edx,[0x1107258+0x83D4+0x8]
		mov [eax+0x28],edx
		//
		push 0x0
		lea ecx,[eax+0x4]
		push ecx
		lea ecx,[eax+0x20]
		push ecx
		push 1
		push 0
		push 4001
		push 101
		mov ecx,0x010D9350
		mov eax,0x0064E610
		call eax
		mov ecx,[esp+0x1C]
        mov [ecx+0x30],eax
        Default:
		popad
		mov edx,[esp+0x30]
		mov eax,[esp+0x2C]
		push 0x006275AE
        ret
	}
}
__declspec(naked) void HorseMove()// 00623876
{
	  __asm {
		nop
		nop
		nop
		nop
		nop
        pushad
		mov ecx,[0x0110F754]
		cmp ecx,0x50C
		jnz Default
		mov eax,[eax+0x30]
        mov ecx,[0x1107258+0x84B0]
        mov [eax+0x7C],ecx
        mov edx,[0x1107258+0x83D4]
		mov [eax+0x9C],edx
		mov edx,[0x1107258+0x83D4+0x4]
		mov DWORD PTR [eax+0xA0],edx
		mov edx,[0x1107258+0x83D4+0x8]
		mov [eax+0xA4],edx
        mov edx,[eax]
		mov ecx,eax
		mov eax,[eax]
		call dword ptr [eax+0x3C]
		mov eax,[esp+0x1C]
        mov eax,[eax+0x30]
        mov edx,[eax]
		mov ecx,eax
		call dword ptr [edx+0x38]
	   /*	mov edx,[eax]
		mov ecx,eax
		call dword ptr [edx+0x30] */
		Default:
        popad
		mov eax,[esp+0x20]
		mov ecx,[esp+0x24]
		push 0x0062387E
        ret
	}
}
__declspec(naked) void DisableSpeedCTC()// 00624B94
{
	  __asm {
		nop
		nop
		nop
		nop
		nop
		xor edx,edx
		mov dl,[eax]
		test edx,edx
		jz Default
		xor edx,edx
		mov dl,[0x1107258+0x47C]
		cmp edx,20
        jnz Default
		push 0xFFFF0000
		push 1
		push 0xC
		push 6615
		push 0x00624BF7
		ret

		Default:
        mov eax,[esi+0x0002B868]
		push 0x00624B9A
        ret
	}
}
__declspec(naked) void CongThanhChienThongTin()// 00652194
{
	  __asm {
		nop
		nop
		nop
		nop
		nop
		mov edx,[esi+0x48+0x4]
		cmp edx,15441
        jnz KiemTraThiHien2
		push eax
        add eax,0x300
		mov ecx,[eax]
		test ecx,ecx
        jnz DaCoOptionCTC
		pushad
        mov edi, 0x0
        LoopLoad2:
		mov ecx, 0x010CC088
		mov ecx, [ecx + edi]
		mov [eax + edi], ecx
		add edi, 0x4
		cmp edi, 0xB8
		jnz LoopLoad2
		popad
		DaCoOptionCTC:
        push 0
		mov edx,0xA5
		push edx
		mov edx,0xA5
		push edx
		mov ecx,[esp+0xC]
		add ecx,0x300
		push ecx
		call LoadImageCTC
		mov eax,[esp]
		push eax
		call ShowTextInfoCTC
		//
		mov ecx,DWORD PTR SS:[0x01733AC4]
		push 0xFFFFFFFF
		mov edx,[ecx]
		call dword ptr [edx+0xC]
		mov eax,[esp]
		lea edx,[eax+0x3D0]
		push edx
		lea edx,[eax+0x3D0+0x18]
		push edx
        push 4323
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov eax,[esp+0xC]
        add eax,8
		push eax
		mov eax,0x0085C564
		call dword ptr [eax]
		add esp,0x10
        push 0x3
		push 0x3F800000
		push 0x00000141
		mov eax,[esp+0xC]
        add eax,8
		push eax
		mov eax,0xA5
		push eax    // Chieu Cao
		mov edx,0xD5
		push edx    // Chieu Ngan
        mov ecx,[0x01733AC4]
		mov eax,DWORD PTR SS:[0x01733AC4]
		mov eax,[eax]
		call dword ptr [eax+0x18]
		mov ecx,[0x01733AC4]
		mov eax,[ecx]
		call dword ptr [eax+0x38]
		//
		pop eax
		push 0x0065293F
        ret

		KiemTraThiHien2:
		cmp edx,15442
		jnz KiemTraThiHien3
		push 1
		mov edx,0xA5
		push edx
		mov edx,0xA5
		push edx
		mov ecx,eax
		add ecx,0x300
		push ecx
		call LoadImageCTC
        jmp Default

		KiemTraThiHien3:
		cmp edx,15443
		jnz Default
		push 2
		mov edx,0xA5
		push edx
		mov edx,0xA5
		push edx
		mov ecx,eax
		add ecx,0x300
		push ecx
		call LoadImageCTC

        Default:
        mov eax,[esi+0x00000080]
		push 0x0065219A
		ret

	   LoadImageCTC:
	   mov eax,[esp+0x10]
	   cmp eax,0x0
       jnz PheCongThanh
	   push 4321
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
       push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
	   mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0x00
	   mov  DWORD PTR SS : [ecx + 0xA0] , 0xA2
	   mov  DWORD PTR SS : [ecx + 0x98] , 0x00
	   mov  DWORD PTR SS : [ecx + 0xA4] , 0x2C
	   jmp ProcessHienThiCTCImage

	   PheCongThanh:
	   cmp eax,0x1
	   jnz PheThuThanh
	   push 4322
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
       push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
	   mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0x00
	   mov  DWORD PTR SS : [ecx + 0xA0] , 0xA2
	   mov  DWORD PTR SS : [ecx + 0x98] , 0x00
	   mov  DWORD PTR SS : [ecx + 0xA4] , 0x2C
	   jmp ProcessHienThiCTCImage

	   PheThuThanh:
       push 4322
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
       push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
	   mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0x00
	   mov  DWORD PTR SS : [ecx + 0xA0] , 0xA2
	   mov  DWORD PTR SS : [ecx + 0x98] , 0x00
	   mov  DWORD PTR SS : [ecx + 0xA4] , 0x2C

       ProcessHienThiCTCImage:
	   push 0x00000000
	   push 0x0089E914
	   mov ecx,[esp+0x10]
	   mov edx,[esp+0x14]
	   push ecx
	   push edx
	   mov ecx, [esp+0x14]
	   mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
	   call eax
	   mov ecx,[esp+0x4]
	   push 0x1732CC8
	   mov eax, 0x7B9850
	   call eax //Draw1
	   ret 0x10

       ShowTextInfoCTC:
		sub esp,0x4
		xor ecx,ecx
		mov [esp],ecx
        mov ecx,DWORD PTR SS:[0x01733AC4]
		mov eax,[esp+0x4]
		push 0xFFFFFFFF
		mov edx,[ecx]
		call dword ptr [edx+0xC]
		BackLoopCheckAll:
        mov eax,[esp+0x8]
		mov ecx,[esp]
		imul ecx,0x1D
		mov edx,[eax+ecx+0x100]
		test edx,edx
        jz ChuaCoGiaTri
		mov edx,[eax+ecx+0x100+0x19]
		push edx
		xor edx,edx
		mov dl,[eax+ecx+0x100+0x18]
		push edx
		lea edx,[eax+ecx+0x100]
		push edx
        push 4320
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov eax,[esp+0x18]
        add eax,8
		push eax
		mov eax,0x0085C564
		call dword ptr [eax]
		add esp,0x14
        push 0x3
		push 0x3F800000
		push 0x00000141
		mov eax,[esp+0x14]
        add eax,8
		push eax
		mov eax,[esp+0x10]
		imul eax,0x10
		add eax,0x15
		nop
		nop
		nop
        nop
		push eax    // Chieu Cao
		mov edx,176
		nop
		nop
		nop
		nop
        nop
		push edx    // Chieu Ngan
        mov ecx,[0x01733AC4]
		mov eax,DWORD PTR SS:[0x01733AC4]
		mov eax,[eax]
		call dword ptr [eax+0x18]
		mov ecx,[0x01733AC4]
		mov eax,[ecx]
		call dword ptr [eax+0x38]
        //
		mov ecx,[esp]
		add ecx,1
		mov [esp],ecx
		cmp ecx,11
		jl BackLoopCheckAll
        //
        ChuaCoGiaTri:
		add esp,0x4
		ret 0x4
	}
}
__declspec(naked) void KhoaMoI()// 00485F29
{
	__asm {
        xor ecx,ecx
		mov cx,word ptr [0x110F754]
		cmp ecx,130
		jl Default
		push 0x00486232
		ret

		Default:
        xor ecx,ecx
		mov ecx,[0x0110FE5C]
		cmp ecx,2
		jnz Default2
        push 0x00486232
		ret

        Default2:
		push 10076
		push 0x00485F2E
        ret
	}
}
__declspec(naked) void KhoaEKhiPk()// 006B4A1E
{
	__asm {
        xor ecx,ecx
		mov ecx,[0x0110FE5C]
		cmp ecx,2
		jnz Default
		push 0x006B4977
        ret
		Default:
		push 0x2800
		push 0x006B4A23
        ret
	}
}
__declspec(naked) void KhoaE()// 00521604
{
	__asm {
        xor ecx,ecx
		mov ecx,[0x0110FE5C]
		cmp ecx,2
		jnz  Default
		push 10240
		mov ecx,0x017323A8
		mov eax,0x007D8550
		call eax
		mov edx,[eax]
		push 0x0
		mov ecx,eax
		call dword ptr [edx+0x30]
		push 0x00521776
        ret

		Default:
		mov eax,[esi+0x10]
        test eax,eax
		push 0x00521609
        ret
	}
}
__declspec(naked) void CheckAnimationOpenI()// 00493FA9
{
	__asm {
         xor ecx,ecx
		 mov ecx,[0x0110FE5C]
		 cmp ecx,2
         jz KhoaKhiPkAnimation
		 xor ecx,ecx
		 mov cx,word ptr [0x110F754]
		 cmp ecx,130
		 jl Default
		 //
         KhoaKhiPkAnimation:
         push 10074
		 mov ecx,0x017323A8
		 mov eax,0x007D8550
		 call eax
		 mov edx,[eax]
		 push 0x0
		 mov ecx,eax
         call dword ptr [edx+0x30]
		 //
		 push 0x2722
		 mov ecx,0x017323A8
		 mov eax,0x007D8550
		 call eax
		 mov edx,[eax]
		 push 0x0
		 mov ecx,eax
         call dword ptr [edx+0x30]
		 //
		 push 0x2723
		 mov ecx,0x017323A8
		 mov eax,0x007D8550
		 call eax
		 mov edx,[eax]
		 push 0x0
		 mov ecx,eax
         call dword ptr [edx+0x30]
		 //
		 push 0x2724
		 mov ecx,0x017323A8
		 mov eax,0x007D8550
		 call eax
		 mov edx,[eax]
		 push 0x0
		 mov ecx,eax
         call dword ptr [edx+0x30]
		 //
		 push 0x2725
		 mov ecx,0x017323A8
		 mov eax,0x007D8550
		 call eax
		 mov edx,[eax]
		 push 0x0
		 mov ecx,eax
         call dword ptr [edx+0x30]
		 //
		 push 0x2726
		 mov ecx,0x017323A8
		 mov eax,0x007D8550
		 call eax
		 mov edx,[eax]
		 push 0x0
		 mov ecx,eax
         call dword ptr [edx+0x30]
		 //
         //
		 push 0x2727
		 mov ecx,0x017323A8
		 mov eax,0x007D8550
		 call eax
		 mov edx,[eax]
		 push 0x0
		 mov ecx,eax
		 call dword ptr [edx+0x30]
         push 0x00494407
		 ret

		 push 0x0
		 push 0x0
		 mov ecx,dword ptr [0x01615E90]
		 mov eax,0x485F20
		 call eax
		 push 0x00494407
         ret


		 Default:
		 mov eax,[ebx+0x10]
		 test eax,eax
		 push 0x00493FAE
         ret
	}
}
__declspec(naked) void HienThiThongTinCTCForm()// 004F2C3E
{
	__asm {
		nop
		nop
		nop
		nop
		nop
        xor ecx,ecx
		/*mov cl,[eax]
		test ecx,ecx
		jz Default       */
        push eax
		add eax,0x300
		mov ecx,[eax]
		test ecx,ecx
		jnz LoadInforCTC
		pushad
		mov edi, 0x0
		LoopLoad2:
		mov ecx, 0x010CC088
		mov ecx, [ecx + edi]
		mov [eax + edi], ecx
		add edi, 0x4
		cmp edi, 0xB8
		jnz LoopLoad2
        popad
		LoadInforCTC:
		//
        push 4190
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
        xor edx,edx
		mov dl,[0x1107258+0x47C]
		cmp edx,20
		jz HienThiOutMap
        mov ecx,[esp]
        add ecx,0x300
		mov  DWORD PTR SS : [ecx + 0x70] , eax
		mov  DWORD PTR SS : [ecx + 0x9C] , 0x61
		mov  DWORD PTR SS : [ecx + 0xA0] , 0x3B
		mov  DWORD PTR SS : [ecx + 0x98] , 0x00
		mov  DWORD PTR SS : [ecx + 0xA4] , 0x74
        jmp ContinueHienThiFormCTCImage
		HienThiOutMap:
        mov ecx,[esp]
        add ecx,0x300
		mov  DWORD PTR SS : [ecx + 0x70] , eax
		mov  DWORD PTR SS : [ecx + 0x9C] , 118
		mov  DWORD PTR SS : [ecx + 0xA0] , 0x3B
		mov  DWORD PTR SS : [ecx + 0x98] , 0x00
		mov  DWORD PTR SS : [ecx + 0xA4] , 137
        ContinueHienThiFormCTCImage:
		//
		mov ecx,DWORD PTR [0x01733AC4]
		push 0xFFE5EC18
		mov eax,[ecx]
        call dword ptr [eax+0xC]
		//
		mov eax,[esp]
        xor ecx,ecx
		mov cl,[eax+0x2FC]
		add ecx,3839
        push ecx
		push 0x19
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		push 0
        push 	0x3F800000
        mov     ecx, [esi+0x18]
		mov     edx, [esi+0x14]
		mov 	eax,DWORD PTR [0x01733AC4]
		mov 	edi,[eax]
		add     ecx, 0x99
		add     edx, 0x78
		push    ecx
		push    edx
        push    eax
        mov 	ecx,DWORD PTR [0x01733AC4]
		call    dword ptr [edi+0x30]
        add esp,0x18
		//
        mov ecx,DWORD PTR [0x01733AC4]
		push 0xFFFF0000
		mov eax,[ecx]
        call dword ptr [eax+0xC]
		mov eax,[esp]
		xor ecx,ecx
		mov cl,[eax+0x2FE]
		push ecx
        xor ecx,ecx
		mov cl,[eax+0x2FD]
        add ecx,3830
        push ecx
		push 0x19
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
        push eax
		push 3807
		push 0x19
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		//
        mov     ecx, [esi+0x18]
		mov     edx, [esi+0x14]
		push    eax
		push    0
		push 	0x3F800000
		mov 	eax,DWORD PTR [0x01733AC4]
		mov 	edi,[eax]
		add     ecx, 0xAB
		add     edx, 0xB8
		push    ecx
		push    edx
        push    eax
        mov 	ecx,DWORD PTR [0x01733AC4]
		call    dword ptr [edi+0x30]
		add esp,0x20

		mov eax,[esp]
		push eax
		call ShowTextEventCTC
		//
		mov ecx,[esp]
		xor eax,eax
		mov al,[ecx]
		test eax,eax
		jz EndOfShow
        push 0x00000000
		push 0x0089E914
		mov ecx,[esi+0x18]
		add ecx,0x61
		mov edx,[esi+0x14]
		add edx,0x55
		push ecx
		push edx
		mov ecx, [esp+0x10]
        add ecx,0x300
		mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
		call eax
		mov ecx,[esp]
        add ecx,0x300
		push 0x1732CC8
		mov eax, 0x7B9850
	    call eax //Draw1
		//
        EndOfShow:
        pop eax
        Default:
        mov eax, [esi+0x15754]
		push 0x004F2D2D
		ret


		ShowTextEventCTC:
		sub 	esp,0x4
		xor 	ecx,ecx
		mov 	[esp],ecx
        BackLoopToShowNameBH:
		mov 	ecx,[esp]
        imul ecx,0x1D
		mov   	eax, [esp+0x8]
		lea     eax,[eax+ecx+0x100]
		mov     edx,[eax]
		test 	edx,edx
		jz 		KetThucShow
		mov 	eax,[esp+0x8]
		mov ecx,[esp]
		imul ecx,0x15
		lea eax,[eax+0x100+ecx]
		mov     ecx, [esi+0x18]
		mov edx,[esp]
		imul    edx,0x15
		add     ecx,edx
		mov     edx, [esi+0x14]
        push    eax
		push 	0
		push    0x3F800000
		mov 	eax,DWORD PTR [0x01733AC4]
		mov 	edi,[eax]
		add     ecx, 0xDA
		add     edx, 0x14
		push    ecx
		push    edx
        push    eax
        mov 	ecx,DWORD PTR [0x01733AC4]
		call    dword ptr [edi+0x30]
		add esp,0x18
		//
		mov ecx,[esp]
        mov eax,[esp+0x8]
		imul ecx,0x1D
		mov edx,[eax+ecx+0x100+0x19]
		push edx
		xor edx,edx
		mov dl,[eax+ecx+0x100+0x18]
		push edx
        push 3838
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		//
		mov eax,[esp+0x8]
        mov     ecx, [esi+0x18]
		mov 	edx,[esp+0xC]
		imul    edx,0x15
		add     ecx,edx
		mov     edx, [esi+0x14]
		push    0
		push    0x3F800000
		mov 	eax,DWORD PTR [0x01733AC4]
		mov 	edi,[eax]
		add     ecx, 0xDA
		add     edx, 0xD0
		push    ecx
		push    edx
        push    eax
        mov 	ecx,DWORD PTR [0x01733AC4]
		call    dword ptr [edi+0x30]
		add     esp,0x20
		//
		mov ecx,[esp]
		add ecx,1
		mov [esp],ecx
		cmp ecx,0x9
        jl BackLoopToShowNameBH
        KetThucShow:
        add esp,0x4
        ret 0x4
	}
}
__declspec(naked) void ThamGiaCTC()// 004F2E0A
{
	__asm {
		nop
		nop
		nop
		nop
		nop
        push eax
		xor ecx,ecx
		mov cl,[eax]
		test ecx,ecx
		jz Default
        mov ecx,DWORD PTR SS:[0x01733AD0]
		xor eax,eax
		mov al,[ecx+0x210]
		test eax,eax
		jz Default3
		mov ecx,DWORD PTR SS:[0x01733AD0]
		xor eax,eax
		mov eax,[ecx+0x210+0xC]
		mov ecx,[esi+0x18]
        add ecx,81
		cmp eax,ecx
		jl Default
		add ecx,14
		cmp eax,ecx
		ja Default
        mov ecx,DWORD PTR SS:[0x01733AD0]
		xor eax,eax
		mov eax,[ecx+0x210+0x4]
		mov ecx,[esi+0x14]
		add ecx,14
		cmp eax,ecx
		jl Default
        add ecx,53
		cmp eax,ecx
		ja Default
		mov eax,[esp]
		xor ecx,ecx
		mov cl,[eax+0x1]
		test ecx,ecx
		jnz Default
        mov byte ptr [eax+0x1],0x1
		// Kiem Tra VP
		push 7
		push 2503
		call CheckCorrectItem
		test eax,eax
        jz KhongTimThayItem
		// Kiem Tra Bang Hoi
		mov edx,[0x1107258+0x838C]
		test edx,edx
        jz NVChuaCoBangHoi
		//
		sub esp,0x8
		mov DWORD PTR [esp],0x0
        mov DWORD PTR [esp+0x4],0x0
		mov eax,esp
		mov dword ptr [eax],0xE57C0005
		push eax
		mov ecx,0x155EE60
		mov eax,0x006B2F60
		call eax
	    add esp,0x8
		//

		Default:
		pop eax
		pop edi
		pop esi
		pop ebp
		pop ebx
		pop ecx
		push 0x004F2E0F
		ret

        Default3:
		pop eax
        mov byte ptr [eax+0x1],0x0
		pop edi
		pop esi
		pop ebp
		pop ebx
		pop ecx
		push 0x004F2E0F
		ret

		CheckCorrectItem:
		sub esp,0x4
		xor ecx,ecx
		mov dword ptr [esp],24
		BackLoopCheckItem:
		mov ecx,[esp]
		imul ecx,0x90
		xor edx,edx
		mov dl,[0x1107258+0x22DC8+ecx+0x16]
		xor dl,0x1F
		mov eax,[esp+0xC]
		cmp edx,eax
		jnz CheckNextItem
        xor edx,edx
		mov dx,[0x1107258+0x22DC8+ecx+0x14]
		xor dx,0xCE43
		mov eax,[esp+0x8]
		cmp edx,eax
		jnz CheckNextItem
        mov eax,0x1
		add esp,0x4
        ret 0x8

		CheckNextItem:
		mov ecx,[esp]
		add ecx,0x1
		mov [esp],ecx
		cmp ecx,148
		jl BackLoopCheckItem
        mov eax,0x0
		add esp,0x4
		ret 0x8

		KhongTimThayItem:
        push 0xFFFAE6AA
		push 0x1
		push 0xC
        push 3845
		push 0x19
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x0155EE60
		mov eax,0x006A9800
		call eax
		jmp Default

        NVChuaCoBangHoi:
        push 0xFFFAE6AA
		push 0x1
		push 0xC
        push 3846
		push 0x19
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x0155EE60
		mov eax,0x006A9800
		call eax
        jmp Default
	}
}
__declspec(naked) void ChangeDeccoCTC()// 006BA7F2
{
	__asm {
		mov [ebp+0x00008350],edx
		xor eax,eax
		mov al,[0x1107258+0x47C]
		cmp eax,18
		jnz Default
		xor eax,eax
		mov al,[ebx+0x1A]
		test eax,eax
        jz GioiTinhNam
		xor eax,eax
		mov ax,15714
		push 0x006BA7FC
		ret

		GioiTinhNam:
        xor eax,eax
		mov ax,15713
		push 0x006BA7FC
		ret

		Default:
        mov ax,[ebx+0x55]
		push 0x006BA7FC
        ret
	}
}
__declspec(naked) void ChangeDeccoCTC1()// 006BB3E5
{
	__asm {
		mov [ebp+0x00008350],edx
		xor eax,eax
		mov al,[0x1107258+0x47C]
		cmp eax,18
		jnz Default
		xor eax,eax
		mov al,[ebx+0x1A]
		test eax,eax
        jz GioiTinhNam
		xor eax,eax
        mov ax,15714
		push 0x006BB3EF
		ret

		GioiTinhNam:
        xor eax,eax
		mov ax,15713
		push 0x006BB3EF
		ret

		Default:
        mov ax,[ebx+0x55]
		push 0x006BB3EF
        ret
	}
}
__declspec(naked) void HideNameUser()// 00660AE5
{
	__asm {
		xor ecx,ecx
		mov cl,[0x1107258+0x47C]
		cmp ecx,18
		jnz Default

		push 0x00660AEA
        ret

		Default:
		cmp edx,02
		jle Adr00660B47
		push 0x00660AEA
		ret

		Adr00660B47:
		push 0x00660B47
        ret
	}
}
__declspec(naked) void HideNameUserEventHP()// 00660AE5
{
	__asm {
		xor ecx,ecx
		mov cx,[esi+0x8326]
		cmp ecx,15711
		jz EventHP
        cmp ecx,15712
		jz EventHP
		cmp edx,02
		jle Adr00660B47
		push 0x00660AEA
		ret

		Adr00660B47:
		push 0x00660B47
		ret

        EventHP:
        push 0x00660AEA
        ret
	}
}
__declspec(naked) void HideNameUserEventHP2()// 00660B05
{
	__asm {
		/*xor ecx,ecx
		mov cl,[0x1107258+0x47C]
		cmp ecx,18
		jnz Default  */
		xor ecx,ecx
		mov cx,[esi+0x8326]
		cmp ecx,15711
		jz HienThiIconChienDau
		cmp ecx,15712
		jz HienThiIconChienDau
		Default:
        lea ecx,[esp+0x00000264]
		push eax
		push 0x0089E914
		push 0x00660B0B
		ret

		HienThiIconChienDau:
        push 3869
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,0x010CC088
		mov  DWORD PTR SS : [ecx + 0x70] , eax
		mov  DWORD PTR SS : [ecx + 0x9C] , 129
		mov  DWORD PTR SS : [ecx + 0xA0] , 124
		mov  DWORD PTR SS : [ecx + 0x98] , 94
		mov  DWORD PTR SS : [ecx + 0xA4] , 152
		push 0x00660B1A
		ret

		HienThiIconPhongThu:
        push 3869
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,0x010CC088
		mov  DWORD PTR SS : [ecx + 0x70] , eax
		mov  DWORD PTR SS : [ecx + 0x9C] , 129
		mov  DWORD PTR SS : [ecx + 0xA0] , 155
		mov  DWORD PTR SS : [ecx + 0x98] , 125
		mov  DWORD PTR SS : [ecx + 0xA4] , 152
		push 0x00660B1A
		ret
	}
}
__declspec(naked) void HideNameUserEventHP3()// 00660B21
{
	__asm {
        xor ecx,ecx
		mov cx,[esi+0x8326]
		cmp ecx,15711
		jz EventHP
		cmp ecx,15712
		jz EventHP
		push 0xFFFFE500
        push 0x00660B26
		ret

		EventHP:
        push 0xFFFFE500
		push edx
		push ebp
		mov edx,ebx
		add edx,0x39
        push edx
		push 0x00660B29
		ret
	}
}
__declspec(naked) void HideNameUserEventHP4()// 0051FAF3
{
	__asm {
		xor ecx,ecx
		mov cx,[edx+0x8326]
		cmp ecx,15711
		jz EventHP
        cmp ecx,15712
		jz EventHP
        mov edx,[ebx+0x0000054C]
        push 0x0051FAF9
		ret

        EventHP:
        push 3803
		push 0x19
		push 0x0051FBAF
		ret
	}
}
__declspec(naked) void GetPackageResultCheckTImeHPUser()// 006B0BAB
{
	__asm {
		nop
		nop
		nop
		nop
		nop
		xor ecx,ecx
		mov cl,[ebp+0x3]
		cmp cl,120
		jz EventHPBatDau
		xor eax,eax
        mov al,[ebp+0x3]
		push 0x006B0BB0
		ret

		EventHPBatDau:
        xor ecx,ecx
        mov cl,[ebp+0x4]
		mov [eax],cl
		push 0x006B21F7
        ret

	}
}
__declspec(naked) void BypassMonPhaiPkOnEventHP()// 00646898
{
	__asm {
		nop
		nop
		nop
		nop
		nop
		mov cl,[eax]
		cmp cl,1
		jnz Default
		push 0x006468C7
        ret

        Default:
		mov al, [esi+0x2DC88]
		push 0x0064689E
		ret
	}
}
__declspec(naked) void GetUniqueIDEventHP()// 0065D64B
{
	__asm {
		mov cx,[esi+0x000083C8]
		mov [ecx+0x0002D954],cx
        mov cx,[ecx+0x0002D954]
		push 0x0065D652
		ret
	}
}
__declspec(naked) void ShiftPKOnEventHP()// 00646702
{
	__asm {
    	nop
		nop
		nop
		nop
		nop
		mov cl,[eax]
		cmp cl,1
		jnz Default
		push 0x0064670A
        ret

        Default:
		mov eax,[esp+0x10]
		test eax,eax
		push 0x00646708
		ret
	}
}
__declspec(naked) void DisableSpeedEventHP()// 00624B94
{
	  __asm {
		nop
		nop
		nop
		nop
		nop
		xor edx,edx
		mov dl,[eax]
		test edx,edx
		jz Default
		/*xor edx,edx
		mov dl,[0x1107258+0x47C]
		cmp edx,20
		jnz Default   */
		push 0xFFFF0000
		push 1
		push 0xC
		push 6615
		push 0x00624BF7
		ret

		Default:
        mov eax,[esi+0x0002B868]
		push 0x00624B9A
        ret
	}
}
__declspec(naked) void KhoaEKhiVoMapDaiChienEventHP() // 006B4A35
{
	__asm {
		nop
		nop
		nop
		nop
		nop
        mov cl,[edx]
		test cl,cl
		jnz KhongDiChuyenVao
        xor ecx,ecx
        mov cx,word ptr [0x110F754]
		cmp ecx,150
        ja KhongDiChuyenVao
		mov ebx,[eax+0x0000037C]
        push 0x006B4A3B
		ret

		KhongDiChuyenVao:
		push 0x006B4977
        ret

	}
}
__declspec(naked) void HideNameUser2()// 00660B05
{
	__asm {
        xor ecx,ecx
		mov cl,[0x1107258+0x47C]
		cmp ecx,18
		jnz Default
		xor ecx,ecx
		mov cx,[esi+0x8326]
		cmp ecx,15713
		jz HienThiIconChienDau
		cmp ecx,15714
		jz HienThiIconChienDau
        jmp HienThiIconPhongThu

		Default:
        lea ecx,[esp+0x00000264]
		push eax
		push 0x0089E914
		push 0x00660B0B
		ret

		HienThiIconChienDau:
        push 3869
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,0x010CC088
		mov  DWORD PTR SS : [ecx + 0x70] , eax
		mov  DWORD PTR SS : [ecx + 0x9C] , 129
		mov  DWORD PTR SS : [ecx + 0xA0] , 124
		mov  DWORD PTR SS : [ecx + 0x98] , 94
		mov  DWORD PTR SS : [ecx + 0xA4] , 152
		push 0x00660B1A
		ret

		HienThiIconPhongThu:
        push 3869
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,0x010CC088
		mov  DWORD PTR SS : [ecx + 0x70] , eax
		mov  DWORD PTR SS : [ecx + 0x9C] , 129
		mov  DWORD PTR SS : [ecx + 0xA0] , 155
		mov  DWORD PTR SS : [ecx + 0x98] , 125
		mov  DWORD PTR SS : [ecx + 0xA4] , 152
		push 0x00660B1A
		ret
	}
}
__declspec(naked) void HideNameUser3()// 00660B21
{
	__asm {
        xor ecx,ecx
		mov cl,[0x1107258+0x47C]
		cmp ecx,18
        jnz Default
		push 0xFFFFE500
		push edx
		push ebp
		mov edx,ebx
		add edx,0x39
        push edx
		push 0x00660B29
		ret

		Default:
		push 0xFFFFE500
        push 0x00660B26
		ret
	}
}
__declspec(naked) void HideNameUser4()// 0051FAF3
{
	__asm {
		xor edx,edx
		mov dl,[0x1107258+0x47C]
		cmp edx,18
		jnz Default
		push 3803
		push 0x19
		push 0x0051FBAF
		ret

		Default:
        mov edx,[ebx+0x0000054C]
        push 0x0051FAF9
		ret
	}
}
__declspec(naked) void BypassMonPhaiPkOn()// 00646898
{
	__asm {
		xor edx,edx
		mov dl,[0x1107258+0x47C]
		cmp edx,18
		jnz Default
        xor edx,edx
		mov dx,[0x1107258+0x838C]
		xor eax,eax
		mov ax,[edi+0x838C]
		cmp eax,ecx
		jz Default
		push 0x006468C7
        ret

        Default:
		mov al, [esi+0x2DC88]
		push 0x0064689E
		ret
	}
}
__declspec(naked) void ShiftPKOn()// 00646702
{
	__asm {
		xor edx,edx
		mov dl,[0x1107258+0x47C]
		cmp edx,18
		jnz Default
		push 0x0064670A
        ret

        Default:
		mov eax,[esp+0x10]
		test eax,eax
		push 0x00646708
		ret
	}
}
__declspec(naked) void KhoaEKhiVoMapDaiChien() // 006B4A35
{
	__asm {
		mov ebx,[eax+0x00000380]
		cmp ebx,18
        jz KhongDiChuyenVao
		mov ebx,[eax+0x0000037C]
        push 0x006B4A3B
		ret

		KhongDiChuyenVao:
		push 0x006B4977
        ret

	}
}
__declspec(naked) void GetPackageHealthBossHBDC() // 006ADE4C
{
	__asm {
		nop
		nop
		nop
		nop
		nop
        xor ecx,ecx
		mov cl,[ebp+0x3]
		cmp cl,64
		jz GetHealthBoss1
		cmp cl,65
		jz GetHealthBoss2
		cmp cl,66
		jz GetPackageEventHp
        cmp cl,68
		jz GetPackageBossNotice
        cmp cl,69
		jz GetPackageLienDauNotice
		cmp cl,71
		jz GetPackageLienDauNotice1
        cmp cl,72
		jz GetPackageLienDauNotice2
        cmp cl,70
		jz GetPackageTiVoNotice
        cmp cl,100
		jz GetPackageKhoaAccBug
        cmp cl,50
		jz PkInfo
		xor eax,eax
		mov al,[ebp+0x3]
        cmp eax,0x3D
		push 0x006ADE52
		ret

		GetPackageEventHp:
        push 0x006ADF51
		ret

        PkInfo:
        push eax
		lea ecx,[ebp+0x11]
		push ecx
		lea ecx,[ebp+0x4]
		push ecx
		push 5650
		push 25
	   	mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
	   	push eax
		mov eax,[esp+0xC]
		lea edx,[eax+0x12C]
		push edx
		call DWORD PTR SS:[0x0085C564]
		add esp,0x10
		pop eax
		lea eax,[eax+0x12C]
		push 0xFFFF0000
		push 1
		push 6
		push eax
		mov ecx,0x0155EE60
		mov eax,0x006A9800
		call eax
        push 0x006ADF59
		ret

		GetPackageBossNotice:
		push eax
        xor ecx,ecx
		mov cx,[ebp+0x17]
		push ecx
		xor ecx,ecx
		mov cx,[ebp+0x15]
		push ecx
		xor ecx,ecx
		mov cx,[ebp+0x13]
		push ecx
        xor ecx,ecx
		mov cx,[ebp+0x11]
		sub ecx,4000
		push ecx
		push 0
        mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		lea ecx,[ebp+0x04]
		push ecx
		push 4112
		push 25
	   	mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
	   	push eax
		mov eax,[esp+0x18]
		lea edx,[eax+0x12C]
		push edx
		call DWORD PTR SS:[0x0085C564]
		add esp,0x1C
		pop eax
		lea eax,[eax+0x12C]
		push 0xFFFF0000
		push 1
		push 6
		push eax
		mov ecx,0x0155EE60
		mov eax,0x006A9800
		call eax
        push 0x006ADF59
		ret

        GetPackageKhoaAccBug:
        push eax
		lea ecx,[ebp+0x04]
		push ecx
		push 7
		push 76
	   	mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
	   	push eax
		mov eax,[esp+0x8]
		lea edx,[eax+0x12C]
		push edx
		call DWORD PTR SS:[0x0085C564]
		add esp,0xC
		pop eax
		lea eax,[eax+0x12C]
		push 0xFFFF0000
		push 1
		push 6
		push eax
		mov ecx,0x0155EE60
		mov eax,0x006A9800
		call eax
        push 0x006ADF59
		ret

		GetPackageLienDauNotice:
        push eax
		lea ecx,[ebp+0x11]
		push ecx
		lea ecx,[ebp+0x04]
		push ecx
		push 13
		push 74
	   	mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
	   	push eax
		mov eax,[esp+0xC]
		lea edx,[eax+0x12C]
		push edx
		call DWORD PTR SS:[0x0085C564]
		add esp,0x10
		pop eax
		lea eax,[eax+0x12C]
		push 0xFFFF0000
		push 1
		push 6
		push eax
		mov ecx,0x0155EE60
		mov eax,0x006A9800
		call eax
        push 0x006ADF59
		ret

		GetPackageLienDauNotice1:
        push eax
		lea ecx,[ebp+0x04]
		push ecx
		push 15
		push 74
	   	mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
	   	push eax
		mov eax,[esp+0x8]
		lea edx,[eax+0x12C]
		push edx
		call DWORD PTR SS:[0x0085C564]
		add esp,0xC
		pop eax
		lea eax,[eax+0x12C]
		push 0xFFFF0000
		push 1
		push 6
		push eax
		mov ecx,0x0155EE60
		mov eax,0x006A9800
		call eax
        push 0x006ADF59
		ret

        GetPackageLienDauNotice2:
        push eax
		lea ecx,[ebp+0x11]
		push ecx
		lea ecx,[ebp+0x04]
		push ecx
		push 16
		push 74
	   	mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
	   	push eax
		mov eax,[esp+0xC]
		lea edx,[eax+0x12C]
		push edx
		call DWORD PTR SS:[0x0085C564]
		add esp,0x10
		pop eax
		lea eax,[eax+0x12C]
		push 0xFFFF0000
		push 1
		push 6
		push eax
		mov ecx,0x0155EE60
		mov eax,0x006A9800
		call eax
        push 0x006ADF59
		ret

		GetPackageTiVoNotice:
        push eax
		lea ecx,[ebp+0x11]
		push ecx
		lea ecx,[ebp+0x04]
		push ecx
		push 14
		push 74
	   	mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
	   	push eax
		mov eax,[esp+0xC]
		lea edx,[eax+0x12C]
		push edx
		call DWORD PTR SS:[0x0085C564]
		add esp,0x10
		pop eax
		lea eax,[eax+0x12C]
		push 0xFFFF0000
		push 1
		push 6
		push eax
		mov ecx,0x0155EE60
		mov eax,0x006A9800
		call eax
        push 0x006ADF59
		ret

		GetHealthBoss1:
        xor ecx,ecx
		mov ecx,[ebp+0x4]
		test ecx,ecx
		jz KetThucSK1
        mov byte ptr [eax],0x1
		push ecx
		fild dword ptr [esp]
		fstp dword ptr [eax+0x4]
        add esp,0x4
		push 0x006B21F7
		ret

		KetThucSK1:
        mov byte ptr [eax],0x0
        push ecx
		fild dword ptr [esp]
		fstp dword ptr [eax+0x4]
        add esp,0x4
		push 0x006B21F7
		ret

		GetHealthBoss2:
        xor ecx,ecx
		mov ecx,[ebp+0x4]
        test ecx,ecx
		jz KetThucSK2
        mov byte ptr [eax],0x1
		push ecx
		fild dword ptr [esp]
		fstp dword ptr [eax+0x8]
        add esp,0x4
		push 0x006B21F7
		ret

		KetThucSK2:
        mov byte ptr [eax],0x0
        push ecx
		fild dword ptr [esp]
		fstp dword ptr [eax+0x8]
        add esp,0x4
		push 0x006B21F7
		ret



	}
}
__declspec(naked) void ShowHealthEvent() // 0065F904
{
	__asm {
		nop
		nop
		nop
		nop
		nop
		push eax
		xor ecx,ecx
		mov cl,[0x1107258+0x47C]
		cmp ecx,20
		jnz EndFuncShowHealthHBDC
		add eax,0x14
		mov ecx,[eax]
		test ecx,ecx
		jnz LoadInforEventHBDC
        mov eax,[esp]
		mov byte ptr [eax+0x2],99
		mov byte ptr [eax+0x3],99
        add eax,0x14
		mov edi, 0x0
		LoopLoad2:
		mov ecx, 0x010CC088
		mov ecx, [ecx + edi]
		mov [eax + edi], ecx
		add edi, 0x4
		cmp edi, 0xB8
		jnz LoopLoad2
        push 6563
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,[esp]
		mov dword ptr [ecx+0x4],0x42C60000
		mov dword ptr [ecx+0x8],0x42C60000
		add ecx,0x14
		mov  DWORD PTR SS : [ecx + 0x70] , eax
		//
		push 0x2D0
		mov eax,0x00848138
		call eax
		add esp,0x4
		mov ecx,[esp]
		mov [ecx+0xC],eax
		mov ecx,eax
		mov eax,0x7EBEC0
		call eax
		sub esp,0x20
		mov dword ptr [esp],1
		mov dword ptr [esp+0x4],1
		mov dword ptr [esp+0x8],1
		mov dword ptr [esp+0xC],265
		mov dword ptr [esp+0x10],27
        push 6563
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov dword ptr [esp+0x14],eax
		mov dword ptr [esp+0x18],0xFFFFFFFF
		mov dword ptr [esp+0x1C],0x015720C8
		mov ecx,esp
		push ecx
		mov eax,[esp+0x24]
        mov eax,[eax+0xC]
		mov ecx,eax
		mov edx,[eax]
		call dword ptr [edx+0x50]
        add esp,0x20
		mov ecx,[esp]
		mov ecx,[ecx+0xC]
		push 136
		push 300
		push 110
		push 0
		push 0
		mov eax,0x007EC280
		call eax
		mov ecx,[esp]
		mov ecx,[ecx+0xC]
		mov DWORD PTR [ecx+0x2C0],1
		mov DWORD PTR [ecx+0x34],0x3F800000
		mov DWORD PTR [ecx+0x38],1
		mov DWORD PTR [ecx+0x3C],0xA
        push 0x0
        mov ecx,[esp+0x4]
		mov ecx,[ecx+0xC]
		mov eax,0x007EC880
		call eax
        push 0x1
        mov ecx,[esp+0x4]
		mov ecx,[ecx+0xC]
		mov eax,0x007ECCF0
		call eax
        push 0x1
        mov ecx,[esp+0x4]
		mov ecx,[ecx+0xC]
		mov eax,0x007ECCC0
		call eax
        mov ecx,[esp]
		mov ecx,[ecx+0xC]
		mov eax,0x007EC7A0
		call eax
        mov ecx,[esp]
		mov ecx,[ecx+0xC]
		push 0x14
		push 1
		mov eax,0x007ECCD0
        call eax
        mov ecx,[0x01733AD0]
        mov eax,0x007D7FE0
		call eax
		mov eax,[eax+0x2C]
		xor edx,edx
		mov ecx,2
        idiv ecx
		sub eax,0xFC
		mov edx,0x32
		push edx
		push eax
		mov eax,[esp+0x8]
        mov eax,[eax+0xC]
		mov ecx,eax
		mov edx,[eax]
		call dword ptr [edx+0x1C]
		//
        push 0x2D0
		mov eax,0x00848138
		call eax
		add esp,0x4
		mov ecx,[esp]
		mov [ecx+0x10],eax
		mov ecx,eax
		mov eax,0x7EBEC0
		call eax
		sub esp,0x20
		mov dword ptr [esp],1
		mov dword ptr [esp+0x4],1
		mov dword ptr [esp+0x8],1
		mov dword ptr [esp+0xC],265
		mov dword ptr [esp+0x10],27
        push 6563
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov dword ptr [esp+0x14],eax
		mov dword ptr [esp+0x18],0xFFFFFFFF
		mov dword ptr [esp+0x1C],0x015720C8
		mov ecx,esp
		push ecx
		mov eax,[esp+0x24]
        mov eax,[eax+0x10]
		mov ecx,eax
		mov edx,[eax]
		call dword ptr [edx+0x50]
        add esp,0x20
		mov ecx,[esp]
		mov ecx,[ecx+0x10]
		push 69
		push 300
		push 41
		push 35
		push 0
		mov eax,0x007EC280
		call eax
		mov ecx,[esp]
		mov ecx,[ecx+0x10]
		mov DWORD PTR [ecx+0x2C0],1
		mov DWORD PTR [ecx+0x34],0x3F800000
		mov DWORD PTR [ecx+0x38],1
		mov DWORD PTR [ecx+0x3C],0xA
        push 0x0
        mov ecx,[esp+0x4]
		mov ecx,[ecx+0x10]
		mov eax,0x007EC880
		call eax
		push 0x1
		mov ecx,[esp+0x4]
		mov ecx,[ecx+0x10]
		mov eax,0x007ECCF0
		call eax
        mov ecx,[esp]
		mov ecx,[ecx+0x10]
		mov eax,0x007EC7A0
		call eax
        mov ecx,[esp]
		mov ecx,[ecx+0x10]
		push 0x14
		push 1
		mov eax,0x007ECCD0
        call eax
        mov ecx,[0x01733AD0]
        mov eax,0x007D7FE0
		call eax
		mov eax,[eax+0x2C]
		xor edx,edx
		mov ecx,2
        idiv ecx
		add eax,0x59
		mov edx,0x32
		push edx
		push eax
		mov eax,[esp+0x8]
        mov eax,[eax+0x10]
		mov ecx,eax
		mov edx,[eax]
		call dword ptr [edx+0x1C]
		//
		LoadInforEventHBDC:
		mov ecx,[esp]
		xor eax,eax
		mov al,[ecx]
		test eax,eax
        jz EndFuncShowHealthHBDC
		push 0
		mov ecx,[0x01733AD0]
		mov eax,0x007D7FE0
		call eax
		mov eax,[eax+0x2C]
		xor edx,edx
		mov ecx,2
        idiv ecx
		sub eax,0xB0
		push eax
		mov edx,0x3D
		push edx
		mov ecx,[esp+0xC]
		add ecx,0x14
		push ecx
		call LoadImageEventHBDC
		//
		push 1
		mov ecx,[0x01733AD0]
		mov eax,0x007D7FE0
		call eax
		mov eax,[eax+0x2C]
		xor edx,edx
		mov ecx,2
        idiv ecx
		add eax,0x7D
		push eax
		mov edx,0x3D
		push edx
		mov ecx,[esp+0xC]
		add ecx,0x14
		push ecx
		call LoadImageEventHBDC
		// Bach Dao
		mov eax,[esp]
        mov ecx,[eax+0x4]
		push ecx
		mov eax,[eax+0xC]
		mov ecx,eax
        mov eax,0x007EC880
		call eax
		//
        mov eax,[esp]
		push 0x01732CC8
		mov eax,[eax+0xC]
		mov ecx,eax
		mov edx,[eax]
		call dword ptr [edx+0x28]
		//
		mov eax,[esp]
		push 0x01732CC8
		mov eax,[eax+0xC]
		mov ecx,eax
		mov edx,[eax]
		call dword ptr [edx+0x24]
		// Hac Dao
		mov eax,[esp]
        mov ecx,[eax+0x8]
		push ecx
		mov eax,[eax+0x10]
		mov ecx,eax
        mov eax,0x007EC880
		call eax
		//
        mov eax,[esp]
		push 0x01732CC8
		mov eax,[eax+0x10]
		mov ecx,eax
		mov edx,[eax]
		call dword ptr [edx+0x28]
		//
		mov eax,[esp]
		push 0x01732CC8
		mov eax,[eax+0x10]
		mov ecx,eax
		mov edx,[eax]
		call dword ptr [edx+0x24]
		//
        EndFuncShowHealthHBDC:
        pop eax
		mov eax,[0x01733AA4]
		push 0x0065F909
        ret



	   LoadImageEventHBDC:
	   mov eax,[esp+0x10]
	   cmp eax,0x0
	   jnz NenMau1
	   mov  DWORD PTR SS : [ecx + 0x9C] , 70
	   mov  DWORD PTR SS : [ecx + 0xA0] , 300
	   mov  DWORD PTR SS : [ecx + 0x98] , 0
	   mov  DWORD PTR SS : [ecx + 0xA4] , 109
	   jmp ProcessHienThiCTCImage

	   NenMau1:
	   cmp eax,0x1
	   jnz Thanhmau1
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0
	   mov  DWORD PTR SS : [ecx + 0xA0] , 300
	   mov  DWORD PTR SS : [ecx + 0x98] , 0
	   mov  DWORD PTR SS : [ecx + 0xA4] , 40
	   jmp ProcessHienThiCTCImage

	   Thanhmau1:
       cmp eax,0x2
	   jnz Thanhmau2
	   mov  DWORD PTR SS : [ecx + 0x9C] , 40
	   mov  DWORD PTR SS : [ecx + 0xA0] , 300
	   mov  DWORD PTR SS : [ecx + 0x98] , 44
	   mov  DWORD PTR SS : [ecx + 0xA4] , 69
	   jmp ProcessHienThiCTCImage

	   Thanhmau2:
	   mov  DWORD PTR SS : [ecx + 0x9C] , 110
	   mov  DWORD PTR SS : [ecx + 0xA0] , 265
	   mov  DWORD PTR SS : [ecx + 0x98] , 0
	   mov  DWORD PTR SS : [ecx + 0xA4] , 139

       ProcessHienThiCTCImage:
	   push 0x00000000
	   push 0x0089E914
	   mov ecx,[esp+0x10]
	   mov edx,[esp+0x14]
	   push ecx
	   push edx
	   mov ecx, [esp+0x14]
	   mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
	   call eax
	   mov ecx,[esp+0x4]
	   push 0x1732CC8
	   mov eax, 0x7B9850
	   call eax //Draw1
	   ret 0x10
	}
}
__declspec(naked) void InitializeHBDC() // 0051C690
{
	__asm {
	  mov [esi+0x0000009C],ebp
	  mov eax,[esp+0x90]
	  cmp eax,0x5F800BB
	  jnz Default
      push 6563
	  push 25
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
      mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ebx,eax
	  push ebx
	  push 0x015720C8
	  push 115
	  lea edi,[esi+00000224]
	  push 300
	  push 0
	  push 0
	  mov ecx,edi
	  mov eax,0x007DFFB0
	  call eax
      //
	  push ebx
	  push 0x015720C8
	  mov [edi+0x68],ebp
	  mov dword ptr [edi+0x6C],70
	  mov dword ptr [edi+0x70],300
	  mov dword ptr [edi+0x74],109
	  push 115
	  lea edi,[esi+0x000002A0]
	  push 600
	  push 0
	  push 301
	  mov ecx,edi
      mov eax,0x007DFFB0
	  call eax
	  mov [edi+0x68],ebp
	  mov [edi+0x6C],ebp
	  mov dword ptr [edi+0x70],300
	  mov dword ptr [edi+0x74],39
	  //
      push 6563
	  push 25
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
      mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov edi,eax
	  or ebx,0xFFFFFFFF
	  push 0x2D0
	  mov dword ptr [esp+0x18],00000001
	  mov dword ptr [esp+0x1C],0
	  mov dword ptr [esp+0x20],10
	  mov dword ptr [esp+0x24],263
	  mov dword ptr [esp+0x28],29
	  mov [esp+0x2C],edi
	  mov [esp+0x30],ebx
	  mov dword ptr [esp+0x34],0x015720C8
	  mov eax,0x00848138
	  call eax
	  add esp,0x4
	  mov [esp+10],eax
	  cmp eax,ebp
	  je Adr0051CBAE
	  mov ecx,eax
	  mov eax,0x007EBEC0
	  call eax
	  jmp Adr0051CBB0
	  Adr0051CBAE:
	  xor eax,eax
	  Adr0051CBB0:
	  lea ecx,[esp+0x14]
	  mov [esi+0x00000550],eax
	  mov edx,[eax]
	  push ecx
	  mov ecx,eax
	  mov [esp+0x00000090],ebx
	  call dword ptr [edx+0x50]
	  mov ecx,[esi+0x00000550]
	  push 136
	  push 265
	  push 109
	  push 0
	  push ebp
	  mov eax,0x007EC280
	  call eax
	  mov eax,[esi+0x00000550]
	  push ebp
	  mov dword ptr [eax+0x000002C0],00000001
	  mov ecx,[esi+0x00000550]
	  mov eax,0x007EC880
	  call eax
	  mov eax,[esi+0x00000550]
	  push ebp
	  mov dword ptr [eax+0x34],0x3F800000
	  mov ecx,[esi+0x00000550]
	  mov eax,0x007ECCF0
	  call eax
	  mov ecx,[esi+0x00000550]
	  mov eax,0x007EC7A0
	  call eax
	  mov ecx,[esi+0x00000550]
	  push 0x14
	  push 01
	  mov eax,0x007ECCD0
	  call eax
	  mov eax,[esi+0x00000550]
	  mov ecx,esi
	  mov dword ptr [eax+0x38],1
	  mov dword ptr [eax+0x3C],10
	  mov eax,[esi+00000550]
	  mov edx,[esi]
	  push eax
	  call dword ptr [edx+0x000000A8]
	  push 0x0051D02F
      ret
	  //
	 /* push 6563
	  push 25
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
      mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov edi,eax
	  or ebx,0xFFFFFFFF
	  push 0x2D0
	  mov dword ptr [esp+0x18],00000001
	  mov dword ptr [esp+0x1C],320
	  mov dword ptr [esp+0x20],10
	  mov dword ptr [esp+0x24],263
	  mov dword ptr [esp+0x28],29
	  mov [esp+0x2C],edi
	  mov [esp+0x30],ebx
	  mov dword ptr [esp+0x34],0x015720C8
	  mov eax,0x00848138
	  call eax
	  add esp,0x4
	  mov [esp+0x10],eax
	  cmp eax,ebp
	  je Adr0051CBAE
	  mov ecx,eax
	  mov eax,0x007EBEC0
	  call eax
	  jmp Adr0051CBB0
	  Adr0051CBAE:
	  xor eax,eax
	  Adr0051CBB0:
	  lea ecx,[esp+0x14]
	  mov [esi+0x00000550],eax
	  mov edx,[eax]
	  push ecx
	  mov ecx,eax
	  mov [esp+0x00000090],ebx
	  call dword ptr [edx+0x50]
	  mov ecx,[esi+0x00000550]
	  push 69
	  push 300
	  push 40
	  push 35
	  push ebp
	  mov eax,0x007EC280
	  call eax
	  mov eax,[esi+0x00000550]
	  push ebp
	  mov dword ptr [eax+0x000002C0],00000001
	  mov ecx,[esi+0x00000550]
	  mov eax,0x007EC880
	  call eax
	  mov eax,[esi+0x00000550]
	  push ebp
	  mov dword ptr [eax+0x34],0x3F800000
	  mov ecx,[esi+0x00000550]
	  mov eax,0x007ECCF0
	  call eax
	  mov ecx,[esi+0x00000550]
	  mov eax,0x007EC7A0
	  call eax
	  mov ecx,[esi+0x00000550]
	  push 0x14
	  push 01
	  mov eax,0x007ECCD0
	  call eax
	  mov eax,[esi+0x00000550]
	  mov ecx,esi
	  mov dword ptr [eax+0x38],1
	  mov dword ptr [eax+0x3C],10
	  mov eax,[esi+00000550]
	  mov edx,[esi]
	  push eax
	  call dword ptr [edx+0x000000A8]   */

      Default:
	  push 0x0051C696
      ret
	}
}
__declspec(naked) void ReloadCountEncode()// 007B7C19
{
	  __asm {
		nop
		nop
		nop
		nop
		nop
		mov dword ptr [eax+0x2710],0x0
        mov eax,[esp+0x0001001C]
		push 0x007B7C20
        ret
	}
}
__declspec(naked) void HienThiClassUser()// 00660D1C
{
	  __asm {
		nop
		nop
		nop
		nop
		nop
		push eax
        push 1
		mov ecx,[0x01733AD0]
		mov eax,0x007D7FE0
		call eax
		mov eax,[eax+0x2C]
		xor edx,edx
		mov ecx,2
        idiv ecx
		add eax,0x7D
		push eax
		mov edx,0x3D
		push edx
		mov ecx,[esp+0xC]
		add ecx,0x14
		push ecx
        call GetImageClass
		pop eax
		mov eax, [esi+0x9F44]
		xor edi,edi
		test eax,eax
		je Adr00660D2C
		push 0x00660D22
        ret
		Adr00660D2C:
		push 0x00660D2C
		ret

		GetImageClass:
        mov eax,[esp+0x10]
		cmp eax,0x0
		jnz NenMau1
		mov  DWORD PTR SS : [ecx + 0x9C] , 70
		mov  DWORD PTR SS : [ecx + 0xA0] , 300
		mov  DWORD PTR SS : [ecx + 0x98] , 0
		mov  DWORD PTR SS : [ecx + 0xA4] , 109
		jmp ProcessHienThiCTCImage

		NenMau1:
		cmp eax,0x1
		jnz Thanhmau1
		mov  DWORD PTR SS : [ecx + 0x9C] , 0
		mov  DWORD PTR SS : [ecx + 0xA0] , 300
		mov  DWORD PTR SS : [ecx + 0x98] , 0
		mov  DWORD PTR SS : [ecx + 0xA4] , 40
		jmp ProcessHienThiCTCImage

		Thanhmau1:
		cmp eax,0x2
		jnz Thanhmau2
		mov  DWORD PTR SS : [ecx + 0x9C] , 40
		mov  DWORD PTR SS : [ecx + 0xA0] , 300
		mov  DWORD PTR SS : [ecx + 0x98] , 44
		mov  DWORD PTR SS : [ecx + 0xA4] , 69
		jmp ProcessHienThiCTCImage

		Thanhmau2:
		mov  DWORD PTR SS : [ecx + 0x9C] , 110
		mov  DWORD PTR SS : [ecx + 0xA0] , 265
		mov  DWORD PTR SS : [ecx + 0x98] , 0
		mov  DWORD PTR SS : [ecx + 0xA4] , 139

		ProcessHienThiCTCImage:
		push 0x00000000
		push 0x0089E914
		mov ecx,[esp+0x10]
		mov edx,[esp+0x14]
		push ecx
		push edx
		mov ecx, [esp+0x14]
		mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
		call eax
		mov ecx,[esp+0x4]
		push 0x1732CC8
		mov eax, 0x7B9850
		call eax //Draw1
		ret 0x10
	}
}
__declspec(naked) void ChangeIconCloth()// 00490729
{
	  __asm {
		// Kiem Tra Loai
        xor 	eax,eax
		mov 	al,[ecx+0x47]
        jnz     Default
		mov 	al,[ecx+0x1]
		cmp     eax,0x8
		jae     Default
		cmp     eax,0x5
		jz      Default
		cmp     eax,0x6
		jz      Default
		//
		mov 	al,[ecx+0x1]
		cmp     eax,0x0
		jz      _XGI_SC_CLOTHES_UPPER
		cmp     eax,0x1
		jz      _XGI_SC_CLOTHES_LOWER
		cmp     eax,0x2
		jz      _XGI_SC_CLOTHES_GLOVES
		cmp     eax,0x3
		jz      _XGI_SC_CLOTHES_SHOES
		cmp     eax,0x4
		jz      _XGI_SC_CLOTHES_CAP
		mov     eax, edi
		cdq
		and     edx, 0x3F
		add     eax, edx
		mov     edi, eax
		sar     edi, 0x6
		mov     edx, edi
		neg     edx
		shl     edx, 0x6
		add     esi, edx
		movsx   eax, si
		mov     ebx, eax
		and     ebx, 0x80000007
		jns Adrloc_49070101
        dec     ebx
		or      ebx, 0xFFFFFFF8
		inc     ebx
		Adrloc_49070101:
		cdq
		and     edx, 0x7
		add     eax, edx
		mov     ebp, eax
		sar     ebp, 0x3
		push 	edi
        push 5408
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		push 0x00490E50
		ret

		_XGI_SC_CLOTHES_UPPER:
        mov     eax, edi
		cdq
		and     edx, 0x3F
		add     eax, edx
		mov     edi, eax
		sar     edi, 0x6
		mov     edx, edi
		neg     edx
		shl     edx, 0x6
		add     esi, edx
		movsx   eax, si
		mov     ebx, eax
		and     ebx, 0x80000007
		jns Adrloc_49070102
        dec     ebx
		or      ebx, 0xFFFFFFF8
		inc     ebx
		Adrloc_49070102:
        cdq
		and     edx, 0x7
		add     eax, edx
		mov     ebp, eax
		sar     ebp, 0x3
		push 	edi
        push 5403
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		push 0x00490E50
		ret

		_XGI_SC_CLOTHES_LOWER:
        mov     eax, edi
		cdq
		and     edx, 0x3F
		add     eax, edx
		mov     edi, eax
		sar     edi, 0x6
		mov     edx, edi
		neg     edx
		shl     edx, 0x6
		add     esi, edx
		movsx   eax, si
		mov     ebx, eax
		and     ebx, 0x80000007
		jns Adrloc_49070103
        dec     ebx
		or      ebx, 0xFFFFFFF8
		inc     ebx
		Adrloc_49070103:
        cdq
		and     edx, 0x7
		add     eax, edx
		mov     ebp, eax
		sar     ebp, 0x3
		push 	edi
        push 5404
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		push 0x00490E50
		ret

		_XGI_SC_CLOTHES_GLOVES:
		mov     eax, edi
		cdq
		and     edx, 0x3F
		add     eax, edx
		mov     edi, eax
		sar     edi, 0x6
		mov     edx, edi
		neg     edx
		shl     edx, 0x6
		add     esi, edx
		movsx   eax, si
		mov     ebx, eax
		and     ebx, 0x80000007
		jns Adrloc_49070104
        dec     ebx
		or      ebx, 0xFFFFFFF8
		inc     ebx
		Adrloc_49070104:
        cdq
		and     edx, 0x7
		add     eax, edx
		mov     ebp, eax
		sar     ebp, 0x3
		push 	edi
        push 5405
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		push 0x00490E50
		ret

		_XGI_SC_CLOTHES_SHOES:
		mov     eax, edi
		cdq
		and     edx, 0x3F
		add     eax, edx
		mov     edi, eax
		sar     edi, 0x6
		mov     edx, edi
		neg     edx
		shl     edx, 0x6
		add     esi, edx
		movsx   eax, si
		mov     ebx, eax
		and     ebx, 0x80000007
		jns Adrloc_49070105
        dec     ebx
		or      ebx, 0xFFFFFFF8
		inc     ebx
		Adrloc_49070105:
        cdq
		and     edx, 0x7
		add     eax, edx
		mov     ebp, eax
		sar     ebp, 0x3
		push 	edi
        push 5406
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		push 0x00490E50
		ret

		_XGI_SC_CLOTHES_CAP:
        mov     eax, edi
		cdq
		and     edx, 0x3F
		add     eax, edx
		mov     edi, eax
		sar     edi, 0x6
		mov     edx, edi
		neg     edx
		shl     edx, 0x6
		add     esi, edx
		movsx   eax, si
		mov     ebx, eax
		and     ebx, 0x80000007
		jns Adrloc_49070106
        dec     ebx
		or      ebx, 0xFFFFFFF8
		inc     ebx
		Adrloc_49070106:
        cdq
		and     edx, 0x7
		add     eax, edx
		mov     ebp, eax
		sar     ebp, 0x3
		push 	edi
        push 5407
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		push 0x00490E50
		ret


		Default:
		movsx eax, byte ptr [ecx+1]
        cmp eax, 0x8
		push 0x00490730
        ret
	}
}
__declspec(naked) void BoTangSatThuongChanKhi()// 0060124F
{
	  __asm {
		pop edi
		push 0x006012A4
        ret
	}
}
__declspec(naked) void LoadGiaTriNumericParticle()// 00783C89
{
	  __asm {
		nop
		nop
		nop
		nop
		nop
		add eax,0x4
		push 0x00783C8F
		ret
	}
}
__declspec(naked) void TangGiaTriHinhAnhIconNick()// 00661C3B
{
	  __asm {
		nop
		nop
		nop
		nop
		nop
		mov edx,dword ptr [0x01733B04]
		mov ecx,[eax+0x4]
		sub edx,ecx
		cmp edx,100
		jna ContinueShowIconNick
		mov edx,dword ptr [0x01733B04]
		mov [eax+0x4],edx
		xor ecx,ecx
		mov cl,[eax+0x1]
		add ecx,1
		cmp ecx,9
		ja quaytrolaibandauchay
		mov byte ptr [eax+0x1],cl
		mov eax,DWORD PTR SS:[0x01733B04]
		push 0x00661C40
        ret

		quaytrolaibandauchay:
		mov byte ptr [eax+0x1],0
		mov eax,DWORD PTR SS:[0x01733B04]
		push 0x00661C40
        ret

		ContinueShowIconNick:
		mov eax,DWORD PTR SS:[0x01733B04]
		push 0x00661C40
        ret
	}
}
// Khi Cong
__declspec(naked) void ShowHienThiDamage()// 00600799
{
	  __asm {
		nop
		nop
		nop
		nop
		nop
		push eax
		mov eax,DWORD PTR SS:[0x010D94A8]
		mov cx,[eax+0x0002DA20]
		xor cx,0xDB23
		add ecx,edi
		xor edi,edi
		add ecx,edx
		mov eax,[esp]
		mov [eax+0x8],ecx
		mov eax,DWORD PTR SS:[0x010D94A8]
		mov dx,[eax+0x0002DA20]
		xor dx,0xDB23
		add edx,ebp
		add edx,esi
		mov eax,[esp]
		mov [eax+0xC],ecx
        pop eax
		push 0x006007D0
        ret
	}
}
__declspec(naked) void ShowHienThiDamage2()// 004B9F87
{
	  __asm {
		nop
		nop
		nop
		nop
		nop
		mov esi,[eax+0x8]
		mov ecx,[eax+0xC]
        mov eax,DWORD PTR SS:[0x01733AC4]
		push 0x004B9F95
        ret
	}
}
__declspec(naked) void ShowHienThiDamage3()// 00628331
{
	  __asm {
		nop
		nop
		nop
		nop
		nop
		add [edx+0x8],ebx
		add edi, eax
		add [edx+0xC],edi
		push 0x00628341
        ret
	}
}

// Vat Ly
__declspec(naked) void ShowHienThiDamage4()// 004B9E5A
{
	  __asm {
		nop
		nop
		nop
		nop
		nop
		mov esi,[eax+0x4]
		mov ecx,[eax]
		mov eax,DWORD PTR SS:[0x01733AC4]
		push 0x004B9E68
        ret
	}
}
__declspec(naked) void ShowHienThiDamage5()// 00628311
{
	  __asm {
		nop
		nop
		nop
		nop
		nop
        push edx
		add [edx],ebx
        xor edx,edx
		mov dx,[esi+0x2DC38]
		lea ebx,[edi+edx]
		add ebx,ecx
		add ebx,eax
		pop edx
		add [edx+0x4],ebx
        xor edx,edx
        mov dx,[esi+0x2DC38]
		push 0x00628326
        ret
	}
}
__declspec(naked) void ShowHienThiDamage6()// 005FFDDF
{
	  __asm {
		nop
		nop
		nop
		nop
		nop
		mov [edx],eax
		push 0x005FFDE6
        ret
	}
}
__declspec(naked) void ShowHienThiDamage7()// 005FFE01
{
	  __asm {
		nop
		nop
		nop
		nop
		nop
		mov [edx+0x4],eax
		push 0x005FFE08
        ret
	}
}
__declspec(naked) void ShowHienThiDamage8()// 0061E8A1
{
	  __asm {
		nop
		nop
		nop
		nop
		nop
		mov [esi+0x0002BEC4],ebx
		mov DWORD PTR [eax],0x0
		mov DWORD PTR [eax+0x4],0x0
		mov DWORD PTR [eax+0x8],0x0
		mov DWORD PTR [eax+0xC],0x0
		push 0x0061E8A7
        ret
	}
}
__declspec(naked) void FixHienThiDMG()// 0069E28F
{
	  __asm {
		xor eax,eax
		mov ax,si
		pop esi
        pop ebx
		push 0x0069E294
        ret
	}
};
__declspec(naked) void FixHienThiDMG2()// 0069E286
{
	  __asm {
		xor edx,edx
		mov dx,[eax+ecx+0x8]
		xor eax,eax
        mov ax,dx
        add esp,0x18
		push 0x0069E28E
        ret
	}
};
__declspec(naked) void FixHienThiDMG3()// 0069E35F
{
	  __asm {
		xor eax,eax
		mov ax,si
		pop esi
        pop ebx
		push 0x0069E364
        ret
	}
};
__declspec(naked) void FixHienThiDMG4()// 0069E356
{
	  __asm {
		xor edx,edx
		mov dx,[eax+ecx+0xA]
		xor eax,eax
        mov ax,dx
        add esp,0x18
		push 0x0069E35E
        ret
	}
};
__declspec(naked)void ChangNameLevel1()  //0042869A
{
__asm
	{
	  cmp eax,20
      ja LevelMoi
	  mov ecx,[eax*0x4+0x010D7B24]
	  push 0x004286A1
      ret
	  LevelMoi:
	  add eax,0x9
      mov ecx,[eax*0x4+0x010D7B24]
	  push 0x004286A1
      ret
	}
}

__declspec(naked)void ChangNameLevel12()  //00428C0D
{
__asm
	{
	  cmp eax,20
	  ja LevelMoi1
	  mov ecx,[eax*0x4+0x010D7B24]
	  push 0x00428C14
      ret
	  LevelMoi1:
	  add eax,0x9
      mov ecx,[eax*0x4+0x010D7B24]
	  push 0x00428C14
      ret
	}
}

__declspec(naked)void ChangNameLevel13()  //00425209
{
__asm
	{
	  cmp eax,20
	  ja LevelMoi1
	  mov ecx,[eax*0x4+0x010D7B24]
	  push 0x00425210
      ret
	  LevelMoi1:
	  add eax,0x9
      mov ecx,[eax*0x4+0x010D7B24]
	  push 0x00425210
      ret
	}
}

__declspec(naked)void ChangNameLevel14()  //00424E0C
{
__asm
	{
	  cmp eax,20
	  ja LevelMoi1
	  mov ecx,[eax*0x4+0x010D7B24]
	  push 0x00424E13
      ret
	  LevelMoi1:
	  add eax,0x9
      mov ecx,[eax*0x4+0x010D7B24]
	  push 0x00424E13
      ret
	}
};
//Event HP
__declspec(naked)void OpenPKEventHp()  //0064654C
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  mov cl,[edx+0x7]
	  cmp cl,1
	  jnz Default
	  push 0x0064671A
      ret
	  Default:
	  mov ecx,ebx
	  push esi
	  mov eax,0x00646890
      call eax
	  push 0x00646552
      ret
	}
};
__declspec(naked)void GetPackageEventHP()  //006ADF51
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  push eax
	  xor edx,edx
	  mov dl,[ebp+0x5]
	  test dl,dl
	  jz NotFound
	  cmp dl,1
      jnz KiemTraresult2
      push 5661
      call ThongBao
	  jmp Default

      KiemTraresult2:
	  cmp dl,2
	  jnz KiemTraresult3
      push 5671
      call ThongBao
	  jmp Default

	  KiemTraresult3:
	  cmp dl,3
	  jnz KiemTraresult4
      push 5679
      call ThongBao
	  jmp Default

	  KiemTraresult4:
	  cmp dl,4
	  jnz KiemTraresult5
	  //
	  lea eax,[ebp+0xE]
	  push eax
	  mov eax,[esp+0x4]
	  add eax,0x14
	  push eax
      call CopyDuLieuNV
	  //
	  push 5680
      call ThongBao
	  jmp AddInfoSKTIme

	  KiemTraresult5:
	  cmp dl,5
	  jnz KiemTraresult6
	  lea eax,[ebp+0x336]
	  push eax
	  mov eax,[esp+0x4]
	  add eax,0x334
	  push eax
	  call CopyDuLieuNV
	  push 5694
      call ThongBao
	  jmp AddInfoSKTIme

	  KiemTraresult6:
	  cmp dl,6
	  jnz KiemTraresult7
      lea eax,[ebp+0x65E]
	  push eax
	  mov eax,[esp+0x4]
	  add eax,0x654
	  push eax
	  call CopyDuLieuNV
	  push 5705
	  call ThongBao
	  jmp AddInfoSKTIme

	  KiemTraresult7:
	  cmp dl,7
	  jnz BanChuaDangKy
	  push 5708
	  call ThongBao
	  jmp Default

	  BanChuaDangKy:
	  cmp dl,20
	  jnz SuKienChuaBatDau
	  push 5710
	  call ThongBao
	  jmp Default

	  SuKienChuaBatDau:
	  cmp dl,22
	  jnz SuKienBatDauSC
	  push 5709
	  call ThongBao
	  jmp Default

	  SuKienBatDauSC:
	  cmp dl,41
	  jnz SuKienBatDauTC
	  mov eax,[esp]
      mov byte ptr [eax+0x7],1
      push 5865
	  call ThongBao
	  jmp Default


	  SuKienBatDauTC:
	  cmp dl,42
	  jnz SuKienBatDauCC
      mov eax,[esp]
	  mov byte ptr [eax+0x7],1
	  push 5866
	  call ThongBao
	  jmp Default

      SuKienBatDauCC:
      cmp dl,43
	  jnz KiemTraresult99
      mov eax,[esp]
	  mov byte ptr [eax+0x7],1
      push 5867
	  call ThongBao
	  jmp Default

      KiemTraresult99:
      cmp dl,99
	  jnz KiemTraParty
      lea eax,[ebp+0xE]
	  push eax
	  mov eax,[esp+0x4]
	  add eax,0x14
	  push eax
	  call CopyDuLieuNV
      lea eax,[ebp+0x336]
	  push eax
	  mov eax,[esp+0x4]
	  add eax,0x334
	  push eax
	  call CopyDuLieuNV
      lea eax,[ebp+0x65E]
	  push eax
	  mov eax,[esp+0x4]
	  add eax,0x654
	  push eax
	  call CopyDuLieuNV
	  AddInfoSKTIme:
      //So Cap
	  mov eax,[esp]
	  xor edx,edx
	  mov dl,[ebp+0x6]
	  mov [eax+0xB],dl
      xor edx,edx
	  mov dl,[ebp+0x8]
	  mov [eax+0xA],dl
      xor edx,edx
	  mov dl,[ebp+0xA]
	  mov [eax+0x9],dl
	  xor edx,edx
	  mov dl,[ebp+0xC]
	  mov [eax+0x8],dl
	  //Trung Cap
      mov eax,[esp]
	  xor edx,edx
	  mov dl,[ebp+0x32E]
	  mov [eax+0xF],dl
	  xor edx,edx
	  mov dl,[ebp+0x330]
	  mov [eax+0xE],dl
	  xor edx,edx
	  mov dl,[ebp+0x332]
	  mov [eax+0xD],dl
	  xor edx,edx
	  mov dl,[ebp+0x334]
	  mov [eax+0xC],dl
	  //Cao Cap
      mov eax,[esp]
	  xor edx,edx
	  mov dl,[ebp+0x656]
	  mov [eax+0x13],dl
	  xor edx,edx
	  mov dl,[ebp+0x658]
	  mov [eax+0x12],dl
	  xor edx,edx
	  mov dl,[ebp+0x65A]
	  mov [eax+0x11],dl
	  xor edx,edx
	  mov dl,[ebp+0x65C]
	  mov [eax+0x10],dl
	  jmp Default

	  KiemTraParty:
      cmp dl,100
	  jnz Default
      jmp KhongTheThamGiaKhiDangParty

	  Default:
      pop eax
	  push 0x006ADF59
	  ret

	  KhongTheThamGiaKhiDangParty:
      push 0xFFFF0000
	  push 0x1
	  push 0xC
      push 4507
	  push 0x19
      mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
      mov ecx,0x0155EE60
	  mov eax,0x6A9800
	  call eax
	  jmp Default

	  NotFound:
      push 0xFFFF0000
	  push 0x1
	  push 0xC
      push 5652
	  push 0x19
      mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
      mov ecx,0x0155EE60
	  mov eax,0x6A9800
	  call eax
	  jmp Default

	  ThongBao:
      push 0xFFFF0000
	  push 0x1
	  push 0xC
	  mov eax,[esp+0x10]
      push eax
	  push 0x19
      mov ecx,0x1733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
      mov ecx,0x0155EE60
	  mov eax,0x6A9800
	  call eax
	  ret 0x4

	  CopyDuLieuNV:
	  sub esp,0x4
	  xor ecx,ecx
	  mov [esp],ecx
      BackloopAdd:
	  mov ecx,[esp]
	  mov eax,[esp+0xC]
	  mov dl,[eax+ecx]
      mov eax,[esp+0x8]
	  mov [eax+ecx],dl
	  mov ecx,[esp]
	  add ecx,1
	  mov [esp],ecx
	  cmp ecx,801
	  jna BackloopAdd
	  add esp,0x4
	  ret 0x8


	}
};
__declspec(naked)void GetPozEventHp()  //00459E8E
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  add esp,0x24
	  push eax
	  mov ecx,DWORD PTR SS:[0x01733AC4]
	  mov edx,[ecx]
	  call dword ptr [edx+0x38]
	  //
      mov ecx,DWORD PTR SS:[0x01733AD0]
	  mov eax,0x007D7FD0
	  call eax
	  xor ecx,ecx
	  mov cl,[eax+0xC]
	  cmp ecx,1
	  jnz Default2
	  mov ecx,[esp]
	  mov dl,[ecx+0x2]
	  cmp dl,1
      jz Default
      xor ecx,ecx
	  mov ecx,[esi+0x14]
	  add ecx,19
	  mov edx,[eax+0x10]
	  cmp edx,ecx
	  jb Default
	  add ecx,53
      cmp edx,ecx
	  ja CheckPoz2
      xor ecx,ecx
	  mov ecx,[esi+0x18]
	  add ecx,98
	  mov edx,[eax+0x18]
	  cmp edx,ecx
	  jb Default
	  add ecx,53
      cmp edx,ecx
	  ja CheckPoz2
	  pop eax
	  mov byte ptr [eax],1
	  mov byte ptr [eax+0x1],1
	  mov byte ptr [eax+0x2],1
	  push 0x00459E9C
	  ret

	  CheckPoz2:
      xor ecx,ecx
	  mov ecx,[esi+0x14]
	  add ecx,84
	  mov edx,[eax+0x10]
	  cmp edx,ecx
	  jb CheckPoz3
	  add ecx,53
      cmp edx,ecx
	  ja CheckPoz3
      xor ecx,ecx
	  mov ecx,[esi+0x18]
	  add ecx,98
	  mov edx,[eax+0x18]
	  cmp edx,ecx
	  jb Default
	  add ecx,53
      cmp edx,ecx
	  ja CheckPoz3
      pop eax
	  mov byte ptr [eax],2
	  mov byte ptr [eax+0x1],2
	  mov byte ptr [eax+0x2],1
	  push 0x00459E9C
	  ret


	  CheckPoz3:
	  xor ecx,ecx
	  mov ecx,[esi+0x14]
	  add ecx,148
	  mov edx,[eax+0x10]
	  cmp edx,ecx
	  jb CheckPoz4
	  add ecx,53
      cmp edx,ecx
	  ja CheckPoz4
      xor ecx,ecx
	  mov ecx,[esi+0x18]
	  add ecx,98
	  mov edx,[eax+0x18]
	  cmp edx,ecx
	  jb CheckPoz4
	  add ecx,53
      cmp edx,ecx
	  ja CheckPoz4
      pop eax
	  mov byte ptr [eax],3
	  mov byte ptr [eax+0x1],3
	  mov byte ptr [eax+0x2],1
	  push 0x00459E9C
	  ret


	  CheckPoz4:
	  xor ecx,ecx
	  mov ecx,[esi+0x14]
	  add ecx,68
	  mov edx,[eax+0x10]
	  cmp edx,ecx
	  jb CheckPoz5
	  add ecx,31
	  cmp edx,ecx
	  ja CheckPoz5
	  xor ecx,ecx
	  mov ecx,[esi+0x18]
	  add ecx,216
	  mov edx,[eax+0x18]
	  cmp edx,ecx
	  jb CheckPoz5
	  add ecx,16
      cmp edx,ecx
	  ja CheckPoz5
	  pop eax
	  mov byte ptr [eax+0x2],1
	  mov byte ptr [eax+0x3],0
	  push 0x00459E9C
	  ret


	  CheckPoz5:
	  xor ecx,ecx
	  mov ecx,[esi+0x14]
	  add ecx,113
	  mov edx,[eax+0x10]
	  cmp edx,ecx
	  jb CheckPoz6
	  add ecx,31
	  cmp edx,ecx
	  ja CheckPoz6
	  xor ecx,ecx
	  mov ecx,[esi+0x18]
	  add ecx,216
	  mov edx,[eax+0x18]
	  cmp edx,ecx
	  jb CheckPoz6
	  add ecx,16
	  cmp edx,ecx
	  ja CheckPoz6
      pop eax
	  mov byte ptr [eax+0x2],1
	  mov byte ptr [eax+0x3],1
	  push 0x00459E9C
	  ret


	  CheckPoz6:
	  xor ecx,ecx
	  mov ecx,[esi+0x14]
	  add ecx,157
	  mov edx,[eax+0x10]
	  cmp edx,ecx
	  jb CheckPoz7
	  add ecx,31
      cmp edx,ecx
	  ja CheckPoz7
	  xor ecx,ecx
	  mov ecx,[esi+0x18]
	  add ecx,216
	  mov edx,[eax+0x18]
	  cmp edx,ecx
	  jb CheckPoz7
	  add ecx,16
	  cmp edx,ecx
	  ja CheckPoz7
      pop eax
	  mov byte ptr [eax+0x2],1
	  mov byte ptr [eax+0x3],2
	  push 0x00459E9C
	  ret


	  CheckPoz7:
	  xor ecx,ecx
	  mov ecx,[esi+0x14]
	  add ecx,202
	  mov edx,[eax+0x10]
	  cmp edx,ecx
	  jb CheckPoz8
	  add ecx,31
	  cmp edx,ecx
	  ja CheckPoz8
	  xor ecx,ecx
	  mov ecx,[esi+0x18]
	  add ecx,216
	  mov edx,[eax+0x18]
	  cmp edx,ecx
	  jb CheckPoz8
	  add ecx,16
	  cmp edx,ecx
	  ja CheckPoz8
      pop eax
	  mov byte ptr [eax+0x2],1
	  mov byte ptr [eax+0x3],3
	  push 0x00459E9C
	  ret


	  CheckPoz8:
	  xor ecx,ecx
	  mov ecx,[esi+0x14]
	  add ecx,246
	  mov edx,[eax+0x10]
	  cmp edx,ecx
	  jb CheckPoz9
	  add ecx,31
	  cmp edx,ecx
	  ja CheckPoz9
	  xor ecx,ecx
	  mov ecx,[esi+0x18]
	  add ecx,216
	  mov edx,[eax+0x18]
	  cmp edx,ecx
	  jb CheckPoz9
	  add ecx,16
	  cmp edx,ecx
	  ja CheckPoz9
      pop eax
	  mov byte ptr [eax+0x2],1
	  mov byte ptr [eax+0x3],4
	  push 0x00459E9C
	  ret


	  CheckPoz9:
	  xor ecx,ecx
	  mov ecx,[esi+0x14]
	  add ecx,62
	  mov edx,[eax+0x10]
	  cmp edx,ecx
	  jb CheckPoz10
	  add ecx,53
	  cmp edx,ecx
	  ja CheckPoz10
      xor ecx,ecx
	  mov ecx,[esi+0x18]
	  add ecx,239
	  mov edx,[eax+0x18]
	  cmp edx,ecx
	  jb CheckPoz10
	  add ecx,53
	  cmp edx,ecx
	  ja CheckPoz10
	  pop eax
	  mov byte ptr [eax+0x2],1
	  sub esp,0x4
      mov DWORD PTR [esp],0x0
	  mov eax,esp
	  mov dword ptr [eax],0xAA7C0004
	  push eax
	  mov ecx,0x155EE60
	  mov eax,0x006B2F60
	  call eax
      add esp,0x4
	  push 0x00459E9C
	  ret

	  CheckPoz10:
	  xor ecx,ecx
	  mov ecx,[esi+0x14]
	  add ecx,239
	  mov edx,[eax+0x10]
	  cmp edx,ecx
	  jb Default
	  add ecx,53
	  cmp edx,ecx
	  ja Default
      xor ecx,ecx
	  mov ecx,[esi+0x18]
	  add ecx,239
	  mov edx,[eax+0x18]
	  cmp edx,ecx
	  jb Default
	  add ecx,53
	  cmp edx,ecx
	  ja Default
      pop eax
	  mov byte ptr [eax+0x2],1
      sub esp,0x4
      mov DWORD PTR [esp],0x0
	  mov eax,esp
	  mov dword ptr [eax],0xAB7C0004
	  push eax
	  mov ecx,0x155EE60
	  mov eax,0x006B2F60
	  call eax
      add esp,0x4
	  push 0x00459E9C
	  ret
	  //
	  Default:
      pop eax
	  push 0x00459E9C
	  ret

	  Default2:
	  pop eax
	  mov byte ptr [eax+0x2],0
	  push 0x00459E9C
	  ret
	}
};
__declspec(naked)void DrawEventHopPhi()  //00459E39
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  pushad
	  //
	  mov eax,[esp+0x1C]
	  add eax,0x999
	  mov edx,[eax]
	  test edx,edx
      jnz DaCoOption
	  push eax
	  call AddOptionImage
      DaCoOption:
	  //
	  //-- 4 Byte Dau
	  //1. Loai Dang Chon
	  //2. Dai chien tiep theo 0. ko hien thi, 1 sc,2 tc,3 cc
      mov eax,[esp+0x1C]
      xor edx,edx
	  mov dl,[eax+0x1]
	  test dl,dl
	  jz Default
	  cmp dl,1
	  jnz KiemTraEventNextTrungCap
	  push 5638
	  xor edx,edx
	  mov dl,[eax+0x8]
	  push edx
      xor edx,edx
	  mov dl,[eax+0x9]
	  push edx
      xor edx,edx
	  mov dl,[eax+0xA]
	  push edx
	  xor edx,edx
	  mov dl,[eax+0xB]
	  push edx
	  mov edx,[esi+0x18]
	  add edx,0x3A
	  push edx
	  mov edx,[esi+0x14]
	  add edx,0xAB
	  push edx
	  call ShowText
      jmp ProcessHienThiThongTinNguoiChoi
	  KiemTraEventNextTrungCap:
      cmp dl,2
	  jnz KiemTraEventNextCaoCap
	  push 5639
	  xor edx,edx
	  mov dl,[eax+0xC]
	  push edx
      xor edx,edx
	  mov dl,[eax+0xD]
	  push edx
      xor edx,edx
	  mov dl,[eax+0xE]
	  push edx
	  xor edx,edx
	  mov dl,[eax+0xF]
	  push edx
	  mov edx,[esi+0x18]
	  add edx,0x3A
	  push edx
	  mov edx,[esi+0x14]
	  add edx,0xAB
	  push edx
	  call ShowText
      jmp ProcessHienThiThongTinNguoiChoi

	  KiemTraEventNextCaoCap:
      cmp dl,3
	  jnz Default
      push 5640
	  xor edx,edx
	  mov dl,[eax+0x10]
	  push edx
      xor edx,edx
	  mov dl,[eax+0x11]
	  push edx
      xor edx,edx
	  mov dl,[eax+0x12]
	  push edx
	  xor edx,edx
	  mov dl,[eax+0x13]
	  push edx
	  mov edx,[esi+0x18]
	  add edx,0x3A
	  push edx
	  mov edx,[esi+0x14]
	  add edx,0xAB
	  push edx
	  call ShowText

	  //
	  ProcessHienThiThongTinNguoiChoi:
	  xor edx,edx
	  mov eax,[esp+0x1C]
	  mov dl,[eax]
	  cmp dl,1
	  jnz KiemTraHienThiTrungCap
	  mov ecx,[eax+0x3]
      imul ecx,0xA0
	  lea eax,[eax+0x14+ecx]
	  push eax
      call LoadThongTinNguoiDangKy
	  jmp Default

      KiemTraHienThiTrungCap:
      cmp dl,2
	  jnz KiemTraHienThiCaoCap
      mov ecx,[eax+0x3]
	  imul ecx,0xA0
      lea eax,[eax+ecx+0x334]
	  push eax
      call LoadThongTinNguoiDangKy
	  jmp Default

	  KiemTraHienThiCaoCap:
	  cmp dl,3
	  jnz Default
      mov ecx,[eax+0x3]
      imul ecx,0xA0
      lea eax,[eax+ecx+0x654]
	  push eax
	  call LoadThongTinNguoiDangKy

	  Default:
	  //Hien Thi 3 Nut SC,TC,CC
	  mov eax,[esp+0x1C]
	  xor edx,edx
	  mov dl,[eax]
	  cmp dl,1
	  jz TrangSoCapHien
	  push 0
      jmp HienThiSoCap
      TrangSoCapHien:
	  push 30
      HienThiSoCap:
	  mov edx,[esi+0x14]
	  add edx,0x5A
      nop
	  nop
	  nop
      nop
	  push edx
	  mov edx,[esi+0x18]
	  add edx,0x72
      nop
	  nop
	  nop
      nop
	  push edx
	  mov eax,[esp+0x28]
	  add eax,0x999
	  push eax
	  call GetImageClass
	  //
      mov eax,[esp+0x1C]
	  xor edx,edx
	  mov dl,[eax]
	  cmp dl,2
	  jz TrangTrungCapHien
	  push 1
	  jmp HienThiTrungCap
	  TrangTrungCapHien:
	  push 31
	  HienThiTrungCap:
	  mov edx,[esi+0x14]
	  add edx,0x9A
      nop
	  nop
	  nop
      nop
	  push edx
	  mov edx,[esi+0x18]
	  add edx,0x72
      nop
	  nop
	  nop
      nop
	  push edx
	  mov eax,[esp+0x28]
	  add eax,0x999
	  push eax
	  call GetImageClass
	  
	  //
      mov eax,[esp+0x1C]
	  xor edx,edx
	  mov dl,[eax]
	  cmp dl,3
	  jz TrangCaoCapHien
	  push 2
	  jmp HienThiCaoCap
	  TrangCaoCapHien:
	  push 32
	  HienThiCaoCap:
	  mov edx,[esi+0x14]
	  add edx,0xDA
      nop
	  nop
	  nop
      nop
	  push edx
	  mov edx,[esi+0x18]
	  add edx,0x72
      nop
	  nop
	  nop
      nop
	  push edx
	  mov eax,[esp+0x28]
	  add eax,0x999
	  push eax
	  call GetImageClass
      
	  //Hien Thi Trang
	  mov eax,[esp+0x1C]
	  xor edx,edx
	  mov dl,[eax+0x3]
	  test dl,dl
	  jz Trang1Hien
	  push 11
      jmp HienThiTrang1
      Trang1Hien:
	  push 16
      HienThiTrang1:
	  mov edx,[esi+0x14]
	  add edx,0x8A
      nop
	  nop
	  nop
      nop
	  push edx
	  mov edx,[esi+0x18]
	  add edx,0xE8
      nop
	  nop
	  nop
      nop
	  push edx
	  mov eax,[esp+0x28]
	  add eax,0x999
	  push eax
	  call GetImageClass
	  
	  //--
      mov eax,[esp+0x1C]
	  xor edx,edx
	  mov dl,[eax+0x3]
	  cmp dl,1
	  jz Trang2Hien
	  push 12
	  jmp HienThiTrang2
	  Trang2Hien:
	  push 17
	  HienThiTrang2:
	  mov edx,[esi+0x14]
	  add edx,0xB7
      nop
	  nop
	  nop
      nop
	  push edx
	  mov edx,[esi+0x18]
	  add edx,0xE8
      nop
	  nop
	  nop
      nop
	  push edx
	  mov eax,[esp+0x28]
	  add eax,0x999
	  push eax
	  call GetImageClass
	  
	  //--
      mov eax,[esp+0x1C]
	  xor edx,edx
	  mov dl,[eax+0x3]
	  cmp dl,2
	  jz Trang3Hien
	  push 13
	  jmp HienThiTrang3
	  Trang3Hien:
	  push 18
	  HienThiTrang3:
	  mov edx,[esi+0x14]
	  add edx,0xE4
      nop
	  nop
	  nop
      nop
	  push edx
	  mov edx,[esi+0x18]
	  add edx,0xE8
      nop
	  nop
	  nop
      nop
	  push edx
	  mov eax,[esp+0x28]
	  add eax,0x999
	  push eax
	  call GetImageClass
	  
	  //--
      mov eax,[esp+0x1C]
	  xor edx,edx
	  mov dl,[eax+0x3]
	  cmp dl,3
	  jz Trang4Hien
	  push 14
	  jmp HienThiTrang4
	  Trang4Hien:
	  push 19
	  HienThiTrang4:
	  mov edx,[esi+0x14]
	  add edx,0x110
      nop
	  nop
	  nop
      nop
	  push edx
	  mov edx,[esi+0x18]
	  add edx,0xE8
      nop
	  nop
	  nop
      nop
	  push edx
	  mov eax,[esp+0x28]
	  add eax,0x999
	  push eax
	  call GetImageClass
	  
	  //--
      mov eax,[esp+0x1C]
	  xor edx,edx
	  mov dl,[eax+0x3]
	  cmp dl,4
	  jz Trang5Hien
	  push 15
	  jmp HienThiTrang5
	  Trang5Hien:
	  push 20
	  HienThiTrang5:
	  mov edx,[esi+0x14]
	  add edx,0x13D
      nop
	  nop
	  nop
      nop
	  push edx
	  mov edx,[esi+0x18]
	  add edx,0xE8
      nop
	  nop
	  nop
      nop
	  push edx
	  mov eax,[esp+0x28]
	  add eax,0x999
	  push eax
	  call GetImageClass
	  
	  //Hien Thi Nut Dang Ky
	  push 3
	  mov edx,[esi+0x14]
	  add edx,0x84
      nop
	  nop
	  nop
      nop
	  push edx
	  mov edx,[esi+0x18]
	  add edx,0xFF
      nop
	  nop
	  nop
      nop
	  push edx
	  mov eax,[esp+0x28]
	  add eax,0x999
	  push eax
	  call GetImageClass
	  
	  //Hien Thi Nut Tham Gia
	  push 4
	  mov edx,[esi+0x14]
	  add edx,0x135
      nop
	  nop
	  nop
      nop
	  push edx
	  mov edx,[esi+0x18]
	  add edx,0xFF
      nop
	  nop
	  nop
      nop
	  push edx
	  mov eax,[esp+0x28]
	  add eax,0x999
	  push eax
	  call GetImageClass

      
	  //
      EndofFuncDrawEventHp:
	  popad
      mov ecx,0x00000080
	  push 0x00459E3E
	  ret



	  GetCountLine:
	  mov ecx,[esp+0x4]
	  cmp ecx,0
	  jnz KienTraLine1
	  mov eax,0
      ret 0x4
      KienTraLine1:
	  cmp ecx,1
	  jnz KienTraLine2
	  mov eax,1
	  ret 0x4

	  KienTraLine2:
	  cmp ecx,2
	  jnz KienTraLine3
	  mov eax,0
	  ret 0x4

	  KienTraLine3:
	  cmp ecx,3
	  jnz KienTraLine4
	  mov eax,1
	  ret 0x4

	  KienTraLine4:
	  cmp ecx,4
	  jnz KienTraLine5
	  mov eax,0
	  ret 0x4

	  KienTraLine5:
	  cmp ecx,5
	  jnz KienTraLine6
	  mov eax,1
	  ret 0x4

	  KienTraLine6:
	  cmp ecx,6
	  jnz KienTraLine7
	  mov eax,0
	  ret 0x4

	  KienTraLine7:
	  cmp ecx,7
	  jnz KienTraLine8
	  mov eax,1
	  ret 0x4

	  KienTraLine8:
	  cmp ecx,8
	  jnz KienTraLine9
	  mov eax,0
	  ret 0x4

	  KienTraLine9:
	  mov eax,1
	  ret 0x4


	  GetCountColum:
	  mov ecx,[esp+0x4]
	  cmp ecx,0
	  jnz KienTraColum1
	  mov eax,0
      ret 0x4
      KienTraColum1:
	  cmp ecx,1
	  jnz KienTraColum2
	  mov eax,0
	  ret 0x4

	  KienTraColum2:
	  cmp ecx,2
	  jnz KienTraColum3
	  mov eax,1
	  ret 0x4

	  KienTraColum3:
	  cmp ecx,3
	  jnz KienTraColum4
	  mov eax,1
	  ret 0x4

	  KienTraColum4:
	  cmp ecx,4
	  jnz KienTraColum5
	  mov eax,2
	  ret 0x4

	  KienTraColum5:
	  cmp ecx,5
	  jnz KienTraColum6
	  mov eax,2
	  ret 0x4

	  KienTraColum6:
	  cmp ecx,6
	  jnz KienTraColum7
	  mov eax,3
	  ret 0x4

	  KienTraColum7:
	  cmp ecx,7
	  jnz KienTraColum8
	  mov eax,3
	  ret 0x4

	  KienTraColum8:
	  cmp ecx,8
	  jnz KienTraColum9
	  mov eax,4
	  ret 0x4

	  KienTraColum9:
	  mov eax,4
	  ret 0x4

	  LoadThongTinNguoiDangKy:
      sub esp,0x4
	  xor ecx,ecx
	  mov [esp],ecx
	  LoopBackCheckUser:
	  xor edx,edx
	  mov eax,[esp+0x8]
	  mov ecx,[esp]
	  imul ecx,0x10
	  mov dl,[eax+ecx]
	  test dl,dl
      jz KetThucLoopCheckUser
	  push edx
	  lea edx,[eax+ecx+0x1]
	  push edx
	  mov edx,[esi+0x14]
	  add edx,0x12
	  mov ecx,[esp+0x8]
	  push ecx
	  call GetCountLine
	  imul eax,0xB4
	  add edx,eax
	  push edx
	  mov edx,[esi+0x18]
	  add edx,0x78
      mov ecx,[esp+0xC]
	  push ecx
	  call GetCountColum
	  imul eax,0x13
      add edx,eax
	  push edx
	  call ShowText2
	  mov ecx,[esp]
	  add ecx,1
	  mov [esp],ecx
	  cmp ecx,10
	  jl LoopBackCheckUser
      KetThucLoopCheckUser:
      add esp,0x4
      ret 0x4

	  ShowText:
      mov edx,[esp+0xC]
	  push edx
	  mov edx,[esp+0x14]
	  push edx
	  mov edx,[esp+0x1C]
	  push edx
	  mov edx,[esp+0x24]
	  push edx
      mov edx,[esp+0x2C]
	  push edx
	  push 25
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  //
	  push 0x0
	  push 0x3F800000
	  mov eax,DWORD PTR [0x01733AC4]
	  mov edi,[eax]
	  mov edx,[esp+0x24]
	  push edx
	  mov edx,[esp+0x24]
	  push edx
	  push eax
	  mov ecx,DWORD PTR [0x01733AC4]
	  call dword ptr [edi+0x30]
	  add  esp,0x28
	  ret 0x1C

	  ShowText2:
	  mov edx,[esp+0xC]
	  push edx
	  mov edx,[esp+0x14]
	  push edx
	  push 5641
	  push 25
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  //
	  push 0x0
	  push 0x3F800000
	  mov eax,DWORD PTR [0x01733AC4]
	  mov edi,[eax]
	  mov edx,[esp+0x18]
	  push edx
	  mov edx,[esp+0x20]
	  push edx
	  push eax
	  mov ecx,DWORD PTR [0x01733AC4]
	  call dword ptr [edi+0x30]
	  add  esp,0x20
	  ret 0x10

	  GetImageClass:
	  mov eax,[esp+0x10]
	  cmp eax,0
      jnz NutSoCapHien   // So Cap
	  push 5642
	  push 25
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
	  mov  DWORD PTR SS : [ecx + 0x9C] , 0
	  mov  DWORD PTR SS : [ecx + 0xA0] , 112
	  mov  DWORD PTR SS : [ecx + 0x98] , 55
	  mov  DWORD PTR SS : [ecx + 0xA4] , 20
	  jmp ProcessShowNut

      NutSoCapHien:
	  cmp eax,30   // So Cap Hien
      jnz NutBuHon
      push 5642
	  push 25
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
	  mov  DWORD PTR SS : [ecx + 0x9C] , 0
	  mov  DWORD PTR SS : [ecx + 0xA0] , 347
	  mov  DWORD PTR SS : [ecx + 0x98] , 291
	  mov  DWORD PTR SS : [ecx + 0xA4] , 20
      jmp ProcessShowNut

	  NutBuHon:
	  cmp eax,1   // Trung Cap
      jnz NutTrungCapHien
      push 5642
	  push 25
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
	  mov  DWORD PTR SS : [ecx + 0x9C] , 32
	  mov  DWORD PTR SS : [ecx + 0xA0] , 113
	  mov  DWORD PTR SS : [ecx + 0x98] , 55
	  mov  DWORD PTR SS : [ecx + 0xA4] , 52
	  jmp ProcessShowNut

      NutTrungCapHien:
	  cmp eax,31   // Trung Cap
      jnz NutBuHon2
      push 5642
	  push 25
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
	  mov  DWORD PTR SS : [ecx + 0x9C] , 32
	  mov  DWORD PTR SS : [ecx + 0xA0] , 347
	  mov  DWORD PTR SS : [ecx + 0x98] , 291
	  mov  DWORD PTR SS : [ecx + 0xA4] , 52
      jmp ProcessShowNut

      NutBuHon2:
	  cmp eax,2  // Cao Cap
	  jnz NutCaoCapHien
      push 5642
	  push 25
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
	  mov  DWORD PTR SS : [ecx + 0x9C] , 65
	  mov  DWORD PTR SS : [ecx + 0xA0] , 113
	  mov  DWORD PTR SS : [ecx + 0x98] , 55
	  mov  DWORD PTR SS : [ecx + 0xA4] , 85
	  jmp ProcessShowNut

      NutCaoCapHien:
	  cmp eax,32  // Cao Cap
	  jnz NutBuHon3
      push 5642
	  push 25
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
	  mov  DWORD PTR SS : [ecx + 0x9C] , 65
	  mov  DWORD PTR SS : [ecx + 0xA0] , 347
	  mov  DWORD PTR SS : [ecx + 0x98] , 291
	  mov  DWORD PTR SS : [ecx + 0xA4] , 85
	  jmp ProcessShowNut

	  NutBuHon3:
	  cmp eax,3  // Dang Ky
	  jnz NutBuHon4
      push 5642
	  push 25
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
	  mov  DWORD PTR SS : [ecx + 0x9C] , 100
	  mov  DWORD PTR SS : [ecx + 0xA0] , 113
	  mov  DWORD PTR SS : [ecx + 0x98] , 55
	  mov  DWORD PTR SS : [ecx + 0xA4] , 121
	  jmp ProcessShowNut

	  NutBuHon4:
	  cmp eax,4  // Tham Gia
	  jnz NutTrang1An
      push 5642
	  push 25
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
	  mov  DWORD PTR SS : [ecx + 0x9C] , 133
	  mov  DWORD PTR SS : [ecx + 0xA0] , 113
	  mov  DWORD PTR SS : [ecx + 0x98] , 55
	  mov  DWORD PTR SS : [ecx + 0xA4] , 153
	  jmp ProcessShowNut

	  NutTrang1An:
	  cmp eax,11  // Tham Gia
	  jnz NutTrang2An
      push 5642
	  push 25
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
	  mov  DWORD PTR SS : [ecx + 0x9C] , 0
	  mov  DWORD PTR SS : [ecx + 0xA0] , 36
	  mov  DWORD PTR SS : [ecx + 0x98] , 0
	  mov  DWORD PTR SS : [ecx + 0xA4] , 20
	  jmp ProcessShowNut

	  NutTrang2An:
	  cmp eax,12  // Tham Gia
	  jnz NutTrang3An
      push 5642
	  push 25
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
	  mov  DWORD PTR SS : [ecx + 0x9C] , 31
	  mov  DWORD PTR SS : [ecx + 0xA0] , 36
	  mov  DWORD PTR SS : [ecx + 0x98] , 0
	  mov  DWORD PTR SS : [ecx + 0xA4] , 52
	  jmp ProcessShowNut

	  NutTrang3An:
	  cmp eax,13  // Tham Gia
	  jnz NutTrang4An
	  push 5642
	  push 25
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
	  mov  DWORD PTR SS : [ecx + 0x9C] , 65
	  mov  DWORD PTR SS : [ecx + 0xA0] , 36
	  mov  DWORD PTR SS : [ecx + 0x98] , 0
	  mov  DWORD PTR SS : [ecx + 0xA4] , 86
	  jmp ProcessShowNut

	  NutTrang4An:
	  cmp eax,14  // Tham Gia
	  jnz NutTrang5An
      push 5642
	  push 25
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
	  mov  DWORD PTR SS : [ecx + 0x9C] , 100
	  mov  DWORD PTR SS : [ecx + 0xA0] , 36
	  mov  DWORD PTR SS : [ecx + 0x98] , 0
	  mov  DWORD PTR SS : [ecx + 0xA4] , 121
	  jmp ProcessShowNut

	  NutTrang5An:
	  cmp eax,15  // Tham Gia
	  jnz NutTrang1Hien
      push 5642
	  push 25
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
	  mov  DWORD PTR SS : [ecx + 0x9C] , 133
	  mov  DWORD PTR SS : [ecx + 0xA0] , 36
	  mov  DWORD PTR SS : [ecx + 0x98] , 0
	  mov  DWORD PTR SS : [ecx + 0xA4] , 154
	  jmp ProcessShowNut

	  NutTrang1Hien:
	  cmp eax,16  // Tham Gia
	  jnz NutTrang2Hien
      push 5642
	  push 25
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
	  mov  DWORD PTR SS : [ecx + 0x9C] , 0
	  mov  DWORD PTR SS : [ecx + 0xA0] , 271
	  mov  DWORD PTR SS : [ecx + 0x98] , 234
	  mov  DWORD PTR SS : [ecx + 0xA4] , 20
	  jmp ProcessShowNut

	  NutTrang2Hien:
	  cmp eax,17  // Tham Gia
	  jnz NutTrang3Hien
      push 5642
	  push 25
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
	  mov  DWORD PTR SS : [ecx + 0x9C] , 31
	  mov  DWORD PTR SS : [ecx + 0xA0] , 271
	  mov  DWORD PTR SS : [ecx + 0x98] , 234
	  mov  DWORD PTR SS : [ecx + 0xA4] , 52
	  jmp ProcessShowNut

	  NutTrang3Hien:
	  cmp eax,18  // Tham Gia
	  jnz NutTrang4Hien
      push 5642
	  push 25
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
	  mov  DWORD PTR SS : [ecx + 0x9C] , 65
	  mov  DWORD PTR SS : [ecx + 0xA0] , 271
	  mov  DWORD PTR SS : [ecx + 0x98] , 234
	  mov  DWORD PTR SS : [ecx + 0xA4] , 86
	  jmp ProcessShowNut

      NutTrang4Hien:
	  cmp eax,19  // Tham Gia
	  jnz NutTrang5Hien
      push 5642
	  push 25
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
	  mov  DWORD PTR SS : [ecx + 0x9C] , 100
	  mov  DWORD PTR SS : [ecx + 0xA0] , 271
	  mov  DWORD PTR SS : [ecx + 0x98] , 234
	  mov  DWORD PTR SS : [ecx + 0xA4] , 121
	  jmp ProcessShowNut

      NutTrang5Hien:
	  cmp eax,20  // Tham Gia
	  jnz NutBuHonKhac
      push 5642
	  push 25
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
	  mov  DWORD PTR SS : [ecx + 0x9C] , 133
	  mov  DWORD PTR SS : [ecx + 0xA0] , 271
	  mov  DWORD PTR SS : [ecx + 0x98] , 234
	  mov  DWORD PTR SS : [ecx + 0xA4] , 154
	  jmp ProcessShowNut

	  NutBuHonKhac:
      push 5642
	  push 25
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
	  mov  DWORD PTR SS : [ecx + 0x9C] , 195
	  mov  DWORD PTR SS : [ecx + 0xA0] , 247
	  mov  DWORD PTR SS : [ecx + 0x98] , 190
	  mov  DWORD PTR SS : [ecx + 0xA4] , 216

      ProcessShowNut:
	  push 0x00000000
	  push 0x0089E914
	  mov ecx,[esp+0x10]
	  mov edx,[esp+0x14]
	  push ecx
	  push edx
	  mov ecx, [esp+0x14]
	  mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
	  call eax
	  mov ecx,[esp+0x4]
	  push 0x1732CC8
	  mov eax, 0x7B9850
	  call eax //Draw1
	  ret 0x10

      AddOptionImage:
	  sub esp,0x4
	  xor ecx,ecx
	  mov [esp],ecx
	  BackGetOptionImage:
	  mov ecx,[esp]
	  mov eax, 0x010CC088
	  mov edx,[eax+ecx]
	  mov eax,[esp+0x8]
	  mov [eax+ecx],edx
	  add ecx,4
	  mov [esp],ecx
	  cmp ecx,0xB8
	  jl BackGetOptionImage
	  add esp,0x4
	  ret 0x4
	}
}
__declspec(naked)void ThayDoiFormDieuChe()  //005DE128
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  push eax
	  xor ecx,ecx
	  mov ecx,[eax+0x8]
	  test ecx,ecx
	  jnz DaCoThongTinHinhAnh
      add eax,0x8
      push eax
	  call AddOptionImage
	  DaCoThongTinHinhAnh:
	  mov edx,[esi+0x18]
	  add edx,0xBD
	  push edx
	  mov edx,[esi+0x14]
	  add edx,0x50
	  push edx
	  mov eax,[esp+0x8]
      add eax,0x8
	  push eax
	  call GetImageClass
	  //Hien Thi VP 1
	  mov eax,[esp]
	  xor ecx,ecx
	  mov cl,[eax]
	  test ecx,ecx
	  jz KhongCoVP1
	  push 0x0
      push 0x1
	  imul ecx,ecx,0x90
	  lea edx,[ecx+0x0112A020]
	  push 0x0
	  push edx
	  mov edx,[esi+0x18]
	  add edx,0xB2
	  push edx
	  mov edx,[esi+0x14]
	  add edx,0xE
	  push edx
      push 0x1
	  mov ecx,DWORD PTR SS:[0x01615E90]
	  mov eax,0x004913F0
	  call eax
      KhongCoVP1:
	  //Hien Thi VP 2
      mov eax,[esp]
	  xor ecx,ecx
	  mov cl,[eax+0x1]
	  test ecx,ecx
	  jz KhongCoVP2
      push 0x0
      push 0x1
	  imul ecx,ecx,0x90
	  lea edx,[ecx+0x0112A020]
	  push 0x0
	  push edx
	  mov edx,[esi+0x18]
	  add edx,0xB2
	  push edx
	  mov edx,[esi+0x14]
	  add edx,0x58
	  push edx
      push 0x1
	  mov ecx,DWORD PTR SS:[0x01615E90]
	  mov eax,0x004913F0
	  call eax

	  KhongCoVP2:
      //
      pop eax
	  push 0x005DE17D
	  ret



      GetImageClass:
	  push 4629
	  push 25
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
	  mov  DWORD PTR SS : [ecx + 0x9C] , 0
	  mov  DWORD PTR SS : [ecx + 0xA0] , 165
	  mov  DWORD PTR SS : [ecx + 0x98] , 0
	  mov  DWORD PTR SS : [ecx + 0xA4] , 44

      ProcessShowNut:
	  push 0xFF7F0000
	  push 5188
	  push 25
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,[esp+0x14]
	  mov edx,[esp+0x10]
	  push ecx
	  push edx
	  mov ecx, [esp+0x14]
	  mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
	  call eax
	  mov ecx,[esp+0x4]
	  push 0x1732CC8
	  mov eax, 0x7B9850
	  call eax //Draw1
	  ret 0xC

      AddOptionImage:
	  sub esp,0x4
	  xor ecx,ecx
	  mov [esp],ecx
	  BackGetOptionImage:
	  mov ecx,[esp]
	  mov eax, 0x010CC088
	  mov edx,[eax+ecx]
	  mov eax,[esp+0x8]
	  mov [eax+ecx],edx
	  add ecx,4
	  mov [esp],ecx
	  cmp ecx,0xB8
	  jl BackGetOptionImage
	  add esp,0x4
	  ret 0x4
	}
};
__declspec(naked)void SendPackageDieuChe()  //006D9D32
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
      push eax
	  sub esp,0xC
	  mov eax,esp
	  mov word ptr [eax],0x9
	  mov [eax+0x2],bl
	  mov byte ptr [eax+0x3],0x3C
	  mov [eax+0x4],dx
	  mov byte ptr [eax+0x6],0x1
	  xor ecx,ecx
	  mov edx,[esp+0xC]
	  mov cl,[edx]
	  mov [eax+0x7],cl
      mov cl,[edx+1]
	  mov [eax+0x8],cl
      push eax
	  mov ecx,esi
	  mov eax,0x6B2F60
      call eax
	  add esp,0xC
	  pop eax
	  push 0x006D9D84
      ret
	}
};
__declspec(naked)void GetPackageCheTao()  //006D9D32
{
__asm
	{
	  mov al,[ebp+0x3]
      cmp al,0xD
	  jz CheTaoVuKhiMoi
	  mov al, [ebp+3]
	  and eax,0xF
      add eax, 0xFFFFFFFD
	  push 0x006ABFD3
	  ret

	  CheTaoVuKhiMoi:
	  //Check Slot Vp Thanh Cong
	  xor eax,eax
	  mov al,[ebp+0x4]
	  test al,al
	  jz KiemTraSlotKhac
	  xor ecx,ecx
	  mov cl,[ebp+0x5]
	  test ecx,ecx
      jz KiemTraSlotKhac
	  imul eax,0x90
      xor cl,0xC5
	  mov [0x1107258+0x22DC8+eax+0x19],cl

	  KiemTraSlotKhac:
      //Check Slot Vp MayMan
      xor eax,eax
	  mov al,[ebp+0x6]
	  test al,al
	  jz KhongTImThayVPMayMan
      xor ecx,ecx
	  mov cl,[ebp+0x7]
      test ecx,ecx
	  jz KhongTImThayVPMayMan
	  imul eax,0x90
      xor cl,0xC5
	  mov [0x1107258+0x22DC8+eax+0x19],cl

	  KhongTImThayVPMayMan:
	  mov eax, 0x1
	  pop edi
	  pop esi
	  pop ebp
	  pop ebx
	  add esp, 0x264
	  ret 0x4
	}
};
//Form Nhiem Vu An Cu
__declspec(naked)void PozNhiemvuancu()  //00527EF1
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  push eax
	  mov ecx,DWORD PTR SS:[0x01733AD0]
	  mov eax,0x007D7FD0
	  call eax
	  xor ecx,ecx
	  mov cl,[eax+0xC]
	  test ecx,ecx
      jz KhongNhanNutCheckHover
	  //
	  mov ecx,[esp]
	  xor edx,edx
	  mov dl,[ecx+0x1]
	  test dl,dl
      jnz WaitFor1
	  //
	  mov edx,[eax+0x10]
	  cmp edx,141
	  jl KiemTraChucNang5
	  cmp edx,197
	  ja KiemTraChucNang5
	  mov edx,[eax+0x18]
	  cmp edx,394
	  jl KiemTraChucNang5
	  cmp edx,410
	  ja KiemTraChucNang2
	  //
	  pop eax
	  mov byte ptr [eax+0x1],1
	  mov dword ptr [eax+0x2C],0xC17C0004
      add eax,0x2C
	  push eax
	  mov ecx,0x155EE60
	  mov eax,0x006B2F60
	  call eax
	  jmp WaitFor

	  //
	  KiemTraChucNang2:
      mov edx,[eax+0x18]
	  cmp edx,428
	  jl KiemTraChucNang5
	  cmp edx,444
	  ja KiemTraChucNang3
	  pop eax
	  mov byte ptr [eax+0x1],1
	  mov dword ptr [eax+0x2C],0xC27C0004
	  add eax,0x2C
	  push eax
	  mov ecx,0x155EE60
	  mov eax,0x006B2F60
	  call eax
	  jmp WaitFor
	  jmp WaitFor

	  KiemTraChucNang3:
      mov edx,[eax+0x18]
	  cmp edx,462
	  jl KiemTraChucNang5
	  cmp edx,478
	  ja KiemTraChucNang4
      pop eax
	  mov byte ptr [eax+0x1],1
	  mov dword ptr [eax+0x2C],0xC37C0004
	  add eax,0x2C
	  push eax
	  mov ecx,0x155EE60
	  mov eax,0x006B2F60
	  call eax
	  jmp WaitFor
	  jmp WaitFor

	  KiemTraChucNang4:
      mov edx,[eax+0x18]
	  cmp edx,496
	  jl KiemTraChucNang5
	  cmp edx,512
      ja KiemTraChucNang5
      pop eax
	  mov byte ptr [eax+0x1],1
	  mov dword ptr [eax+0x2C],0xC47C0004
	  add eax,0x2C
	  push eax
	  mov ecx,0x155EE60
	  mov eax,0x006B2F60
	  call eax
	  jmp WaitFor
	  jmp WaitFor

	  KiemTraChucNang5:
	  xor edx,edx
	  mov ecx,[esp]
	  mov dl,[ecx+0xF]
	  cmp dl,2
      jnz KhongNhanNut
      mov edx,[eax+0x10]
	  cmp edx,285
	  jl KhongNhanNut
	  cmp edx,313
	  ja KiemTraChucNang6
	  mov edx,[eax+0x18]
	  cmp edx,400
	  jl KhongNhanNut
	  cmp edx,425
	  ja KhongNhanNut
      pop eax
	  mov byte ptr [eax+0x1],1
	  mov dword ptr [eax+0x2C],0xCA7C0004
	  add eax,0x2C
	  push eax
	  mov ecx,0x155EE60
	  mov eax,0x006B2F60
	  call eax
	  jmp WaitFor

	  KiemTraChucNang6:
      mov edx,[eax+0x10]
	  cmp edx,342
	  jl KhongNhanNut
	  cmp edx,368
	  ja KiemTraChucNang7
	  mov edx,[eax+0x18]
	  cmp edx,400
	  jl KhongNhanNut
	  cmp edx,425
	  ja KhongNhanNut
      pop eax
	  mov byte ptr [eax+0x1],1
	  mov dword ptr [eax+0x2C],0xCB7C0004
	  add eax,0x2C
	  push eax
	  mov ecx,0x155EE60
	  mov eax,0x006B2F60
	  call eax
	  jmp WaitFor


	  KiemTraChucNang7:
      mov edx,[eax+0x10]
	  cmp edx,397
	  jl KhongNhanNut
	  cmp edx,428
	  ja KhongNhanNut
	  mov edx,[eax+0x18]
	  cmp edx,400
	  jl KhongNhanNut
	  cmp edx,425
	  ja KhongNhanNut
      pop eax
	  mov byte ptr [eax+0x1],1
	  mov dword ptr [eax+0x2C],0xCC7C0004
	  add eax,0x2C
	  push eax
	  mov ecx,0x155EE60
	  mov eax,0x006B2F60
	  call eax
	  jmp WaitFor

	  KhongNhanNutCheckHover:
	  mov edx,[esp]
	  mov cl,[edx+0xF]
	  cmp cl,2
	  jnz KhongNhanNut
	  mov edx,[eax+0x10]
	  cmp edx,285
	  jl KhongNhanNut
	  cmp edx,313
	  ja KiemTraHover2
	  mov edx,[eax+0x18]
	  cmp edx,400
	  jl KhongNhanNut
	  cmp edx,425
	  ja KhongNhanNut
	  //
	  pop eax
	  mov byte ptr [eax+0x2],1
	  jmp WaitFor

	  KiemTraHover2:
      mov edx,[eax+0x10]
	  cmp edx,342
	  jl KhongNhanNut
	  cmp edx,368
	  ja KiemTraHover3
	  mov edx,[eax+0x18]
	  cmp edx,400
	  jl KhongNhanNut
	  cmp edx,425
	  ja KhongNhanNut
	  //
	  pop eax
	  mov byte ptr [eax+0x2],2
	  jmp WaitFor

	  KiemTraHover3:
      mov edx,[eax+0x10]
	  cmp edx,397
	  jl KhongNhanNut
	  cmp edx,428
	  ja KhongNhanNut
	  mov edx,[eax+0x18]
	  cmp edx,400
	  jl KhongNhanNut
	  cmp edx,425
	  ja KhongNhanNut
	  //
	  pop eax
	  mov byte ptr [eax+0x2],3
	  jmp WaitFor

	  KhongNhanNut:
	  pop eax
	  mov byte ptr [eax+0x1],0
	  mov byte ptr [eax+0x2],0
	  push 0x80FFFFFF
	  push 0x00527EF6
	  ret

	  WaitFor1:
	  pop eax
	  push 0x80FFFFFF
	  push 0x00527EF6
	  ret

	  WaitFor:
      push 0x80FFFFFF
	  push 0x00527EF6
	  ret
	}
};
__declspec(naked)void DrawNhiemVuAnCu()  //0052810E
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  //
	  push eax
	  mov ecx,[esi+0x10]
	  test ecx,ecx
	  jz ChuaMoForm
      mov ecx,DWORD PTR SS:[0x01733AC4]
	  push 0xFFFF0000
	  mov edx,[ecx]
	  call dword ptr [edx+0xC]
	  mov eax,[esp]
	  mov ecx,[eax+0x30]
	  test ecx,ecx
	  jnz DaCoThongTinHinhAnhNV
      add eax,0x30
      push eax
	  call AddOptionImage
      DaCoThongTinHinhAnhNV:
	  // Kiem tra loai Quest
	  mov eax,[esp]
	  mov dl,[eax+0x8]
	  cmp dl,1
	  jz DropVatPham
	  cmp dl,2
	  jz VatPhamOpt
	  cmp dl,3
	  jz NhiemVuPk
	  cmp dl,4
	  jz NhiemVuCT
	  cmp dl,5
	  jz NhiemVuGietBoss
	  cmp dl,6
	  jz NhiemVuEXP
	  cmp dl,7
	  jz NhiemVuAcDanh
      cmp dl,8
	  jz NhiemVuGietQuai

	  AnotherInfo:
      // Hien Thi Nhiem Vu Trong Ngay
	  mov eax,[esp]
      xor edx,edx
	  mov dl,[eax+0xE]
	  push edx
      push 0
	  push 74
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  //
	  push 0x0
	  push 0x3F800000
	  mov eax,DWORD PTR [0x01733AC4]
	  mov edi,[eax]
	  mov edx,0xD5
	  push edx
	  mov edx,0x97
	  push edx
	  push eax
	  mov ecx,DWORD PTR [0x01733AC4]
	  call dword ptr [edi+0x30]
	  add esp,0x1C
	  // Chuoi Nhiem Vu
      mov eax,[esp]
      xor edx,edx
	  mov dx,[eax+0xC]
	  push edx
      push 18
	  push 74
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  push 0x0
	  push 0x3F800000
	  mov eax,DWORD PTR [0x01733AC4]
	  mov edi,[eax]
	  mov edx,0xD5
	  push edx
	  mov edx,0x145
	  push edx
	  push eax
	  mov ecx,DWORD PTR [0x01733AC4]
	  call dword ptr [edi+0x30]
	  add esp,0x1C
      // Tinh Trang
      mov eax,[esp]
	  xor edx,edx
	  mov dl,[eax+0xF]
      add edx,21
	  push edx
	  push 74
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  push 0x0
	  push 0x3F800000
	  mov eax,DWORD PTR [0x01733AC4]
	  mov edi,[eax]
	  mov edx,0x140
	  push edx
	  mov edx,0x90
	  push edx
	  push eax
	  mov ecx,DWORD PTR [0x01733AC4]
	  call dword ptr [edi+0x30]
	  add esp,0x18
      mov eax,[esp]
	  xor edx,edx
	  mov dl,[eax+0x2]
	  test dl,dl
	  jz NhiemVuChuaXog
	  push 90
	  push 74
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  push 0x0
	  push 0x3F800000
	  mov eax,DWORD PTR [0x01733AC4]
	  mov edi,[eax]
	  mov edx,0x1C0
	  push edx
	  mov edx,0xF0
	  push edx
	  push eax
	  mov ecx,DWORD PTR [0x01733AC4]
	  call dword ptr [edi+0x30]
	  add esp,0x18
      mov eax,[esp]
	  xor edx,edx
	  mov dl,[eax+0x2]
      add edx,90
      push edx
	  push 74
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  push 0x0
	  push 0x3F800000
	  mov eax,DWORD PTR [0x01733AC4]
	  mov edi,[eax]
	  mov edx,0x1D0
	  push edx
	  mov edx,0xF0
	  push edx
	  push eax
	  mov ecx,DWORD PTR [0x01733AC4]
	  call dword ptr [edi+0x30]
	  add esp,0x18
      //
	  NhiemVuChuaXog:
      push 0
      mov eax,[esp+0x4]
	  add eax,0x30
      mov edx,0xAD
	  push edx
	  mov edx,0xCD
	  push edx
      push eax
	  call GetImageClass
      mov eax,[esp]
	  xor edx,edx
	  mov dl,[eax+0xF]
	  cmp dl,2
      jnz LoadReward
      push 1
      mov eax,[esp+0x4]
	  add eax,0x30
	  mov edx,0x19A
	  push edx
	  mov edx,0x15B
	  push edx
      push eax
	  call GetImageClass
	  //
      LoadReward:
	  mov eax,[esp]
      xor edx,edx
	  mov dl,[eax+0x8]
	  cmp dl,0
	  test edx,edx
	  jnz ChuaMoForm
      mov eax,[esp]
      xor edx,edx
	  mov dl,[eax+0x20]
	  cmp edx,13
	  jnz KiemTraTypeQua
      xor edx,edx
	  mov edx,[eax+0x28]
	  push edx
      push 64
	  push 74
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  push 0x0
	  push 0x3F800000
	  mov eax,DWORD PTR [0x01733AC4]
	  mov edi,[eax]
	  mov edx,0x15A
	  push edx
	  mov edx,0xC0
	  push edx
	  push eax
	  mov ecx,DWORD PTR [0x01733AC4]
	  call dword ptr [edi+0x30]
	  add esp,0x1C
	  push 2
      mov eax,[esp+0x4]
	  add eax,0x30
	  mov edx,0x165
	  push edx
	  mov edx,0xDE
	  push edx
      push eax
	  call GetImageClass
	  jmp ChuaMoForm

	  KiemTraTypeQua:
	  cmp edx,20
	  jnz KiemTraTypeQua1
      xor edx,edx
	  mov edx,[eax+0x28]
	  push edx
      push 65
	  push 74
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  push 0x0
	  push 0x3F800000
	  mov eax,DWORD PTR [0x01733AC4]
	  mov edi,[eax]
	  mov edx,0x15A
	  push edx
	  mov edx,0xC0
	  push edx
	  push eax
	  mov ecx,DWORD PTR [0x01733AC4]
	  call dword ptr [edi+0x30]
	  add esp,0x1C
	  push 3
      mov eax,[esp+0x4]
	  add eax,0x30
	  mov edx,0x165
	  push edx
	  mov edx,0xDE
	  push edx
      push eax
	  call GetImageClass
	  jmp ChuaMoForm

	  KiemTraTypeQua1:
	  cmp edx,21
	  jnz ChuaMoForm
	  xor edx,edx
	  mov edx,[eax+0x24]
	  cmp edx,-1
	  jz ChuaMoForm
      mov eax,[esp]
      xor edx,edx
	  mov dx,[eax+0x22]
	  xor ecx,ecx
      mov cl,[eax+0x21]
	  push edx
	  push ecx
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  push 0x0
	  push 0x3F800000
	  mov eax,DWORD PTR [0x01733AC4]
	  mov edi,[eax]
	  mov edx,0x15A
	  push edx
	  mov edx,0xC0
	  push edx
	  push eax
	  mov ecx,DWORD PTR [0x01733AC4]
	  call dword ptr [edi+0x30]
	  add esp,0x18
	  //
	  mov eax,[esp]
	  mov edx,[eax+0x24]
      cmp edx,-1
	  jz ChuaMoForm
	  imul edx,0x90
      push 0x0
      push 0x1
	  lea edx,[edx+0x0112A020]
	  push 0x0
	  push edx
	  mov edx,0x154
	  push edx
	  mov edx,0x95
	  push edx
      push 0x1
	  mov ecx,DWORD PTR SS:[0x01615E90]
	  mov eax,0x004913F0
	  call eax
	  jmp ChuaMoForm

	  DropVatPham:
	  mov eax,[esp]
	  xor edx,edx
	  mov dl,[eax+0x9]
	  xor ecx,ecx
	  mov cx,[eax+0xA]
	  push ecx
	  push edx
      mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
      mov eax,[esp+0x4]
	  xor edx,edx
	  mov edx,[eax+0x18]
	  push edx
      push 1
	  push 74
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  //
	  push 0x0
	  push 0x3F800000
	  mov eax,DWORD PTR [0x01733AC4]
	  mov edi,[eax]
	  mov edx,0xF5
	  push edx
	  mov edx,0x90
	  push edx
	  push eax
	  mov ecx,DWORD PTR [0x01733AC4]
	  call dword ptr [edi+0x30]
	  add esp,0x20
	  //
      jmp AnotherInfo
	  //End

	  VatPhamOpt:
      mov eax,[esp]
	  mov edx,[eax+0x18]
	  push edx // Gia tri Opt
	  mov edx,[eax+0x10]
      add edx,0x96
	  push edx
	  push 74
      mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
      mov eax,[esp+0x8]
	  xor edx,edx
	  mov dx,[eax+0xA]
      push edx
	  push 75
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  //
	  push 0x0
	  push 0x3F800000
	  mov eax,DWORD PTR [0x01733AC4]
	  mov edi,[eax]
	  mov edx,0xF5
	  push edx
	  mov edx,0x90
	  push edx
	  push eax
	  mov ecx,DWORD PTR [0x01733AC4]
	  call dword ptr [edi+0x30]
	  add esp,0x20
	  //
	  jmp AnotherInfo

      NhiemVuGietQuai:
	  mov eax,[esp]
	  mov edx,[eax+0x14]
	  push edx
      xor edx,edx
      mov dx,[eax+0x4]
      push edx
	  mov ecx,[eax+0x10]
      sub ecx,4000
	  push ecx // Gia tri Opt
      push 0
      mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
      push 8
	  push 74
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  //
	  push 0x0
	  push 0x3F800000
	  mov eax,DWORD PTR [0x01733AC4]
	  mov edi,[eax]
	  mov edx,0xF5
	  push edx
	  mov edx,0x90
	  push edx
	  push eax
	  mov ecx,DWORD PTR [0x01733AC4]
	  call dword ptr [edi+0x30]
	  add esp,0x24
	  jmp AnotherInfo

	  NhiemVuPk:
      mov eax,[esp]
	  mov edx,[eax+0x9]
	  push edx // Gia tri Opt
      mov eax,[esp+0x4]
	  xor edx,edx
	  mov edx,[eax+0x8]
	  add edx,120
      push edx
	  push 74
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
      push 6
	  push 74
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  //
	  push 0x0
	  push 0x3F800000
	  mov eax,DWORD PTR [0x01733AC4]
	  mov edi,[eax]
	  mov edx,0xF5
	  push edx
	  mov edx,0x90
	  push edx
	  push eax
	  mov ecx,DWORD PTR [0x01733AC4]
	  call dword ptr [edi+0x30]
	  add esp,0x20
	  jmp AnotherInfo

	  NhiemVuCT:
      mov eax,[esp]
	  mov edx,[eax+0x9]
	  push edx // Gia tri Opt
      push 3
	  push 74
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  //
	  push 0x0
	  push 0x3F800000
	  mov eax,DWORD PTR [0x01733AC4]
	  mov edi,[eax]
	  mov edx,0xF5
	  push edx
	  mov edx,0x90
	  push edx
	  push eax
	  mov ecx,DWORD PTR [0x01733AC4]
	  call dword ptr [edi+0x30]
	  add esp,0x1C
	  jmp AnotherInfo

	  NhiemVuGietBoss:
	  mov eax,[esp]
      xor edx,edx
	  mov dl,[eax+0x9]
	  mov ecx,[eax+0x10]
      sub ecx,4000
	  push ecx // Gia tri Opt
	  push edx
      mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
      push 4
	  push 74
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  //
	  push 0x0
	  push 0x3F800000
	  mov eax,DWORD PTR [0x01733AC4]
	  mov edi,[eax]
	  mov edx,0xF5
	  push edx
	  mov edx,0x90
	  push edx
	  push eax
	  mov ecx,DWORD PTR [0x01733AC4]
	  call dword ptr [edi+0x30]
	  add esp,0x1C
	  jmp AnotherInfo

	  NhiemVuEXP:
	  mov eax,[esp]
	  mov edx,[eax+0x9]
	  push edx
      push 7
	  push 74
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  //
	  push 0x0
	  push 0x3F800000
	  mov eax,DWORD PTR [0x01733AC4]
	  mov edi,[eax]
	  mov edx,0xF5
	  push edx
	  mov edx,0x90
	  push edx
	  push eax
	  mov ecx,DWORD PTR [0x01733AC4]
	  call dword ptr [edi+0x30]
	  add esp,0x1C
	  jmp AnotherInfo

	  NhiemVuAcDanh:
      mov eax,[esp]
	  mov edx,[eax+0x9]
	  push edx
      push 5
	  push 74
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  //
	  push 0x0
	  push 0x3F800000
	  mov eax,DWORD PTR [0x01733AC4]
	  mov edi,[eax]
	  mov edx,0xF5
	  push edx
	  mov edx,0x90
	  push edx
	  push eax
	  mov ecx,DWORD PTR [0x01733AC4]
	  call dword ptr [edi+0x30]
	  add esp,0x1C
	  jmp AnotherInfo
	  //
	  ChuaMoForm:
	  pop eax
	  pop edi
	  pop esi
      add esp,0x0000008C
	  push 0x00528116
	  ret

	  GetImageClass:
	  mov eax,[esp+0x10]
	  cmp eax,1
	  jz NhiemVuDaXog
	  cmp eax,2
	  jz HienThiQuaTangMil
	  cmp eax,3
      jz HienThiQuaTangEXP
	  push 6482
	  push 25
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
	  mov  DWORD PTR SS : [ecx + 0x9C] , 62
	  mov  DWORD PTR SS : [ecx + 0xA0] , 352
	  mov  DWORD PTR SS : [ecx + 0x98] , 0
	  mov  DWORD PTR SS : [ecx + 0xA4] , 450
	  jmp ProcessShowNut

	  HienThiQuaTangMil:
      push 4108
	  push 25
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
	  mov  DWORD PTR SS : [ecx + 0x9C] , 166
	  mov  DWORD PTR SS : [ecx + 0xA0] , 48
	  mov  DWORD PTR SS : [ecx + 0x98] , 18
	  mov  DWORD PTR SS : [ecx + 0xA4] , 197
	  jmp ProcessShowNut

      HienThiQuaTangEXP:
      push 4108
	  push 25
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
	  mov  DWORD PTR SS : [ecx + 0x9C] , 166
	  mov  DWORD PTR SS : [ecx + 0xA0] , 105
	  mov  DWORD PTR SS : [ecx + 0x98] , 75
	  mov  DWORD PTR SS : [ecx + 0xA4] , 197
	  jmp ProcessShowNut

	  NhiemVuDaXog:
      push 4108
	  push 25
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
	  mov  DWORD PTR SS : [ecx + 0x9C] , 160
	  mov  DWORD PTR SS : [ecx + 0xA0] , 175
	  mov  DWORD PTR SS : [ecx + 0x98] , 6
	  mov  DWORD PTR SS : [ecx + 0xA4] , 203

	  ProcessShowNut:
	  push 0xFF7F0000
	  push 5188
	  push 25
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,[esp+0x14]
	  mov edx,[esp+0x10]
	  push ecx
	  push edx
	  mov ecx, [esp+0x14]
	  mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
	  call eax
	  mov ecx,[esp+0x4]
	  push 0x1732CC8
	  mov eax, 0x7B9850
	  call eax //Draw1
	  ret 0x10

      ShowText2:
	  mov edx,[esp+0xC]
	  push edx
	  mov edx,[esp+0x14]
	  push edx
	  push 74
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  //
	  push 0x0
	  push 0x3F800000
	  mov eax,DWORD PTR [0x01733AC4]
	  mov edi,[eax]
	  mov edx,[esp+0x18]
	  push edx
	  mov edx,[esp+0x18]
	  push edx
	  push eax
	  mov ecx,DWORD PTR [0x01733AC4]
	  call dword ptr [edi+0x30]
	  add esp,0x1C
	  ret 0x10

      ShowText3:
	  mov edx,[esp+0xC]
	  push edx
	  push 74
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  //
	  push 0x0
	  push 0x3F800000
	  mov eax,DWORD PTR [0x01733AC4]
	  mov edi,[eax]
	  mov edx,[esp+0x14]
	  push edx
	  mov edx,[esp+0x14]
	  push edx
	  push eax
	  mov ecx,DWORD PTR [0x01733AC4]
	  call dword ptr [edi+0x30]
	  add esp,0x18
	  ret 0xC

	  ShowText:
	  mov edx,[esp+0x14]
	  push edx
      mov edx,[esp+0x14]
	  push edx
      mov edx,[esp+0x14]
	  push edx
	  push 74
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  //
	  push 0x0
	  push 0x3F800000
	  mov eax,DWORD PTR [0x01733AC4]
	  mov edi,[eax]
	  mov edx,[esp+0x1C]
	  push edx
	  mov edx,[esp+0x1C]
	  push edx
	  push eax
	  mov ecx,DWORD PTR [0x01733AC4]
	  call dword ptr [edi+0x30]
	  add esp,0x20
	  ret 0x14

      AddOptionImage:
	  sub esp,0x4
	  xor ecx,ecx
	  mov [esp],ecx
	  BackGetOptionImage:
	  mov ecx,[esp]
	  mov eax, 0x010CC088
	  mov edx,[eax+ecx]
	  mov eax,[esp+0x8]
	  mov [eax+ecx],edx
	  add ecx,4
	  mov [esp],ecx
	  cmp ecx,0xB8
	  jl BackGetOptionImage
	  add esp,0x4
	  ret 0x4
	}
};
__declspec(naked)void HienThiThongTinNVNew()  //004B82E9
{
__asm
	{
	  push 0xFFFF00FF
      mov ecx,DWORD PTR SS:[0x01733AC4]
	  mov edx, [ecx]
	  call dword ptr [edx+0xC]
	  mov eax,[0x010D94A8]
	  mov ecx,[eax+0x000082B0]
	  xor ecx,0xE137FDB1
	  push ecx
	  mov eax,[0x010D94A8]
	  mov ecx,[eax+0x000082AC]
	  xor ecx,0xE137FDB1
	  push ecx
	  mov eax,[0x010D94A8]
	  mov ecx,[eax+0x000082A8]
	  xor ecx,0xE137FDB1
	  cmp ecx,21
	  jl ThanhThap
	  sub ecx,21
	  mov ecx,[ecx*0x4+0x010D7B9C]
	  jmp ContinueProcess

	  ThanhThap:
	  mov ecx,[ecx*0x4+0x010D7B24]
	  ContinueProcess:
	  push ecx
      push 4807
	  push 25
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,[ebp+0x18]
	  add ecx,0x1A
	  push 0x3F800000
	  push ecx
	  mov ecx,[ebp+0x14]
	  add ecx,0x85
	  push ecx
	  mov eax,DWORD PTR SS:[0x01733AC4]
	  mov edx,[eax]
	  push eax
	  call dword ptr [edx+0x28]
	  push 0x004B8348
	  ret
	}
};
__declspec(naked)void BorderNoKhiInject()  //004B7BDD
{
__asm
	{
	   lea edx,[eax+0x15D]
	   add eax,0x183
	   push 0x004B7BE3
       ret
	}
};
__declspec(naked)void HienThiNenTen()  //004B8286
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
	   add eax,0x20
       push eax
	   push 4450
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
	   mov ecx,[esp]
       mov edx,ecx
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 462
	   mov  DWORD PTR SS : [ecx + 0xA0] , 351
	   mov  DWORD PTR SS : [ecx + 0x98] , 5
	   mov  DWORD PTR SS : [ecx + 0xA4] , 482
	   push 0x00000000
	   push 0x0089E914
	   mov eax,[ebp+0x18]
	   add eax,0x14
	   push eax
	   mov eax,[ebp+0x14]
	   add  eax, 0x4A
	   push eax
	   mov ecx, edx
	   mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
	   call eax
	   pop eax
	   push 0x1732CC8
	   mov ecx, eax
	   mov eax, 0x7B9850
	   call eax //Draw1
	   mov ecx,DWORD PTR SS : [0x01733AC4]
	   push 0x004B828C
	   ret
	}
};
__declspec(naked)void ChinhSuaSizeTen()  //004B8236
{
__asm
	{
	   add eax,0xA5
	   push edx
	   push eax
       push ecx
	   push 0x004B823C
       ret
	}
};
__declspec(naked)void ChinhPozPhanNo()  //004B85B0
{
__asm
	{
	   mov edx,[ecx]
       add eax,0x85
	   push 0x004B85B5
       ret
	}
};
__declspec(naked)void ChinhPozKhi()  //004B8618
{
__asm
	{
	   mov edx,[ecx]
       add eax,0x85
	   push 0x004B861D
       ret
	}
};
__declspec(naked)void HienThiAmDuongThanHon()  //004B8554
{
__asm
	{
	   //
	   mov ecx,DWORD PTR SS:[0x01733AC4]
       mov edx,[ecx]
	   push 0xFFFF2222
	   call dword ptr [edx+0xC]
       push 4413
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   push 0x3F800000
	   mov eax, [ebp+0x18]
	   add eax,0x115
	   push eax
       mov eax, [ebp+0x14]
	   add eax,0x83
	   push eax
       mov ecx,DWORD PTR SS : [0x01733AC4]
	   mov edx,[ecx]
       push ecx
	   call dword ptr [edx+0x28]
	   add esp,0x14
	   mov eax,DWORD PTR SS:[0x010D94A8]
	   mov ecx,[eax+0x0002DC20]
	   test ecx,ecx
	   mov ecx,DWORD PTR SS:[0x01733AC4]
	   jl MauKhac
	   mov edx,[ecx]
	   push 0xFFFC832A
	   call dword ptr [edx+0xC]
       jmp MauKhacContinue
	   MauKhac:
       mov edx,[ecx]
	   push 0xFFAA3232
	   call dword ptr [edx+0xC]
       jmp MauKhacContinue
	   MauKhacContinue:
	   mov edx,[0x1107258+0x2DC20]
       push edx
	   push 0x00893D50
	   push 0x3F800000
	   mov eax, [ebp+0x18]
	   add eax,0x115
	   push eax
       mov eax, [ebp+0x14]
	   add eax,0xB4
	   push eax
       mov ecx,DWORD PTR SS : [0x01733AC4]
	   mov edx,[ecx]
       push ecx
	   call dword ptr [edx+0x28]
	   add esp,0x18

	   //
       mov ecx,DWORD PTR SS:[0x01733AC4]
       mov edx,[ecx]
	   push 0xFFFF2222
	   call dword ptr [edx+0xC]
	   push 4414
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   push 0x3F800000
	   mov eax, [ebp+0x18]
	   add eax,0x121
	   push eax
       mov eax, [ebp+0x14]
	   add eax,0x83
	   push eax
	   mov ecx,DWORD PTR SS : [0x01733AC4]
	   mov edx,[ecx]
	   push ecx
	   call dword ptr [edx+0x28]
	   add esp,0x14
       mov eax,DWORD PTR SS:[0x010D94A8]
	   mov ecx,[eax+0x0002DC24]
	   test ecx,ecx
	   mov ecx,DWORD PTR SS:[0x01733AC4]
	   jl MauKhac2
	   mov edx,[ecx]
	   push 0xFFFC832A
	   call dword ptr [edx+0xC]
	   jmp MauKhacContinue2
	   MauKhac2:
       mov edx,[ecx]
	   push 0xFFAA3232
	   call dword ptr [edx+0xC]
	   MauKhacContinue2:
	   mov edx,[0x1107258+0x2DC24]
       push edx
	   push 0x00893D50
	   push 0x3F800000
	   mov eax, [ebp+0x18]
	   add eax,0x121
	   push eax
       mov eax, [ebp+0x14]
	   add eax,0xB4
	   push eax
       mov ecx,DWORD PTR SS : [0x01733AC4]
	   mov edx,[ecx]
       push ecx
	   call dword ptr [edx+0x28]
	   add esp,0x18
	   //
       mov ecx,DWORD PTR SS:[0x01733AC4]
       mov edx,[ecx]
	   push 0xFFFF2222
	   call dword ptr [edx+0xC]
	   push 4415
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   push 0x3F800000
	   mov eax, [ebp+0x18]
	   add eax,0x130
	   push eax
       mov eax, [ebp+0x14]
	   add eax,0x83
	   push eax
	   mov ecx,DWORD PTR SS : [0x01733AC4]
	   mov edx,[ecx]
	   push ecx
	   call dword ptr [edx+0x28]
	   add esp,0x14
       mov eax,DWORD PTR SS:[0x010D94A8]
	   mov ecx,[eax+0x0002DC28]
	   test ecx,ecx
	   mov ecx,DWORD PTR SS:[0x01733AC4]
	   jl MauKhac3
	   mov edx,[ecx]
	   push 0xFFFC832A
	   call dword ptr [edx+0xC]
	   jmp MauKhacContinue3
	   MauKhac3:
       mov edx,[ecx]
	   push 0xFFAA3232
	   call dword ptr [edx+0xC]
	   MauKhacContinue3:
	   mov edx,[0x1107258+0x2DC28]
       push edx
	   push 0x00893D50
	   push 0x3F800000
	   mov eax, [ebp+0x18]
	   add eax,0x130
	   push eax
       mov eax, [ebp+0x14]
	   add eax,0xB4
	   push eax
       mov ecx,DWORD PTR SS : [0x01733AC4]
	   mov edx,[ecx]
       push ecx
	   call dword ptr [edx+0x28]
	   add esp,0x18
	   //
       mov ecx,DWORD PTR SS:[0x01733AC4]
       mov edx,[ecx]
	   push 0xFFFF2222
	   call dword ptr [edx+0xC]
	   push 4416
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   push 0x3F800000
	   mov eax, [ebp+0x18]
	   add eax,0x13E
	   push eax
       mov eax, [ebp+0x14]
	   add eax,0x83
	   push eax
	   mov ecx,DWORD PTR SS : [0x01733AC4]
	   mov edx,[ecx]
	   push ecx
	   call dword ptr [edx+0x28]
	   add esp,0x14
       mov eax,DWORD PTR SS:[0x010D94A8]
	   mov ecx,[eax+0x0002DC2C]
	   test ecx,ecx
	   mov ecx,DWORD PTR SS:[0x01733AC4]
	   jl MauKhac4
	   mov edx,[ecx]
	   push 0xFFFC832A
	   call dword ptr [edx+0xC]
	   jmp MauKhacContinue4
	   MauKhac4:
       mov edx,[ecx]
	   push 0xFFAA3232
	   call dword ptr [edx+0xC]
	   MauKhacContinue4:
	   mov edx,[0x1107258+0x2DC2C]
       push edx
	   push 0x00893D50
	   push 0x3F800000
	   mov eax, [ebp+0x18]
	   add eax,0x13E
	   push eax
       mov eax, [ebp+0x14]
	   add eax,0xB4
	   push eax
       mov ecx,DWORD PTR SS : [0x01733AC4]
	   mov edx,[ecx]
       push ecx
	   call dword ptr [edx+0x28]
	   add esp,0x18
	   //
       mov ecx,DWORD PTR SS:[0x01733AC4]
       mov edx,[ecx]
	   push 0xFFFF2222
	   call dword ptr [edx+0xC]
	   push 4417
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   push 0x3F800000
	   mov eax, [ebp+0x18]
	   add eax,0x14C
	   push eax
       mov eax, [ebp+0x14]
	   add eax,0x83
	   push eax
	   mov ecx,DWORD PTR SS : [0x01733AC4]
	   mov edx,[ecx]
	   push ecx
	   call dword ptr [edx+0x28]
	   add esp,0x14
	   mov eax,DWORD PTR SS:[0x010D94A8]
       xor ecx,ecx
	   mov cx,[eax+0x0002829E]
	   push ecx
	   push 0x0089610C
	   push 0x3F800000
	   mov eax, [ebp+0x18]
	   add eax,0x14C
	   push eax
       mov eax, [ebp+0x14]
	   add eax,0xB4
	   push eax
       mov ecx,DWORD PTR SS : [0x01733AC4]
	   mov edx,[ecx]
       push ecx
	   call dword ptr [edx+0x28]
	   add esp,0x18
	   //
	   mov ecx, 0x10
	   push 0x004B8559
       ret
	}
};
__declspec(naked)void ChinhPhanNoPoz()  //004B659A
{
__asm
	{
	   push 355
	   push 165
	   push 0x004B65A1
       ret
	}
};
__declspec(naked)void ChinhPhanNoPoz2()  //004B6605
{
__asm
	{
	   push 355
	   push 340
	   push 0x004B660F
       ret
	}
};
__declspec(naked)void ChinhPhanNoPoz3()  //004B67EF
{
__asm
	{
	   push 372
	   push 165
	   push 0x004B67F6
       ret
	}
};
__declspec(naked)void ChinhPhanNoPoz4()  //004B685A
{
__asm
	{
	   push 372
	   push 340
	   push 0x004B6864
       ret
	}
};
__declspec(naked)void ChinhPhanNoPoz5()  //004B6444
{
__asm
	{
	   mov DWORD PTR SS:[esp+0x30],379
	   mov DWORD PTR SS:[esp+0x28],165
	   push 0x004B6454
       ret
	}
};
__declspec(naked)void ChinhPhanNoPoz6()  //004B66D5
{
__asm
	{
	   mov DWORD PTR SS:[esp+0x30],396
	   mov DWORD PTR SS:[esp+0x28],165
	   push 0x004B66E5
       ret
	}
};
__declspec(naked)void ChinhPhanNoPoz7()  //004B63FD
{
__asm
	{
	   mov DWORD PTR SS:[esp+0x2C],356
	   //mov DWORD PTR SS:[esp+0x30],100
	   push 0x004B640D
       ret
	}
};
__declspec(naked)void ChinhPhanNoPoz8()  //004B6662
{
__asm
	{
	   mov DWORD PTR SS:[esp+0x30],374
	   //mov DWORD PTR SS:[esp+0x34],100
	   push 0x004B6672
       ret
	}
};
__declspec(naked)void ChinhPhanNoPoz9()  //004B64F3
{
__asm
	{
	   mov DWORD PTR SS:[eax+0x34],0x3FB33333
	   push 0x004B64FA
       ret
	}
};
__declspec(naked)void ChinhPhanNoPoz10()  //004B6748
{
__asm
	{
	   mov DWORD PTR SS:[eax+0x34],0x3FB33333
	   push 0x004B674F
       ret
	}
};
__declspec(naked)void ChinhSuaViTriDiemPhanNo()  //004B802C
{
__asm
	{
	   mov eax,[ebp+0x4F0+0x14]
	   mov dword ptr ss:[eax+0x1C],170
       mov eax,[ebp+0x4F0+0x18]
	   mov dword ptr ss:[eax+0x1C],170
       mov eax,[ebp+0x0000016C]
	   push 0x004B8032
       ret
	}
};
__declspec(naked)void ChinhBorderNickPoz()  //004B6099
{
__asm
	{
	   push 46
	   push 4
	   push 0x004B60A0
       ret
	}
};
__declspec(naked)void ChinhBorderNickPoz2()  //004B6A71
{
__asm
	{
	   mov dword ptr ss:[esp+0x4C],44
	   push 0x004B6A79
       ret
	}
};
__declspec(naked)void HienThiTocDoDiChuyen()  //00660AD9
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
       push eax
	   xor edx,edx
	   mov dx,[esi+0x9EA8]
	   xor dx,0xCE43
	   push edx
	   push 4107
	   push 0x19
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov eax,[esp+0x8]
	   lea edx,[eax+0x190]
	   push edx
       call DWORD PTR SS:[0x0085C564]
	   add esp,0xC
       mov ecx,DWORD PTR SS:[0x01733AC4]
	   push 0xFF33FF66
	   mov edx,[ecx]
	   call dword ptr [edx+0xC]
	   mov eax,[esp]
	   lea eax,[eax+0x190]
	   push eax
	   push 0x2
	   push 0x3F800000
	   //mov eax,ebp
	   //sub eax,0x18
	   mov eax,[esi+0x9EBC]
	   test eax,eax
	   jnz VoDienNhan
	   mov eax, esi
	   mov eax, [eax + 0x470]
	   mov edx, DWORD PTR SS : [0x16A2178]
	   lea ecx, [eax + eax * 2]
	   shl ecx, 4
	   sub ecx, eax
	   mov eax, [edx + ecx * 0x4]
	   cmp eax,7
	   jl KhongCoDanhHieu
	   mov ecx,1
	   KhongCoDanhHieu:
	   mov eax,[esi+0x836C]
	   test eax,eax
	   jz KhongCoBangHoi
       add ecx,1
       KhongCoBangHoi:
	   imul ecx,0x10
	   mov eax,ebp
	   sub eax,ecx
	   sub eax,0x18
       push eax
	   mov eax,ebx
       add eax,0x4
	   push eax
	   mov eax,DWORD PTR SS:[0x01733AC4]
	   push eax
	   mov edx,[eax]
	   call dword ptr [edx+0x30]
	   mov ecx,DWORD PTR SS:[0x01733AC4]
	   add esp,0x1C
	   mov edx,[ecx]
	   call dword ptr [edx+0x38]
       mov edx,[esi+0x000082BC]
	   push 0x00660ADF
	   ret

	   VoDienNhan:
       mov eax,ebp
       sub eax,0x18
       push eax
	   mov eax,ebx
       add eax,0x4
	   push eax
	   mov eax,DWORD PTR SS:[0x01733AC4]
	   push eax
	   mov edx,[eax]
	   call dword ptr [edx+0x30]
	   mov ecx,DWORD PTR SS:[0x01733AC4]
	   add esp,0x1C
	   mov edx,[ecx]
	   call dword ptr [edx+0x38]
	   mov eax,[0x1107258+0x47C]
	   cmp eax,18
       jz EventChienTruong
       mov edx,[esi+0x000082BC]
	   push 0x00660ADF
	   ret

	   EventChienTruong:
	   mov eax,[esi+0x8326]
	   cmp eax,14029
	   jz PheXanh
	   cmp eax,14025
	   jz PheXanh1
	   cmp eax,14571
	   jz PheXanh2
	   cmp eax,14623
	   jz PheXanh3
	   cmp eax,14030
	   jz PheXanh
	   cmp eax,14026
	   jz PheXanh1
	   cmp eax,14572
	   jz PheXanh2
       cmp eax,14624
	   jz PheXanh3
	   cmp eax,13955
	   jnz PheDo1
	   push 20
	   jmp ProcessShowTextPheDo

	   PheDo1:
	   cmp eax,13951
	   jnz PheDo2
	   push 21
	   jmp ProcessShowTextPheDo

	   PheDo2:
	   cmp eax,14573
	   jnz PheDo3
	   push 22
	   jmp ProcessShowTextPheDo

	   PheDo3:
	   cmp eax,14625
	   jnz PheDo4
	   push 23
	   jmp ProcessShowTextPheDo

	   PheDo4:
	   cmp eax,13956
	   jnz PheDo5
	   push 20
	   jmp ProcessShowTextPheDo

	   PheDo5:
	   cmp eax,13952
	   jnz PheDo6
	   push 21
	   jmp ProcessShowTextPheDo

	   PheDo6:
	   cmp eax,14574
	   jnz PheDo7
	   push 22
	   jmp ProcessShowTextPheDo

	   PheDo7:
	   push 23

       ProcessShowTextPheDo:
	   mov ecx,DWORD PTR SS:[0x01733AC4]
       push 0xFF07FFFF
	   mov edx,[ecx]
	   call dword ptr [edx+0xC]
	   push 82
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   push 0x0
	   push 0x3F800000
	   mov eax,ebp
       sub eax,0x18
       push eax
	   mov eax,ebx
	   add eax,0x24
	   push eax
	   mov eax,DWORD PTR SS:[0x01733AC4]
	   push eax
	   mov edx,[eax]
	   call dword ptr [edx+0x30]
	   mov ecx,DWORD PTR SS:[0x01733AC4]
	   add esp,0x18
	   mov edx,[ecx]
	   call dword ptr [edx+0x38]
       mov edx,[esi+0x000082BC]
	   push 0x00660ADF
	   ret


	   PheXanh:
	   push 24
       jmp ProcessShowTextPheXanh
	   PheXanh1:
	   push 25
	   jmp ProcessShowTextPheXanh
	   PheXanh2:
	   push 26
	   jmp ProcessShowTextPheXanh
	   PheXanh3:
	   push 27
       jmp ProcessShowTextPheXanh
	   ProcessShowTextPheXanh:
       mov ecx,DWORD PTR SS:[0x01733AC4]
	   push 0xFFFAFF01
	   mov edx,[ecx]
	   call dword ptr [edx+0xC]
	   push 82
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   push 0x0
	   push 0x3F800000
	   mov eax,ebp
       sub eax,0x18
       push eax
	   mov eax,ebx
	   add eax,0x24
	   push eax
	   mov eax,DWORD PTR SS:[0x01733AC4]
	   push eax
	   mov edx,[eax]
	   call dword ptr [edx+0x30]
	   mov ecx,DWORD PTR SS:[0x01733AC4]
	   add esp,0x18
	   mov edx,[ecx]
	   call dword ptr [edx+0x38]
       mov edx,[esi+0x000082BC]
	   push 0x00660ADF
	   ret

	}
};
__declspec(naked)void GetPackageNhiemVuAnCu()  //006AB57E
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
       nop
	   xor edx,edx
	   mov dl,[ebp+0x3]
	   cmp dl,5
	   jz ThongTinNhiemVu
       cmp dl,40
	   jz MaxQInDay
	   cmp dl,41
	   jz HaveQCur
       cmp dl,51
	   jz UpdateItemInventoryUser
	   cmp dl,42
	   jz NotFoundQuest
       cmp dl,43
	   jz KhongDuLevelYeuCau
	   cmp dl,10
	   jz CompleteQuest
	   cmp dl,11
	   jz CantFindItem
       cmp dl,12
	   jz Notenough
	   cmp dl,13
	   jz KhongDungVatPham
	   cmp dl,20
	   jz NhanQuaTangQuestItem
	   cmp dl,21
	   jz NhanQuaTangQuestEXP
	   cmp dl,22
	   jz NhanQuaTangQuestMil
	   cmp dl,23
	   jz NhanQuaTangQuestFail
	   cmp dl,26
	   jz VPKhongNamTrongHanhTrang
	   cmp dl,27
	   jz VPKhongDunGiaTri
       cmp dl,28
	   jz VPKhongDung
	   cmp dl,29
	   jz VPKhongDu
       cmp dl,30
	   jz GietBossHoanThanh
       cmp dl,80
	   jz ThongBaoLienDau
       cmp dl,60
	   jz NhanIDUserAnother
	   cmp dl,120
	   jz ShowEffectAnotherTypeAttack
	   xor eax,eax
	   mov al,[ebp+0x3]
	   push 0x006AB583
	   ret

	   ShowEffectAnotherTypeAttack:
	   mov ebx,DWORD PTR SS:[0x1107258+0x8C14]
	   test ebx,ebx
	   jz NotFoundUserGetEffect
	   mov ecx,[ebx+0x8924]
       test ecx,ecx
       jz NotFoundUserGetEffect
	   push 0xBF800000
	   push 0x0
	   lea ecx,[ebx+0x8500]
	   push 0x0
	   push ecx
	   xor ecx,ecx
	   mov cx,[ebp+0x4]
	   push ecx
	   mov ecx,[ebx+0x8924]
	   push 0x01571B88
	   mov eax,0x007817E0
	   call eax
	   push 0x006B21F7
	   ret

	   NotFoundUserGetEffect:
       push 0x006B21F7
	   ret

	   KhongDuLevelYeuCau:
       push 0xFFFAE6AA
	   push 0x1
	   push 0xC
	   push 40
	   push 74
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x0155EE60
	   mov eax,0x006A9800
	   call eax
	   push 0x006B21F7
	   ret

	   VPKhongNamTrongHanhTrang:
       mov byte ptr [eax+0x20],0
       push 0xFFFAE6AA
	   push 0x1
	   push 0xC
	   push 40
	   push 74
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x0155EE60
	   mov eax,0x006A9800
	   call eax
       push 0x006B21F7
	   ret

	   VPKhongDunGiaTri:
       mov byte ptr [eax+0x20],0
       push 0xFFFAE6AA
	   push 0x1
	   push 0xC
	   push 41
	   push 74
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x0155EE60
	   mov eax,0x006A9800
	   call eax
       push 0x006B21F7
	   ret

	   VPKhongDung:
       mov byte ptr [eax+0x20],0
       push 0xFFFAE6AA
	   push 0x1
	   push 0xC
	   push 42
	   push 74
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x0155EE60
	   mov eax,0x006A9800
	   call eax
       push 0x006B21F7
	   ret

	   VPKhongDu:
       mov byte ptr [eax+0x20],0
       push 0xFFFAE6AA
	   push 0x1
	   push 0xC
	   push 43
	   push 74
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x0155EE60
	   mov eax,0x006A9800
	   call eax
       push 0x006B21F7
	   ret

	   UpdateItemInventoryUser:
       mov byte ptr [eax+0x20],0
       xor edx,edx
       mov dl,[ebp+0x5]
	   test edx,edx
	   jz KhongCoSlotUpdate
       xor edx,edx
	   mov dl,[ebp+0x4]
	   imul edx,0x90
	   lea ecx,[0x1107258+0x22DC8+edx]
       xor edx,edx
	   mov dl,[ebp+0x5]
	   xor dl,0xC5
	   mov [ecx+0x19],dl
       push 0x006B21F7
	   ret

	   KhongCoSlotUpdate:
       xor edx,edx
	   mov dl,[ebp+0x4]
       imul edx,0x90
	   lea ecx,[0x1107258+0x22DC8+edx]
	   mov edx,[0x1107258+0x22DC8+edx]
	   call dword ptr [edx+0x4]
       push 0x006B21F7
	   ret

	   NhanQuaTangQuestItem:
       mov byte ptr [eax+0x20],0
       xor edx,edx
	   mov dx,[ebp+0x1D]
       mov [eax+0x2C],dx
       xor edx,edx
	   mov dl,[ebp+0x1F]
	   mov [eax+0x2B],dl
	   xor edx,edx
       mov dl,[ebp+0x20]
	   mov [eax+0x2A],dl
       xor edx,edx
       mov dl,[ebp+0x4]
	   mov [eax+0x28],dl
       push 0xFFFAE6AA
	   push 0x1
	   push 0xC
	   push 35
	   push 74
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x0155EE60
	   mov eax,0x006A9800
	   call eax
       push 0x006B21F7
	   ret

	   NhanQuaTangQuestEXP:
       mov byte ptr [eax+0x20],0
       xor edx,edx
	   mov dx,[ebp+0x1D]
       mov [eax+0x2C],dx
       xor edx,edx
	   mov dl,[ebp+0x1F]
	   mov [eax+0x2B],dl
	   xor edx,edx
       mov dl,[ebp+0x20]
	   mov [eax+0x2A],dl
       xor edx,edx
       mov dl,[ebp+0x4]
	   mov [eax+0x28],dl
       push 0xFFFAE6AA
	   push 0x1
	   push 0xC
	   push 36
	   push 74
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x0155EE60
	   mov eax,0x006A9800
	   call eax
       push 0x006B21F7
	   ret

	   NhanQuaTangQuestMil:
       mov byte ptr [eax+0x20],0
       xor edx,edx
	   mov dx,[ebp+0x1D]
       mov [eax+0x2C],dx
       xor edx,edx
	   mov dl,[ebp+0x1F]
	   mov [eax+0x2B],dl
	   xor edx,edx
       mov dl,[ebp+0x20]
	   mov [eax+0x2A],dl
	   mov edx,[ebp+0x21]
	   mov [0x1107258+0x28228],edx
       xor edx,edx
       mov dl,[ebp+0x4]
	   mov [eax+0x28],dl
	   //

	   //
       push 0xFFFAE6AA
	   push 0x1
	   push 0xC
	   push 37
	   push 74
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x0155EE60
	   mov eax,0x006A9800
	   call eax
       push 0x006B21F7
	   ret

	   NhanQuaTangQuestFail:
       mov byte ptr [eax+0x20],0
       xor edx,edx
	   mov dx,[ebp+0x1D]
       mov [eax+0x2C],dx
       xor edx,edx
	   mov dl,[ebp+0x1F]
	   mov [eax+0x2B],dl
	   xor edx,edx
       mov dl,[ebp+0x20]
	   mov [eax+0x2A],dl
	   mov edx,[ebp+0x21]
	   mov [eax+0x54],edx
       xor edx,edx
       mov dl,[ebp+0x4]
	   mov [eax+0x28],dl
       push 0xFFFAE6AA
	   push 0x1
	   push 0xC
	   push 38
	   push 74
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x0155EE60
	   mov eax,0x006A9800
	   call eax
       push 0x006B21F7
	   ret

	   MaxQInDay:
       push 0xFFFAE6AA
	   push 0x1
	   push 0xC
	   push 10
	   push 74
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x0155EE60
	   mov eax,0x006A9800
	   call eax
	   push 0x006B21F7
	   ret

	   HaveQCur:
	   push 0xFFFAE6AA
	   push 0x1
	   push 0xC
	   push 11
	   push 74
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x0155EE60
	   mov eax,0x006A9800
	   call eax
	   push 0x006B21F7
	   ret

	   NotFoundQuest:
       push 0xFFFAE6AA
	   push 0x1
	   push 0xC
	   push 12
	   push 74
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x0155EE60
	   mov eax,0x006A9800
	   call eax
	   push 0x006B21F7
	   ret

	   NhanIDUserAnother:
	   xor edx,edx
	   mov dx,[ebp+0x5]
	   mov [0x1107258+0x2D954],dx
       push 0x006B21F7
	   ret



	   ThongBaoLienDau:
       xor edx,edx
	   mov dl,[ebp+0x4]
       add edx,14
       push 0xFFFAE6AA
	   push 0x1
	   push 0xC
	   push edx
	   push 76
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x0155EE60
	   mov eax,0x006A9800
	   call eax
       push 0x006B21F7
	   ret

	   GietBossHoanThanh:
       mov byte ptr [eax+0xF],2
       push 0xFFFAE6AA
	   push 0x1
	   push 0xC
	   push 60
	   push 74
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x0155EE60
	   mov eax,0x006A9800
	   call eax
       push 0x006B21F7
	   ret

	   KhongDungVatPham:
       push 0xFFFAE6AA
	   push 0x1
	   push 0xC
	   push 63
	   push 74
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x0155EE60
	   mov eax,0x006A9800
	   call eax
       push 0x006B21F7
	   ret

	   NhanQuaTangQuest:
       xor edx,edx
	   mov dl,[ebp+0x8]
	   mov [eax+0x20],dl
       mov dl,[ebp+0x9]
	   mov [eax+0x21],dl
	   mov dx,[ebp+0xA]
	   mov [eax+0x22],dx
       mov edx,[ebp+0x4]
	   mov [eax+0x24],edx
	   mov edx,[ebp+0xC]
	   xor ecx,ecx
	   mov cl,[ebp+0x8]
	   cmp cl,13
	   jnz ContinueGetInfo
	   mov ecx,[0x1107258+0x28228]
       add ecx,edx
	   mov [0x1107258+0x28228],ecx
	   ContinueGetInfo:
       mov [eax+0x28],edx
	   xor edx,edx
	   mov dl,[ebp+0x10]
	   mov [eax+0xF],dl
       xor edx,edx
	   mov dx,[ebp+0x11]
	   mov [eax+0xC],dx
       xor edx,edx
	   mov dl,[ebp+0x13]
	   mov [eax+0xE],dl
	   mov dword ptr [eax+0x8],0
	   mov dword ptr [eax+0x14],0
	   mov dword ptr [eax+0x18],0
	   mov dword ptr [eax+0x1C],0
	   mov dword ptr [eax+0x10],0
       push 0x006B21F7
	   ret

	   CompleteQuest:
	   //
       mov byte ptr [eax+0xF],2
	   xor edx,edx
	   mov dl,[ebp+0x4]
	   test edx,edx
	   jz KhongCoSlot
	   imul edx,0x90
	   lea ecx,[0x1107258+0x22DC8+edx]
       xor edx,edx
	   mov dl,[ebp+0x5]
	   test edx,edx
       jz XoaSlotItem
	   xor dl,0xC5
	   mov [ecx+0x19],dl
	   KhongCoSlot:
       jmp ContineCompleteQuest
	   XoaSlotItem:
	   lea ecx,[0x1107258+0x22DC8+edx]
	   mov edx,[0x1107258+0x22DC8+edx]
	   call dword ptr [edx+0x4]
       xor edx,edx
	   mov dl,[ebp+0x4]
       imul edx,0x90
	   mov word ptr [0x1107258+0x22DC8+edx+0x14],0xCE43

	   //

	   ContineCompleteQuest:

       push 0xFFFAE6AA
	   push 0x1
	   push 0xC
	   push 60
	   push 74
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x0155EE60
	   mov eax,0x006A9800
	   call eax
       push 0x006B21F7
	   ret

	   CantFindItem:
       push 0xFFFAE6AA
	   push 0x1
	   push 0xC
	   push 61
	   push 74
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x0155EE60
	   mov eax,0x006A9800
	   call eax
       push 0x006B21F7
	   ret

	   Notenough:
       push 0xFFFAE6AA
	   push 0x1
	   push 0xC
	   push 62
	   push 74
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x0155EE60
	   mov eax,0x006A9800
	   call eax
       push 0x006B21F7
	   ret


	   ThongTinNhiemVu:
	   xor edx,edx
	   mov dl,[ebp+0x4]
	   cmp dl,1
	   jz NVDrop
	   cmp dl,2
	   jz NVRQVP
	   cmp dl,3
	   jz NVPK
	   cmp dl,4
	   jz NVBoss
	   cmp dl,5
	   jz NVEXP
	   cmp dl,6
	   jz NVAcDanh
	   cmp dl,7
	   jz NVQuai
       push 0x006B21F7
	   ret

	   NVDrop:
       xor edx,edx
	   mov edx,[ebp+0x5]
	   mov [eax+0x30],dl
       mov edx,[ebp+0x9]
	   mov [eax+0x31],dl
       mov edx,[ebp+0xD]
	   mov [eax+0x50],dl
       mov edx,[ebp+0x11]
	   mov [eax+0x51],dx
	   mov edx,[ebp+0x15]
	   mov [eax+0x33],dl
	   jmp CapNhatThongTinUserQ

	   NVRQVP:
       xor edx,edx
	   mov edx,[ebp+0x5]
	   mov [eax+0x34],dl
       mov edx,[ebp+0x9]
	   mov [eax+0x35],dl
	   mov edx,[ebp+0x11]
	   mov [eax+0x37],dx
	   jmp CapNhatThongTinUserQ

	   NVPK:
	   xor edx,edx
	   mov edx,[ebp+0x5]
	   mov [eax+0x3C],dl
       mov edx,[ebp+0x9]
	   mov [eax+0x3D],dx
       mov edx,[ebp+0x11]
	   mov [eax+0x3F],dl
	   jmp CapNhatThongTinUserQ

	   NVBoss:
       xor edx,edx
	   mov edx,[ebp+0x5]
	   mov [eax+0x40],dl
       mov edx,[ebp+0x9]
	   mov [eax+0x41],dx
       mov edx,[ebp+0x11]
	   mov [eax+0x43],dl
	   jmp CapNhatThongTinUserQ

	   NVEXP:
       mov edx,[ebp+0xD]
	   mov [eax+0x48],edx
	   jmp CapNhatThongTinUserQ

	   NVAcDanh:
       mov edx,[ebp+0xD]
	   mov [eax+0x4C],edx
	   jmp CapNhatThongTinUserQ

	   NVQuai:
       xor edx,edx
	   mov edx,[ebp+0x5]
	   mov [eax+0x44],dl
       mov edx,[ebp+0x9]
	   mov [eax+0x45],dx
       mov edx,[ebp+0x11]
	   mov [eax+0x47],dl
	   jmp CapNhatThongTinUserQ

	   CapNhatThongTinUserQ:
       xor edx,edx
	   mov dx,[ebp+0x1D]
       mov [eax+0x2C],dx
       xor edx,edx
	   mov dl,[ebp+0x1F]
	   mov [eax+0x2B],dl
	   xor edx,edx
       mov dl,[ebp+0x20]
	   mov [eax+0x2A],dl
	   mov edx,[ebp+0x21]
	   mov [eax+0x54],edx
       xor edx,edx
       mov dl,[ebp+0x4]
	   mov [eax+0x28],dl
       mov byte ptr [eax+0x20],0
       push 0x006B21F7
	   ret
	}
};
__declspec(naked)void DrawLienDau()  //0046775A
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  //
	  pushad
	  mov ecx,[esi+0x10]
	  test ecx,ecx
	  jz ChuaMoForm
      mov ecx,DWORD PTR SS:[0x01733AC4]
	  push 0xFFFFFFFF
	  mov edx,[ecx]
	  call dword ptr [edx+0xC]
	  mov eax,[esp+0x1C]
	  mov ecx,[eax+0x7A0]
	  test ecx,ecx
	  jnz DaCoThongTinHinhAnhNV
      add eax,0x7A0
      push eax
	  call AddOptionImage
	  DaCoThongTinHinhAnhNV:
      mov eax,[esp+0x1C]
	  xor edx,edx
	  mov dl,[eax]
	  cmp edx,1
	  jz CheckDanhSach
	  cmp edx,2
	  jz ShowShopLD
	  // Hien thi thong tin nhan vat
      lea edx,[0x1107258+0x10]
	  push edx
      push 1
	  push 76
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  push 0x2
	  push 0x3F800000
	  mov eax,DWORD PTR [0x01733AC4]
	  mov edi,[eax]
	  mov edx,0x17F
	  push edx
	  mov edx,315
	  push edx
	  push eax
	  mov ecx,DWORD PTR [0x01733AC4]
	  call dword ptr [edi+0x30]
	  add esp,0x1C
	  // Hien thi Diem
	  mov eax,[esp+0x1C]
      mov edx,[eax+0x8]
	  push edx
      push 2
	  push 76
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  push 0x2
	  push 0x3F800000
	  mov eax,DWORD PTR [0x01733AC4]
	  mov edi,[eax]
	  mov edx,0x19F
	  push edx
	  mov edx,319
	  push edx
	  push eax
	  mov ecx,DWORD PTR [0x01733AC4]
	  call dword ptr [edi+0x30]
	  add esp,0x1C
	  // Hien thi Thoi gian
	  mov eax,[esp+0x1C]
      xor edx,edx
      mov dl,[eax+0xF]
	  push edx
      xor edx,edx
	  mov dl,[eax+0xE]
	  push edx
      xor edx,edx
	  mov dl,[eax+0xD]
	  push edx
      xor edx,edx
      mov dl,[eax+0xC]
	  push edx
	  push 3
	  push 76
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  push 0x0
	  push 0x3F800000
	  mov eax,DWORD PTR [0x01733AC4]
	  mov edi,[eax]
	  mov edx,0x1C0
	  push edx
	  mov edx,317
	  push edx
	  push eax
	  mov ecx,DWORD PTR [0x01733AC4]
	  call dword ptr [edi+0x30]
	  add esp,0x28
	  jmp KhongHienThiDanhSach

	  //CheckDanhSach
      CheckDanhSach:
	  mov eax,[esp+0x1C]
	  lea ecx,[eax+0x1C]
      xor edx,edx
	  mov dl,[eax+3]
	  imul edx,320
      lea eax,[ecx+edx]
	  push eax
	  call LoopLoadTranChien
      push 0
	  push 1
	  mov eax,[esp+0x24]
	  add eax,0x7A0
	  mov edx,0x5D
	  push edx
	  mov edx,0x8D
	  push edx
      push eax
	  call GetImageClass
	  jmp ChuaMoForm

	  // Hien Thi Form
	  KhongHienThiDanhSach:
      push 0
      push 0
      mov eax,[esp+0x24]
	  add eax,0x7A0
	  mov edx,0x5D
	  push edx
	  mov edx,0x8D
	  push edx
      push eax
	  call GetImageClass
	  // Hien Thi lich thi dau
	  jmp ChuaMoForm


	  ShowShopLD:
      push 0
	  push 12
	  mov eax,[esp+0x24]
	  add eax,0x7A0
	  mov edx,0x5D
	  push edx
	  mov edx,0x8D
	  push edx
	  push eax
	  call GetImageClass
      mov eax,[esp+0x1C]
	  lea ecx,[eax+0x670]
	  push ecx
	  call LoopShopLienDau
      mov eax,[esp+0x1C]
      mov edx,[eax+0x8]
	  push edx
      push 99
	  push 75
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  push 0x2
	  push 0x3F800000
	  mov eax,DWORD PTR [0x01733AC4]
	  mov edi,[eax]
	  mov edx,104
	  push edx
	  mov edx,399
	  push edx
	  push eax
	  mov ecx,DWORD PTR [0x01733AC4]
	  call dword ptr [edi+0x30]
	  add esp,0x1C
	  mov eax,[esp+0x1C]
	  xor ecx,ecx
	  mov cl,[eax+0x670]
	  test cl,cl
	  jz EndShowSHop
      sub ecx,1
	  push ecx
	  push 10
      mov eax,[esp+0x24]
	  add eax,0x7A0
	  mov edx,144
	  push edx
	  mov edx,384
	  push edx
      push eax
	  call GetImageClass
	  mov eax,[esp+0x1C]
      xor ecx,ecx
      mov cl,[eax+0x670]
	  test cl,cl
	  jz EndShowSHop
      sub ecx,1
	  push ecx
	  push 11
      mov eax,[esp+0x24]
	  add eax,0x7A0
	  mov edx,199
	  push edx
	  mov edx,384
	  push edx
      push eax
	  call GetImageClass
      EndShowSHop:
      

	  ChuaMoForm:
	  popad
	  push 0x80FFFFFF
	  push 0x0046775F
	  ret

	  LoopShopLienDau:
      sub esp,0x4
	  xor ecx,ecx
	  mov [esp],ecx
      LoopbackloadShopLD:
	  mov ecx,[esp]
	  mov eax,[esp+0x8]
	  imul ecx,0x8
	  xor edx,edx
	  mov dx,[eax+ecx]
	  test edx,edx
      jz DaHetDuLieuLD
	  mov ecx,[esp]
	  push ecx
	  push 10
      mov eax,[esp+0x10]
	  add eax,304
	  mov ecx,[esp+0x8]
	  cmp ecx,4
	  ja ShowUp
	  mov ecx,[esp+0x8]
	  imul ecx,43
	  add ecx,165
	  mov edx,150
	  jmp ProcessHienThiItemAgain

	  ShowUp:
	  cmp ecx,9
	  ja ShowUp1
      mov ecx,[esp+0x8]
	  imul ecx,43
	  sub ecx,50
	  mov edx,195
	  jmp ProcessHienThiItemAgain

	  ShowUp1:
      cmp ecx,14
	  ja ShowUp2
      mov ecx,[esp+0x8]
	  imul ecx,43
	  sub ecx,265
	  mov edx,240
	  jmp ProcessHienThiItemAgain

	  ShowUp2:
      mov ecx,[esp+0x8]
	  imul ecx,43
	  sub ecx,480
	  mov edx,285

	  ProcessHienThiItemAgain:
	  push edx
	  push ecx
      push eax
	  call GetImageClass
	  mov ecx,[esp]
	  add ecx,1
	  mov [esp],ecx
	  cmp ecx,20
      jl LoopbackloadShopLD
	  add esp,0x4
	  ret 0x4

	  DaHetDuLieuLD:
      add esp,0x4
	  ret 0x4


	  LoopLoadTranChien:
	  sub esp,0x4
	  xor ecx,ecx
	  mov [esp],ecx
      Loopbackload:
	  mov ecx,[esp]
	  mov eax,[esp+0x8]
	  imul ecx,0x20
	  lea eax,[eax+ecx]
	  test eax,eax
      jz DaHetDuLieu
	  push eax
	  push 4
	  push 76
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  push 0x2
	  push 0x3F800000
	  mov eax,DWORD PTR [0x01733AC4]
	  mov edi,[eax]
      mov ecx,[esp+0x10]
      imul ecx,0x2B
	  mov edx,0x99
	  add edx,ecx
	  push edx
	  mov edx,152
	  push edx
	  push eax
	  mov ecx,DWORD PTR [0x01733AC4]
	  call dword ptr [edi+0x30]
	  add esp,0x1C
      //
      mov ecx,[esp]
	  mov eax,[esp+0x8]
	  imul ecx,0x20
	  lea eax,[eax+ecx+0x10]
	  test eax,eax
      jz DaHetDuLieu
	  push eax
	  push 4
	  push 76
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  push 0x2
	  push 0x3F800000
	  mov eax,DWORD PTR [0x01733AC4]
	  mov edi,[eax]
	  mov ecx,[esp+0x10]
      imul ecx,0x2B
	  mov edx,0x99
      add edx,ecx
	  push edx
	  mov edx,384
	  push edx
	  push eax
	  mov ecx,DWORD PTR [0x01733AC4]
	  call dword ptr [edi+0x30]
	  add esp,0x1C
	  mov ecx,[esp]
	  add ecx,1
	  mov [esp],ecx
	  cmp ecx,60
      jl Loopbackload
	  add esp,0x4
	  ret 0x4

	  DaHetDuLieu:
      add esp,0x4
	  ret 0x4

	  GetImageClass:
	  mov eax,[esp+0x10]
	  cmp eax,1
	  jz HienThiDanhSachThiDau
      cmp eax,2
	  jz HienThiLichThiDauImage
      cmp eax,10
	  jz HienThiShopLD
      cmp eax,11
	  jz HienThiMoTaVP
      cmp eax,12
	  jz HienThiFormSHop
	  push 10
	  push 76
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
	  mov  DWORD PTR SS : [ecx + 0x9C] , 0
	  mov  DWORD PTR SS : [ecx + 0xA0] , 405
	  mov  DWORD PTR SS : [ecx + 0x98] , 0
	  mov  DWORD PTR SS : [ecx + 0xA4] , 572
	  jmp ProcessShowNut

	  HienThiFormSHop:
      push 100
	  push 75
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
	  mov  DWORD PTR SS : [ecx + 0x9C] , 0
	  mov  DWORD PTR SS : [ecx + 0xA0] , 405
	  mov  DWORD PTR SS : [ecx + 0x98] , 0
	  mov  DWORD PTR SS : [ecx + 0xA4] , 572
	  jmp ProcessShowNut

	  HienThiMoTaVP:
	  mov ecx,[esp+0x14]
      add ecx,107
      push ecx
	  push 75
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
	  mov  DWORD PTR SS : [ecx + 0x9C] , 0
	  mov  DWORD PTR SS : [ecx + 0xA0] , 112
	  mov  DWORD PTR SS : [ecx + 0x98] , 0
	  mov  DWORD PTR SS : [ecx + 0xA4] , 152
	  jmp ProcessShowNut

	  HienThiLichThiDauImage:
      push 10
	  push 76
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
	  mov  DWORD PTR SS : [ecx + 0x9C] , 62
	  mov  DWORD PTR SS : [ecx + 0xA0] , 352
	  mov  DWORD PTR SS : [ecx + 0x98] , 0
	  mov  DWORD PTR SS : [ecx + 0xA4] , 450
	  jmp ProcessShowNut

      HienThiShopLD:
      push 102
	  push 75
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x14]
      push ebx
      xor edx,edx
	  cmp ecx,8
	  jae HienThiHang2
	  add edx,0
	  jmp ProcessHienThiShopLD

	  HienThiHang2:
	  cmp ecx,16
	  jae HienThiHang3
      sub ecx,8
	  add edx,1
	  jmp ProcessHienThiShopLD

	  HienThiHang3:
	  add edx,2
      sub ecx,16
	  ProcessHienThiShopLD:
	  imul ecx,32
      mov ebx,[esp+0x8]
	  mov  DWORD PTR SS : [ebx + 0x98] , ecx
	  add ecx,32
	  mov  DWORD PTR SS : [ebx + 0xA0] , ecx
	  imul edx,32
	  mov  DWORD PTR SS : [ebx + 0x9C] , edx
	  add edx,32
      mov  DWORD PTR SS : [ebx + 0xA4] , edx
	  mov  DWORD PTR SS : [ebx + 0x70] , eax
      pop ebx
	  jmp ProcessShowNut


      HienThiDanhSachThiDau:
      push 10
	  push 76
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
	  mov  DWORD PTR SS : [ecx + 0x9C] , 00
	  mov  DWORD PTR SS : [ecx + 0xA0] , 815
	  mov  DWORD PTR SS : [ecx + 0x98] , 402
	  mov  DWORD PTR SS : [ecx + 0xA4] , 572

	  ProcessShowNut:
	  push 0xFF7F0000
	  push 5188
	  push 25
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,[esp+0x14]
	  mov edx,[esp+0x10]
	  push ecx
	  push edx
	  mov ecx, [esp+0x14]
	  mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
	  call eax
	  mov ecx,[esp+0x4]
	  push 0x1732CC8
	  mov eax, 0x7B9850
	  call eax //Draw1
	  ret 0x14

      AddOptionImage:
	  sub esp,0x4
	  xor ecx,ecx
	  mov [esp],ecx
	  BackGetOptionImage:
	  mov ecx,[esp]
	  mov eax, 0x010CC088
	  mov edx,[eax+ecx]
	  mov eax,[esp+0x8]
	  mov [eax+ecx],edx
	  add ecx,4
	  mov [esp],ecx
	  cmp ecx,0xB8
	  jl BackGetOptionImage
	  add esp,0x4
	  ret 0x4
	}
};
__declspec(naked)void PozLienDau()  //00467781
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  pushad
	  mov ecx,DWORD PTR SS:[0x01733AD0]
	  mov eax,0x007D7FD0
	  call eax
	  xor ecx,ecx
	  mov cl,[eax+0xC]
	  test ecx,ecx
      jz KhongNhanNut
	  //
	  mov ecx,[esp+0x1C]
	  xor edx,edx
	  mov dl,[ecx+0x1]
	  test dl,dl
      jnz WaitFor1
	  //
      mov dl,[ecx]
	  cmp dl,0x1
	  jz PozPage2
      cmp dl,0x2
	  jz PozPage3
	  mov edx,[eax+0x10]
	  cmp edx,197
	  jl KiemTraChucNang2
	  cmp edx,314
	  ja KiemTraDoiPageQua
	  mov edx,[eax+0x18]
	  cmp edx,108
	  jl KiemTraChucNang2
	  cmp edx,131
	  ja KiemTraChucNang2
	  //
	  mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x1],1
	  mov byte ptr [eax],1
	  jmp WaitFor1

      KiemTraDoiPageQua:
	  mov edx,[eax+0x10]
	  cmp edx,325
	  jl KhongNhanNut
	  cmp edx,435
	  ja KhongNhanNut
	  mov edx,[eax+0x18]
	  cmp edx,108
	  jl KhongNhanNut
	  cmp edx,131
	  ja KiemTraChucNang2
	  //
	  mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x1],1
	  mov byte ptr [eax],2
	  mov ecx,[eax+0x671]
	  test ecx,ecx
      jnz WaitFor1
	  mov dword ptr [eax+0x4],0xD57C0004
	  add eax,0x4
	  push eax
	  mov ecx,0x155EE60
	  mov eax,0x006B2F60
	  call eax
	  jmp WaitFor1

	  //
	  KiemTraChucNang2:
	  mov edx,[eax+0x10]
	  cmp edx,361
	  jl KhongNhanNut
	  cmp edx,420
	  ja KhongNhanNut
	  mov edx,[eax+0x18]
	  cmp edx,493
	  jl KhongNhanNut
	  cmp edx,513
	  ja KhongNhanNut
	  mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x1],1
	  mov dword ptr [eax+0x4],0xD17C0004
	  add eax,0x4
	  push eax
	  mov ecx,0x155EE60
	  mov eax,0x006B2F60
	  call eax
	  jmp WaitFor1



	  KhongNhanNut:
	  popad
	  mov byte ptr [eax+0x1],0
      mov eax,[esi+0x0000016C]
	  push 0x00467787
	  ret

	  WaitFor1:
	  popad
      mov eax,[esi+0x0000016C]
	  push 0x00467787
	  ret

	  PozPage3:
      mov edx,[eax+0x10]
	  cmp edx,94
	  jl KhongNhanNut
	  cmp edx,120
	  ja KiemTrVPHang1Next
	  mov edx,[eax+0x18]
	  cmp edx,133
	  jl KhongNhanNut
	  cmp edx,160
	  ja KiemTrVPHang2
      mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x670],1
      mov byte ptr [eax+0x1],1
	  jmp WaitFor1

	  KiemTrVPHang1Next:
	  cmp edx,136
	  jl KhongNhanNut
	  cmp edx,163
	  ja KiemTrVPHang1Next1
	  mov edx,[eax+0x18]
	  cmp edx,133
	  jl KhongNhanNut
	  cmp edx,160
	  ja KiemTrVPHang2
      mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x670],2
      mov byte ptr [eax+0x1],1
	  jmp WaitFor1

	  KiemTrVPHang1Next1:
	  cmp edx,180
	  jl KhongNhanNut
	  cmp edx,206
	  ja KiemTrVPHang1Next2
	  mov edx,[eax+0x18]
	  cmp edx,133
	  jl KhongNhanNut
	  cmp edx,160
	  ja KiemTrVPHang2
      mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x670],3
      mov byte ptr [eax+0x1],1
	  jmp WaitFor1

	  KiemTrVPHang1Next2:
	  cmp edx,224
	  jl KhongNhanNut
	  cmp edx,249
	  ja KiemTrVPHang1Next3
	  mov edx,[eax+0x18]
	  cmp edx,133
	  jl KhongNhanNut
	  cmp edx,160
	  ja KiemTrVPHang2
      mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x670],4
      mov byte ptr [eax+0x1],1
	  jmp WaitFor1

	  KiemTrVPHang1Next3:
	  cmp edx,265
	  jl KhongNhanNut
	  cmp edx,292
	  ja KhongNhanNut
	  mov edx,[eax+0x18]
	  cmp edx,133
	  jl KhongNhanNut
	  cmp edx,160
	  ja KiemTrVPHang2
      mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x670],5
      mov byte ptr [eax+0x1],1
	  jmp WaitFor1


	  KiemTrVPHang2:
	  mov edx,[eax+0x10]
	  cmp edx,94
	  jl KhongNhanNut
	  cmp edx,120
	  ja KiemTrVPHang2Next
	  mov edx,[eax+0x18]
	  cmp edx,179
	  jl KhongNhanNut
	  cmp edx,205
	  ja KiemTrVPHang3
      mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x670],6
      mov byte ptr [eax+0x1],1
	  jmp WaitFor1

	  KiemTrVPHang2Next:
	  cmp edx,136
	  jl KhongNhanNut
	  cmp edx,163
	  ja KiemTrVPHang2Next1
	  mov edx,[eax+0x18]
	  cmp edx,179
	  jl KhongNhanNut
	  cmp edx,205
	  ja KiemTrVPHang3
      mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x670],7
      mov byte ptr [eax+0x1],1
	  jmp WaitFor1

	  KiemTrVPHang2Next1:
	  cmp edx,180
	  jl KhongNhanNut
	  cmp edx,206
	  ja KiemTrVPHang2Next2
	  mov edx,[eax+0x18]
	  cmp edx,179
	  jl KhongNhanNut
	  cmp edx,205
	  ja KiemTrVPHang3
      mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x670],8
      mov byte ptr [eax+0x1],1
	  jmp WaitFor1

	  KiemTrVPHang2Next2:
	  cmp edx,224
	  jl KhongNhanNut
	  cmp edx,249
	  ja KiemTrVPHang2Next3
	  mov edx,[eax+0x18]
	  cmp edx,179
	  jl KhongNhanNut
	  cmp edx,205
	  ja KiemTrVPHang3
      mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x670],9
      mov byte ptr [eax+0x1],1
	  jmp WaitFor1

	  KiemTrVPHang2Next3:
	  cmp edx,265
	  jl KhongNhanNut
	  cmp edx,292
	  ja KhongNhanNut
	  mov edx,[eax+0x18]
	  cmp edx,179
	  jl KhongNhanNut
	  cmp edx,205
	  ja KiemTrVPHang3
	  mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x670],10
      mov byte ptr [eax+0x1],1
	  jmp WaitFor1

	  KiemTrVPHang3:
	  mov edx,[eax+0x10]
	  cmp edx,94
	  jl KhongNhanNut
	  cmp edx,120
	  ja KiemTrVPHang3Next
	  mov edx,[eax+0x18]
	  cmp edx,224
	  jl KhongNhanNut
	  cmp edx,249
	  ja KiemTrVPHang4
      mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x670],11
      mov byte ptr [eax+0x1],1
	  jmp WaitFor1

	  KiemTrVPHang3Next:
	  cmp edx,136
	  jl KhongNhanNut
	  cmp edx,163
	  ja KiemTrVPHang3Next1
	  mov edx,[eax+0x18]
	  cmp edx,224
	  jl KhongNhanNut
	  cmp edx,249
	  ja KiemTrVPHang4
      mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x670],12
      mov byte ptr [eax+0x1],1
	  jmp WaitFor1

	  KiemTrVPHang3Next1:
	  cmp edx,180
	  jl KhongNhanNut
	  cmp edx,206
	  ja KiemTrVPHang3Next2
	  mov edx,[eax+0x18]
	  cmp edx,224
	  jl KhongNhanNut
	  cmp edx,249
	  ja KiemTrVPHang4
      mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x670],13
      mov byte ptr [eax+0x1],1
	  jmp WaitFor1

	  KiemTrVPHang3Next2:
	  cmp edx,224
	  jl KhongNhanNut
	  cmp edx,249
	  ja KiemTrVPHang3Next3
	  mov edx,[eax+0x18]
	  cmp edx,224
	  jl KhongNhanNut
	  cmp edx,249
	  ja KiemTrVPHang4
      mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x670],14
      mov byte ptr [eax+0x1],1
	  jmp WaitFor1

	  KiemTrVPHang3Next3:
	  cmp edx,265
	  jl KhongNhanNut
	  cmp edx,292
	  ja KhongNhanNut
	  mov edx,[eax+0x18]
	  cmp edx,224
	  jl KhongNhanNut
	  cmp edx,249
	  ja KiemTrVPHang4
	  mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x670],15
      mov byte ptr [eax+0x1],1
	  jmp WaitFor1

	  KiemTrVPHang4:
	  mov edx,[eax+0x10]
	  cmp edx,94
	  jl KhongNhanNut
	  cmp edx,120
	  ja KiemTrVPHang4Next
	  mov edx,[eax+0x18]
	  cmp edx,268
	  jl KhongNhanNut
	  cmp edx,293
	  ja KiemTraNutDoiPage
      mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x670],16
      mov byte ptr [eax+0x1],1
	  jmp WaitFor1

	  KiemTrVPHang4Next:
	  cmp edx,136
	  jl KhongNhanNut
	  cmp edx,163
	  ja KiemTrVPHang4Next1
	  mov edx,[eax+0x18]
	  cmp edx,268
	  jl KhongNhanNut
	  cmp edx,293
	  ja KiemTraNutDoiPage
      mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x670],17
      mov byte ptr [eax+0x1],1
	  jmp WaitFor1

	  KiemTrVPHang4Next1:
	  cmp edx,180
	  jl KhongNhanNut
	  cmp edx,206
	  ja KiemTrVPHang4Next2
	  mov edx,[eax+0x18]
	  cmp edx,268
	  jl KhongNhanNut
	  cmp edx,293
	  ja KiemTraNutDoiPage
      mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x670],18
      mov byte ptr [eax+0x1],1
	  jmp WaitFor1

	  KiemTrVPHang4Next2:
	  cmp edx,224
	  jl KhongNhanNut
	  cmp edx,249
	  ja KiemTrVPHang4Next3
	  mov edx,[eax+0x18]
	  cmp edx,268
	  jl KhongNhanNut
	  cmp edx,293
	  ja KiemTraNutDoiPage
      mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x670],19
      mov byte ptr [eax+0x1],1
	  jmp WaitFor1

	  KiemTrVPHang4Next3:
	  cmp edx,265
	  jl KhongNhanNut
	  cmp edx,292
	  ja KhongNhanNut
	  mov edx,[eax+0x18]
	  cmp edx,268
	  jl KhongNhanNut
	  cmp edx,293
	  ja KiemTraNutDoiPage
      mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x670],20
      mov byte ptr [eax+0x1],1
	  jmp WaitFor1

	  KiemTraNutDoiPage:
	  mov edx,[eax+0x10]
	  cmp edx,116
	  jl KhongNhanNut
	  cmp edx,168
	  ja KiemTraNutDSLD
	  mov edx,[eax+0x18]
	  cmp edx,313
	  jl KhongNhanNut
	  cmp edx,328
	  ja KhongNhanNut
      mov eax,[esp+0x1C]
	  mov byte ptr [eax],0
      mov byte ptr [eax+0x1],1
	  jmp WaitFor1

	  KiemTraNutDSLD:
	  cmp edx,180
	  jl KhongNhanNut
	  cmp edx,230
	  ja KiemTraNutDoiQua
	  mov edx,[eax+0x18]
	  cmp edx,313
	  jl KhongNhanNut
	  cmp edx,328
	  ja KhongNhanNut
      mov eax,[esp+0x1C]
	  mov byte ptr [eax],1
      mov byte ptr [eax+0x1],1
	  jmp WaitFor1

	  KiemTraNutDoiQua:
	  cmp edx,242
	  jl KhongNhanNut
	  cmp edx,292
	  ja KhongNhanNut
	  mov edx,[eax+0x18]
	  cmp edx,313
	  jl KhongNhanNut
	  cmp edx,328
	  ja KhongNhanNut
      mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x1],1
	  xor ecx,ecx
	  mov cl,[eax+0x670]
	  imul ecx,0x8
	  xor edx,edx
	  mov dx,[eax+0x671+ecx]
	  mov ecx,[eax+0x8]
	  cmp ecx,edx
	  jl WaitFor1
      xor ecx,ecx
	  mov cl,[eax+0x670]
	  sub esp,0x8
	  mov dword ptr [esp],0x0
	  mov dword ptr [esp+0x4],0x0
	  mov dword ptr [esp],0xD67C0005
      mov [esp+0x4],cl
	  xor ecx,ecx
      mov eax,esp
	  push eax
	  mov ecx,0x155EE60
	  mov eax,0x006B2F60
	  call eax
      add esp,0x8
	  jmp WaitFor1


	  PozPage2:
      mov edx,[eax+0x10]
	  cmp edx,197
	  jl KiemTraChucNang2Page2
	  cmp edx,314
	  ja PageDoiQuaFormDS
	  mov edx,[eax+0x18]
	  cmp edx,108
	  jl KiemTraChucNang2Page2
	  cmp edx,131
	  ja KiemTraChucNang2Page2
	  //
	  mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x1],1
	  mov byte ptr [eax],0
	  jmp WaitFor1
	  //
      PageDoiQuaFormDS:
      mov edx,[eax+0x10]
	  cmp edx,340
	  jl KiemTraChucNang2Page2
	  cmp edx,451
	  ja KiemTraChucNang2Page2
	  mov edx,[eax+0x18]
	  cmp edx,108
	  jl KiemTraChucNang2Page2
	  cmp edx,131
	  ja KiemTraChucNang2Page2
	  //
	  mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x1],1
	  mov byte ptr [eax],2
	  xor ecx,ecx
	  mov ecx,[eax+0x671]
	  test ecx,ecx
      jnz WaitFor1
	  mov dword ptr [eax+0x4],0xD57C0004
	  add eax,0x4
	  push eax
	  mov ecx,0x155EE60
	  mov eax,0x006B2F60
	  call eax
	  jmp WaitFor1
	  //

	  KiemTraChucNang2Page2:
	  mov edx,[eax+0x10]
	  cmp edx,86
	  jl KhongNhanNut
	  cmp edx,119
	  ja KiemTraChucNang3Page2
	  mov edx,[eax+0x18]
	  cmp edx,590
	  jl KhongNhanNut
	  cmp edx,609
	  ja KhongNhanNut
	  mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x1],1
	  mov byte ptr [eax+0x3],0
	  jmp WaitFor1

      KiemTraChucNang3Page2:
	  mov edx,[eax+0x10]
	  cmp edx,155
	  jl KhongNhanNut
	  cmp edx,188
	  ja KiemTraChucNang4Page2
	  mov edx,[eax+0x18]
	  cmp edx,590
	  jl KhongNhanNut
	  cmp edx,609
	  ja KhongNhanNut
	  mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x1],1
	  mov byte ptr [eax+0x3],1
	  jmp WaitFor1

      KiemTraChucNang4Page2:
	  mov edx,[eax+0x10]
	  cmp edx,226
	  jl KhongNhanNut
	  cmp edx,257
	  ja KiemTraChucNang5Page2
	  mov edx,[eax+0x18]
	  cmp edx,590
	  jl KhongNhanNut
	  cmp edx,609
	  ja KhongNhanNut
	  mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x1],1
	  mov byte ptr [eax+0x3],2
	  jmp WaitFor1

      KiemTraChucNang5Page2:
	  mov edx,[eax+0x10]
	  cmp edx,296
	  jl KhongNhanNut
	  cmp edx,327
	  ja KiemTraChucNang6Page2
	  mov edx,[eax+0x18]
	  cmp edx,590
	  jl KhongNhanNut
	  cmp edx,609
	  ja KhongNhanNut
	  mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x1],1
	  mov byte ptr [eax+0x3],3
	  jmp WaitFor1

      KiemTraChucNang6Page2:
	  mov edx,[eax+0x10]
	  cmp edx,366
	  jl KhongNhanNut
	  cmp edx,398
	  ja KiemTraChucNang7Page2
	  mov edx,[eax+0x18]
	  cmp edx,590
	  jl KhongNhanNut
	  cmp edx,609
	  ja KhongNhanNut
	  mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x1],1
	  mov byte ptr [eax+0x3],4
	  jmp WaitFor1

      KiemTraChucNang7Page2:
	  mov edx,[eax+0x10]
	  cmp edx,436
	  jl KhongNhanNut
	  cmp edx,468
	  ja KhongNhanNut
	  mov edx,[eax+0x18]
	  cmp edx,590
	  jl KhongNhanNut
	  cmp edx,609
	  ja KhongNhanNut
	  mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x1],1
	  mov byte ptr [eax+0x3],5
	  jmp WaitFor1

	}
};
__declspec(naked)void GetPackageLienDau()  //006AF978
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
	   push eax
	   //
	   mov al,[ebp+0x3]
	   cmp al,5
	   jz GetThongTinLienDau
       cmp al,6
	   jz GetSatThuongBoss
	   cmp al,7
	   jz SuccessGetQuaLD
       cmp al,8
	   jz FailGetQuaLD
       cmp al,9
	   jz GetListShopLD
	   pop eax
	   xor eax,eax
	   mov al,[ebp+0x3]
	   //
	   push 0x006AF97D
	   ret

	   GetListShopLD:
	   sub esp,0x4
	   xor ecx,ecx
	   mov [esp],ecx
	   BackLoopGet:
	   mov ecx,[esp]
	   imul ecx,2
	   mov eax,ebp
	   add eax,4
	   xor edx,edx
	   mov dx,[eax+ecx]
       mov ecx,[esp]
	   imul ecx,0x8
	   mov eax,[esp+0x4]
	   mov [eax+0x671+ecx],dx
	   mov ecx,[esp]
	   add ecx,1
	   mov [esp],ecx
	   cmp ecx,20
	   jl BackLoopGet
	   add esp,0x4
       pop eax
       push 0x006B21F7
	   ret

	   SuccessGetQuaLD:
       xor ecx,ecx
	   mov cx,[ebp+0x5]
	   mov eax,[esp]
	   mov [eax+0x8],ecx
       push 0xFFFAE6AA
	   push 0x1
	   push 0xC
	   push 92
	   push 75
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x0155EE60
	   mov eax,0x006A9800
	   call eax
       pop eax
       push 0x006B21F7
	   ret


	   FailGetQuaLD:
       xor ecx,ecx
	   mov cx,[ebp+0x5]
	   mov eax,[esp]
	   mov [eax+0x8],ecx
       push 0xFFFAE6AA
	   push 0x1
	   push 0xC
	   push 93
	   push 75
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x0155EE60
	   mov eax,0x006A9800
	   call eax
       pop eax
       push 0x006B21F7
	   ret


	   GetSatThuongBoss:
	   xor ecx,ecx
	   mov cl,[ebp+0x4]
	   cmp ecx,3
	   jz KhongDuDiemNhanQua
	   cmp ecx,2
	   jz TruDiemNhanQua
	   cmp ecx,1
	   jz GetDmgTuBoss
	   pop eax
       push 0x006B21F7
	   ret

       GetDmgTuBoss:
	   mov ecx,[ebp+0x5]
	   pop eax
	   mov [eax+0x664],ecx
       push 0x006B21F7
	   ret

	   KhongDuDiemNhanQua:
       push 0xFFFAE6AA
	   push 0x1
	   push 0xC
	   push 52
	   push 75
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x0155EE60
	   mov eax,0x006A9800
	   call eax
	   mov ecx,[ebp+0x5]
	   pop eax
       mov byte ptr [eax+0x660],1
	   mov [eax+0x664],ecx
       push 0x006B21F7
	   ret

	   TruDiemNhanQua:
       mov ecx,[ebp+0x5]
	   pop eax
       mov byte ptr [eax+0x660],1
	   mov [eax+0x664],ecx
       push 0x006B21F7
	   ret

	   GetThongTinLienDau:
	   mov eax,[esp]
	   xor ecx,ecx
	   mov cx,[ebp+0x5]
	   mov [eax+0xD],cl
       xor ecx,ecx
	   mov cx,[ebp+0x7]
	   mov [eax+0xC],cl
       xor ecx,ecx
	   mov cx,[ebp+0x9]
	   mov [eax+0xE],cl
       xor ecx,ecx
	   mov cx,[ebp+0xB]
	   mov [eax+0xF],cl
       xor ecx,ecx
	   mov cx,[ebp+0xD]
	   mov [eax+0x8],ecx
	   lea ecx,[ebp+0xF]
	   push ecx
	   add eax,0x1C
	   push eax
	   call CopyValueFromGS
	   pop eax
	   push 0x006B21F7
       ret




	   CopyValueFromGS:
	   sub esp,0x4
	   xor ecx,ecx
	   mov [esp],ecx
       BackLoopCopyString:
	   mov ecx,[esp]
	   mov eax,[esp+0xC]
	   xor edx,edx
	   mov dl,[eax+ecx]
	   mov eax,[esp+0x8]
	   mov [eax+ecx],dl
	   mov ecx,[esp]
	   add ecx,1
	   mov [esp],ecx
	   cmp ecx,450
	   jl BackLoopCopyString
	   add esp,0x4
       ret 0x8
	}
};
__declspec(naked)void DrawSatThuong() // 0x00550A9F
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  //
	  pushad
      xor ecx,ecx
	  mov cl,[eax+0x660]
	  test ecx,ecx
	  jz ChuaMoForm
	  //
	  mov ecx,[eax+0x7A0]
	  test ecx,ecx
	  jnz DaCoThongTinHinhAnhNV
      add eax,0x7A0
      push eax
	  call AddOptionImage
	  DaCoThongTinHinhAnhNV:
	  //
      mov ecx,DWORD PTR SS:[0x01733AC4]
	  push 0xFFFFFFFF
	  mov edx,[ecx]
	  call dword ptr [edx+0xC]
      mov eax,[esp+0x1C]
      mov edx,[eax+0x664]
	  push edx
      push 51
	  push 75
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  push 0x2
	  push 0x3F800000
	  mov eax,DWORD PTR [0x01733AC4]
	  mov edi,[eax]
	  mov edx,0xF1
	  push edx
      mov ecx,DWORD PTR SS:[0x01733AD0]
	  mov eax,0x007D7FD0
	  call eax
      mov eax,[eax+0x3C]
	  sub eax,0x53
	  push eax
      mov eax,DWORD PTR [0x01733AC4]
	  push eax
	  mov ecx,DWORD PTR [0x01733AC4]
	  call dword ptr [edi+0x30]
	  add esp,0x1C

	  // Hien Thi Form
      KhongHienThiDanhSach:
      push 0
      mov ecx,DWORD PTR SS:[0x01733AD0]
	  mov eax,0x007D7FD0
	  call eax
      mov eax,[eax+0x3C]
	  mov edx,0xED
	  push edx
	  sub eax,0x82
	  push eax
	  mov eax,[esp+0x28]
      add eax,0x7A0
      push eax
	  call GetImageClass
	  push 1
      mov ecx,DWORD PTR SS:[0x01733AD0]
	  mov eax,0x007D7FD0
	  call eax
	  mov eax,[eax+0x3C]
	  mov edx,0xED
	  push edx
	  sub eax,0x7C
	  push eax
	  mov eax,[esp+0x28]
      add eax,0x7A0
      push eax
	  call GetImageClass
	  // Hien Thi lich thi dau

	  ChuaMoForm:
	  popad
	  mov eax,[esi+0x10]
      xor ebx,ebx
	  push 0x00550AA4
	  ret

	  GetImageClass:
	  mov eax,[esp+0x10]
	  cmp eax,1
      jz HienThiHInhTron
	  push 50
	  push 75
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
	  mov  DWORD PTR SS : [ecx + 0x9C] , 31
	  mov  DWORD PTR SS : [ecx + 0xA0] , 215
	  mov  DWORD PTR SS : [ecx + 0x98] , 13
	  mov  DWORD PTR SS : [ecx + 0xA4] , 71
      jmp ProcessHienThiImage

	  HienThiHInhTron:
      push 49
	  push 75
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
	  mov  DWORD PTR SS : [ecx + 0x9C] , 0
	  mov  DWORD PTR SS : [ecx + 0xA0] , 208
	  mov  DWORD PTR SS : [ecx + 0x98] , 179
	  mov  DWORD PTR SS : [ecx + 0xA4] , 34

      ProcessHienThiImage:
	  push 0xFF7F0000
	  push 5188
	  push 25
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,[esp+0x14]
	  mov edx,[esp+0x10]
	  push ecx
	  push edx
	  mov ecx, [esp+0x14]
	  mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
	  call eax
	  mov ecx,[esp+0x4]
	  push 0x1732CC8
	  mov eax, 0x7B9850
	  call eax //Draw1
	  ret 0x10

      AddOptionImage:
	  sub esp,0x4
	  xor ecx,ecx
	  mov [esp],ecx
	  BackGetOptionImage:
	  mov ecx,[esp]
	  mov eax, 0x010CC088
	  mov edx,[eax+ecx]
	  mov eax,[esp+0x8]
	  mov [eax+ecx],edx
	  add ecx,4
	  mov [esp],ecx
	  cmp ecx,0xB8
	  jl BackGetOptionImage
	  add esp,0x4
	  ret 0x4
	}
};
__declspec(naked)void DrawEventForm() // 004DFFC3
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  //
	  pushad
	  //
	  mov ecx,[eax+0x7A0]
	  test ecx,ecx
	  jnz DaCoThongTinHinhAnhNV
      add eax,0x7A0
      push eax
	  call AddOptionImage
	  DaCoThongTinHinhAnhNV:
      push 0
	  push 1
	  mov edx,[esi+0x18]
	  add edx,0x5
	  push edx
	  mov edx,[esi+0x14]
	  add edx,389
	  push edx
	  mov eax,[esp+0x2C]
      add eax,0x7A0
      push eax
	  call GetImageClass
	  //
      mov eax,[esp+0x1C]
	  xor ecx,ecx
	  mov cl,[eax+0x668]
	  test ecx,ecx
	  jz KhongHienThiText
      add ecx,79
      push 0
	  push ecx
	  mov edx,[esi+0x18]
	  add edx,38
	  push edx
	  mov edx,[esi+0x14]
	  add edx,509
	  push edx
	  mov eax,[esp+0x2C]
      add eax,0x7A0
      push eax
	  call GetImageClass
      KhongHienThiText:
	  //
	  mov eax,[esp+0x1C]
	  xor ecx,ecx
	  mov cl,[eax+0x668]
	  test ecx,ecx
      jz ChuaChonEvent
      xor edx,edx
	  mov dl,[eax+0x66A]
	  push edx
      add ecx,69
	  push ecx
	  mov edx,[esi+0x18]
	  add edx,82
	  push edx
	  mov edx,[esi+0x14]
	  add edx,410
	  push edx
	  mov eax,[esp+0x2C]
      add eax,0x7A0
      push eax
	  call GetImageClass
      ChuaChonEvent:
	  //
      mov eax,[esp+0x1C]
	  xor ecx,ecx
	  mov cl,[eax+0x66B]
	  add ecx,3
	  cmp ecx,3
      jz KhongDoiMauNen
	  push 0
	  push ecx
	  mov edx,[esi+0x18]
	  add edx,83
	  push edx
	  mov edx,[esi+0x14]
	  add edx,747
	  push edx
	  mov eax,[esp+0x2C]
      add eax,0x7A0
      push eax
	  call GetImageClass
	  KhongDoiMauNen:
      //
      mov eax,[esp+0x1C]
	  xor ecx,ecx
	  mov cl,[eax+0x66C]
	  add ecx,4
	  cmp ecx,4
	  jz KhongDoiMauNen1
	  push 0
	  push ecx
	  mov edx,[esi+0x18]
	  add edx,0x145
	  push edx
	  mov edx,[esi+0x14]
	  add edx,747
	  push edx
	  mov eax,[esp+0x2C]
      add eax,0x7A0
      push eax
	  call GetImageClass
	  KhongDoiMauNen1:
	  //
      mov ecx,DWORD PTR SS:[0x01733AC4]
	  push 0xFFFFFFFF
	  mov edx,[ecx]
	  call dword ptr [edx+0xC]
      mov eax,[esp+0x1C]
      mov edx,[eax+0x664]
	  push edx
      push 51
	  push 75
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  push 0x2
	  push 0x3F800000
	  mov eax,DWORD PTR [0x01733AC4]
	  mov edi,[eax]
	  mov edx,[esi+0x18]
	  add edx,365
	  push edx
      mov eax,[esi+0x14]
	  add eax,117
	  push eax
      mov eax,DWORD PTR [0x01733AC4]
	  push eax
	  mov ecx,DWORD PTR [0x01733AC4]
	  call dword ptr [edi+0x30]
	  add esp,0x1C
	  //
      push 0
	  push 90
	  mov edx,[esi+0x18]
	  add edx,362
	  push edx
	  mov eax,[esi+0x14]
	  add eax,73
	  push eax
	  mov eax,[esp+0x2C]
      add eax,0x7A0
      push eax
	  call GetImageClass
      push 0
	  push 91
	  mov edx,[esi+0x18]
	  add edx,362
	  push edx
	  mov edx,[esi+0x14]
	  add edx,79
	  push edx
	  mov eax,[esp+0x2C]
      add eax,0x7A0
      push eax
	  call GetImageClass
	  //
	  popad
	  push 0x80FFFFFF
	  push 0x004DFFC8
	  ret

	  GetImageClass:
      xor eax,eax
	  mov eax,[esp+0x10]
	  cmp eax,1
	  jz HienThiHInhTron
	  cmp eax,4
	  jz HienThiNenDoiMau
	  cmp eax,5
	  jz HienThiNenDoiMau2
      cmp eax,80
	  jz HienThiTenEvent
	  cmp eax,81
	  jz HienThiTenEvent1
	  cmp eax,82
	  jz HienThiTenEvent2
	  cmp eax,83
	  jz HienThiTenEvent3
	  cmp eax,84
	  jz HienThiTenEvent4
	  cmp eax,85
	  jz HienThiTenEvent5
	  cmp eax,86
	  jz HienThiTenEvent6
	  cmp eax,87
	  jz HienThiTenEvent7
	  cmp eax,90
	  jz HienThiFormEventST
      cmp eax,91
	  jz HienThiFormEventST2
	  push eax
	  push 76
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov edx,[esp+0x14]
      imul edx,0x10
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
      mov eax,253
      add eax,edx
	  mov  DWORD PTR SS : [ecx + 0x9C] , edx
	  mov  DWORD PTR SS : [ecx + 0xA0] , 339
	  mov  DWORD PTR SS : [ecx + 0x98] , 4
	  mov  DWORD PTR SS : [ecx + 0xA4] , eax
      jmp ProcessHienThiImage

	  HienThiTenEvent:
      push 85
	  push 76
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
	  mov  DWORD PTR SS : [ecx + 0x9C] , 85
	  mov  DWORD PTR SS : [ecx + 0xA0] , 176
	  mov  DWORD PTR SS : [ecx + 0x98] , 36
	  mov  DWORD PTR SS : [ecx + 0xA4] , 115
	  jmp ProcessHienThiImage

	  HienThiTenEvent1:
      push 85
	  push 76
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
	  mov  DWORD PTR SS : [ecx + 0x9C] , 134
	  mov  DWORD PTR SS : [ecx + 0xA0] , 176
	  mov  DWORD PTR SS : [ecx + 0x98] , 36
	  mov  DWORD PTR SS : [ecx + 0xA4] , 164
	  jmp ProcessHienThiImage

	  HienThiTenEvent2:
	  push 85
	  push 76
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
	  mov  DWORD PTR SS : [ecx + 0x9C] , 183
	  mov  DWORD PTR SS : [ecx + 0xA0] , 176
	  mov  DWORD PTR SS : [ecx + 0x98] , 36
	  mov  DWORD PTR SS : [ecx + 0xA4] , 213
	  jmp ProcessHienThiImage

	  HienThiTenEvent3:
	  push 85
	  push 76
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
	  mov  DWORD PTR SS : [ecx + 0x9C] , 232
	  mov  DWORD PTR SS : [ecx + 0xA0] , 176
	  mov  DWORD PTR SS : [ecx + 0x98] , 36
	  mov  DWORD PTR SS : [ecx + 0xA4] , 262
	  jmp ProcessHienThiImage

	  HienThiTenEvent4:
	  push 85
	  push 76
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
	  mov  DWORD PTR SS : [ecx + 0x9C] , 85
	  mov  DWORD PTR SS : [ecx + 0xA0] , 336
	  mov  DWORD PTR SS : [ecx + 0x98] , 196
	  mov  DWORD PTR SS : [ecx + 0xA4] , 115
	  jmp ProcessHienThiImage

	  HienThiTenEvent5:
	  push 85
	  push 76
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
	  mov  DWORD PTR SS : [ecx + 0x9C] , 134
	  mov  DWORD PTR SS : [ecx + 0xA0] , 336
	  mov  DWORD PTR SS : [ecx + 0x98] , 196
	  mov  DWORD PTR SS : [ecx + 0xA4] , 164
	  jmp ProcessHienThiImage

	  HienThiTenEvent6:
	  push 85
	  push 76
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
	  mov  DWORD PTR SS : [ecx + 0x9C] , 183
	  mov  DWORD PTR SS : [ecx + 0xA0] , 336
	  mov  DWORD PTR SS : [ecx + 0x98] , 196
	  mov  DWORD PTR SS : [ecx + 0xA4] , 213
	  jmp ProcessHienThiImage

	  HienThiTenEvent7:
      push 85
	  push 76
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
	  mov  DWORD PTR SS : [ecx + 0x9C] , 232
	  mov  DWORD PTR SS : [ecx + 0xA0] , 336
	  mov  DWORD PTR SS : [ecx + 0x98] , 196
	  mov  DWORD PTR SS : [ecx + 0xA4] , 262
	  jmp ProcessHienThiImage

	  HienThiFormEventST:
      push 50
	  push 75
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
	  mov  DWORD PTR SS : [ecx + 0x9C] , 31
	  mov  DWORD PTR SS : [ecx + 0xA0] , 215
	  mov  DWORD PTR SS : [ecx + 0x98] , 13
	  mov  DWORD PTR SS : [ecx + 0xA4] , 71
	  jmp ProcessHienThiImage

	  HienThiFormEventST2:
      push 49
	  push 75
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
	  mov  DWORD PTR SS : [ecx + 0x9C] , 0
	  mov  DWORD PTR SS : [ecx + 0xA0] , 208
	  mov  DWORD PTR SS : [ecx + 0x98] , 179
	  mov  DWORD PTR SS : [ecx + 0xA4] , 34
	  jmp ProcessHienThiImage


	  HienThiHInhTron:
	  push 48
	  push 76
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
	  mov  DWORD PTR SS : [ecx + 0x9C] , 0
	  mov  DWORD PTR SS : [ecx + 0xA0] , 386
	  mov  DWORD PTR SS : [ecx + 0x98] , 0
	  mov  DWORD PTR SS : [ecx + 0xA4] , 410
	  jmp ProcessHienThiImage

      HienThiHinhAnhEvent:
      push 49
	  push 76
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov edx,[esp+0x14]
      imul edx,0x10
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
      mov eax,253
      add eax,edx
	  mov  DWORD PTR SS : [ecx + 0x9C] , edx
	  mov  DWORD PTR SS : [ecx + 0xA0] , 339
	  mov  DWORD PTR SS : [ecx + 0x98] , 4
	  mov  DWORD PTR SS : [ecx + 0xA4] , eax
	  jmp ProcessHienThiImage

	  HienThiNenDoiMau:
      push 47
	  push 76
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
	  mov  DWORD PTR SS : [ecx + 0x9C] , 0
	  mov  DWORD PTR SS : [ecx + 0xA0] , 12
	  mov  DWORD PTR SS : [ecx + 0x98] , 0
	  mov  DWORD PTR SS : [ecx + 0xA4] , 12
	  jmp ProcessHienThiImage

	  HienThiNenDoiMau2:
	  push 47
	  push 76
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
	  mov  DWORD PTR SS : [ecx + 0x9C] , 12
	  mov  DWORD PTR SS : [ecx + 0xA0] , 12
	  mov  DWORD PTR SS : [ecx + 0x98] , 0
	  mov  DWORD PTR SS : [ecx + 0xA4] , 24
	  jmp ProcessHienThiImage


      ProcessHienThiImage:
	  push 0xFF7F0000
	  push 5188
	  push 25
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,[esp+0x14]
	  mov edx,[esp+0x10]
	  push ecx
	  push edx
	  mov ecx, [esp+0x14]
	  mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
	  call eax
	  mov ecx,[esp+0x4]
	  push 0x1732CC8
	  mov eax, 0x7B9850
	  call eax //Draw1
	  ret 0x14

      AddOptionImage:
	  sub esp,0x4
	  xor ecx,ecx
	  mov [esp],ecx
	  BackGetOptionImage:
	  mov ecx,[esp]
	  mov eax, 0x010CC088
	  mov edx,[eax+ecx]
	  mov eax,[esp+0x8]
	  mov [eax+ecx],edx
	  add ecx,4
	  mov [esp],ecx
	  cmp ecx,0xB8
	  jl BackGetOptionImage
	  add esp,0x4
	  ret 0x4
	}
};
__declspec(naked)void PozEventForm()  //004E047C
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  pushad
	  mov ecx,DWORD PTR SS:[0x01733AD0]
	  mov eax,0x007D7FD0
	  call eax
	  xor ecx,ecx
	  mov cl,[eax+0xC]
	  test ecx,ecx
      jz HoverChange
	  //
	  mov ecx,[esp+0x1C]
	  xor edx,edx
	  mov dl,[ecx+0x669]
	  test dl,dl
      jnz WaitFor1
	  //
	  mov ecx,[eax+0x18]
	  mov edx,[esi+0x18]
	  add edx,338
	  cmp ecx,edx
	  jl KiemTraTangGiam
      add edx,19
	  cmp ecx,edx
	  ja KiemTraHangNut2
	  mov ecx,[eax+0x10]
	  mov edx,[esi+0x14]
	  add edx,343
	  cmp ecx,edx
	  jl KhongNhanNut
      add edx,64
	  cmp ecx,edx
	  ja KiemTraHangNut1CN2
	  mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x668],1
	  mov byte ptr [eax+0x669],1
	  jmp WaitFor1


	  KiemTraHangNut1CN2:
      mov ecx,[eax+0x10]
	  mov edx,[esi+0x14]
	  add edx,434
	  cmp ecx,edx
	  jl KhongNhanNut
      add edx,64
	  cmp ecx,edx
	  ja KiemTraHangNut1CN3
      mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x668],2
	  mov byte ptr [eax+0x669],1
	  jmp WaitFor1

	  KiemTraHangNut1CN3:
      mov ecx,[eax+0x10]
	  mov edx,[esi+0x14]
	  add edx,524
	  cmp ecx,edx
	  jl KhongNhanNut
      add edx,64
	  cmp ecx,edx
	  ja KiemTraHangNut1CN4
      mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x668],3
	  mov byte ptr [eax+0x669],1
	  jmp WaitFor1

	  KiemTraHangNut1CN4:
      mov ecx,[eax+0x10]
	  mov edx,[esi+0x14]
	  add edx,614
	  cmp ecx,edx
	  jl KhongNhanNut
      add edx,64
	  cmp ecx,edx
	  ja KhongNhanNut
      mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x668],4
	  mov byte ptr [eax+0x669],1
	  jmp WaitFor1

	  //
	  KiemTraHangNut2:
	  mov ecx,[eax+0x18]
	  mov edx,[esi+0x18]
	  add edx,367
	  cmp ecx,edx
	  jl KhongNhanNut
      add edx,19
	  cmp ecx,edx
	  ja KhongNhanNut
	  mov ecx,[eax+0x10]
	  mov edx,[esi+0x14]
	  add edx,343
	  cmp ecx,edx
	  jl KhongNhanNut
      add edx,64
	  cmp ecx,edx
	  ja KiemTraHangNut2CN2
	  mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x668],5
	  mov byte ptr [eax+0x669],1
	  jmp WaitFor1


	  KiemTraHangNut2CN2:
      mov ecx,[eax+0x10]
	  mov edx,[esi+0x14]
	  add edx,434
	  cmp ecx,edx
	  jl KhongNhanNut
      add edx,64
	  cmp ecx,edx
	  ja KiemTraHangNut2CN3
      mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x668],6
	  mov byte ptr [eax+0x669],1
	  jmp WaitFor1

	  KiemTraHangNut2CN3:
      mov ecx,[eax+0x10]
	  mov edx,[esi+0x14]
	  add edx,524
	  cmp ecx,edx
	  jl KhongNhanNut
      add edx,64
	  cmp ecx,edx
	  ja KiemTraHangNut2CN4
      mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x668],7
	  mov byte ptr [eax+0x669],1
	  jmp WaitFor1

	  KiemTraHangNut2CN4:
      mov ecx,[eax+0x10]
	  mov edx,[esi+0x14]
	  add edx,614
	  cmp ecx,edx
	  jl KhongNhanNut
	  add edx,64
	  cmp ecx,edx
	  ja KhongNhanNut
      mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x668],8
	  mov byte ptr [eax+0x669],1
	  jmp WaitFor1

      KiemTraTangGiam:
      mov ecx,[eax+0x10]
	  mov edx,[esi+0x14]
	  add edx,674
	  cmp ecx,edx
	  jl KhongNhanNut
      add edx,12
	  cmp ecx,edx
	  ja KhongNhanNut
      mov ecx,[eax+0x18]
	  mov edx,[esi+0x18]
	  add edx,65
	  cmp ecx,edx
	  jl KhongNhanNut
      add edx,12
	  cmp ecx,edx
	  ja KiemTraTangGiam2
	  mov edx,[esp+0x1C]
      mov byte ptr [eax+0xC],0x0
	  xor ecx,ecx
	  mov cl,[edx+0x66A]
	  test ecx,ecx
	  jz WaitFor1
	  sub ecx,1
      mov [edx+0x66A],cl
	  jmp WaitFor1

	  KiemTraTangGiam2:
      mov ecx,[eax+0x18]
	  mov edx,[esi+0x18]
	  add edx,307
	  cmp ecx,edx
	  jl KhongNhanNut
      add edx,12
	  cmp ecx,edx
	  ja KhongNhanNut
	  mov edx,[esp+0x1C]
      mov byte ptr [eax+0xC],0x0
      xor ecx,ecx
	  mov cl,[edx+0x66A]
	  cmp ecx,50
      ja WaitFor1
	  add ecx,1
      mov [edx+0x66A],cl
	  jmp WaitFor1

	  HoverChange:
	  mov ecx,[eax+0x10]
	  mov edx,[esi+0x14]
	  add edx,674
	  cmp ecx,edx
	  jl KhongNhanNut
      add edx,12
	  cmp ecx,edx
	  ja KhongNhanNut
      mov ecx,[eax+0x18]
	  mov edx,[esi+0x18]
	  add edx,65
	  cmp ecx,edx
	  jl KhongNhanNut
      add edx,12
	  cmp ecx,edx
	  ja KiemTraHover2
      mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x66B],1
	  jmp WaitFor1

	  KiemTraHover2:
      mov ecx,[eax+0x18]
	  mov edx,[esi+0x18]
	  add edx,307
	  cmp ecx,edx
	  jl KhongNhanNut
      add edx,12
	  cmp ecx,edx
	  ja KhongNhanNut
      mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x66C],1
	  jmp WaitFor1


	  KhongNhanNut:
	  popad
	  mov byte ptr [eax+0x669],0
	  mov byte ptr [eax+0x66C],0
	  mov byte ptr [eax+0x66B],0
      mov eax,[esi+0x00000340]
	  push 0x004E0482
	  ret

	  WaitFor1:
	  popad
      mov eax,[esi+0x00000340]
	  push 0x004E0482
	  ret


	}
};
__declspec(naked)void ScrollEventForm()  //005AF1B4
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  pushad
	  //
      push 10241
	  mov ecx,0x017323A8
	  mov eax,0x007D8550
	  call eax
	  test eax,eax
	  jz Default
	  mov ecx,[eax+0x10]
	  test ecx,ecx
	  jz Default
      mov esi,eax
	  //
	  push 0
	  fld dword ptr [esp]
	  fcomp dword ptr [esp+0x30]
	  fnstsw ax
	  test ah,0x41
	  jne ScrollDown
      pop eax
	  //
	  mov ecx,DWORD PTR SS:[0x01733AD0]
	  mov eax,0x007D7FD0
	  call eax
	  mov ecx,[eax+0x10]
	  mov edx,[esi+0x14]
	  add edx,341
	  cmp ecx,edx
	  jl Default
      add edx,672
	  cmp ecx,edx
	  ja Default
	  mov ecx,[eax+0x18]
	  mov edx,[esi+0x18]
	  add edx,63
	  cmp ecx,edx
	  jl Default
      add edx,316
	  cmp ecx,edx
	  ja Default
	  mov eax,[esp+0x1C]
      xor ecx,ecx
	  mov cl,[eax+0x66A]
	  cmp ecx,50
      ja Maximum
	  add ecx,1
	  mov [eax+0x66A],cl
      jmp Maximum

	  ScrollDown:
      pop eax
      mov ecx,DWORD PTR SS:[0x01733AD0]
	  mov eax,0x007D7FD0
	  call eax
	  mov ecx,[eax+0x10]
	  mov edx,[esi+0x14]
	  add edx,341
	  cmp ecx,edx
	  jl Default
      add edx,672
	  cmp ecx,edx
	  ja Default
	  mov ecx,[eax+0x18]
	  mov edx,[esi+0x18]
	  add edx,63
	  cmp ecx,edx
	  jl Default
      add edx,316
	  cmp ecx,edx
	  ja Default
	  mov eax,[esp+0x1C]
      xor ecx,ecx
	  mov cl,[eax+0x66A]
	  test ecx,ecx
      jz Maximum
	  sub ecx,1
	  mov [eax+0x66A],cl
	  jmp Maximum


	  Default:
      popad
	  mov eax,[ecx+0x0002DC04]
	  push 0x005AF1BA
      ret


	  Maximum:
	  popad
	  push 0x005AF207
      ret


	}
};
__declspec(naked) void DrawAutoFormIngame() //00503B57
{
	__asm {
	   nop
	   nop
	   nop
	   nop
	   nop
	   pushad
	   mov cl,[eax]
	   test cl,cl
       jz ChuaMoForm
       mov ecx,[eax+0x140]
	   test ecx,ecx
	   jnz DaCoThongTinHinhAnhNV
	   add eax,0x140
	   push eax
	   call AddOptionImage
	   DaCoThongTinHinhAnhNV:
	   mov eax,[esp+0x1C]
       xor ecx,ecx
	   mov cl,[eax+0x1]
	   add ecx,100
	   push ecx
	   push 10
	   mov ecx,DWORD PTR SS:[0x01733AD0]
	   mov eax,0x007D7FD0
	   call eax
	   mov edx,[eax+0x3C]
       sub edx,0x130
	   push edx
	   mov eax,[esp+0x28]
	   add eax,0x140
	   push eax
	   call GetImageClass
	   mov eax,[esp+0x1C]
       xor ecx,ecx
	   mov cl,[eax+0x1]
	   cmp ecx,1
	   jz PagePhucHoi
	   cmp ecx,2
	   jz PageChienDau
	   cmp ecx,3
	   jz PageToaDo
	   cmp ecx,4
	   jz PageNhatDo
	   cmp ecx,5
	   jz PageTienIch
	   // Tick Luyen Cong
       mov eax,[esp+0x1C]
       xor ecx,ecx
	   mov cl,[eax+0x4]
	   test ecx,ecx
	   jz KOTickLuyenCong
       push ecx
	   push 178
	   mov ecx,DWORD PTR SS:[0x01733AD0]
	   mov eax,0x007D7FD0
	   call eax
	   mov edx,[eax+0x3C]
       sub edx,258
	   push edx
	   mov eax,[esp+0x28]
	   add eax,0x140
	   push eax
	   call GetImageClass
	   KOTickLuyenCong:
	   // Tick Tu dong Nhan PT
       mov eax,[esp+0x1C]
       xor ecx,ecx
	   mov cl,[eax+0x5]
	   test ecx,ecx
	   jz KOTickNhanPT
       push ecx
	   push 204
	   mov ecx,DWORD PTR SS:[0x01733AD0]
	   mov eax,0x007D7FD0
	   call eax
	   mov edx,[eax+0x3C]
	   sub edx,258
	   push edx
	   mov eax,[esp+0x28]
	   add eax,0x140
	   push eax
	   call GetImageClass
	   KOTickNhanPT:
	   // Tick Tu Dong PT Nguoi Khac
       mov eax,[esp+0x1C]
       xor ecx,ecx
	   mov cl,[eax+0x6]
	   test ecx,ecx
	   jz KOTickPTNgKhac
	   push ecx
	   push 230
	   mov ecx,DWORD PTR SS:[0x01733AD0]
	   mov eax,0x007D7FD0
	   call eax
	   mov edx,[eax+0x3C]
	   sub edx,258
	   push edx
	   mov eax,[esp+0x28]
	   add eax,0x140
	   push eax
	   call GetImageClass
	   KOTickPTNgKhac:
	   jmp ChuaMoForm

       PagePhucHoi:
	   // Tick Hoi Mau
	   mov eax,[esp+0x1C]
	   xor ecx,ecx
	   mov cl,[eax+0x8]
	   test ecx,ecx
	   jz KOTickHoiMau
       push 1
	   push 0xC9
	   mov ecx,DWORD PTR SS:[0x01733AD0]
	   mov eax,0x007D7FD0
	   call eax
	   mov edx,[eax+0x3C]
	   mov eax,[esp+0x24]
	   xor ecx,ecx
	   mov cl,[eax+0x8]
	   imul ecx,0x39
       add ecx,0x57
	   sub edx,ecx
	   push edx
	   mov eax,[esp+0x28]
	   add eax,0x140
	   push eax
	   call GetImageClass
	   KOTickHoiMau:
	   // Tick Hoi Mana
	   mov eax,[esp+0x1C]
	   xor ecx,ecx
	   mov cl,[eax+0x9]
	   test ecx,ecx
	   jz KOTickHoiMana
       push 1
	   push 0xF3
	   mov ecx,DWORD PTR SS:[0x01733AD0]
	   mov eax,0x007D7FD0
	   call eax
	   mov edx,[eax+0x3C]
       mov eax,[esp+0x24]
	   xor ecx,ecx
	   mov cl,[eax+0x9]
	   imul ecx,0x39
       add ecx,0x57
	   sub edx,ecx
	   push edx
	   mov eax,[esp+0x28]
	   add eax,0x140
	   push eax
	   call GetImageClass
	   KOTickHoiMana:
	   // Tick Van Khi Mau
       mov eax,[esp+0x1C]
	   xor ecx,ecx
	   mov cl,[eax+0xA]
	   test ecx,ecx
	   jz KOTickVKMau
       push 1
	   push 0x120
	   mov ecx,DWORD PTR SS:[0x01733AD0]
	   mov eax,0x007D7FD0
	   call eax
	   mov edx,[eax+0x3C]
	   mov eax,[esp+0x24]
	   xor ecx,ecx
	   mov cl,[eax+0xA]
	   imul ecx,0x39
       add ecx,0x57
	   sub edx,ecx
	   push edx
	   mov eax,[esp+0x28]
	   add eax,0x140
	   push eax
	   call GetImageClass
	   KOTickVKMau:
	   // Tick Van Khi Mana
       mov eax,[esp+0x1C]
	   xor ecx,ecx
	   mov cl,[eax+0xB]
	   test ecx,ecx
	   jz KOTickVKMana
       push 1
	   push 0x14D
	   mov ecx,DWORD PTR SS:[0x01733AD0]
	   mov eax,0x007D7FD0
	   call eax
	   mov edx,[eax+0x3C]
	   mov eax,[esp+0x24]
	   xor ecx,ecx
	   mov cl,[eax+0xB]
	   imul ecx,0x39
	   add ecx,0x57
	   sub edx,ecx
	   push edx
	   mov eax,[esp+0x28]
	   add eax,0x140
	   push eax
	   call GetImageClass
	   KOTickVKMana:
	   // Tick HS Tai Cho
       mov eax,[esp+0x1C]
	   xor ecx,ecx
	   mov cl,[eax+0xC]
	   test ecx,ecx
	   jz KOTickHSTaiCho
       push ecx
	   push 0x16C
	   mov ecx,DWORD PTR SS:[0x01733AD0]
	   mov eax,0x007D7FD0
	   call eax
	   mov edx,[eax+0x3C]
	   sub edx,0x101
	   push edx
	   mov eax,[esp+0x28]
	   add eax,0x140
	   push eax
	   call GetImageClass
	   KOTickHSTaiCho:
	   // Tick Ve lang khi het mau
       mov eax,[esp+0x1C]
	   xor ecx,ecx
	   mov cl,[eax+0xD]
	   test ecx,ecx
	   jz KOTickEHetMau
       push ecx
	   push 0x182
	   mov ecx,DWORD PTR SS:[0x01733AD0]
	   mov eax,0x007D7FD0
	   call eax
	   mov edx,[eax+0x3C]
	   sub edx,0x101
	   push edx
	   mov eax,[esp+0x28]
	   add eax,0x140
	   push eax
	   call GetImageClass
	   KOTickEHetMau:
	   // Tick Su Dung Tien Hac Thao
       mov eax,[esp+0x1C]
	   xor ecx,ecx
	   mov cl,[eax+0xE]
	   test ecx,ecx
	   jz KOTickTHT
       push ecx
	   push 0x198
	   mov ecx,DWORD PTR SS:[0x01733AD0]
	   mov eax,0x007D7FD0
	   call eax
	   mov edx,[eax+0x3C]
	   sub edx,0x101
	   push edx
	   mov eax,[esp+0x28]
	   add eax,0x140
	   push eax
	   call GetImageClass
	   KOTickTHT:
	   jmp ChuaMoForm

       PageChienDau:
	   // Tick Skill 1
	   mov eax,[esp+0x1C]
	   xor ecx,ecx
	   mov cl,[eax+0x10]
	   test ecx,ecx
	   jz KOTickSkill1
       push ecx
	   push 183
	   mov ecx,DWORD PTR SS:[0x01733AD0]
	   mov eax,0x007D7FD0
	   call eax
	   mov edx,[eax+0x3C]
	   sub edx,0x100
	   push edx
	   mov eax,[esp+0x28]
	   add eax,0x140
	   push eax
	   call GetImageClass
	   KOTickSkill1:
	   // Tick Skill 2
	   mov eax,[esp+0x1C]
	   xor ecx,ecx
	   mov cl,[eax+0x11]
	   test ecx,ecx
	   jz KOTickSkill2
       push ecx
	   push 210
	   mov ecx,DWORD PTR SS:[0x01733AD0]
	   mov eax,0x007D7FD0
	   call eax
	   mov edx,[eax+0x3C]
	   sub edx,0x100
	   push edx
	   mov eax,[esp+0x28]
	   add eax,0x140
	   push eax
	   call GetImageClass
	   KOTickSkill2:
	   // Tick Skill 3
	   mov eax,[esp+0x1C]
	   xor ecx,ecx
	   mov cl,[eax+0x12]
	   test ecx,ecx
	   jz KOTickSkill3
       push ecx
	   push 237
	   mov ecx,DWORD PTR SS:[0x01733AD0]
	   mov eax,0x007D7FD0
	   call eax
	   mov edx,[eax+0x3C]
	   sub edx,0x100
	   push edx
	   mov eax,[esp+0x28]
	   add eax,0x140
	   push eax
	   call GetImageClass
	   KOTickSkill3:
	   // Tick Skill 4
	   mov eax,[esp+0x1C]
	   xor ecx,ecx
	   mov cl,[eax+0x13]
	   test ecx,ecx
	   jz KOTickSkill4
       push ecx
	   push 264
	   mov ecx,DWORD PTR SS:[0x01733AD0]
	   mov eax,0x007D7FD0
	   call eax
	   mov edx,[eax+0x3C]
	   sub edx,0x100
	   push edx
	   mov eax,[esp+0x28]
	   add eax,0x140
	   push eax
	   call GetImageClass
	   KOTickSkill4:
	   // Tick Skill 5
	   mov eax,[esp+0x1C]
	   xor ecx,ecx
	   mov cl,[eax+0x14]
	   test ecx,ecx
	   jz KOTickSkill5
       push ecx
	   push 291
	   mov ecx,DWORD PTR SS:[0x01733AD0]
	   mov eax,0x007D7FD0
	   call eax
	   mov edx,[eax+0x3C]
	   sub edx,0x100
	   push edx
	   mov eax,[esp+0x28]
	   add eax,0x140
	   push eax
	   call GetImageClass
	   KOTickSkill5:
	   // Tick Skill 6
	   mov eax,[esp+0x1C]
	   xor ecx,ecx
	   mov cl,[eax+0x15]
	   test ecx,ecx
	   jz KOTickSkill6
       push ecx
	   push 318
	   mov ecx,DWORD PTR SS:[0x01733AD0]
	   mov eax,0x007D7FD0
	   call eax
	   mov edx,[eax+0x3C]
	   sub edx,0x100
	   push edx
	   mov eax,[esp+0x28]
	   add eax,0x140
	   push eax
	   call GetImageClass
	   KOTickSkill6:
	   // Tick Skill 7
	   mov eax,[esp+0x1C]
	   xor ecx,ecx
	   mov cl,[eax+0x16]
	   test ecx,ecx
	   jz KOTickSkill7
       push ecx
	   push 183
	   mov ecx,DWORD PTR SS:[0x01733AD0]
	   mov eax,0x007D7FD0
	   call eax
	   mov edx,[eax+0x3C]
	   sub edx,0xB0
	   push edx
	   mov eax,[esp+0x28]
	   add eax,0x140
	   push eax
	   call GetImageClass
	   KOTickSkill7:
	   // Tick Skill 8
	   mov eax,[esp+0x1C]
	   xor ecx,ecx
	   mov cl,[eax+0x17]
	   test ecx,ecx
	   jz KOTickSkill8
       push ecx
	   push 210
	   mov ecx,DWORD PTR SS:[0x01733AD0]
	   mov eax,0x007D7FD0
	   call eax
	   mov edx,[eax+0x3C]
	   sub edx,0xB0
	   push edx
	   mov eax,[esp+0x28]
	   add eax,0x140
	   push eax
	   call GetImageClass
	   KOTickSkill8:
	   // Tick Skill 9
	   mov eax,[esp+0x1C]
	   xor ecx,ecx
	   mov cl,[eax+0x18]
	   test ecx,ecx
	   jz KOTickSkill9
       push ecx
	   push 237
	   mov ecx,DWORD PTR SS:[0x01733AD0]
	   mov eax,0x007D7FD0
	   call eax
	   mov edx,[eax+0x3C]
	   sub edx,0xB0
	   push edx
	   mov eax,[esp+0x28]
	   add eax,0x140
	   push eax
	   call GetImageClass
	   KOTickSkill9:
	   // Tick Skill 10
	   mov eax,[esp+0x1C]
	   xor ecx,ecx
	   mov cl,[eax+0x19]
	   test ecx,ecx
	   jz KOTickSkill10
       push ecx
	   push 264
	   mov ecx,DWORD PTR SS:[0x01733AD0]
	   mov eax,0x007D7FD0
	   call eax
	   mov edx,[eax+0x3C]
	   sub edx,0xB0
	   push edx
	   mov eax,[esp+0x28]
	   add eax,0x140
	   push eax
	   call GetImageClass
	   KOTickSkill10:
	   // Tick Skill 11
	   mov eax,[esp+0x1C]
	   xor ecx,ecx
	   mov cl,[eax+0x1A]
	   test ecx,ecx
	   jz KOTickSkill11
       push ecx
	   push 291
	   mov ecx,DWORD PTR SS:[0x01733AD0]
	   mov eax,0x007D7FD0
	   call eax
	   mov edx,[eax+0x3C]
	   sub edx,0xB0
	   push edx
	   mov eax,[esp+0x28]
	   add eax,0x140
	   push eax
	   call GetImageClass
	   KOTickSkill11:
	   // Tick Skill 12
	   mov eax,[esp+0x1C]
	   xor ecx,ecx
	   mov cl,[eax+0x1B]
	   test ecx,ecx
	   jz KOTickSkill12
       push ecx
	   push 318
	   mov ecx,DWORD PTR SS:[0x01733AD0]
	   mov eax,0x007D7FD0
	   call eax
	   mov edx,[eax+0x3C]
	   sub edx,0xB0
	   push edx
	   mov eax,[esp+0x28]
	   add eax,0x140
	   push eax
	   call GetImageClass
	   KOTickSkill12:
	   // Tick Danh Theo Toa Do
	   mov eax,[esp+0x1C]
	   xor ecx,ecx
	   mov cl,[eax+0x1C]
	   test ecx,ecx
	   jz KOTickToaDo
       push ecx
	   push 354
	   mov ecx,DWORD PTR SS:[0x01733AD0]
	   mov eax,0x007D7FD0
	   call eax
	   mov edx,[eax+0x3C]
	   sub edx,0x100
	   push edx
	   mov eax,[esp+0x28]
	   add eax,0x140
	   push eax
	   call GetImageClass
	   KOTickToaDo:
	   // Tick Danh Xung Quanh
       mov eax,[esp+0x1C]
	   xor ecx,ecx
	   mov cl,[eax+0x1D]
	   test ecx,ecx
	   jz KOTickXungQuanh
       push ecx
	   push 377
	   mov ecx,DWORD PTR SS:[0x01733AD0]
	   mov eax,0x007D7FD0
	   call eax
	   mov edx,[eax+0x3C]
	   sub edx,0x100
	   push edx
	   mov eax,[esp+0x28]
	   add eax,0x140
	   push eax
	   call GetImageClass
	   KOTickXungQuanh:
       // Tick Tu Dong Buff
       mov eax,[esp+0x1C]
	   xor ecx,ecx
	   mov cl,[eax+0x1E]
	   test ecx,ecx
	   jz KOTickTuDongBuff
       push ecx
	   push 400
	   mov ecx,DWORD PTR SS:[0x01733AD0]
	   mov eax,0x007D7FD0
	   call eax
	   mov edx,[eax+0x3C]
	   sub edx,0x100
	   push edx
	   mov eax,[esp+0x28]
	   add eax,0x140
	   push eax
	   call GetImageClass
	   KOTickTuDongBuff:
	   jmp ChuaMoForm

	   PageToaDo:
       mov ecx,DWORD PTR SS:[0x01733AC4]
	   push 0xFFFFFFFF
	   mov edx,[ecx]
	   call dword ptr [edx+0xC]
	   mov eax,[esp+0x1C]
	   push eax
	   call ProcessShowToaDoAuto
       jmp ChuaMoForm


	   ProcessShowToaDoAuto:
	   sub esp,0x4
	   xor ecx,ecx
	   mov [esp],ecx
	   BackLoopShowPozAuto:
	   mov ecx,[esp]
	   imul ecx,0xC
	   mov eax,[esp+0x8]
	   mov edx,[eax+ecx+0x50+0x4]
	   mov ecx,[eax+ecx+0x50]
	   test ecx,ecx
	   jz EndFuncProcessShowToaDoAuto
	   mov ecx,[esp]
	   add ecx,5551
	   push ecx
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   push 0x2
	   push 0x3F800000
	   mov eax,DWORD PTR [0x01733AC4]
	   mov edi,[eax]
	   mov ecx,[esp+0xC]
	   imul ecx,0x10
	   mov edx,183
       add edx,ecx
	   push edx
	   mov ecx,DWORD PTR SS:[0x01733AD0]
	   mov eax,0x007D7FD0
	   call eax
	   mov eax,[eax+0x3C]
	   sub eax,245
	   push eax
	   mov eax,DWORD PTR [0x01733AC4]
	   push eax
	   mov ecx,DWORD PTR [0x01733AC4]
	   call dword ptr [edi+0x30]
	   add esp,0x18
	   mov ecx,[esp]
	   add ecx,1
	   mov [esp],ecx
	   cmp ecx,13
       jl BackLoopShowPozAuto
	   EndFuncProcessShowToaDoAuto:
       add esp,0x4
       ret 0x4


	   PageNhatDo:
	   // Tick Nhat Tat Ca
	   mov eax,[esp+0x1C]
	   xor ecx,ecx
	   mov cl,[eax+0x20]
	   test ecx,ecx
	   jz KOTickNhatTatCa
       push ecx
	   push 183
	   mov ecx,DWORD PTR SS:[0x01733AD0]
	   mov eax,0x007D7FD0
	   call eax
	   mov edx,[eax+0x3C]
	   sub edx,0x101
	   push edx
	   mov eax,[esp+0x28]
	   add eax,0x140
	   push eax
	   call GetImageClass
	   KOTickNhatTatCa:
	   // Tick Nhat Trang Bi Do
	   mov eax,[esp+0x1C]
	   xor ecx,ecx
	   mov cl,[eax+0x21]
	   test ecx,ecx
	   jz KOTickTrangBiDo
       push ecx
	   push 205
	   mov ecx,DWORD PTR SS:[0x01733AD0]
	   mov eax,0x007D7FD0
	   call eax
	   mov edx,[eax+0x3C]
	   sub edx,0x101
	   push edx
	   mov eax,[esp+0x28]
	   add eax,0x140
	   push eax
	   call GetImageClass
	   KOTickTrangBiDo:
	   // Tick Nhat Trang Bi Tim
	   mov eax,[esp+0x1C]
	   xor ecx,ecx
	   mov cl,[eax+0x22]
	   test ecx,ecx
	   jz KOTickTrangBiTim
       push ecx
	   push 227
	   mov ecx,DWORD PTR SS:[0x01733AD0]
	   mov eax,0x007D7FD0
	   call eax
	   mov edx,[eax+0x3C]
	   sub edx,0x101
	   push edx
	   mov eax,[esp+0x28]
	   add eax,0x140
	   push eax
	   call GetImageClass
	   KOTickTrangBiTim:
	   // Tick Nhat Trang Bi Xanh
	   mov eax,[esp+0x1C]
	   xor ecx,ecx
	   mov cl,[eax+0x23]
	   test ecx,ecx
	   jz KOTickTrangBiXanh
       push ecx
	   push 0xF9
	   mov ecx,DWORD PTR SS:[0x01733AD0]
	   mov eax,0x007D7FD0
	   call eax
	   mov edx,[eax+0x3C]
	   sub edx,0x101
	   push edx
	   mov eax,[esp+0x28]
	   add eax,0x140
	   push eax
	   call GetImageClass
	   KOTickTrangBiXanh:
	   // Tick Nhat Tien
	   mov eax,[esp+0x1C]
	   xor ecx,ecx
	   mov cl,[eax+0x24]
	   test ecx,ecx
	   jz KOTickNhatTien
	   push ecx
	   push 272
	   mov ecx,DWORD PTR SS:[0x01733AD0]
	   mov eax,0x007D7FD0
	   call eax
	   mov edx,[eax+0x3C]
	   sub edx,0x101
	   push edx
	   mov eax,[esp+0x28]
	   add eax,0x140
	   push eax
	   call GetImageClass
	   KOTickNhatTien:
	   jmp ChuaMoForm

	   PageTienIch:
	   // Tick Ve Thanh Full Hanh Trang
       mov eax,[esp+0x1C]
	   xor ecx,ecx
	   mov cl,[eax+0x25]
	   test ecx,ecx
	   jz KOTickEFullHanhTrang
	   push ecx
	   push 184
	   mov ecx,DWORD PTR SS:[0x01733AD0]
	   mov eax,0x007D7FD0
	   call eax
	   mov edx,[eax+0x3C]
	   sub edx,0x101
	   push edx
	   mov eax,[esp+0x28]
	   add eax,0x140
	   push eax
	   call GetImageClass
	   KOTickEFullHanhTrang:
	   // Tick Su Dung HOa Da
       mov eax,[esp+0x1C]
	   xor ecx,ecx
	   mov cl,[eax+0x26]
	   test ecx,ecx
	   jz KOTickSuDungHoaDa
	   push ecx
	   push 207
	   mov ecx,DWORD PTR SS:[0x01733AD0]
	   mov eax,0x007D7FD0
	   call eax
	   mov edx,[eax+0x3C]
	   sub edx,0x101
	   push edx
	   mov eax,[esp+0x28]
	   add eax,0x140
	   push eax
	   call GetImageClass
	   KOTickSuDungHoaDa:

	   ChuaMoForm:
	   popad
	   mov edi,[esp+0x1C]
	   mov eax,[esi+0x10]
	   push 0x00503B5E
       ret

	  GetImageClass:
      xor eax,eax
	  mov eax,[esp+0x10]
	  cmp eax,1
	  jz HienThiTick
	  push eax
	  push 76
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
	  mov  DWORD PTR SS : [ecx + 0x9C] , 0
	  mov  DWORD PTR SS : [ecx + 0xA0] , 230
	  mov  DWORD PTR SS : [ecx + 0x98] , 0
	  mov  DWORD PTR SS : [ecx + 0xA4] , 464
      jmp ProcessHienThiImage

	  HienThiTick:
      push 107
	  push 76
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
	  mov  DWORD PTR SS : [ecx + 0x9C] , 45
	  mov  DWORD PTR SS : [ecx + 0xA0] , 107
	  mov  DWORD PTR SS : [ecx + 0x98] , 92
	  mov  DWORD PTR SS : [ecx + 0xA4] , 60
      ProcessHienThiImage:
	  push 0xFF7F0000
	  push 5188
	  push 25
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,[esp+0x14]
	  mov edx,[esp+0x10]
	  push ecx
	  push edx
	  mov ecx, [esp+0x14]
	  mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
	  call eax
	  mov ecx,[esp+0x4]
	  push 0x1732CC8
	  mov eax, 0x7B9850
	  call eax //Draw1
	  ret 0x10

       AddOptionImage:
	   sub esp,0x4
	   xor ecx,ecx
	   mov [esp],ecx
	   BackGetOptionImage:
	   mov ecx,[esp]
	   mov eax, 0x010CC088
	   mov edx,[eax+ecx]
	   mov eax,[esp+0x8]
	   mov [eax+ecx],edx
	   add ecx,4
	   mov [esp],ecx
	   cmp ecx,0xB8
	   jl BackGetOptionImage
	   add esp,0x4
	   ret 0x4
	}
};
__declspec(naked) void BlockDelayCancelSkill()// 0063B064
{
	  __asm {
        pushad
		mov edx,[0x1107258+0x2B838]
		mov eax,DWORD PTR SS:[0x01733B04]
		mov [edx+0x10],eax
		mov eax,DWORD PTR SS:[0x010D94A8]
		mov ecx,[eax+0x0002B838]
		mov ax,[eax+0x0002B834]
		mov dl,[ecx+0x19]
		push edx
		push eax
		mov eax,0x0069E930
		call eax
		add esp,0x8
		mov ecx,DWORD PTR SS:[0x010D94A8]
		mov edx,[ecx+0x0002B838]
		push 1
		push 1
		mov [edx+0x14],eax
		mov ecx,DWORD PTR SS:[0x010D94A8]
		mov eax,[ecx]
		call dword ptr [eax+0x2C]
        popad
        mov eax,DWORD PTR SS:[0x01733B04]
		push 0x0063B069
        ret
	}
}
__declspec(naked) void BlockDelayCancelSkill2() // 00641A4A
{
	  __asm {
        pushad
		mov edx,[0x1107258+0x2B838]
		mov eax,DWORD PTR SS:[0x01733B04]
		mov [edx+0x10],eax
		mov eax,DWORD PTR SS:[0x010D94A8]
		mov ecx,[eax+0x0002B838]
		mov ax,[eax+0x0002B834]
		mov dl,[ecx+0x19]
		push edx
		push eax
		mov eax,0x0069E930
		call eax
		add esp,0x8
		mov ecx,DWORD PTR SS:[0x010D94A8]
		mov edx,[ecx+0x0002B838]
		push 1
		push 1
		mov [edx+0x14],eax
		mov ecx,DWORD PTR SS:[0x010D94A8]
		mov eax,[ecx]
		call dword ptr [eax+0x2C]
        popad
        mov edx,[ebx+0x0002B864]
		push 0x00641A50
        ret
	}
};
__declspec(naked) void DrawSuKienThietTru() // 00594849
{
	  __asm {
		nop
		nop
		nop
		nop
		nop
		pushad
        mov cl,[eax]
		test cl,cl
		jz Default
		mov ecx,[eax+0x70]
		test ecx,ecx
		jnz DaCoThongTinHinhAnhNV
		add eax,0x70
		push eax
		call AddOptionImage
		DaCoThongTinHinhAnhNV:
		// Hien Thi Mau Thiet Tru 1
		mov eax,[esp+0x1C]
        mov ecx,[eax+0x1E]
		push ecx
        push 34
		push 76
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		push 0x2
		push 0x3F800000
		mov eax,DWORD PTR [0x01733AC4]
		mov edi,[eax]
		mov edx,31
		push edx
		mov ecx,DWORD PTR SS:[0x01733AD0]
		mov eax,0x007D7FD0
		call eax
		mov eax,[eax+0x3C]
		sub eax,78
		push eax
		mov eax,DWORD PTR [0x01733AC4]
		push eax
		mov ecx,DWORD PTR [0x01733AC4]
		call dword ptr [edi+0x30]
		add esp,0x1C
		// Hien Thi Mau Thiet Tru 2
        mov eax,[esp+0x1C]
		mov ecx,[eax+0x3C]
		push ecx
        push 34
		push 76
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		push 0x2
		push 0x3F800000
		mov eax,DWORD PTR [0x01733AC4]
		mov edi,[eax]
		mov edx,93
		push edx
		mov ecx,DWORD PTR SS:[0x01733AD0]
		mov eax,0x007D7FD0
		call eax
		mov eax,[eax+0x3C]
		sub eax,78
		push eax
		mov eax,DWORD PTR [0x01733AC4]
		push eax
		mov ecx,DWORD PTR [0x01733AC4]
		call dword ptr [edi+0x30]
		add esp,0x1C
		// Hien Thi Mau Thiet Tru 3
        mov eax,[esp+0x1C]
		mov ecx,[eax+0x5A]
		push ecx
        push 34
		push 76
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		push 0x2
		push 0x3F800000
		mov eax,DWORD PTR [0x01733AC4]
		mov edi,[eax]
		mov edx,135
		push edx
		mov ecx,DWORD PTR SS:[0x01733AD0]
		mov eax,0x007D7FD0
		call eax
		mov eax,[eax+0x3C]
		sub eax,78
		push eax
		mov eax,DWORD PTR [0x01733AC4]
		push eax
		mov ecx,DWORD PTR [0x01733AC4]
		call dword ptr [edi+0x30]
		add esp,0x1C
		// Hien Thi Diem Ca Nhan
        mov eax,[esp+0x1C]
		mov ecx,[eax+0x5E]
		push ecx
        push 34
		push 76
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		push 0x2
		push 0x3F800000
		mov eax,DWORD PTR [0x01733AC4]
		mov edi,[eax]
		mov edx,188
		push edx
		mov ecx,DWORD PTR SS:[0x01733AD0]
		mov eax,0x007D7FD0
		call eax
		mov eax,[eax+0x3C]
		sub eax,82
		push eax
		mov eax,DWORD PTR [0x01733AC4]
		push eax
		mov ecx,DWORD PTR [0x01733AC4]
		call dword ptr [edi+0x30]
		add esp,0x1C
		// Hien Thi Thoi Gian Con Lai
		mov eax,[esp+0x1C]
		mov ecx,[eax+0x62]
		mov eax,[eax+0x66]
        add ecx,eax
        mov eax,DWORD PTR SS:[0x01733B04]
		cmp ecx,eax
		jb EndOfFuncShowThietTru
		sub ecx,eax
		mov eax, 0x10624DD3
		mul ecx
		mov ecx, edx
		shr ecx, 0x6
		push ebp
		mov eax, ecx
		xor edx, edx
		mov ebp, 0x3C
		div ebp
		mov eax, 0x88888889
		push edx
		mul ecx
		shr edx, 0x5
		push edx
		push 0x12D1
		push 0x19
		mov ecx,0x1733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov eax,[esp+0x1C]
		lea eax,[eax+0x1C]
		push 16
		push eax
		mov eax,0x0085C538
		call dword ptr [eax]
		add esp,0x18
        //
        mov eax,[esp+0x2C]
		lea ecx,[eax+0x1C]
		push ecx
		push 0x2
		push 0x3F800000
		mov eax,DWORD PTR [0x01733AC4]
		mov edi,[eax]
		mov edx,247
		push edx
		mov ecx,DWORD PTR SS:[0x01733AD0]
		mov eax,0x007D7FD0
		call eax
		mov eax,[eax+0x3C]
		sub eax,62
		push eax
		mov eax,DWORD PTR [0x01733AC4]
		push eax
		mov ecx,DWORD PTR [0x01733AC4]
		call dword ptr [edi+0x30]
		add esp,0x18
        EndOfFuncShowThietTru:
		push 17
		mov ecx,DWORD PTR SS:[0x01733AD0]
		mov eax,0x007D7FD0
		call eax
		mov edx,[eax+0x3C]
		sub edx,117
		push edx
		mov eax,[esp+0x24]
		add eax,0x70
		push eax
		call GetImageClass
        popad
		mov esi,ecx
		xor ebp,ebp
        push edi
		push 0x005961E0
        ret

        Default:
		popad
		mov esi,ecx
		xor ebp,ebp
        push edi
		push 0x0059484E
		ret



        GetImageClass:
		push 32
		push 76
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,[esp+0x4]
		mov  DWORD PTR SS : [ecx + 0x70] , eax
		mov  DWORD PTR SS : [ecx + 0x9C] , 0
		mov  DWORD PTR SS : [ecx + 0xA0] , 184
		mov  DWORD PTR SS : [ecx + 0x98] , 0
		mov  DWORD PTR SS : [ecx + 0xA4] , 271
		ProcessHienThiImage:
		push 0xFF7F0000
		push 5188
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,[esp+0x14]
		mov edx,[esp+0x10]
		push ecx
		push edx
		mov ecx, [esp+0x14]
		mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
		call eax
		mov ecx,[esp+0x4]
		push 0x1732CC8
		mov eax, 0x7B9850
		call eax //Draw1
		ret 0xC

        AddOptionImage:
		sub esp,0x4
		xor ecx,ecx
		mov [esp],ecx
		BackGetOptionImage:
		mov ecx,[esp]
		mov eax, 0x010CC088
		mov edx,[eax+ecx]
		mov eax,[esp+0x8]
		mov [eax+ecx],edx
		add ecx,4
		mov [esp],ecx
		cmp ecx,0xB8
		jl BackGetOptionImage
		add esp,0x4
	    ret 0x4
	}
};
__declspec(naked) void DrawSuKienChienTruongForm() // 00521604
{
	  __asm {
		nop
		nop
		nop
		nop
		nop
		pushad
        mov cl,[eax]
		test cl,cl
		jz Default
		mov ecx,[eax+0x70]
		test ecx,ecx
		jnz DaCoThongTinHinhAnhNV
		add eax,0x70
		push eax
		call AddOptionImage
		DaCoThongTinHinhAnhNV:
        mov ecx,DWORD PTR SS:[0x01733AC4]
		push 0xFF00FF00
		mov edx,[ecx]
		call dword ptr [edx+0xC]
		//
        //Show Time
		mov eax,[esp+0x1C]
		xor ecx,ecx
		mov cl,[eax+0xB]
		push ecx
		mov cl,[eax+0xA]
		push ecx
		push 1
		push 82
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		push 0x2
		push 0x3F800000
		mov eax,DWORD PTR [0x01733AC4]
		mov edi,[eax]
		mov edx,534
		push edx
		mov eax,229
		push eax
		mov eax,DWORD PTR [0x01733AC4]
		push eax
		mov ecx,DWORD PTR [0x01733AC4]
		call dword ptr [edi+0x30]
		add esp,0x20
		//Tinh Trang
		mov eax,[esp+0x1C]
		xor ecx,ecx
		mov cl,[eax+0x9]
		add ecx,2
		push ecx
		push 82
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		push 0x2
		push 0x3F800000
		mov eax,DWORD PTR [0x01733AC4]
		mov edi,[eax]
		mov edx,566
		push edx
		mov eax,256
		push eax
		mov eax,DWORD PTR [0x01733AC4]
		push eax
		mov ecx,DWORD PTR [0x01733AC4]
		call dword ptr [edi+0x30]
		add esp,0x18
		// Nguoi tham gia TD
		mov eax,[esp+0x1C]
		xor ecx,ecx
		mov cx,[eax+0xC]
		test ecx,ecx
		jz ChuaCoNguoiThamGiaTD
		push ecx
        push 4
		push 82
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		push 0x2
		push 0x3F800000
		mov eax,DWORD PTR [0x01733AC4]
		mov edi,[eax]
		mov edx,470
		push edx
		mov eax,191
		push eax
		mov eax,DWORD PTR [0x01733AC4]
		push eax
		mov ecx,DWORD PTR [0x01733AC4]
		call dword ptr [edi+0x30]
		add esp,0x1C

		ChuaCoNguoiThamGiaTD:
		mov eax,[esp+0x1C]
		xor ecx,ecx
		mov cx,[eax+0xE]
		test ecx,ecx
		jz ChuaCoNguoiThamGiaHD
        push ecx
        push 4
		push 82
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		push 0x2
		push 0x3F800000
		mov eax,DWORD PTR [0x01733AC4]
		mov edi,[eax]
		mov edx,471
		push edx
		mov eax,618
		push eax
		mov eax,DWORD PTR [0x01733AC4]
		push eax
		mov ecx,DWORD PTR [0x01733AC4]
		call dword ptr [edi+0x30]
		add esp,0x1C

		ChuaCoNguoiThamGiaHD:
		//Tong So Nguoi ThamGia
		mov eax,[esp+0x1C]
		xor ecx,ecx
		mov cx,[eax+0x14]
		test ecx,ecx
		jz ChuaCoNguoiThamGia
        push ecx
        push 4
		push 82
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		push 0x2
		push 0x3F800000
		mov eax,DWORD PTR [0x01733AC4]
		mov edi,[eax]
		mov edx,565
		push edx
		mov eax,583
		push eax
		mov eax,DWORD PTR [0x01733AC4]
		push eax
		mov ecx,DWORD PTR [0x01733AC4]
		call dword ptr [edi+0x30]
		add esp,0x1C
		ChuaCoNguoiThamGia:
		// Hien Thi DiemCT
		mov eax,[esp+0x1C]
		mov ecx,[eax+0x4]
        push ecx
        push 5
		push 82
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		push 0x2
		push 0x3F800000
		mov eax,DWORD PTR [0x01733AC4]
		mov edi,[eax]
		mov edx,256
		push edx
		mov eax,760
		push eax
		mov eax,DWORD PTR [0x01733AC4]
		push eax
		mov ecx,DWORD PTR [0x01733AC4]
		call dword ptr [edi+0x30]
		add esp,0x1C
		//  hien thi ten
		lea eax,[0x1107258+0x10]
		push eax
		push 0x2
		push 0x3F800000
		mov eax,DWORD PTR [0x01733AC4]
		mov edi,[eax]
		mov edx,162
		push edx
		mov eax,781
		push eax
		mov eax,DWORD PTR [0x01733AC4]
		push eax
		mov ecx,DWORD PTR [0x01733AC4]
		call dword ptr [edi+0x30]
		add esp,0x18
		// Hien thi thoi gian con la
		mov eax,[esp+0x1C]
		mov ecx,[eax+0x18]
		mov eax,[eax+0x1C]
        add ecx,eax
        mov eax,DWORD PTR SS:[0x01733B04]
		cmp ecx,eax
		jb EndOfFuncShowTimeCT
		sub ecx,eax
		mov eax, 0x10624DD3
		mul ecx
		mov ecx, edx
		shr ecx, 0x6
		push ebp
		mov eax, ecx
		xor edx, edx
		mov ebp, 0x3C
		div ebp
		mov eax, 0x88888889
		push edx
		mul ecx
		shr edx, 0x5
		push edx
		push 0x12D1
		push 0x19
		mov ecx,0x1733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov eax,[esp+0x2C]
		lea eax,[eax+0x50]
		push 16
		push eax
		mov eax,0x0085C538
		call dword ptr [eax]
		add esp,0x18
        //
		mov eax,[esp+0x1C]
		lea ecx,[eax+0x50]
		push 0x0
		push 0x3F800000
        push ecx
		mov eax,DWORD PTR [0x01733AC4]
		mov edi,[eax]
		mov edx,533
		push edx
		mov eax,553
		push eax
		mov ecx,DWORD PTR [0x01733AC4]
		call dword ptr [edi+0x14]
		EndOfFuncShowTimeCT:
		//
        push 0
		push 0
		push 0x8D
		push 0x8D
		mov eax,[esp+0x2C]
		add eax,0x70
		push eax
		call GetImageClass
        // Hien thi Shop
		mov eax,[esp+0x1C]
		lea eax,[eax+0x20]
		push eax
		call LoopLoadShopCT
		// Hien thi VP Chon
		xor ecx,ecx
		mov eax,[esp+0x1C]
		mov cl,[eax+0x48]
		test cl,cl
		jz Default
		add cl,9
        push ecx
		push 11
		push 200
		push 747
		mov eax,[esp+0x2C]
		add eax,0x70
		push eax
		call GetImageClass
		Default:
		popad
		mov eax,[0x1107258+0x47C]
		cmp eax,18
        jz KhongChoMoForm
		mov eax, [esi+0x10]
		test eax, eax
		push 0x00521609
		ret

		KhongChoMoForm:
		push 0x00521776
        ret

		LoopLoadShopCT:
        sub esp,0x4
		xor ecx,ecx
		mov [esp],ecx
		LoopbackloadShopChienTruong:
		mov ecx,[esp]
		mov eax,[esp+0x8]
		imul ecx,0x2
		xor edx,edx
		mov dx,[eax+ecx]
		test edx,edx
		jz DaHetDuLieuChienTruong
		mov ecx,[esp]
		push ecx
		push 10
		mov eax,[esp+0x10]
		add eax,80
		mov ecx,[esp+0x8]
		cmp ecx,3
		ja ShowUp
		mov ecx,[esp+0x8]
		imul ecx,0x3C
		add ecx,749
		mov edx,361
		jmp ProcessHienThiItemAgain

		ShowUp:
		cmp ecx,7
		ja ShowUp1
		mov ecx,[esp+0x8]
		imul ecx,0x3C
		add ecx,509
		mov edx,409
		jmp ProcessHienThiItemAgain

		ShowUp1:
		cmp ecx,11
		ja ShowUp2
		mov ecx,[esp+0x8]
		imul ecx,0x3C
		add ecx,269
		mov edx,457
		jmp ProcessHienThiItemAgain

		ShowUp2:
		cmp ecx,15
		ja ShowUp3
		mov ecx,[esp+0x8]
		imul ecx,0x3C
		add ecx,29
		mov edx,505
		jmp ProcessHienThiItemAgain

		ShowUp3:
        mov ecx,[esp+0x8]
		imul ecx,0x3C
		sub ecx,211
		mov edx,553

		ProcessHienThiItemAgain:
		push edx
		push ecx
		push eax
		call GetImageClass
		mov ecx,[esp]
		add ecx,1
		mov [esp],ecx
		cmp ecx,20
		jl LoopbackloadShopChienTruong
		add esp,0x4
		ret 0x4

		DaHetDuLieuChienTruong:
		add esp,0x4
		ret 0x4



		GetImageClass:
		mov eax,[esp+0x10]
		cmp eax,10
		jz HienThiListQuaTangCT
        cmp eax,11
		jz HienThiVPChon
		push 0
		push 82
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,[esp+0x4]
		mov  DWORD PTR SS : [ecx + 0x70] , eax
		mov  DWORD PTR SS : [ecx + 0x9C] , 2
		mov  DWORD PTR SS : [ecx + 0xA0] , 866
		mov  DWORD PTR SS : [ecx + 0x98] , 30
		mov  DWORD PTR SS : [ecx + 0xA4] , 529
		jmp ProcessHienThiImage

		HienThiVPChon:
		mov eax,[esp+0x14]
        push eax
		push 82
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,[esp+0x4]
		mov  DWORD PTR SS : [ecx + 0x70] , eax
		mov  DWORD PTR SS : [ecx + 0x9C] , 0
		mov  DWORD PTR SS : [ecx + 0xA0] , 176
		mov  DWORD PTR SS : [ecx + 0x98] , 0
		mov  DWORD PTR SS : [ecx + 0xA4] , 43
		jmp ProcessHienThiImage

		HienThiListQuaTangCT:
		push 102
	  	push 75
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,[esp+0x14]
		push ebx
		xor edx,edx
		cmp ecx,8
		jae HienThiHang2
		add edx,0
		jmp ProcessHienThiShopLD

		HienThiHang2:
		cmp ecx,16
		jae HienThiHang3
		sub ecx,8
		add edx,1
		jmp ProcessHienThiShopLD

		HienThiHang3:
		add edx,2
		sub ecx,16
		ProcessHienThiShopLD:
		imul ecx,32
		mov ebx,[esp+0x8]
		mov  DWORD PTR SS : [ebx + 0x98] , ecx
		add ecx,32
		mov  DWORD PTR SS : [ebx + 0xA0] , ecx
		imul edx,32
		mov  DWORD PTR SS : [ebx + 0x9C] , edx
		add edx,32
		mov  DWORD PTR SS : [ebx + 0xA4] , edx
		mov  DWORD PTR SS : [ebx + 0x70] , eax
		pop ebx
		jmp ProcessHienThiImage

		ProcessHienThiImage:
		push 0xFF7F0000
		push 5188
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,[esp+0x14]
		mov edx,[esp+0x10]
		push ecx
		push edx
		mov ecx, [esp+0x14]
		mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
		call eax
		mov ecx,[esp+0x4]
		push 0x1732CC8
		mov eax, 0x7B9850
		call eax //Draw1
		ret 0x14

        AddOptionImage:
		sub esp,0x4
		xor ecx,ecx
		mov [esp],ecx
		BackGetOptionImage:
		mov ecx,[esp]
		mov eax, 0x010CC088
		mov edx,[eax+ecx]
		mov eax,[esp+0x8]
		mov [eax+ecx],edx
		add ecx,4
		mov [esp],ecx
		cmp ecx,0xB8
		jl BackGetOptionImage
		add esp,0x4
	    ret 0x4
	}
};
__declspec(naked)void DrawNutMoFormCT()  //005961CD
{
	__asm
	{
		nop
		nop
		nop
		nop
		nop
		mov edx,[esp+0x000002AC]
        push eax
		mov ecx,[esi+0x00000220]
		push edx
		mov eax,0x007E04E0
		call eax
		mov eax,[esp]
		mov ecx,[eax+0x70]
		test ecx,ecx
		jnz DaCoThongTinHinhAnhNV
		add eax,0x70
		push eax
		call AddOptionImage
		DaCoThongTinHinhAnhNV:
		mov eax,[esi+0x2D8]
        mov edx,[eax+0x18]
		add edx,7
		push edx
		mov edx,[eax+0x14]
		add edx,112
		push edx
		mov eax,[esp+0x8]
		add eax,0x70
        push eax
		call GetImageClass
		Default:
		pop eax
		push 0x005961E0
        ret

        GetImageClass:
		push 6
		push 82
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,[esp+0x4]
		mov  DWORD PTR SS : [ecx + 0x70] , eax
		mov  DWORD PTR SS : [ecx + 0x9C] , 36
		mov  DWORD PTR SS : [ecx + 0xA0] , 71
		mov  DWORD PTR SS : [ecx + 0x98] , 36
		mov  DWORD PTR SS : [ecx + 0xA4] , 71
		push 0xFF7F0000
		push 5188
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,[esp+0x14]
		mov edx,[esp+0x10]
		push ecx
		push edx
		mov ecx, [esp+0x14]
		mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
		call eax
		mov ecx,[esp+0x4]
		push 0x1732CC8
		mov eax, 0x7B9850
		call eax //Draw1
		ret 0xC

        AddOptionImage:
		sub esp,0x4
		xor ecx,ecx
		mov [esp],ecx
		BackGetOptionImage:
		mov ecx,[esp]
		mov eax, 0x010CC088
		mov edx,[eax+ecx]
		mov eax,[esp+0x8]
		mov [eax+ecx],edx
		add ecx,4
		mov [esp],ecx
		cmp ecx,0xB8
		jl BackGetOptionImage
		add esp,0x4
	    ret 0x4
	}
};
__declspec(naked)void GetPackageChienTruong()  //006ADD7F
{
	__asm
	{
		nop
		nop
		nop
		nop
		nop
		push eax
		xor eax,eax
		mov al,[ebp+0x3]
		cmp al,6
		ja KiemTraPackageCT
        pop eax
        xor eax,eax
		mov al,[ebp+0x3]
		push 0x006ADD84
		ret

		KiemTraPackageCT:
		cmp al,7
		jz ThongBaoGiaNhap
        cmp al,8
		jz CapNhatDiemChienTruongHienTai
        cmp al,9
		jz ThongBaoNhanQuaCT
        pop eax
		push 0x006B21F7
		ret


		ThongBaoNhanQuaCT:
        xor ecx,ecx
		mov cl,[ebp+0x4]
		cmp cl,1
		jz KhongAddDuoc
		cmp cl,2
		jz NhanQuaThanhCong
		cmp cl,3
		jz KhongDuDiem
        pop eax
		push 0x006B21F7
		ret

		KhongDuDiem:
        push 0xFFFF2323
		push 0x1
		push 0xC
		push 28
		push 82
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x0155EE60
		mov eax,0x006A9800
		call eax
		pop eax
		push 0x006B21F7
		ret

		NhanQuaThanhCong:
        push 0xFFFF2323
		push 0x1
		push 0xC
		push 30
		push 82
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x0155EE60
		mov eax,0x006A9800
		call eax
		pop eax
        xor ecx,ecx
		mov cx,[ebp+0x5]
		mov [eax+0x4],ecx
		push 0x006B21F7
		ret

		KhongAddDuoc:
        push 0xFFFF2323
		push 0x1
		push 0xC
		push 29
		push 82
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x0155EE60
		mov eax,0x006A9800
		call eax
		pop eax
		push 0x006B21F7
		ret



		CapNhatDiemChienTruongHienTai:
        xor ecx,ecx
		mov cx,[ebp+0x4]
		mov eax,[esp]
		mov [eax+0x6C],ecx
        pop eax
		push 0x006B21F7
		ret


		ThongBaoGiaNhap:
        xor eax,eax
		mov al,[ebp+0x4]
		cmp al,0
		jz ChienTruongChuaBatDau
        cmp al,1
		jz ChienTruongChuaBatDau
        cmp al,2
		jz ChuaDuLevelThamGia
		cmp al,3
		jz PheThienDaoDongHon
		cmp al,4
		jz PheThienDaoDongHon
        cmp al,5
		jz KhacPhe
		cmp al,6
		jz CapNhatThongTinUser
        cmp al,7
		jz CapNhatThongTinZone
		pop eax
		push 0x006B21F7
		ret


        CapNhatThongTinZone:
		mov eax,[esp]
        xor ecx,ecx
		mov cl,[ebp+0x5]
		mov [eax+0x9],cl
		mov cx,[ebp+0x6]
		mov [eax+0xA],cl
		mov cx,[ebp+0x8]
		mov [eax+0xB],cl
		mov ecx,[ebp+0xA]
		mov [eax+0x18],ecx
		mov ecx,DWORD PTR SS:[0x01733B04]
		mov [eax+0x1C],ecx
        xor ecx,ecx
		mov cx,[ebp+0xE]
		mov [eax+0xC],cx
        xor edx,edx
        mov dx,[ebp+0x10]
		mov [eax+0xE],dx
		add ecx,edx
		mov [eax+0x14],cx
		pop eax
        push 0x006B21F7
		ret


		CapNhatThongTinUser:
		mov eax,[esp]
        xor ecx,ecx
		mov cl,[ebp+0x5]
		mov [eax+0x9],cl
		mov cx,[ebp+0x6]
		mov [eax+0xA],cl
		mov cx,[ebp+0x8]
		mov [eax+0xB],cl
		mov ecx,[ebp+0xA]
		mov [eax+0x18],ecx
		mov ecx,DWORD PTR SS:[0x01733B04]
		mov [eax+0x1C],ecx
        xor ecx,ecx
		mov cx,[ebp+0xE]
		mov [eax+0xC],cx
        xor edx,edx
        mov dx,[ebp+0x10]
		mov [eax+0xE],dx
		add ecx,edx
		mov [eax+0x14],cx
		xor ecx,ecx
		mov cx,[ebp+0x12]
		mov [eax+0x4],ecx
		pop eax
        push 0x006B21F7
		ret

		KhacPhe:
		push 0xFFFF2323
		push 0x1
		push 0xC
		push 18
		push 82
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x0155EE60
		mov eax,0x006A9800
		call eax
		pop eax
		push 0x006B21F7
		ret

		PheThienDaoDongHon:
        push 0xFFFF2323
		push 0x1
		push 0xC
		push 16
		push 82
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x0155EE60
		mov eax,0x006A9800
		call eax
		pop eax
		push 0x006B21F7
		ret

		ChienTruongChuaBatDau:
        push 0xFFFF2323
		push 0x1
		push 0xC
		push 19
		push 82
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x0155EE60
		mov eax,0x006A9800
		call eax
		pop eax
		push 0x006B21F7
		ret

        ChuaDuLevelThamGia:
        push 0xFFFF2323
		push 0x1
		push 0xC
		push 17
		push 82
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x0155EE60
		mov eax,0x006A9800
		call eax
		pop eax
		push 0x006B21F7
        ret
	}
}
__declspec(naked)void PozMoFormChienTruong()  //005961E4
{
__asm
	{
       nop
	   nop
	   nop
	   nop
	   nop
       pushad
	   mov ecx,DWORD PTR SS:[0x01733AD0]
	   mov eax,0x007D7FD0
	   call eax
       mov ecx,[0x1107258+0x47C]
	   cmp ecx,18
       jz HienThiFormCTC
	   xor ecx,ecx
	   mov cl,[eax+0xC]
	   test ecx,ecx
	   jz Default
	   mov ecx,[esp+0x1C]
	   xor edx,edx
	   mov cl,[ecx+0x1]
	   test cl,cl
       jnz LoadDefault
	   mov ecx,[esi+0x2D8]
	   mov edx,[ecx+0x14]
	   add edx,41
	   mov ecx,[eax+0x10]
	   cmp ecx,edx
	   jl Default
	   add edx,30
	   cmp ecx,edx
	   ja Default
       mov ecx,[esi+0x2D8]
	   mov edx,[ecx+0x18]
	   mov ecx,[eax+0x18]
	   sub edx,10
	   cmp ecx,edx
	   jl Default
	   add edx,30
       cmp ecx,edx
	   ja Default
	   mov eax,[esp+0x1C]
	   xor ecx,ecx
	   mov cl,[eax]
	   test cl,cl
       jnz LoadDefault
       mov byte ptr [eax+0x1],1
	   mov byte ptr [eax],1
       mov dword ptr [eax+0x4C],0x0
	   mov dword ptr [eax+0x50],0x0
	   mov dword ptr [eax+0x4C],0xD97C0004
	   xor ecx,ecx
	   lea eax,[eax+0x4C]
	   push eax
	   mov ecx,0x155EE60
	   mov eax,0x006B2F60
	   call eax
	   jmp LoadDefault

	   HienThiFormCTC:
       mov eax,[esp+0x1C]
	   mov ecx,[eax+0x70]
	   test ecx,ecx
	   jnz DaCoThongTinHinhAnhNV
	   add eax,0x70
	   push eax
	   call AddOptionImage
	   DaCoThongTinHinhAnhNV:
       mov ecx,DWORD PTR SS:[0x01733AC4]
	   push 0xFF00FF00
	   mov edx,[ecx]
	   call dword ptr [edx+0xC]
       mov eax,[esp+0x1C]
	   mov ecx,[eax+0x6C]
	   push ecx
	   push 50
	   push 82
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   push 0x2
	   push 0x3F800000
	   mov eax,DWORD PTR [0x01733AC4]
	   mov edi,[eax]
	   mov edx,45
	   push edx
       mov eax,[esi+0x14]
	   sub eax,85
	   push eax
	   mov eax,DWORD PTR [0x01733AC4]
	   push eax
	   mov ecx,DWORD PTR [0x01733AC4]
	   call dword ptr [edi+0x30]
	   add esp,0x1C
	   //
       push 0
	   mov edx,39
	   push edx
	   mov edx,[esi+0x14]
	   sub edx,112
	   push edx
	   mov eax,[esp+0x28]
	   add eax,0x70
	   push eax
	   call GetImageClass
	   /*mov eax,[esp+0x1C]
	   mov ecx,[eax+0x18]
	   mov eax,[eax+0x1C]
	   add ecx,eax
	   mov eax,DWORD PTR SS:[0x01733B04]
	   cmp ecx,eax
	   jb Default
	   sub ecx,eax
	   mov eax, 0x10624DD3
	   mul ecx
	   mov ecx, edx
	   shr ecx, 0x6
	   push ebp
	   mov eax, ecx
	   xor edx, edx
	   mov ebp, 0x3C
	   div ebp
	   mov eax, 0x88888889
	   push edx
	   mul ecx
	   shr edx, 0x5
	   push edx
	   push 0x12D1
	   push 0x19
	   mov ecx,0x1733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov eax,[esp+0x2C]
	   lea eax,[eax+0x50]
	   push 16
	   push eax
	   mov eax,0x0085C538
	   call dword ptr [eax]
	   add esp,0x18
	   //
	   mov eax,[esp+0x1C]
	   lea ecx,[eax+0x50]
	   push 0x2
	   push 0x3F800000
	   push ecx
	   mov eax,DWORD PTR [0x01733AC4]
	   mov edi,[eax]
	   mov edx,533
	   push edx
	   mov eax,[esi+0x14]
       sub eax,0x80
	   push eax
	   mov ecx,DWORD PTR [0x01733AC4]
	   call dword ptr [edi+0x14] */
	   //
	   mov eax,[esp+0x1C]
	   xor ecx,ecx
	   mov cl,[eax+0x9]
	   cmp cl,2
       jnz Default
	   push 1
	   mov edx,89
	   push edx
	   mov edx,[esi+0x14]
	   sub edx,104
	   push edx
	   mov eax,[esp+0x28]
	   add eax,0x70
	   push eax
	   call GetImageClass
	   //
       mov ecx,DWORD PTR SS:[0x01733AD0]
	   mov eax,0x007D7FD0
	   call eax
       xor ecx,ecx
	   mov cl,[eax+0xC]
	   test ecx,ecx
	   jz Default
	   mov ecx,[esp+0x1C]
	   xor edx,edx
	   mov cl,[ecx+0x1]
	   test cl,cl
	   jnz LoadDefault
       mov ecx,[esp+0x1C]
	   xor edx,edx
	   mov cl,[ecx+0x9]
	   cmp cl,2
	   jnz Default
	   mov ecx,[esi+0x14]
	   sub edx,176
	   mov ecx,[eax+0x10]
	   cmp ecx,edx
	   jl Default
	   add edx,136
	   cmp ecx,edx
	   ja Default
	   mov ecx,[eax+0x18]
	   cmp ecx,73
	   jl Default
	   cmp ecx,102
	   ja Default
	   mov eax,[esp+0x1C]
	   mov byte ptr [eax+0x1],1
	   mov byte ptr [eax+0x9],0
       mov dword ptr [eax+0x4C],0x0
	   mov dword ptr [eax+0x50],0x0
	   mov dword ptr [eax+0x4C],0xDA7C0004
	   xor ecx,ecx
	   lea eax,[eax+0x4C]
	   push eax
	   mov ecx,0x155EE60
	   mov eax,0x006B2F60
	   call eax
	   jmp LoadDefault
	   //
	   Default:
	   popad
	   mov byte ptr [eax+0x1],0
	   pop edi
	   pop esi
	   pop ebp
       pop ebx
       add esp,0x00000298
	   push 0x005961EA
	   ret


	   LoadDefault:
	   popad
       pop edi
	   pop esi
	   pop ebp
       pop ebx
       add esp,0x00000298
	   push 0x005961EA
       ret

	   GetImageClass:
	   mov eax,[esp+0x10]
	   cmp eax,1
       jz HienThiNutNhanQua
	   push 7
	   push 82
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
	   mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 138
	   mov  DWORD PTR SS : [ecx + 0xA0] , 269
	   mov  DWORD PTR SS : [ecx + 0x98] , 113
	   mov  DWORD PTR SS : [ecx + 0xA4] , 185
	   jmp ProcessHienTHiNhanQua

	   HienThiNutNhanQua:
	   push 8
	   push 82
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
	   mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 220
	   mov  DWORD PTR SS : [ecx + 0xA0] , 255
	   mov  DWORD PTR SS : [ecx + 0x98] , 115
	   mov  DWORD PTR SS : [ecx + 0xA4] , 256

       ProcessHienTHiNhanQua:
	   push 0xFF7F0000
	   push 5188
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,[esp+0x14]
	   mov edx,[esp+0x10]
	   push ecx
	   push edx
	   mov ecx, [esp+0x14]
	   mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
	   call eax
	   mov ecx,[esp+0x4]
	   push 0x1732CC8
	   mov eax, 0x7B9850
	   call eax //Draw1
	   ret 0x10

       AddOptionImage:
	   sub esp,0x4
	   xor ecx,ecx
	   mov [esp],ecx
	   BackGetOptionImage:
	   mov ecx,[esp]
	   mov eax, 0x010CC088
	   mov edx,[eax+ecx]
	   mov eax,[esp+0x8]
	   mov [eax+ecx],edx
	   add ecx,4
	   mov [esp],ecx
	   cmp ecx,0xB8
	   jl BackGetOptionImage
	   add esp,0x4
	   ret 0x4
	}
}
__declspec(naked)void PozChienTruongForm()  //004E0538
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  pushad
	  xor ecx,ecx
	  mov cl,[eax]
	  test cl,cl
      jz Default
	  mov ecx,DWORD PTR SS:[0x01733AD0]
	  mov eax,0x007D7FD0
	  call eax
	  xor ecx,ecx
	  mov cl,[eax+0xC]
	  test ecx,ecx
      jz Default
	  //
	  mov ecx,[esp+0x1C]
	  xor edx,edx
	  mov dl,[ecx+0x1]
	  test dl,dl
	  jnz WaitforLoad
	  mov ecx,[eax+0x10]
	  cmp ecx,91
	  jl Default
	  cmp ecx,148
	  ja KiemTraTinhNang2
	  mov ecx,[eax+0x18]
	  cmp ecx,491
	  jl Default
	  cmp ecx,507
	  ja Default
      mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x1],1
      mov edx,[0x1107258+0x47C]
	  cmp edx,17
      jnz YeuCauMapHP
	  mov dword ptr [eax+0x4C],0x0
	  mov dword ptr [eax+0x50],0x0
	  mov dword ptr [eax+0x4C],0xD77C0004
	  xor ecx,ecx
      lea eax,[eax+0x4C]
	  push eax
	  mov ecx,0x155EE60
	  mov eax,0x006B2F60
	  call eax
	  mov eax,[esp+0x1C]
      mov byte ptr [eax],0
	  jmp WaitforLoad

      KiemTraTinhNang2:
	  mov ecx,[eax+0x10]
	  cmp ecx,526
	  jl Default
	  cmp ecx,583
	  ja KiemTraChonVP
	  mov ecx,[eax+0x18]
	  cmp ecx,491
	  jl Default
	  cmp ecx,507
	  ja Default
      mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x1],1
	  mov edx,[0x1107258+0x47C]
	  cmp edx,17
      jnz YeuCauMapHP
	  mov dword ptr [eax+0x4C],0x0
	  mov dword ptr [eax+0x50],0x0
	  mov dword ptr [eax+0x4C],0xD87C0004
	  xor ecx,ecx
      lea eax,[eax+0x4C]
	  push eax
	  mov ecx,0x155EE60
	  mov eax,0x006B2F60
	  call eax
      mov eax,[esp+0x1C]
      mov byte ptr [eax],0
	  jmp WaitforLoad

	  KiemTraChonVP:
	  mov ecx,[eax+0x10]
	  cmp ecx,678
	  jl Default
	  cmp ecx,704
	  ja KiemTraChonCot2
	  mov ecx,[eax+0x18]
	  cmp ecx,344
	  jl Default
	  cmp ecx,370
	  ja KiemTraChonVP1
      mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x48],1
      mov byte ptr [eax+0x1],1
	  jmp WaitforLoad

	  KiemTraChonVP1:
      mov ecx,[eax+0x18]
	  cmp ecx,393
	  jl Default
	  cmp ecx,419
	  ja KiemTraChonVP2
      mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x48],5
      mov byte ptr [eax+0x1],1
	  jmp WaitforLoad

	  KiemTraChonVP2:
      mov ecx,[eax+0x18]
	  cmp ecx,442
	  jl Default
	  cmp ecx,467
	  ja KiemTraChonVP3
      mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x48],9
      mov byte ptr [eax+0x1],1
	  jmp WaitforLoad

	  KiemTraChonVP3:
      mov ecx,[eax+0x18]
	  cmp ecx,488
	  jl Default
	  cmp ecx,514
	  ja KiemTraChonVP4
      mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x48],13
      mov byte ptr [eax+0x1],1
	  jmp WaitforLoad

	  KiemTraChonVP4:
      mov ecx,[eax+0x18]
	  cmp ecx,537
	  jl Default
	  cmp ecx,563
	  ja KiemTraDoiQua
      mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x48],17
      mov byte ptr [eax+0x1],1
	  jmp WaitforLoad


	  KiemTraChonCot2:
	  mov ecx,[eax+0x10]
	  cmp ecx,735
	  jl Default
	  cmp ecx,765
	  ja KiemTraChonCot3
	  mov ecx,[eax+0x18]
	  cmp ecx,344
	  jl Default
	  cmp ecx,370
	  ja KiemTraChonVP11
      mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x48],2
      mov byte ptr [eax+0x1],1
	  jmp WaitforLoad

	  KiemTraChonVP11:
      mov ecx,[eax+0x18]
	  cmp ecx,393
	  jl Default
	  cmp ecx,419
	  ja KiemTraChonVP21
      mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x48],6
      mov byte ptr [eax+0x1],1
	  jmp WaitforLoad

	  KiemTraChonVP21:
      mov ecx,[eax+0x18]
	  cmp ecx,442
	  jl Default
	  cmp ecx,467
	  ja KiemTraChonVP31
      mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x48],10
      mov byte ptr [eax+0x1],1
	  jmp WaitforLoad

	  KiemTraChonVP31:
      mov ecx,[eax+0x18]
	  cmp ecx,488
	  jl Default
	  cmp ecx,514
	  ja KiemTraChonVP41
      mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x48],14
      mov byte ptr [eax+0x1],1
	  jmp WaitforLoad

	  KiemTraChonVP41:
      mov ecx,[eax+0x18]
	  cmp ecx,537
	  jl Default
	  cmp ecx,563
	  ja KiemTraDoiQua
      mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x48],18
      mov byte ptr [eax+0x1],1
	  jmp WaitforLoad

      KiemTraChonCot3:
	  mov ecx,[eax+0x10]
	  cmp ecx,798
	  jl Default
	  cmp ecx,824
	  ja KiemTraChonCot4
	  mov ecx,[eax+0x18]
	  cmp ecx,344
	  jl Default
	  cmp ecx,370
	  ja KiemTraChonVP111
      mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x48],3
      mov byte ptr [eax+0x1],1
	  jmp WaitforLoad

	  KiemTraChonVP111:
      mov ecx,[eax+0x18]
	  cmp ecx,393
	  jl Default
	  cmp ecx,419
	  ja KiemTraChonVP211
      mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x48],7
      mov byte ptr [eax+0x1],1
	  jmp WaitforLoad

	  KiemTraChonVP211:
      mov ecx,[eax+0x18]
	  cmp ecx,442
	  jl Default
	  cmp ecx,467
	  ja KiemTraChonVP311
      mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x48],11
      mov byte ptr [eax+0x1],1
	  jmp WaitforLoad

	  KiemTraChonVP311:
      mov ecx,[eax+0x18]
	  cmp ecx,488
	  jl Default
	  cmp ecx,514
	  ja KiemTraChonVP411
      mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x48],15
      mov byte ptr [eax+0x1],1
	  jmp WaitforLoad

	  KiemTraChonVP411:
      mov ecx,[eax+0x18]
	  cmp ecx,537
	  jl Default
	  cmp ecx,563
	  ja KiemTraDoiQua
      mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x48],19
      mov byte ptr [eax+0x1],1
	  jmp WaitforLoad

      KiemTraChonCot4:
	  mov ecx,[eax+0x10]
	  cmp ecx,858
	  jl KiemTraDoiQua
	  cmp ecx,885
	  ja KiemTraDoiQua
	  mov ecx,[eax+0x18]
	  cmp ecx,344
	  jl Default
	  cmp ecx,370
	  ja KiemTraChonVP1111
      mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x48],4
      mov byte ptr [eax+0x1],1
	  jmp WaitforLoad

	  KiemTraChonVP1111:
      mov ecx,[eax+0x18]
	  cmp ecx,393
	  jl Default
	  cmp ecx,419
	  ja KiemTraChonVP2111
      mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x48],8
      mov byte ptr [eax+0x1],1
	  jmp WaitforLoad

	  KiemTraChonVP2111:
      mov ecx,[eax+0x18]
	  cmp ecx,442
	  jl Default
	  cmp ecx,467
	  ja KiemTraChonVP3111
      mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x48],12
      mov byte ptr [eax+0x1],1
	  jmp WaitforLoad

	  KiemTraChonVP3111:
      mov ecx,[eax+0x18]
	  cmp ecx,488
	  jl Default
	  cmp ecx,514
	  ja KiemTraChonVP4111
	  mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x48],16
      mov byte ptr [eax+0x1],1
	  jmp WaitforLoad

	  KiemTraChonVP4111:
      mov ecx,[eax+0x18]
	  cmp ecx,537
	  jl Default
	  cmp ecx,563
	  ja KiemTraDoiQua
      mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x48],20
      mov byte ptr [eax+0x1],1
	  jmp WaitforLoad

	  KiemTraDoiQua:
      mov ecx,[eax+0x10]
	  cmp ecx,803
	  jl Default
	  cmp ecx,885
	  ja Default
	  mov ecx,[eax+0x18]
	  cmp ecx,580
	  jl Default
	  cmp ecx,613
	  ja KiemTraDongForm
	  mov eax,[esp+0x1C]
	  mov byte ptr [eax+0x1],1
	  xor ecx,ecx
	  mov cl,[eax+0x48]
	  imul ecx,0x2
	  xor edx,edx
	  mov dx,[eax+0x20+ecx]
	  mov ecx,[eax+0x4]
	  cmp ecx,edx
	  jl WaitforLoad
      xor ecx,ecx
	  mov cl,[eax+0x48]
	  mov dword ptr [eax+0x4C],0x0
	  mov dword ptr [eax+0x50],0x0
	  mov dword ptr [eax+0x4C],0xDB7C0005
      mov [eax+0x50],cl
	  xor ecx,ecx
      lea eax,[eax+0x4C]
	  push eax
	  mov ecx,0x155EE60
	  mov eax,0x006B2F60
	  call eax
      jmp WaitforLoad

	  KiemTraDongForm:
      mov ecx,[eax+0x10]
	  cmp ecx,847
	  jl Default
	  cmp ecx,900
	  ja Default
	  mov ecx,[eax+0x18]
	  cmp ecx,629
	  jl Default
	  cmp ecx,644
	  ja Default
	  mov eax,[esp+0x1C]
	  mov byte ptr [eax],0
      mov byte ptr [eax+0x1],1
      jmp WaitforLoad


	  Default:
	  popad
	  mov byte ptr [eax+0x1],0
	  pop edi
	  pop esi
	  pop ebx
      add esp,0x8
	  push 0x004E053E
	  ret

	  YeuCauMapHP:
      push 0xFFFF2323
	  push 0x1
	  push 0xC
	  push 15
	  push 82
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x0155EE60
	  mov eax,0x006A9800
	  call eax
	  WaitforLoad:
	  popad
	  pop edi
	  pop esi
	  pop ebx
      add esp,0x8
	  push 0x004E053E
	  ret

	}
};
__declspec(naked)void DisableMoveFormCT()  //00622FAE
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
	   pushad
	   xor ecx,ecx
	   mov cl,[eax]
	   test cl,cl
	   jz KiemTraFormDiemCT
       mov ecx,DWORD PTR SS:[0x01733AD0]
	   mov eax,0x007D7FD0
	   call eax
	   mov ecx,[eax+0x10]
	   cmp ecx,67
	   jl Default
	   add edx,882
	   cmp ecx,edx
	   ja Default
	   mov ecx,[eax+0x18]
	   cmp ecx,123
	   jl Default
	   cmp ecx,650
	   ja Default
	   popad
       mov eax,00000000
	   push 0x0062307C
	   ret

	   KiemTraFormDiemCT:
	   mov ecx,[0x1107258+0x47C]
	   cmp ecx,18
       jnz Default
	   xor ecx,ecx
	   mov eax,[esp+0x1C]
	   mov cl,[eax+0x9]
	   cmp cl,2
	   jnz Default
	   push 10004
	   mov ecx,0x017323A8
	   mov eax,0x007D8550
	   call eax
	   test eax,eax
	   jz Default
	   xor ecx,ecx
	   mov cl,[eax+0x10]
	   test ecx,ecx
	   jz Default
       push eax
       mov ecx,DWORD PTR SS:[0x01733AD0]
	   mov eax,0x007D7FD0
	   call eax
       pop esi
       mov ecx,[esi+0x14]
	   sub edx,176
	   mov ecx,[eax+0x10]
	   cmp ecx,edx
	   jl Default
	   add edx,136
	   cmp ecx,edx
	   ja Default
	   mov ecx,[eax+0x18]
	   cmp ecx,73
	   jl Default
	   cmp ecx,102
	   ja Default
	   popad
       mov eax,00000000
	   push 0x0062307C
	   ret

	   Default:
	   popad
	   mov eax,[esi+0x00008360]
	   push 0x00622FB4
       ret
	}
}
__declspec(naked)void GetPozFormNangCapTB()  //00524D9E
{
__asm
	{
       nop
	   nop
	   nop
	   nop
	   nop
	   pushad
	   mov cl,[eax]
	   test cl,cl
       jz Default
       mov ecx,DWORD PTR SS:[0x01733AD0]
	   mov eax,0x007D7FD0
	   call eax
	   mov cl,[eax+0xC]
	   cmp cl,1
       jnz HoverFormNangCapTB
	   mov edx,[esp+0x1C]
	   mov cl,[edx+0x1]
	   test cl,cl
	   jnz Default2
	   mov ecx,[eax+0x10]
       mov edx,[eax+0x3C]
	   sub edx,536
	   cmp ecx,edx
	   jl Default2
       add edx,335
       cmp ecx,edx
	   ja Default2
       mov ecx,[eax+0x18]
	   cmp ecx,188
	   jl KiemTraNutDong
       cmp ecx,210
	   ja KiemTraDong2
	   mov eax,[esp+0x1C]
	   mov cl,[eax+0x4]
	   test cl,cl
       jz Default2
	   mov byte ptr [eax+0x1],1
	   mov byte ptr [eax+0x8],1
	   jmp Default2

	   KiemTraDong2:
	   mov ecx,[eax+0x18]
	   cmp ecx,226
	   jl Default2
       cmp ecx,248
	   ja KiemTraDong3
	   mov eax,[esp+0x1C]
       mov cl,[eax+0x4]
	   test cl,cl
	   jz Default2
	   mov byte ptr [eax+0x1],1
	   mov byte ptr [eax+0x8],2
	   jmp Default2

	   KiemTraDong3:
	   mov ecx,[eax+0x18]
	   cmp ecx,264
	   jl Default2
       cmp ecx,286
	   ja KiemTraDong4
	   mov eax,[esp+0x1C]
       mov cl,[eax+0x4]
	   test cl,cl
	   jz Default2
	   mov byte ptr [eax+0x1],1
	   mov byte ptr [eax+0x8],3
	   jmp Default2

	   KiemTraDong4:
	   mov ecx,[eax+0x18]
	   cmp ecx,302
	   jl Default2
       cmp ecx,325
	   ja KiemTraDong5
	   mov eax,[esp+0x1C]
       mov cl,[eax+0x4]
	   test cl,cl
       jz Default2
	   mov byte ptr [eax+0x1],1
	   mov byte ptr [eax+0x8],4
	   jmp Default2

	   KiemTraDong5:
	   mov ecx,[eax+0x18]
	   cmp ecx,340
	   jl Default2
       cmp ecx,362
	   ja KiemTraNutNangCap
	   mov eax,[esp+0x1C]
       mov cl,[eax+0x4]
	   test cl,cl
	   jz Default2
	   mov byte ptr [eax+0x1],1
	   mov byte ptr [eax+0x8],5
	   jmp Default2

	   KiemTraNutNangCap:
	   mov edx,[eax+0x3C]
	   sub edx,334
       mov ecx,[eax+0x10]
	   cmp ecx,edx
	   jl Default2
       add edx,58
       cmp ecx,edx
	   ja KiemTraNutHuyBo
       mov eax,[esp+0x1C]
       mov byte ptr [eax+0x1],1
	   mov dword ptr [eax+0x50],0x0
	   mov dword ptr [eax+0x54],0x0
	   mov dword ptr [eax+0x50],0x9A7C0008
	   mov cl,[eax+0x4]
	   mov [eax+0x54],cl
	   mov cl,[eax+0x5]
	   mov [eax+0x55],cl
	   mov cl,[eax+0x6]
	   mov [eax+0x56],cl
	   mov cl,[eax+0x8]
	   mov [eax+0x57],cl
	   lea eax,[eax+0x50]
	   push eax
	   mov ecx,0x155EE60
	   mov eax,0x006B2F60
	   call eax
       jmp Default2

	   KiemTraNutHuyBo:
       mov edx,[eax+0x3C]
	   sub edx,261
       mov ecx,[eax+0x10]
	   cmp ecx,edx
	   jl Default2
       add edx,58
       cmp ecx,edx
	   ja Default2
	   mov eax,[esp+0x1C]
	   mov byte ptr [eax+0x1],1
	   mov dword ptr [eax+0x4],0
	   mov dword ptr [eax+0x8],0
	   mov byte ptr [eax+0x9],0
	   jmp Default2

	   KiemTraNutDong:
       mov edx,[eax+0x3C]
	   sub edx,213
       mov ecx,[eax+0x10]
	   cmp ecx,edx
	   jl Default2
       add edx,10
	   cmp ecx,edx
	   ja Default2
       mov ecx,[eax+0x18]
	   cmp ecx,78
	   jl Default2
	   cmp ecx,88
       ja Default2
	   mov eax,[esp+0x1C]
	   mov byte ptr [eax],0
	   mov byte ptr [eax+0x1],1
	   mov dword ptr [eax+0x4],0
	   mov dword ptr [eax+0x8],0
	   mov byte ptr [eax+0x9],0
	   jmp Default2

	   HoverFormNangCapTB:
	   mov ecx,[eax+0x18]
	   cmp ecx,150
	   jl ChuyenDoiSang
       cmp ecx,177
	   ja ChuyenDoiSang
	   mov edx,[eax+0x3C]
	   sub edx,530
       mov ecx,[eax+0x10]
	   cmp ecx,edx
	   jl ChuyenDoiSang
       add edx,27
       cmp ecx,edx
	   ja CheckHover2
	   mov eax,[esp+0x1C]
	   mov byte ptr [eax+0x9],1
	   jmp Default2

	   CheckHover2:
       mov edx,[eax+0x3C]
	   sub edx,347
       mov ecx,[eax+0x10]
	   cmp ecx,edx
	   jl ChuyenDoiSang
       add edx,27
       cmp ecx,edx
	   ja ChuyenDoiSang
       mov eax,[esp+0x1C]
	   mov byte ptr [eax+0x9],2
	   jmp Default2

	   Default:
	   popad
	   mov byte ptr [eax+9],0
	   pop esi
	   add esp,0x8
	   ret 0x4

	   Default2:
	   popad
	   pop esi
	   add esp,0x8
	   ret 0x4

       ChuyenDoiSang:
	   popad
       mov byte ptr [eax+9],0
	   mov byte ptr [eax+1],0
	   pop esi
	   add esp,0x8
	   ret 0x4
	}
};
__declspec(naked)void DisableMoveFormNangCapTB()  //00622ED9
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
	   pushad
	   xor ecx,ecx
	   mov cl,[eax]
	   test cl,cl
	   jz Default
       mov ecx,DWORD PTR SS:[0x01733AD0]
	   mov eax,0x007D7FD0
	   call eax
	   mov ecx,[eax+0x10]
	   mov edx,[eax+0x3C]
       sub edx,539
	   cmp ecx,edx
	   jl Default
	   add edx,349
	   cmp ecx,edx
	   ja Default
	   mov ecx,[eax+0x18]
	   cmp ecx,71
	   jl Default
	   cmp ecx,480
	   ja Default
       popad
       mov eax,00000000
	   push 0x0062307C
	   ret

	   Default:
	   popad
       mov eax,DWORD PTR SS:[0x01733A9C]
       lea ecx,[eax+0x00005664]
	   push 0x00622EDF
	   ret
	}
}
__declspec(naked)void GetPackageInchantOptionNew()  //006B0F0F
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
	   push eax
	   mov al,[ebp+0x3]
	   cmp al,90
       jz HienThiThongTinInchant
	   pop eax
	   mov al,[ebp+0x3]
	   push 0x006B0F14
       ret

	   HienThiThongTinInchant:
       xor eax,eax
	   mov al,[ebp+0x4]
	   cmp al,0
	   jz ThanhCong
	   pop ecx
       add al,1
	   mov [ecx+0xC],al
	   push 0x006B21F7
       ret

	   ThanhCong:
       xor eax,eax
	   mov eax,[ebp+0x5]
	   mov [0x1107258+0x28228],eax
	   //
	   xor eax,eax
	   mov al,[ebp+0xA]
	   test al,al
	   jz XoaVP
	   xor eax,eax
	   mov al,[ebp+0x9]
	   imul eax,0x90
	   xor ecx,ecx
	   mov cl,[ebp+0xA]
	   xor cl,0xC5
	   mov [0x1107258+eax+0x22DC8+0x19],cl
       jmp CheckVP2
	   XoaVP:
       xor eax,eax
	   mov al,[ebp+0x9]
	   imul eax,0x90
	   lea ecx,[0x1107258+0x22DC8+eax]
	   mov edx,[0x1107258+0x22DC8+eax]
	   call dword ptr [edx+0x4]
	   CheckVP2:
	   //
       xor eax,eax
	   mov al,[ebp+0xC]
	   test al,al
	   jz XoaVP2
	   xor eax,eax
	   mov al,[ebp+0xB]
	   imul eax,0x90
	   xor ecx,ecx
	   mov cl,[ebp+0xC]
	   xor cl,0xC5
	   mov [0x1107258+eax+0x22DC8+0x19],cl
       jmp CheckVP3
	   XoaVP2:
       xor eax,eax
	   mov al,[ebp+0xB]
	   imul eax,0x90
	   lea ecx,[0x1107258+0x22DC8+eax]
	   mov edx,[0x1107258+0x22DC8+eax]
	   call dword ptr [edx+0x4]
	   CheckVP3:
	   xor eax,eax
	   mov al,[ebp+0xD]
	   imul eax,0x90
	   xor ecx,ecx
	   mov cl,[ebp+0xE]
	   test cl,cl
	   jz KhongRoLoiInchantSlotError
       sub cl,1
	   imul ecx,6
	   lea eax,[0x1107258+0x22DC8+eax+ecx+0x2A]
	   xor ecx,ecx
	   mov cx,[ebp+0xF]
	   xor cx,0xCE43
	   mov [eax],cx
       mov cx,[ebp+0x11]
	   xor cx,0xCE43
	   mov [eax+0x2],cx
	   //
	   //
	   xor ecx,ecx
	   mov cl,[ebp+0x13]
	   and cl,0xF
	   xor cl,0xC5
	   mov [eax+0x4],cl
       xor ecx,ecx
	   mov cl,[ebp+0x13]
	   shr cl,0x4
	   xor cl,0xC5
	   mov [eax+0x5],cl
	   //
       xor eax,eax
	   mov al,[ebp+0xD]
	   imul eax,0x90
	   xor ecx,ecx
	   mov cl,[ebp+0x14]
	   xor cl,0xC5
	   mov [0x1107258+0x22DC8+eax+0x10],cl
	   //
	   pop ecx
	   mov dword ptr [ecx+0x4],0
	   mov byte ptr  [ecx+0xC],1
	   mov dword ptr [ecx+0x8],0
	   push 0x006B21F7
	   ret

	   KhongRoLoiInchantSlotError:
       pop ecx
	   mov byte ptr [ecx+0xC],2
	   push 0x006B21F7
       ret

	}
}
__declspec(naked)void AcceptClothInChant()  //0048C11D
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
	   mov cl,[eax]
	   test cl,cl
       jz Default
	   xor ecx,ecx
	   mov ecx,[esi+0x98]
	   cmp ecx,25
	   jl Default
	   cmp ecx,140
	   ja Default
       mov [eax+0x4],cl
       push 0x48DAD5
	   ret

       Default:
	   movsx ecx,word ptr [esi+0x1C]
	   xor ecx,0xFFFFCE43
	   push 0x0048C127
       ret
	}
};
__declspec(naked)void AcceptResourceInChant()  //0048CAA6
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
       xor edx,edx
	   mov dl,[eax]
	   test dl,dl
       jz Default
	   xor edx,edx
	   mov edx,[esi+0x98]
	   cmp edx,25
	   jl Default
	   cmp edx,140
	   ja Default
	   mov [eax+0x5],dl
       push 0x48DAD5
	   ret

	   Default:
	   movsx eax, word ptr [esi+0x1C]
	   mov ecx,DWORD PTR SS:[0x01733A9C]
	   xor eax,0xFFFFCE43
	   mov ebx,0x00000009
       add ecx,0x00005664
	   push 0x0048CAAC
       ret
	}
};
__declspec(naked)void AcceptAccessoryInChant()  //0048C346
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
       xor edx,edx
	   mov dl,[eax]
	   test dl,dl
       jz Default
	   xor edx,edx
	   mov edx,[esi+0x98]
	   cmp edx,25
	   jl Default
	   cmp edx,140
	   ja Default
	   mov [eax+0x4],dl
       push 0x48DAD5
	   ret

	   Default:
	   mov eax, [esi+0x98]
	   mov ebx,0x1107258
	   lea ecx,[eax+eax*0x8]
       shl ecx,0x4
	   push 0x0048C34C
       ret
	}
};
__declspec(naked)void AcceptLifeInChant()  //0048D24F
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
	   xor ecx,ecx
	   mov cl,[eax]
	   test cl,cl
       jz Default
	   xor ecx,ecx
	   mov ecx,[esi+0x98]
	   cmp ecx,25
	   jl Default
	   cmp ecx,140
	   ja Default
	   mov [eax+0x6],cl
       push 0x48DAD5
	   ret

	   Default:
	   mov cx,[esi+0x1C]
       xor cx,0xCE43
	   push 0x0048D258
       ret
	}
};
__declspec(naked)void DrawFormNangCapTB()  //00524586
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
	   pushad
       xor ecx,ecx
	   mov cl,[eax]
	   test ecx,ecx
	   jz Default
       mov eax,[esp+0x1C]
	   mov ecx,[eax+0x3C]
	   test ecx,ecx
	   jnz DaCoThongTinHinhAnhNV
	   add eax,0x60
	   push eax
	   call AddOptionImage
	   DaCoThongTinHinhAnhNV:
       mov eax,[esp+0x1C]
	   xor ecx,ecx
	   mov cl,[eax+0x4]
	   cmp cl,25
	   jl KhongHienThiOption
	   cmp cl,140
       ja KhongHienThiOption
	   imul ecx,0x90
	   lea eax,[0x1107258+0x22DC8+ecx]
       push eax
	   call ProcessShowInc
	   KhongHienThiOption:
       // Hien thi Mil Yeu Cau
       mov eax,[esp+0x1C]
	   xor edx,edx
	   mov dl,[eax+0x8]
	   test edx,edx
	   jz KhongCoTimThayVPReMIl
	   mov eax,[esp+0x1C]
	   xor ecx,ecx
	   mov cl,[eax+0x4]
	   cmp cl,25
	   jl KhongCoTimThayVPReMIl
	   cmp cl,140
	   ja KhongCoTimThayVPReMIl
	   imul ecx,ecx,0x90
	   lea eax,[ecx+0x0112A020]
	   sub edx,1
	   imul edx,6
	   xor ecx,ecx
	   mov cl,[eax+edx+0x2F]
	   xor cl,0xC5
       add cl,10
       push ecx
	   push 83
	   mov ecx,0x1733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   push 0x2
	   push 0x3F800000
	   mov eax,DWORD PTR [0x01733AC4]
	   mov edi,[eax]
       mov edx,393
	   push edx
	   mov ecx,DWORD PTR SS:[0x01733AD0]
	   mov eax,0x007D7FD0
	   call eax
	   mov eax,[eax+0x3C]
       sub eax,309
	   push eax
       mov eax,DWORD PTR [0x01733AC4]
	   mov edi,[eax]
	   push eax
	   mov ecx,DWORD PTR [0x01733AC4]
	   call dword ptr [edi+0x30]
	   add esp,0x18
	   KhongCoTimThayVPReMIl:
       mov eax,[esp+0x1C]
	   xor ecx,ecx
	   mov cl,[eax+0xC]
	   test ecx,ecx
	   jz KhongCoThongTinResult
       add ecx,29
	   push ecx
	   push 83
	   mov ecx,0x1733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   push 0x2
	   push 0x3F800000
	   mov eax,DWORD PTR [0x01733AC4]
	   mov edi,[eax]
       mov edx,432
	   push edx
	   mov ecx,DWORD PTR SS:[0x01733AD0]
	   mov eax,0x007D7FD0
	   call eax
	   mov eax,[eax+0x3C]
	   sub eax,445
	   push eax
       mov eax,DWORD PTR [0x01733AC4]
	   mov edi,[eax]
	   push eax
	   mov ecx,DWORD PTR [0x01733AC4]
	   call dword ptr [edi+0x30]
	   add esp,0x18
	   KhongCoThongTinResult:
	   //
       mov eax,[esp+0x1C]
	   xor ecx,ecx
	   mov cl,[eax+0x4]
	   cmp cl,25
	   jl KhogHienThiTen
	   cmp cl,140
	   ja KhogHienThiTen
       imul ecx,ecx,0x90
	   lea eax,[ecx+0x0112A020]
	   xor edx,edx
	   mov dx,[eax+0x14]
	   xor dx,0xCE43
	   push edx
	   xor edx,edx
	   mov dl,[eax+0x16]
	   xor dl,0x1F
	   push edx
	   mov eax,0x00674FC0
	   call eax
	   push eax
	   mov eax,[esp+0x28]
	   lea eax,[eax+0x10]
	   push 0x0089507C
	   push eax
	   mov edi,DWORD PTR SS:[0x0085C564]
	   call edi
	   add esp,0x14
	   mov eax,[esp+0x1C]
       lea eax,[eax+0x10]
	   push eax
	   push 0x0
	   push 0x3F800000
	   mov eax,DWORD PTR SS:[0x01733AC4]
	   mov edi,[eax]
	   mov edx,113
	   push edx
	   mov ecx,DWORD PTR SS:[0x01733AD0]
	   mov eax,0x007D7FD0
	   call eax
	   mov eax,[eax+0x3C]
       sub eax,464
	   push eax
       mov eax,DWORD PTR [0x01733AC4]
	   mov edi,[eax]
	   push eax
	   mov ecx,DWORD PTR [0x01733AC4]
	   call dword ptr [edi+0x30]
	   add esp,0x18
       KhogHienThiTen:
	   //
       push 0
	   mov edx,89
	   push edx
	   mov ecx,DWORD PTR SS:[0x01733AD0]
	   mov eax,0x007D7FD0
	   call eax
	   mov eax,[eax+0x3C]
       sub eax,469
	   push eax
	   mov eax,[esp+0x28]
	   add eax,0x60
	   push eax
	   call GetImageClass
       mov eax,[esp+0x1C]
	   xor ecx,ecx
	   mov cl,[eax+0x4]
	   cmp cl,25
	   jl KhongCoHinhAnhVP
	   cmp cl,140
	   ja KhongCoHinhAnhVP
	   push 0x0
	   push 0x1
	   imul ecx,ecx,0x90
	   lea edx,[ecx+0x0112A020]
	   push 0x0
	   push edx
	   mov edx,104
	   push edx
	   mov ecx,DWORD PTR SS:[0x01733AD0]
	   mov eax,0x007D7FD0
	   call eax
	   mov eax,[eax+0x3C]
       sub eax,529
	   push eax
	   push 0x1
	   mov ecx,DWORD PTR SS:[0x01615E90]
	   mov eax,0x004913F0
	   call eax
	   KhongCoHinhAnhVP:
       mov eax,[esp+0x1C]
	   xor ecx,ecx
	   mov cl,[eax+0x5]
	   cmp cl,25
	   jl KhongCoHinhAnhVP1
	   cmp cl,140
	   ja KhongCoHinhAnhVP1
	   push 0x0
	   push 0x1
	   imul ecx,ecx,0x90
	   lea edx,[ecx+0x0112A020]
	   push 0x0
	   push edx
	   mov edx,150
	   push edx
	   mov ecx,DWORD PTR SS:[0x01733AD0]
	   mov eax,0x007D7FD0
	   call eax
	   mov eax,[eax+0x3C]
       sub eax,529
	   push eax
	   push 0x1
	   mov ecx,DWORD PTR SS:[0x01615E90]
	   mov eax,0x004913F0
	   call eax
	   KhongCoHinhAnhVP1:
       mov eax,[esp+0x1C]
	   xor ecx,ecx
	   mov cl,[eax+0x6]
	   cmp cl,25
	   jl KhongCoHinhAnhVP2
	   cmp cl,140
	   ja KhongCoHinhAnhVP2
	   push 0x0
	   push 0x1
	   imul ecx,ecx,0x90
	   lea edx,[ecx+0x0112A020]
	   push 0x0
	   push edx
	   mov edx,150
	   push edx
	   mov ecx,DWORD PTR SS:[0x01733AD0]
	   mov eax,0x007D7FD0
	   call eax
	   mov eax,[eax+0x3C]
       sub eax,348
	   push eax
	   push 0x1
	   mov ecx,DWORD PTR SS:[0x01615E90]
	   mov eax,0x004913F0
	   call eax
	   KhongCoHinhAnhVP2:
	   xor ecx,ecx
	   mov eax,[esp+0x1C]
	   mov cl,[eax+0x9]
	   test cl,cl
       jz KhongHienHover
       push ecx
	   mov edx,153
	   push edx
	   mov ecx,DWORD PTR SS:[0x01733AD0]
	   mov eax,0x007D7FD0
	   call eax
	   mov eax,[eax+0x3C]
       sub eax,853
	   push eax
	   mov eax,[esp+0x28]
	   add eax,0x60
	   push eax
	   call GetImageClass
	   KhongHienHover:
       xor ecx,ecx
	   mov eax,[esp+0x1C]
	   mov cl,[eax+0x8]
	   test cl,cl
	   jz KhongHienNutChon
	   push 5
	   sub ecx,1
	   imul ecx,0x26
	   add ecx,203
	   push ecx
	   mov ecx,DWORD PTR SS:[0x01733AD0]
	   mov eax,0x007D7FD0
	   call eax
	   mov eax,[eax+0x3C]
       sub eax,500
	   push eax
	   mov eax,[esp+0x28]
	   add eax,0x60
	   push eax
	   call GetImageClass
	   KhongHienNutChon:
       Default:
	   popad
       mov eax,[esi+0x10]
	   test eax,eax
	   push 0x0052458B
	   ret

	   ProcessShowInc:
	   sub esp,0x4
	   xor ecx,ecx
	   mov [esp],ecx
	   BackLoopOptionClothRanDom:
	   //
	   xor ecx,ecx
	   mov ecx,[esp]
	   imul ecx,6
	   xor edx,edx
	   mov eax,[esp+0x8]
	   mov dx,[eax+0x2A+ecx]
	   xor dx,0xCE43
	   test edx,edx
	   jz EndShowOptionClothRandom
	   //
	   push 0xFFCFFF00
	   mov ecx,DWORD PTR SS :[0x01733AC4]
	   mov eax,[ecx]
	   call dword ptr [eax+0xC]
	   xor ecx,ecx
	   mov ecx,[esp]
	   imul ecx,6
	   xor edx,edx
	   mov eax,[esp+0x8]
	   mov dl,[eax+0x2A+ecx+0x5]
	   xor dl,0xC5
	   push edx // Cap Do
	   xor edx,edx
	   mov dl,[eax+0x2A+ecx+0x4]
	   xor dl,0xC5
	   push edx // Rank Thap Trung Cao
	   call GetRankOption
	   push eax
	   push 0x19
	   mov ecx,0x1733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   push 4135
	   push 0x19
	   mov ecx,0x1733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   push 0x0
	   push 0x3F800000
	   mov eax,DWORD PTR [0x01733AC4]
	   mov edi,[eax]
       mov edx,195
	   mov ecx,[esp+0x14]
	   imul ecx,0x26
	   add edx,ecx
	   push edx
	   mov ecx,DWORD PTR SS:[0x01733AD0]
	   mov eax,0x007D7FD0
	   call eax
	   mov eax,[eax+0x3C]
       sub eax,533
	   push eax
       mov eax,DWORD PTR [0x01733AC4]
	   mov edi,[eax]
	   push eax
	   mov ecx,DWORD PTR [0x01733AC4]
	   call dword ptr [edi+0x30]
	   add esp,0x20
	   // Hien Thi Opt
	   push 0xFF00EE00
	   mov ecx,DWORD PTR SS :[0x01733AC4]
	   mov eax,[ecx]
	   call dword ptr [eax+0xC]
	   xor ecx,ecx
	   mov ecx,[esp]
	   imul ecx,6
	   xor edx,edx
	   mov eax,[esp+0x8]
	   mov dx,[eax+0x2A+ecx+0x2]
	   xor dx,0xCE43
	   push edx // Value
	   xor edx,edx
	   mov dx,[eax+0x2A+ecx]
	   xor dx,0xCE43
	   push edx // Get NDText String
	   push 11
	   mov ecx,0x1733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   push 0x0
	   push 0x3F800000
	   mov eax,DWORD PTR [0x01733AC4]
	   mov edi,[eax]
	   mov edx,195
	   mov ecx,[esp+0x10]
	   imul ecx,0x26
	   add edx,ecx
	   push edx
	   mov ecx,DWORD PTR SS:[0x01733AD0]
	   mov eax,0x007D7FD0
	   call eax
	   mov eax,[eax+0x3C]
       sub eax,429
	   push eax
	   mov eax,DWORD PTR [0x01733AC4]
	   push eax
	   mov ecx,DWORD PTR [0x01733AC4]
	   call dword ptr [edi+0x30]
	   add esp,0x1C
	   mov ecx,[esp]
	   add ecx,1
	   mov [esp],ecx
	   cmp ecx,6
	   jl BackLoopOptionClothRanDom
	   EndShowOptionClothRandom:
	   add esp,0x4
	   ret 0x4

       GetRankOption:
	   mov ecx,[esp+0x4]
	   cmp ecx,0
	   jnz KiemTraRankOption1
	   mov eax,4136
	   ret 0x4

	   KiemTraRankOption1:
	   cmp ecx,1
	   jnz KiemTraRankOption2
	   mov eax,4137
	   ret 0x4

	   KiemTraRankOption2:
	   cmp ecx,2
	   jnz KiemTraRankOption3
	   mov eax,4138
	   ret 0x4

	   KiemTraRankOption3:
	   cmp ecx,3
	   jnz KiemTraRankOption4
	   mov eax,4139
	   ret 0x4

	   KiemTraRankOption4:
	   mov eax,4140
	   ret 0x4


	   GetlenghtCapDo:
	   mov ecx,[esp+0x4]
	   cmp ecx,0
	   jnz GetlenghtCapDo1
	   mov eax,0x72
	   ret 0x4

	   GetlenghtCapDo1:
	   cmp ecx,1
	   jnz GetlenghtCapDo2
	   mov eax,0x58
	   ret 0x4

	   GetlenghtCapDo2:
	   cmp ecx,2
	   jnz GetlenghtCapDo3
	   mov eax,0x7B
	   ret 0x4

	   GetlenghtCapDo3:
	   cmp ecx,3
	   jnz GetlenghtCapDo4
	   mov eax,0x55
	   ret 0x4

	   GetlenghtCapDo4:
	   mov eax,0x71
	   ret 0x4

	   GetImageClass:
	   mov ecx,[esp+0x10]
	   cmp ecx,1
	   jz HienThiThongTInVP1
	   cmp ecx,2
	   jz HienThiThongTInVP2
	   cmp ecx,5
	   jz HienThiThongTInVP3
	   push 1
	   push 83
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
	   mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 78
	   mov  DWORD PTR SS : [ecx + 0xA0] , 351
	   mov  DWORD PTR SS : [ecx + 0x98] , 0
	   mov  DWORD PTR SS : [ecx + 0xA4] , 491
	   jmp ProcessHienThiFormNangCap

	   HienThiThongTInVP3:
	   push 3
	   push 83
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
	   mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 69
	   mov  DWORD PTR SS : [ecx + 0xA0] , 168
	   mov  DWORD PTR SS : [ecx + 0x98] , 138
	   mov  DWORD PTR SS : [ecx + 0xA4] , 99
	   jmp ProcessHienThiFormNangCap

	   HienThiThongTInVP1:
	   push 4
	   push 83
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
	   mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 78
	   mov  DWORD PTR SS : [ecx + 0xA0] , 351
	   mov  DWORD PTR SS : [ecx + 0x98] , 0
	   mov  DWORD PTR SS : [ecx + 0xA4] , 491
	   jmp ProcessHienThiFormNangCap

	   HienThiThongTInVP2:
       push 5
	   push 83
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
	   mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 78
	   mov  DWORD PTR SS : [ecx + 0xA0] , 351
	   mov  DWORD PTR SS : [ecx + 0x98] , 0
	   mov  DWORD PTR SS : [ecx + 0xA4] , 491

       ProcessHienThiFormNangCap:
	   push 0xFF7F0000
	   push 5188
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,[esp+0x14]
	   mov edx,[esp+0x10]
	   push ecx
	   push edx
	   mov ecx, [esp+0x14]
	   mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
	   call eax
	   mov ecx,[esp+0x4]
	   push 0x1732CC8
	   mov eax, 0x7B9850
	   call eax //Draw1
	   ret 0x10

       AddOptionImage:
	   sub esp,0x4
	   xor ecx,ecx
	   mov [esp],ecx
	   BackGetOptionImage:
	   mov ecx,[esp]
	   mov eax, 0x010CC088
	   mov edx,[eax+ecx]
	   mov eax,[esp+0x8]
	   mov [eax+ecx],edx
	   add ecx,4
	   mov [esp],ecx
	   cmp ecx,0xB8
	   jl BackGetOptionImage
	   add esp,0x4
	   ret 0x4


	}
};
__declspec(naked)void KiemTraCoHienThiNgoaiHieuKhong()  //004B8404
{
__asm
	{
	     mov eax, DWORD PTR SS : [0x10D94A8]
		 mov ecx, [eax + 0x470]
		 mov eax, [eax + ecx * 0x4 + 0x20]
		 push eax
		 call GetIDNickIcon
		 cmp eax,0xFF
		 jz HienThiTextDanhHieu
		 mov ecx,DWORD PTR SS:[0x01733AC4]
		 push 0x004B843B
         ret

		 HienThiTextDanhHieu:
		 mov edx,DWORD PTR SS:[0x010D94A8]
		 push 0x004B840A
         ret


         GetIDNickIcon:
		 sub esp,0x4
		 xor ecx,ecx
		 mov [esp],ecx
		 BackLoopGetNickIconID:
		 mov eax,[0x016A2178]
		 xor edx,edx
		 mov edx,[eax+ecx]
		 mov ecx,[esp+0x8]
		 cmp ecx,edx
		 jnz KiemTraGiaTriTiepTheo
		 mov eax,[0x016A2178]
		 xor edx,edx
		 mov ecx,[esp]
		 mov dl,[eax+ecx+0x90]
		 mov eax,edx
		 add esp,0x4
		 ret 0x4

		 KiemTraGiaTriTiepTheo:
		 mov ecx,[esp]
		 add ecx,0xBC
		 mov [esp],ecx
		 cmp ecx,0x20154
		 jl BackLoopGetNickIconID
		 add esp,0x4
		 ret 0x4
	}
};
__declspec(naked)void FixX3DWeapon()  //0071D5C8
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
	   mov esi,[ebx*0x4+eax]
	   mov edx,[ebx*0x4+eax+4000]
	   push 0x0071D5D6
       ret
	}
};
__declspec(naked)void FixX3DWeapon011()  //004BEBE1
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
	   mov eax,[edx*0x4+eax]
	   push 0x004BEBE8
       ret
	}
};
__declspec(naked)void FixX3DWeapon012()  //004BEC18
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
	   mov ecx,eax
       mov eax,[edi+0x000002A0]
	   mov ecx,[eax*0x4+ecx]
	   push 0x004BEC1F
       ret
	}
};
__declspec(naked)void FixX3DWeapon013()  //004BECF5
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
	   mov ecx,[ecx*0x4+eax]
	   push 0x004BECFC
       ret
	}
};
__declspec(naked)void FixX3DWeapon014()  //004E66E3
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
	   mov eax,[ebp*0x4+eax]
	   push 0x004E66EA
       ret
	}
};
__declspec(naked)void FixX3DWeapon015()  //00549A09
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
	   mov eax,[edx*0x4+eax]
	   push 0x00549A10
       ret
	}
};
__declspec(naked)void FixX3DWeapon016()  //00549A3E
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
	   mov ecx,eax
       mov eax,[esp+0x10]
	   mov ecx,[eax*0x4+ecx]
	   push 0x00549A45
       ret
	}
};
__declspec(naked)void FixX3DWeapon017()  //00549B1B
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
	   mov ecx,[ecx*0x4+eax]
	   push 0x00549B22
       ret
	}
};
__declspec(naked)void FixX3DWeapon018()  //00575955
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
	   mov eax,[ebp*0x4+eax]
	   push 0x0057595C
       ret
	}
};
__declspec(naked)void FixX3DWeapon019()  //00575A1A
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
	   mov eax,[ebp*0x4+eax]
	   push 0x00575A21
       ret
	}
};
__declspec(naked)void FixX3DWeapon0110()  //00575AE2
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
	   mov ecx,[ebp*0x4+eax]
	   push 0x00575AE9
       ret
	}
};
__declspec(naked)void FixX3DWeapon0111()  //00578BA2
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
	   mov ecx,eax
       mov eax,[esp+0x14]
	   mov eax,[eax*0x4+ecx]
	   push 0x00578BA9
       ret
	}
};
__declspec(naked)void FixX3DWeapon0112()  //00578BD3
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
	   mov edx,[ecx*0x4+eax]
	   push 0x00578BDA
       ret
	}
};
__declspec(naked)void FixX3DWeapon0113()  //00578CB7
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
	   mov ecx,[edx*0x4+eax]
	   push 0x00578CBE
	   ret
	}
};
__declspec(naked)void FixX3DWeapon0114()  //0057C4E2
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
	   mov ecx,eax
	   mov eax,[esp+0x14]
	   mov eax,[eax*0x4+ecx]
	   push 0x0057C4E9
	   ret
	}
};
__declspec(naked)void FixX3DWeapon0115()  //0057C513
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
	   mov edx,[ecx*0x4+eax]
	   push 0x0057C51A
	   ret
	}
};
__declspec(naked)void FixX3DWeapon0116()  //0057C5F7
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
	   mov ecx,[edx*0x4+eax]
	   push 0x0057C5FE
	   ret
	}
};
__declspec(naked)void FixX3DWeapon0117()  //0057ED7B
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
       mov ecx,eax
	   mov eax,[esp+0x14]
	   mov ecx,[eax*0x4+ecx]
	   push 0x0057ED82
	   ret
	}
};
__declspec(naked)void FixX3DWeapon0118()  //0057EDAC
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
	   mov edx,[ecx*0x4+eax]
	   push 0x0057EDB3
	   ret
	}
};
__declspec(naked)void FixX3DWeapon0119()  //0057EE91
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
	   mov ecx,[edx*0x4+eax]
	   push 0x0057EE98
	   ret
	}
};
__declspec(naked)void FixX3DWeapon0120()  //005F609D
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
	   mov edx,[ecx*0x4+eax]
	   push 0x005F60A4
	   ret
	}
};
__declspec(naked)void FixX3DWeapon0121()  //005F66E0
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
	   mov edx,[ecx*0x4+eax]
	   push 0x005F66E7
	   ret
	}
};
__declspec(naked)void FixX3DWeapon0122()  //0062EA6E
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
	   mov edx,[ecx*0x4+eax]
	   push 0x0062EA75
	   ret
	}
};
__declspec(naked)void FixX3DWeapon0123()  //00657C42
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
	   mov eax,[edx*0x4+eax]
	   push 0x00657C49
	   ret
	}
};
__declspec(naked)void FixX3DWeapon0124()  //0065E64F
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
	   mov edx,[ecx*0x4+eax]
	   push 0x0065E656
	   ret
	}
};
__declspec(naked)void FixX3DWeapon0125()  //006E1362
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
	   mov edi,[eax*0x4+edx]
	   push 0x006E1369
	   ret
	}
};
__declspec(naked)void FixX3DWeapon0126()  //006E35F1
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
	   mov edi,[eax*0x4+edx]
	   push 0x006E35F8
	   ret
	}
};
__declspec(naked)void FixX3DWeapon0127()  //00716639
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
	   mov eax,[edx*0x4+eax]
	   push 0x00716640
	   ret
	}
};
__declspec(naked)void FixX3DWeapon021()  //004068CB
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
       add eax,4000
	   mov esi,eax
	   push 0x004068D0
	   ret
	}
};
__declspec(naked)void FixX3DWeapon022()  //004068D5
{
__asm
	{
	   mov [esi-0xFA0],eax
	   push 0x004068DB
	   ret
	}
};
__declspec(naked)void FixX3DWeapon023()  //004068E5
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
	   add eax,8000
	   cmp esi,eax
	   push 0x004068EB
	   ret
	}
};
__declspec(naked)void FixX3DWeapon024()  //00408E62
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
       add eax,4000
	   mov esi,eax
	   push 0x00408E67
	   ret
	}
};
__declspec(naked)void FixX3DWeapon025()  //00408E67
{
__asm
	{
       mov ecx,[esi-4000]
	   push 0x00408E6D
	   ret
	}
};
__declspec(naked)void FixX3DWeapon026()  //00408E77
{
__asm
	{
       mov [esi-4000],ebx
	   push 0x00408E7D
	   ret
	}
};
__declspec(naked)void FixX3DWeapon027()  //00408E8E
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
       nop
	   add eax,8000
       cmp esi,eax
	   push 0x00408E94
	   ret
	}
};
__declspec(naked)void FixX3DWeapon028()  //005AFD72
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
       add eax,4000
	   mov esi,eax
	   push 0x005AFD77
	   ret
	}
};
__declspec(naked)void FixX3DWeapon029()  //005AFD77
{
__asm
	{
	   mov ecx,[esi-4000]
	   push 0x005AFD7D
	   ret
	}
};
__declspec(naked)void FixX3DWeapon0210()  //005AFD8C
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
	   add eax,8000
       cmp esi,eax
	   push 0x005AFD92
	   ret
	}
};
__declspec(naked)void GetDmgNhatKichKy()  //006C4D88
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  mov dword ptr [eax],0
      xor ecx,ecx
	  mov cl, [edi+0x13]
      test ecx,ecx
	  jz notOver
	  imul ecx,0xFFFF
	  xor edx,edx
	  mov dx, [edi+0x10]
	  add edx,ecx
	  mov [eax],edx
	  push 0x006C4D93
	  ret


	  notOver:
      mov dx, [edi+0x10]
	  mov [eax],dx
	  push 0x006C4D93
	  ret
	}
}
__declspec(naked)void GetDmgChieuThucKy()  //006C56FC
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  mov dword ptr [eax],0
      xor ecx,ecx
	  mov cl, [esi+0x1B]
      test ecx,ecx
	  jz notOver
	  imul ecx,0xFFFF
	  xor edx,edx
	  mov dx, [esi+0x12]
	  add edx,ecx
	  mov [eax],edx
	  push 0x006C5703
	  ret


	  notOver:
	  mov dx, [esi+0x12]
	  mov [eax],dx
	  push 0x006C5703
	  ret
	}
}
__declspec(naked)void GetDmgHoaKhiChuongPK()  //006C614C
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  mov dword ptr [eax],0
      xor ecx,ecx
	  mov cl, [esi+0x13]
      test ecx,ecx
	  jz notOverPvp
	  imul ecx,0xFFFF
	  xor edx,edx
	  mov dx, [esi+0x10]
	  add edx,ecx
	  mov [eax],edx
	  push 0x006C6153
	  ret


	  notOverPvp:
	  mov dx, [esi+0x10]
	  mov [eax],dx
	  push 0x006C6153
	  ret
	}
}
__declspec(naked)void GetDmgNhatKhiPK()  //006C6C68
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  mov dword ptr [eax],0
      xor ecx,ecx
	  mov cl, [esi+0x13]
      test ecx,ecx
	  jz notOver
	  imul ecx,0xFFFF
	  xor edx,edx
	  mov dx, [esi+0x10]
	  add edx,ecx
	  mov [eax],edx
	  push 0x006C6C6F
	  ret


	  notOver:
	  mov dx, [esi+0x10]
	  mov [eax],dx
	  push 0x006C6C6F
	  ret
	}
}
__declspec(naked)void ShowDmgHoaKhiChuongPK()  //006448DD
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  mov ecx,[eax]
      mov eax,ecx
	  push 0x006448E4
      ret
	}
}
__declspec(naked)void ShowDmgNhatKhiChuongPK()  //006377FA
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  mov ecx,[eax]
      mov eax,ecx
	  push 0x00637801
      ret
	}
}
__declspec(naked)void ShowDmgPvpNhatKich()  //00640310
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  mov ecx,[eax]
      mov eax,ecx
	  push 0x00640317
      ret
	}
}
__declspec(naked)void ShowDmgPvpChieuThucKy()  //00632FF3
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  mov ecx,[eax]
      mov eax,ecx
	  push 0x00632FFB
      ret
	}
};
__declspec(naked)void ShowDmgPvpChieuNhatKichHienThi()  //0064015D
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  mov ecx,[eax]
	  mov eax,ecx
	  push 0x00640164
      ret
	}
}
__declspec(naked)void ShowDmgPvpChieuPhiKichHienThi()  //006C6878
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  push eax
	  xor eax,eax
	  mov al,[esi+0x1B]
      test eax,eax
	  jz Default
      xor eax,eax
	  mov al,[esi+0x1B]
	  imul eax,0xFFFF
      xor edx,edx
	  mov dx,[esi+0x18]
	  add edx,eax
	  pop eax
	  mov [eax],edx
	  push 0x006C687F
	  ret

	  Default:
	  pop eax
      xor ecx,ecx
	  mov cx,[esi+0x18]
      mov [eax],ecx
	  push 0x006C687F
	  ret
	}
};
__declspec(naked)void ShowDmgPvpChieuPhiKickHienThi2()  //0063C5BE
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  mov ecx,[eax]
	  mov eax,ecx
	  push 0x0063C5C5
      ret
	}
}
__declspec(naked)void ShowDmgPvpChieuThucKyHienThi()  //00632F3A
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  mov ecx,[eax]
	  mov eax,ecx
	  push 0x00632F42
      ret
	}
};
__declspec(naked)void ShowDmgPveChieuPhiKichHienThi()  //006C6648
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  push eax
	  xor eax,eax
	  mov al,[esi+0x1C]
      test eax,eax
	  jz Default
      xor eax,eax
	  mov al,[esi+0x1C]
	  imul eax,0xFFFF
      xor edx,edx
	  mov dx,[esi+0x19]
	  add edx,eax
	  pop eax
	  mov [eax],edx
	  push 0x006C664F
	  ret

	  Default:
	  pop eax
      xor ecx,ecx
	  mov cx,[esi+0x19]
      mov [eax],ecx
	  push 0x006C664F
	  ret
	}
};
__declspec(naked)void ShowDmgPveChieuPhiKichHienThi2()  //0063B731
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  mov ecx,[eax]
	  mov eax,ecx
	  push 0x0063B738
	  ret
	}
};
//Fix Hien Thi Ngay 21/10
__declspec(naked)void ShowDmgPveDmgNuker2110()  //006447FA
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  mov ecx,[eax]
	  mov eax,ecx
	  test eax,eax
	  jz TruotPVPSkillNuker
	  push 0x00644801
	  ret

	  TruotPVPSkillNuker:
	  mov dword ptr [0x1107258+0x83AC],0xFFFFFFF8
      push 0x00644801
	  ret
	}
};
__declspec(naked)void ShowDmgPveDmgNuker211001()  //00637717
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  mov ecx,[eax]
	  mov eax,ecx
	  test eax,eax
	  jz TruotPVPSkillNuker2
	  push 0x0063771E
	  ret

	  TruotPVPSkillNuker2:
	  mov dword ptr [0x1107258+0x83AC],0xFFFFFFF8
      push 0x0063771E
	  ret
	}
};
__declspec(naked)void ShowDmgPvePhiKick10112022()  //0063B613
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  mov ecx,[eax]
	  mov eax,ecx
	  push 0x0063B61A
      ret
	}
};
__declspec(naked) void ClearDataOld()// 006282EE
{
	  __asm {
		xor edx,edx
		xor edi,edi
		xor ecx,ecx
        mov dx,[esi+0x0002DC38]
		push 0x006282F5
        ret
	}
};
__declspec(naked) void AddOptionNewOtherHangNang()// 00616B47
{
	  __asm {
		xor ecx,ecx
		mov cl,[eax]
		cmp cl,63
        jz AddNguKhiHanhNang
		xor ecx,ecx
		mov cl,[eax+0x13]
		push 0x00616B4C
        ret

		AddNguKhiHanhNang:
		mov cl,[eax+0x13]
		cmp cl,0x49
		jz GetOptionFromHanhNang
		xor ecx,ecx
		mov cl,[eax+0x13]
		push 0x00616B4C
        ret


		GetOptionFromHanhNang:
		//
		mov eax,edi
		mov edx,[esp+0x10]
		shl eax,0x4
		add eax,edi
		lea eax,[eax+eax*0x2]
		lea ecx,[ebp+eax*0x2+0x0]
		mov ax,[edx+ecx*0x2+0x78]
		mov cx,[ebx]
		push eax
		push ecx
		mov ecx,esi
		mov eax,0x006012B0
		call eax
		//
        mov eax,edi
		mov edx,[esp+0x10]
		shl eax,0x4
		add eax,edi
		lea eax,[eax+eax*0x2]
		lea ecx,[ebp+eax*0x2+0x0]
		mov ax,[edx+ecx*0x2+0x78]
		mov cx,[ebx]
		push eax
		push ecx
		mov ecx,esi
		mov eax,0x006014C0
		call eax
		//
        mov eax,edi
		mov edx,[esp+0x10]
		shl eax,0x4
		add eax,edi
		lea eax,[eax+eax*0x2]
		lea ecx,[ebp+eax*0x2+0x0]
		mov ax,[edx+ecx*0x2+0x78]
		mov cx,[ebx]
		push eax
		push ecx
		mov ecx,esi
		mov eax,0x006017D0
		call eax
		//
        mov eax,edi
		mov edx,[esp+0x10]
		shl eax,0x4
		add eax,edi
		lea eax,[eax+eax*0x2]
		lea ecx,[ebp+eax*0x2+0x0]
		mov ax,[edx+ecx*0x2+0x78]
		mov cx,[ebx]
		push eax
		push ecx
		mov ecx,esi
		mov eax,0x00601AB0
		call eax
		//
        mov eax,edi
		mov edx,[esp+0x10]
		shl eax,0x4
		add eax,edi
		lea eax,[eax+eax*0x2]
		lea ecx,[ebp+eax*0x2+0x0]
		mov ax,[edx+ecx*0x2+0x78]
		mov cx,[ebx]
		push eax
		push ecx
		mov ecx,esi
		mov eax,0x00601DB0
		call eax
		//
		push 0x00616F43
        ret
	}
};
__declspec(naked)void AntiChangeTarge2()  //007C07A3
{
__asm
	{
		cmp edi,0x55
		jz KhongChoSuDung
        cmp edi,0x1B
		jz KhongChoSuDung
        AcceptUseKeyWord:
        mov ecx,DWORD PTR SS:[0x01733A9C]
		push 0x007C07A9
		ret

		KhongChoSuDung:
		xor eax,eax
		mov ax,word ptr [0x1107258+0x84FC]
		cmp eax,30
		jz AcceptUseKeyWord
		cmp eax,7
		jz AcceptUseKeyWord
        cmp eax,0
	   jz AcceptUseKeyWord
	   cmp eax,103
	   jz AcceptUseKeyWord
	   cmp eax,105
	   jz AcceptUseKeyWord
	   cmp eax,114
	   jz AcceptUseKeyWord
	   cmp eax,106
	   jz AcceptUseKeyWord
	   cmp eax,31
	   jz AcceptUseKeyWord
	   cmp eax,13
	   jz AcceptUseKeyWord
	   cmp eax,2
	   jz AcceptUseKeyWord
	   cmp eax,101
	   jz AcceptUseKeyWord
	   cmp eax,32
	   jz AcceptUseKeyWord
	   cmp eax,19
	   jz AcceptUseKeyWord
	   cmp eax,4
	   jz AcceptUseKeyWord
	   cmp eax,792
	   jz AcceptUseKeyWord
	   cmp eax,569
	   jz AcceptUseKeyWord
	   cmp eax,1316
	   jz AcceptUseKeyWord
       cmp eax,296
	   jz AcceptUseKeyWord
       cmp eax,1074
	   jz AcceptUseKeyWord
	   cmp eax,542
	   jz AcceptUseKeyWord
	   cmp eax,274
	   jz AcceptUseKeyWord
	   cmp eax,820
	   jz AcceptUseKeyWord
       cmp eax,316
	   jz AcceptUseKeyWord
	   cmp eax,782
	   jz AcceptUseKeyWord
       cmp eax,114
	   jz AcceptUseKeyWord
	   cmp eax,1068
	   jz AcceptUseKeyWord
	   cmp eax,1310
	   jz AcceptUseKeyWord
       cmp eax,1355
	   jz AcceptUseKeyWord
	   cmp eax,810
	   jz AcceptUseKeyWord
	   cmp eax,510
	   jz AcceptUseKeyWord
		push 0x007C07B7
        ret
	}
};
__declspec(naked)void AntiChangeTarge()  //0062B6C5
{
__asm
	{
       xor eax,eax
	   mov ax,word ptr [0x1107258+0x84FC]
	   cmp eax,30
	   jz AcceptChangeTarget
       cmp eax,7
	   jz AcceptChangeTarget
       cmp eax,0
	   jz AcceptChangeTarget
	   cmp eax,103
	   jz AcceptChangeTarget
	   cmp eax,105
	   jz AcceptChangeTarget
	   cmp eax,114
	   jz AcceptChangeTarget
	   cmp eax,106
	   jz AcceptChangeTarget
	   cmp eax,31
	   jz AcceptChangeTarget
	   cmp eax,13
	   jz AcceptChangeTarget
	   cmp eax,2
	   jz AcceptChangeTarget
	   cmp eax,101
	   jz AcceptChangeTarget
	   cmp eax,32
	   jz AcceptChangeTarget
	   cmp eax,19
	   jz AcceptChangeTarget
	   cmp eax,4
	   jz AcceptChangeTarget
	   cmp eax,792
	   jz AcceptChangeTarget
	   cmp eax,569
	   jz AcceptChangeTarget
	   cmp eax,1316
	   jz AcceptChangeTarget
       cmp eax,296
	   jz AcceptChangeTarget
       cmp eax,1074
	   jz AcceptChangeTarget
	   cmp eax,542
	   jz AcceptChangeTarget
	   cmp eax,274
	   jz AcceptChangeTarget
	   cmp eax,820
	   jz AcceptChangeTarget
       cmp eax,316
	   jz AcceptChangeTarget
	   cmp eax,782
	   jz AcceptChangeTarget
       cmp eax,114
	   jz AcceptChangeTarget
	   cmp eax,1068
	   jz AcceptChangeTarget
	   cmp eax,1310
	   jz AcceptChangeTarget
       cmp eax,1355
	   jz AcceptChangeTarget
	   cmp eax,810
	   jz AcceptChangeTarget
	   cmp eax,510
	   jz AcceptChangeTarget
	   push 0x0062B8C9
       ret


	   AcceptChangeTarget:
       mov eax,[esi+0x0002BF18]
	   push 0x0062B6CB
       ret
	}
};
__declspec(naked)void AntiChangeTarge4()  //0051D2AE
{
__asm
	{
       xor eax,eax
	   mov ax,word ptr [0x1107258+0x84FC]
	   cmp eax,30
	   jz AcceptChangeTarget
       cmp eax,7
	   jz AcceptChangeTarget
       cmp eax,0
	   jz AcceptChangeTarget
	   cmp eax,103
	   jz AcceptChangeTarget
	   cmp eax,105
	   jz AcceptChangeTarget
	   cmp eax,114
	   jz AcceptChangeTarget
	   cmp eax,106
	   jz AcceptChangeTarget
	   cmp eax,31
	   jz AcceptChangeTarget
	   cmp eax,13
	   jz AcceptChangeTarget
	   cmp eax,2
	   jz AcceptChangeTarget
	   cmp eax,101
	   jz AcceptChangeTarget
	   cmp eax,32
	   jz AcceptChangeTarget
	   cmp eax,19
	   jz AcceptChangeTarget
	   cmp eax,4
	   jz AcceptChangeTarget
	   cmp eax,792
	   jz AcceptChangeTarget
	   cmp eax,569
	   jz AcceptChangeTarget
	   cmp eax,1316
	   jz AcceptChangeTarget
       cmp eax,296
	   jz AcceptChangeTarget
       cmp eax,1074
	   jz AcceptChangeTarget
	   cmp eax,542
	   jz AcceptChangeTarget
	   cmp eax,274
	   jz AcceptChangeTarget
	   cmp eax,820
	   jz AcceptChangeTarget
       cmp eax,316
	   jz AcceptChangeTarget
	   cmp eax,782
	   jz AcceptChangeTarget
       cmp eax,114
	   jz AcceptChangeTarget
	   cmp eax,1068
	   jz AcceptChangeTarget
	   cmp eax,1310
	   jz AcceptChangeTarget
       cmp eax,1355
	   jz AcceptChangeTarget
	   cmp eax,810
	   jz AcceptChangeTarget
	   cmp eax,510
	   jz AcceptChangeTarget
	   mov DWORD PTR SS:[esi+0xC],0x0
	   mov eax,[esi+0x10]
	   test eax,eax
	   push 0x0051D2B3
	   ret

	   AcceptChangeTarget:
	   mov DWORD PTR SS:[esi+0xC],0x1
	   mov eax,[esi+0x10]
	   test eax,eax
	   push 0x0051D2B3
	   ret
	}
};
__declspec(naked)void DrawFormCheTao()  //0x004FC440
{
__asm
	{
        //0 Check Show
		//1 Check Poz
		//2 Flag Check PakageRc
        //3 Page Chon
		//4 Loai CT Chon
		//6 Ti Le
		//8 Vi Tri Rq1
		//9 Vi Tri Rq2
		//10 Vi Tri Rq3
		//11 Vi Tri Rq4
		//12 Vi Tri Rq5
		//13 Vi Tri Rq6
		//14 Vi Tri Rq7
		//15 Vi Tri Rq8
		//8C0
		//16 Vi Tri Rq9
		//17 Flag Notice
		//20 Type Bonus 1
		//21 Id VP Bonus 1
		//23 Id VP Bonus 2
		//25 Id VP Bonus 3
		//27 Id VP Bonus 4
		//29 Type Bonus 2
		//2A Id VP Bonus 2
		/*  2C-> List Che Tao 28B for 1
			2B ID CheTao
			1B Ti Le Thanh COng
			1B Sl Vp Rq
			1B Type ID Nhan
			2B ID Nhan
			//
			1B Type Rq 1
			2B Id Nhan 1
			1B Sl
            //
			1B Type Rq 2
			2B Id Nhan 2
			1B Sl
            //
			1B Type Rq 3
			2B Id Nhan 3
			1B Sl
            //
			1B Type Rq 4
			2B Id Nhan 4
			1B Sl
            //
			1B Type Rq 5
			2B Id Nhan 5
			1B Sl
			//
			1B Type Rq 6
			2B Id Nhan 6
			1B Sl
            //
			1B Type Rq 7
			2B Id Nhan 7
			1B Sl
		*/

		nop
		nop
		nop
		nop
		nop
		pushad
		//
        xor ecx,ecx
		mov ecx,[ebx+0x10]
		test ecx,ecx
        jz Default
        mov eax,[esp+0x1C]
		mov ecx,[eax+0x1010]
		test ecx,ecx
		jnz DaCoHinhAnh
		add eax,0x1010
		push eax
		call AddOptionImage
		mov eax,[esp+0x1C]
		mov dword ptr [eax+0x8AC],0xA37C0005
        mov byte ptr [eax+0x8B0],0x1
		mov eax,[esp+0x1C]
        lea eax,[eax+0x8AC]
		push eax
		mov ecx,0x155EE60
		mov eax,0x006B2F60
		call eax
		//
		mov eax,[esp+0x1C]
		add eax,0x900
		push eax
		lea eax,[0x1107258+0x22DC8+0x53D0]
		push eax
		call CopySlotShow
		mov eax,[esp+0x1C]
		add eax,0x990
		push eax
		lea eax,[0x1107258+0x22DC8+0x53D0]
		push eax
		call CopySlotShow
        mov eax,[esp+0x1C]
		add eax,0xA20
		push eax
		lea eax,[0x1107258+0x22DC8+0x53D0]
		push eax
		call CopySlotShow
        mov eax,[esp+0x1C]
		add eax,0xAB0
		push eax
		lea eax,[0x1107258+0x22DC8+0x53D0]
		push eax
		call CopySlotShow
        mov eax,[esp+0x1C]
		add eax,0xB40
		push eax
		lea eax,[0x1107258+0x22DC8+0x53D0]
		push eax
		call CopySlotShow
        mov eax,[esp+0x1C]
		add eax,0xBD0
		push eax
		lea eax,[0x1107258+0x22DC8+0x53D0]
		push eax
		call CopySlotShow
        mov eax,[esp+0x1C]
		add eax,0xC60
		push eax
		lea eax,[0x1107258+0x22DC8+0x53D0]
		push eax
		call CopySlotShow
        mov eax,[esp+0x1C]
		add eax,0xCF0
		push eax
		lea eax,[0x1107258+0x22DC8+0x53D0]
		push eax
        call CopySlotShow
		//
		DaCoHinhAnh:
		mov ecx,[ebx+0x000003D0]
		cmp ecx,0x3
		jnz Default
		//
        push 50
		mov edx,[ebx+0x18]
		add edx,0x118
		push edx
		mov ecx,[ebx+0x14]
		add ecx,0x4D
		push ecx
		mov eax,[esp+0x28]
		add eax,0x1010
		push eax
		call GetImageClass
		//
		mov eax,[esp+0x1C]
        xor ecx,ecx
        mov cl,[eax+0x8E2]
		cmp ecx,0x1
		jnz Default
        mov ecx,DWORD PTR SS:[0x01733AC4]
		push 0xFFFFFFFF
		mov edx,[ecx]
	    call dword ptr [edx+0xC]
		//
        push 0
		mov edx,[ebx+0x18]
		sub edx,0x6
        push edx
		mov ecx,[ebx+0x14]
		add ecx,0x1A7
		push ecx
		mov eax,[esp+0x28]
        add eax,0x1010
		push eax
		call GetImageClass
		//
		mov eax,[esp+0x1C]
		xor ecx,ecx
		mov cx,[eax+0x4]
		test ecx,ecx
		jz ChuaConCheTao
		mov ecx,DWORD PTR SS:[0x01733AC4]
		push 0xFFFFFFFF
		mov edx,[ecx]
		call dword ptr [edx+0xC]
		// Hien Thi Hover
		mov eax,[esp+0x1C]
		xor ecx,ecx
		mov cl,[eax+0x8E1]
		test cl,cl
		jz KhongCoHoverVatPham
		cmp cl,0x8
		jz TiepTucHienTHiSauHover
		sub ecx,1
		imul ecx,0x4
		mov eax,[esp+0x1C]
		lea eax,[eax+ecx+0x8C4]
		xor edx,edx
		mov dx,[eax+0x1]
		push edx
		xor edx,edx
		mov dl,[eax]
		push edx
		mov eax,0x00675390
		call eax
        add esp,0x8
		push eax
        mov eax,[esp+0x20]
        xor ecx,ecx
        mov cl,[eax+0x8E1]
		sub ecx,1
        imul ecx,0x4
		mov eax,[esp+0x20]
		lea eax,[eax+ecx+0x8C4]
        xor edx,edx
		mov dl,[eax+0x3]
		push edx
		push 333
		push 76
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov eax,[esp+0x28]
		lea eax,[eax+0xD80]
        push 0x200
        push eax
		mov esi,DWORD PTR SS:[0x0085C538]
		call esi
		add esp,0x14
		mov eax,[esp+0x1C]
		lea eax,[eax+0xD80]
        push eax
		push 0x0
		push 0x3F800000
		mov edx,[ebx+0x18]
		add edx,0x108
		push edx
		mov edx,[ebx+0x14]
		add edx,0x1A9
		push edx
		mov eax,DWORD PTR SS:[0x01733AC4]
		mov edi,[eax]
		push eax
		mov ecx,DWORD PTR [0x01733AC4]
		call dword ptr [edi+0x30]
		add esp,0x18
		jmp TiepTucHienTHiSauHover
		KhongCoHoverVatPham:
		mov eax,[esp+0x1C]
		add eax,0xD80
		mov edx,[eax]
		test edx,edx
		jz TiepTucHienTHiSauHover
		push eax
        call XoaGiaTriCuText
        TiepTucHienTHiSauHover:
		//Hien Thi Ten CT Chon
		mov eax,[esp+0x1C]
        xor edx,edx
		mov dx,word ptr [eax+0x4]
        add edx,333
		push edx
		push 76
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
        push eax
		push 0x2
		push 0x3F800000
		mov edx,[ebx+0x18]
		add edx,0xF
		push edx
		mov edx,[ebx+0x14]
		add edx,0x30D
		push edx
		mov eax,DWORD PTR SS:[0x01733AC4]
		mov edi,[eax]
		push eax
		mov ecx,DWORD PTR [0x01733AC4]
		call dword ptr [edi+0x30]
		add esp,0x18
		//
        xor edx,edx
        mov eax,[esp+0x1C]
        mov dl,[eax+0x6]
        push edx
		push 329
		push 76
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
        push eax
		push 0x2
		push 0x3F800000
		mov edx,[ebx+0x18]
		add edx,0x31
		push edx
		mov edx,[ebx+0x14]
		add edx,0x256
		push edx
		mov eax,DWORD PTR SS:[0x01733AC4]
		mov edi,[eax]
		push eax
		mov ecx,DWORD PTR [0x01733AC4]
		call dword ptr [edi+0x30]
		add esp,0x1C
		// Hien Thi Sl Yeu Cau
		mov eax,[esp+0x1C]
		xor ecx,ecx
		mov cl,[eax+0x8]
		test cl,cl
        jz HienThiSlVp1ChuaChon
		imul ecx,ecx,0x90
		xor edx,edx
		mov dl,[ecx+0x1107258+0x22DC8+0x19]
		xor dl,0xC5
        jmp HienThiSlVp1
		HienThiSlVp1ChuaChon:
		mov edx,0
        HienThiSlVp1:
		mov ecx,[ebx+0x18]
		add ecx,0xA5
		push ecx
		mov ecx,[ebx+0x14]
		add ecx,0x232
		push ecx
		push edx
		xor edx,edx
		mov dl,[eax+0x8C7]
		push edx
		call HienThiSlVPYeuCau
		//
        mov eax,[esp+0x1C]
		xor ecx,ecx
		mov cl,[eax+0x9]
		test cl,cl
		jz HienThiSlVp1ChuaChon2
		imul ecx,ecx,0x90
		xor edx,edx
		mov dl,[ecx+0x1107258+0x22DC8+0x19]
		xor dl,0xC5
		jmp HienThiSlVp2
		HienThiSlVp1ChuaChon2:
		mov edx,0
		HienThiSlVp2:
		mov ecx,[ebx+0x18]
		add ecx,0xF1
		push ecx
		mov ecx,[ebx+0x14]
		add ecx,0x180
		push ecx
		push edx
		xor edx,edx
		mov dl,[eax+0x8CB]
		push edx
		call HienThiSlVPYeuCau
		//
		mov eax,[esp+0x1C]
		xor ecx,ecx
		mov cl,[eax+0xA]
		test cl,cl
		jz HienThiSlVp1ChuaChon3
		imul ecx,ecx,0x90
		xor edx,edx
		mov dl,[ecx+0x1107258+0x22DC8+0x19]
		xor dl,0xC5
		jmp HienThiSlVp3
		HienThiSlVp1ChuaChon3:
		mov edx,0
		HienThiSlVp3:
		mov ecx,[ebx+0x18]
		add ecx,0xF1
		push ecx
		mov ecx,[ebx+0x14]
		add ecx,0x1BA
		push ecx
		push edx
		xor edx,edx
		mov dl,[eax+0x8CF]
		push edx
		call HienThiSlVPYeuCau
		//
        mov eax,[esp+0x1C]
		xor ecx,ecx
		mov cl,[eax+0xB]
		test cl,cl
		jz HienThiSlVp1ChuaChon4
		imul ecx,ecx,0x90
		xor edx,edx
		mov dl,[ecx+0x1107258+0x22DC8+0x19]
		xor dl,0xC5
		jmp HienThiSlVp4
		HienThiSlVp1ChuaChon4:
		mov edx,0
		HienThiSlVp4:
		mov ecx,[ebx+0x18]
		add ecx,0xF1
		push ecx
		mov ecx,[ebx+0x14]
		add ecx,0x1F3
		push ecx
		push edx
		xor edx,edx
		mov dl,[eax+0x8D3]
		push edx
		call HienThiSlVPYeuCau
		//
        mov eax,[esp+0x1C]
		xor ecx,ecx
		mov cl,[eax+0xC]
		test cl,cl
		jz HienThiSlVp1ChuaChon5
		imul ecx,ecx,0x90
		xor edx,edx
		mov dl,[ecx+0x1107258+0x22DC8+0x19]
		xor dl,0xC5
		jmp HienThiSlVp5
		HienThiSlVp1ChuaChon5:
		mov edx,0
		HienThiSlVp5:
		mov ecx,[ebx+0x18]
		add ecx,0xF1
		push ecx
		mov ecx,[ebx+0x14]
		add ecx,0x22C
		push ecx
		push edx
		xor edx,edx
		mov dl,[eax+0x8D7]
		push edx
		call HienThiSlVPYeuCau
		//
        mov eax,[esp+0x1C]
		xor ecx,ecx
		mov cl,[eax+0xD]
		test cl,cl
		jz HienThiSlVp1ChuaChon6
		imul ecx,ecx,0x90
		xor edx,edx
		mov dl,[ecx+0x1107258+0x22DC8+0x19]
		xor dl,0xC5
		jmp HienThiSlVp6
		HienThiSlVp1ChuaChon6:
		mov edx,0
		HienThiSlVp6:
		mov ecx,[ebx+0x18]
		add ecx,0xF1
		push ecx
		mov ecx,[ebx+0x14]
		add ecx,0x265
		push ecx
		push edx
		xor edx,edx
		mov dl,[eax+0x8DB]
		push edx
		call HienThiSlVPYeuCau
		//
        mov eax,[esp+0x1C]
		xor ecx,ecx
		mov cl,[eax+0xE]
		test cl,cl
		jz HienThiSlVp1ChuaChon7
		imul ecx,ecx,0x90
		xor edx,edx
		mov dl,[ecx+0x1107258+0x22DC8+0x19]
		xor dl,0xC5
		jmp HienThiSlVp7
		HienThiSlVp1ChuaChon7:
		mov edx,0
		HienThiSlVp7:
		mov ecx,[ebx+0x18]
		add ecx,0xF1
		push ecx
		mov ecx,[ebx+0x14]
		add ecx,0x29E
		push ecx
		push edx
		xor edx,edx
		mov dl,[eax+0x8DF]
		push edx
		call HienThiSlVPYeuCau
		// Hien Thi Vp Chon

		//
		mov eax,[esp+0x1C]
		xor ecx,ecx
		mov cl,[eax+0x8]
		cmp cl,25
		jb HienThiSlotCan
		cmp cl,140
		ja HienThiSlotCan
        push 0x0
		push 0x1
		imul ecx,ecx,0x90
		lea edx,[ecx+0x0112A020]
		push 0x0
		push edx
		mov edx,[ebx+0x18]
		add edx,0x9B
		push edx
		mov edx,[ebx+0x14]
		add edx,0x1FF
        push edx
		push 0x1
		mov ecx,DWORD PTR SS:[0x01615E90]
		mov eax,0x004913F0
		call eax
		jmp HienThiVpChon3

		HienThiSlotCan:
		mov eax,[esp+0x1C]
		add eax,0x900
		xor ecx,ecx
		mov cx,[eax+0x14]
		xor cx,0xCE43
		test cx,cx
		jz HienThiVpChon3
        push 0x0
		push 0x0
		push 0x0
		push eax
		mov edx,[ebx+0x18]
		add edx,0x9B
		push edx
		mov edx,[ebx+0x14]
		add edx,0x1FF
        push edx
		push 0x1
		mov ecx,DWORD PTR SS:[0x01615E90]
		mov eax,0x004913F0
		call eax

		HienThiVpChon3:
		//
        mov eax,[esp+0x1C]
		xor ecx,ecx
		mov cl,[eax+0x9]
		cmp cl,25
		jb HienThiSlotCan1
		cmp cl,140
		ja HienThiSlotCan1
        push 0x0
		push 0x1
		imul ecx,ecx,0x90
		lea edx,[ecx+0x0112A020]
		push 0x0
		push edx
		mov edx,[ebx+0x18]
		add edx,0xC9
		push edx
		mov edx,[ebx+0x14]
		add edx,0x171
        push edx
		push 0x1
		mov ecx,DWORD PTR SS:[0x01615E90]
		mov eax,0x004913F0
		call eax
		jmp HienThiVpChon4

		HienThiSlotCan1:
		mov eax,[esp+0x1C]
		add eax,0x990
		xor ecx,ecx
		mov cx,[eax+0x14]
		xor cx,0xCE43
		test cx,cx
		jz HienThiVpChon4
		push 0x0
		push 0x0
		push 0x0
		push eax
		mov edx,[ebx+0x18]
		add edx,0xC9
		push edx
		mov edx,[ebx+0x14]
		add edx,0x171
        push edx
		push 0x1
		mov ecx,DWORD PTR SS:[0x01615E90]
		mov eax,0x004913F0
		call eax

		HienThiVpChon4:
		//
        mov eax,[esp+0x1C]
		xor ecx,ecx
		mov cl,[eax+0xA]
		cmp cl,25
		jb HienThiSlotCan2
		cmp cl,140
		ja HienThiSlotCan2
        push 0x0
		push 0x1
		imul ecx,ecx,0x90
		lea edx,[ecx+0x0112A020]
		push 0x0
		push edx
		mov edx,[ebx+0x18]
		add edx,0xC9
		push edx
		mov edx,[ebx+0x14]
		add edx,0x1AB
        push edx
		push 0x1
		mov ecx,DWORD PTR SS:[0x01615E90]
		mov eax,0x004913F0
		call eax
		jmp HienThiVpChon5

		HienThiSlotCan2:
        mov eax,[esp+0x1C]
		add eax,0xA20
		xor ecx,ecx
		mov cx,[eax+0x14]
		xor cx,0xCE43
		test cx,cx
		jz HienThiVpChon5
        push 0x0
		push 0x0
		push 0x0
		push eax
		mov edx,[ebx+0x18]
		add edx,0xC9
		push edx
		mov edx,[ebx+0x14]
		add edx,0x1AB
        push edx
		push 0x1
		mov ecx,DWORD PTR SS:[0x01615E90]
		mov eax,0x004913F0
		call eax

		HienThiVpChon5:
		//
        mov eax,[esp+0x1C]
		xor ecx,ecx
		mov cl,[eax+0xB]
		cmp cl,25
		jb HienThiSlotCan3
		cmp cl,140
		ja HienThiSlotCan3
        push 0x0
		push 0x1
		imul ecx,ecx,0x90
		lea edx,[ecx+0x0112A020]
		push 0x0
		push edx
		mov edx,[ebx+0x18]
		add edx,0xC9
		push edx
		mov edx,[ebx+0x14]
		add edx,0x1E4
        push edx
		push 0x1
		mov ecx,DWORD PTR SS:[0x01615E90]
		mov eax,0x004913F0
		call eax
		jmp HienThiVpChon6

		HienThiSlotCan3:
        mov eax,[esp+0x1C]
		add eax,0xAB0
		xor ecx,ecx
		mov cx,[eax+0x14]
		xor cx,0xCE43
		test cx,cx
		jz HienThiVpChon6
        push 0x0
		push 0x0
		push 0x0
		push eax
		mov edx,[ebx+0x18]
		add edx,0xC9
		push edx
		mov edx,[ebx+0x14]
		add edx,0x1E4
        push edx
		push 0x1
		mov ecx,DWORD PTR SS:[0x01615E90]
		mov eax,0x004913F0
		call eax

		HienThiVpChon6:
		//
        mov eax,[esp+0x1C]
		xor ecx,ecx
		mov cl,[eax+0xC]
		cmp cl,25
		jb HienThiSlotCan4
		cmp cl,140
		ja HienThiSlotCan4
        push 0x0
		push 0x1
		imul ecx,ecx,0x90
		lea edx,[ecx+0x0112A020]
		push 0x0
		push edx
		mov edx,[ebx+0x18]
		add edx,0xC9
		push edx
		mov edx,[ebx+0x14]
		add edx,0x21D
        push edx
		push 0x1
		mov ecx,DWORD PTR SS:[0x01615E90]
		mov eax,0x004913F0
		call eax
		jmp HienThiVpChon7

		HienThiSlotCan4:
		mov eax,[esp+0x1C]
		add eax,0xB40
		xor ecx,ecx
		mov cx,[eax+0x14]
		xor cx,0xCE43
		test cx,cx
		jz HienThiVpChon7
		push 0x0
		push 0x0
        push 0x0
		push eax
		mov edx,[ebx+0x18]
		add edx,0xC9
		push edx
		mov edx,[ebx+0x14]
		add edx,0x21D
        push edx
		push 0x1
		mov ecx,DWORD PTR SS:[0x01615E90]
		mov eax,0x004913F0
		call eax

		HienThiVpChon7:
		//
        mov eax,[esp+0x1C]
		xor ecx,ecx
		mov cl,[eax+0xD]
		cmp cl,25
		jb HienThiSlotCan5
		cmp cl,140
		ja HienThiSlotCan5
        push 0x0
		push 0x1
		imul ecx,ecx,0x90
		lea edx,[ecx+0x0112A020]
		push 0x0
		push edx
		mov edx,[ebx+0x18]
		add edx,0xC9
		push edx
		mov edx,[ebx+0x14]
		add edx,0x256
        push edx
		push 0x1
		mov ecx,DWORD PTR SS:[0x01615E90]
		mov eax,0x004913F0
		call eax
		jmp HienThiVpChon8

		HienThiSlotCan5:
        mov eax,[esp+0x1C]
		add eax,0xBD0
		xor ecx,ecx
		mov cx,[eax+0x14]
		xor cx,0xCE43
		test cx,cx
		jz HienThiVpChon8
        push 0x0
		push 0x0
		push 0x0
		push eax
		mov edx,[ebx+0x18]
		add edx,0xC9
		push edx
		mov edx,[ebx+0x14]
		add edx,0x256
        push edx
		push 0x1
		mov ecx,DWORD PTR SS:[0x01615E90]
		mov eax,0x004913F0
		call eax


		HienThiVpChon8:
		//
        mov eax,[esp+0x1C]
		xor ecx,ecx
		mov cl,[eax+0xE]
		cmp cl,25
		jb HienThiSlotCan6
		cmp cl,140
		ja HienThiSlotCan6
        push 0x0
		push 0x1
		imul ecx,ecx,0x90
		lea edx,[ecx+0x0112A020]
		push 0x0
		push edx
		mov edx,[ebx+0x18]
		add edx,0xC9
		push edx
		mov edx,[ebx+0x14]
		add edx,0x28F
		push edx
		push 0x1
		mov ecx,DWORD PTR SS:[0x01615E90]
		mov eax,0x004913F0
		call eax
		jmp HienThiVpChon9

		HienThiSlotCan6:
        mov eax,[esp+0x1C]
		add eax,0xC60
		xor ecx,ecx
		mov cx,[eax+0x14]
		xor cx,0xCE43
		test cx,cx
		jz HienThiVpChon9
        push 0x0
		push 0x0
		push 0x0
		push eax
		mov edx,[ebx+0x18]
		add edx,0xC9
		push edx
		mov edx,[ebx+0x14]
		add edx,0x28F
        push edx
		push 0x1
		mov ecx,DWORD PTR SS:[0x01615E90]
		mov eax,0x004913F0
		call eax


		HienThiVpChon9:
		//
        mov eax,[esp+0x1C]
		xor ecx,ecx
		mov cl,[eax+0xF]
		cmp cl,25
		jb HienThiVpChon10
		cmp cl,140
		ja HienThiVpChon10
		push 0x0
		push 0x1
		imul ecx,ecx,0x90
		lea edx,[ecx+0x0112A020]
		push 0x0
		push edx
		mov edx,[ebx+0x18]
		add edx,0x77
		push edx
		mov edx,[ebx+0x14]
		add edx,0x1CA
        push edx
		push 0x1
		mov ecx,DWORD PTR SS:[0x01615E90]
		mov eax,0x004913F0
		call eax

		HienThiVpChon10:
		//
        mov eax,[esp+0x1C]
		xor ecx,ecx
		mov cl,[eax+0x10]
		cmp cl,25
		jb EndCheckViTriVp
		cmp cl,140
        ja EndCheckViTriVp
        push 0x0
		push 0x1
		imul ecx,ecx,0x90
		lea edx,[ecx+0x0112A020]
		push 0x0
		push edx
		mov edx,[ebx+0x18]
		add edx,0x77
		push edx
		mov edx,[ebx+0x14]
		add edx,0x234
        push edx
		push 0x1
		mov ecx,DWORD PTR SS:[0x01615E90]
		mov eax,0x004913F0
		call eax
		EndCheckViTriVp:
        mov eax,[esp+0x1C]
		add eax,0xCF0
		xor ecx,ecx
		mov cx,[eax+0x14]
		xor cx,0xCE43
		test cx,cx
		jz ChuaConCheTao
        push 0x0
		push 0x0
		push 0x0
		push eax
		mov edx,[ebx+0x18]
		add edx,0x29
		push edx
		mov edx,[ebx+0x14]
		add edx,0x200
        push edx
		push 0x1
		mov ecx,DWORD PTR SS:[0x01615E90]
		mov eax,0x004913F0
		call eax

		ChuaConCheTao:
		// Hien Thi Danh Sach Che Tao
        mov eax,[esp+0x1C]
		xor ecx,ecx
		mov cl,[eax+0x3]
		cmp cl,0x5
		jae Default
		imul ecx,0x1B0
        mov eax,[esp+0x1C]
		lea eax,[eax+ecx+0x2C]
		push eax
		call HienThiDanhSachCheTao
		//
		mov eax,[esp+0x1C]
		xor ecx,ecx
		mov cl,[eax+0x11]
		test cl,cl
		jz KhongCoThongBaoResult
        mov ecx,DWORD PTR SS:[0x01733AC4]
		push 0xFF000000
		mov edx,[ecx]
	    call dword ptr [edx+0xC]
		add ecx,323
        push ecx
		push 76
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
        push eax
		push 0x2
		push 0x3F800000
		mov edx,[ebx+0x18]
		add edx,0x122
        push eax
		mov edx,[ebx+0x14]
		add edx,0x227
		push edx
		mov eax,DWORD PTR SS:[0x01733AC4]
		mov edi,[eax]
		push eax
		mov ecx,DWORD PTR [0x01733AC4]
		call dword ptr [edi+0x30]
		add esp,0x18
		KhongCoThongBaoResult:
		mov ecx,DWORD PTR SS:[0x01733AC4]
		push 0xFFFFFFFF
		mov edx,[ecx]
		call dword ptr [edx+0xC]
		mov eax,[esp+0x1C]
		xor ecx,ecx
		mov cl,byte ptr [eax+0x7]
		cmp cl,25
		jl HienThiVpNhan
		cmp cl,140
		ja HienThiVpNhan
        push 0x0
		push 0x1
		imul ecx,ecx,0x90
		lea edx,[ecx+0x0112A020]
		push 0x0
		push edx
		mov edx,[ebx+0x18]
		add edx,0x29
		push edx
		mov edx,[ebx+0x14]
		add edx,0x200
        push edx
		push 0x1
		mov ecx,DWORD PTR SS:[0x01615E90]
		mov eax,0x004913F0
		call eax
		HienThiVpNhan:

		mov eax,[esp+0x1C]
		xor ecx,ecx
		mov cl,[eax+0x3]
		cmp ecx,0
		jnz HienThiPage2
        add ecx,10
		push ecx
        mov edx,[ebx+0x18]
		add edx,0x16A
        push edx
		mov ecx,[ebx+0x14]
		add ecx,0x30A
		push ecx
		mov eax,[esp+0x28]
        add eax,0x1010
		push eax
		call GetImageClass
		jmp EndAllFunc

		HienThiPage2:
		cmp ecx,1
		jnz HienThiPage3
        add ecx,10
		push ecx
        mov edx,[ebx+0x18]
		add edx,0x16A
        push edx
		mov ecx,[ebx+0x14]
		add ecx,0x32B
		push ecx
		mov eax,[esp+0x28]
        add eax,0x1010
		push eax
		call GetImageClass
		jmp EndAllFunc

		HienThiPage3:
		cmp ecx,2
		jnz HienThiPage4
		add ecx,10
		push ecx
        mov edx,[ebx+0x18]
		add edx,0x16A
        push edx
		mov ecx,[ebx+0x14]
		add ecx,0x349
		push ecx
		mov eax,[esp+0x28]
        add eax,0x1010
		push eax
		call GetImageClass
		jmp EndAllFunc

		HienThiPage4:
		cmp ecx,3
		jnz HienThiPage5
		add ecx,10
		push ecx
        mov edx,[ebx+0x18]
		add edx,0x16A
        push edx
		mov ecx,[ebx+0x14]
		add ecx,0x369
		push ecx
		mov eax,[esp+0x28]
        add eax,0x1010
		push eax
		call GetImageClass
		jmp EndAllFunc

		HienThiPage5:
		cmp ecx,4
		jnz EndAllFunc
		add ecx,10
		push ecx
        mov edx,[ebx+0x18]
		add edx,0x16A
        push edx
		mov ecx,[ebx+0x14]
		add ecx,0x388
		push ecx
		mov eax,[esp+0x28]
        add eax,0x1010
		push eax
		call GetImageClass

        EndAllFunc:
		push 1
        mov edx,[ebx+0x18]
		add edx,0x17E
		push edx
		mov ecx,[ebx+0x14]
		add ecx,0x1A7
		push ecx
		mov eax,[esp+0x28]
        add eax,0x1010
		push eax
		call GetImageClass
		//
		mov eax,[esp+0x1C]
		xor ecx,ecx
		mov cl,[eax+0x8E0]
        cmp ecx,0
		jnz HienThiPageChon1
		add ecx,20
		push ecx
        mov edx,[ebx+0x18]
		add edx,0x19A
		push edx
		mov ecx,[ebx+0x14]
		add ecx,0x1AB
		push ecx
		mov eax,[esp+0x28]
        add eax,0x1010
		push eax
		call GetImageClass
		jmp EndAllFuncShowPage

		HienThiPageChon1:
		cmp ecx,1
		jnz HienThiPageChon2
		add ecx,20
		push ecx
        mov edx,[ebx+0x18]
		add edx,0x19A
        push edx
		mov ecx,[ebx+0x14]
		add ecx,0x1F3
		push ecx
		mov eax,[esp+0x28]
        add eax,0x1010
		push eax
		call GetImageClass
		jmp EndAllFuncShowPage

		HienThiPageChon2:
		cmp ecx,2
		jnz HienThiPageChon3
		add ecx,20
		push ecx
        mov edx,[ebx+0x18]
		add edx,0x19A
		push edx
		mov ecx,[ebx+0x14]
		add ecx,0x238
		push ecx
		mov eax,[esp+0x28]
        add eax,0x1010
		push eax
		call GetImageClass
		jmp EndAllFuncShowPage

		HienThiPageChon3:
		cmp ecx,3
		jnz HienThiPageChon4
		add ecx,20
		push ecx
        mov edx,[ebx+0x18]
		add edx,0x19A
		push edx
		mov ecx,[ebx+0x14]
		add ecx,0x27E
		push ecx
		mov eax,[esp+0x28]
        add eax,0x1010
		push eax
		call GetImageClass
		jmp EndAllFuncShowPage

		HienThiPageChon4:
		cmp ecx,4
		jnz EndAllFuncShowPage
		add ecx,20
		push ecx
        mov edx,[ebx+0x18]
		add edx,0x19A
		push edx
		mov ecx,[ebx+0x14]
		add ecx,0x2C4
		push ecx
		mov eax,[esp+0x28]
        add eax,0x1010
		push eax
		call GetImageClass

		EndAllFuncShowPage:
		mov eax,[esp+0x1C]
        xor ecx,ecx
		mov cl,[eax+0x8E0]
		add ecx,319
        push ecx
		push 76
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
        push eax
		push 0x1
		push 0x3F800000
		mov edx,[ebx+0x18]
		sub edx,0x12
        push edx
		mov edx,[ebx+0x14]
		add edx,0x310
		push edx
		mov eax,DWORD PTR SS:[0x01733AC4]
		mov edi,[eax]
		push eax
		mov ecx,DWORD PTR [0x01733AC4]
		call dword ptr [edi+0x30]
		add esp,0x18
		//Hover Success Item
		mov eax,[esp+0x1C]
		xor ecx,ecx
		mov cl,[eax+0x8E1]
		cmp cl,8
		jnz Default
		mov cx,[eax+0x4]
		cmp cx,0x0
        jz Default
        xor edx,edx
        mov eax,[esp+0x1C]
		mov dx,[eax+0x4]
		push edx
		push 317
		push 76
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov eax,[esp+0x24]
		lea eax,[eax+0xD80]
        push 0x200
        push eax
		mov esi,DWORD PTR SS:[0x0085C538]
		call esi
		add esp,0x10
        mov eax,[esp+0x1C]
		lea eax,[eax+0xD80]
		push eax
        mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		test eax,eax
		jz Default
		mov ecx,[esp+0x1C]
		mov [ecx+0x1010+0x70],eax
		mov  DWORD PTR SS : [ecx +0x1010 + 0x9C] , 0
		mov  DWORD PTR SS : [ecx +0x1010 + 0xA0] , 259
		mov  DWORD PTR SS : [ecx +0x1010 + 0x98] , 0
		mov  DWORD PTR SS : [ecx +0x1010 + 0xA4] , 368
        push 0xFF7F0000
		push 5188
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,[ebx+0x18]
		add ecx,0x37
		mov edx,[ebx+0x14]
		add edx,0x247
		push ecx
		push edx
		mov ecx, [esp+0x2C]
		add ecx,0x1010
		mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
		call eax
		mov ecx,[esp+0x1C]
        add ecx,0x1010
		push 0x1732CC8
		mov eax, 0x7B9850
		call eax //Draw1
		//
		Default:
        popad
		mov eax,[ebx+0x10]
		push esi
        test eax,eax
		push 0x004FC446
		ret

		CopySlotShow:
		sub esp,0x4
		xor ecx,ecx
		mov [esp],ecx
		BackLoopCopySlotShow:
		mov ecx,[esp]
		mov eax,[esp+0x8]
		xor edx,edx
		mov edx,[eax+ecx]
		mov eax,[esp+0xC]
		mov [eax+ecx],edx
		mov ecx,[esp]
		add ecx,0x4
		mov [esp],ecx
		cmp ecx,0x90
		jl BackLoopCopySlotShow
		add esp,0x4
        ret 0x8


		HienThiDanhSachCheTao:
		sub esp,0x4
		xor ecx,ecx
		mov [esp],ecx
		BackLoopHienThiDanhSach:
        mov ecx,DWORD PTR SS:[0x01733AC4]
		push 0xFFFFFFFF
		mov edx,[ecx]
	    call dword ptr [edx+0xC]
		mov ecx,[esp]
		imul ecx,0x24
		mov eax,[esp+0x8]
		xor edx,edx
		mov dl,byte ptr [eax+ecx+0x2]
		test edx,edx
		jz EndShowListDanhSachCheTao
        xor edx,edx
		mov dx,word ptr [eax+ecx]
        add edx,333
		push edx
		push 76
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
        push eax
		push 0x0
		push 0x3F800000
		mov edx,[ebx+0x18]
		add edx,0x33
		mov eax,[esp+0xC]
		imul eax,0x18
		add eax,edx
        push eax
		mov edx,[ebx+0x14]
		add edx,0x2C7
		push edx
		mov eax,DWORD PTR SS:[0x01733AC4]
		mov edi,[eax]
		push eax
		mov ecx,DWORD PTR [0x01733AC4]
		call dword ptr [edi+0x30]
		add esp,0x18
		mov eax,[esp]
		add eax,1
		mov [esp],eax
		cmp eax,12
		jl BackLoopHienThiDanhSach
        EndShowListDanhSachCheTao:
		add esp,0x4
		ret 0x4

		XoaGiaTriCuText:
		sub esp,0x4
        xor ecx,ecx
		mov [esp],ecx
		BackLoopXoaGiaTriCuText:
		mov ecx,[esp]
		mov eax,[esp+0x8]
		mov byte ptr[eax+ecx],0x0
		mov ecx,[esp]
		add ecx,1
		mov [esp],ecx
		cmp ecx,0x200
		jl BackLoopXoaGiaTriCuText
		add esp,0x4
        ret 0x4

        GetImageClass:
		mov eax,[esp+0x10]
		cmp eax,1
		jz HienThiMucCHon
		cmp eax,10
		jz HienThiPage1Image
		cmp eax,11
		jz HienThiPage2Image
		cmp eax,12
		jz HienThiPage3Image
		cmp eax,13
		jz HienThiPage4Image
		cmp eax,14
		jz HienThiPage5Image
		cmp eax,20
		jz HienThiPage5ImageMuc1
		cmp eax,21
		jz HienThiPage5ImageMuc2
		cmp eax,22
		jz HienThiPage5ImageMuc3
		cmp eax,23
		jz HienThiPage5ImageMuc4
		cmp eax,24
		jz HienThiPage5ImageMuc5
        cmp eax,50
		jz HienThiButtonCheTao
		push 330
		push 76
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,[esp+0x4]
		mov  DWORD PTR SS : [ecx + 0x70] , eax
		mov  DWORD PTR SS : [ecx + 0x9C] , 78
		mov  DWORD PTR SS : [ecx + 0xA0] , 514
		mov  DWORD PTR SS : [ecx + 0x98] , 0
		mov  DWORD PTR SS : [ecx + 0xA4] , 466
		jmp ProcessHienThiImageKinhMach

		HienThiButtonCheTao:
        push 316
		push 76
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,[esp+0x4]
		mov  DWORD PTR SS : [ecx + 0x70] , eax
		mov  DWORD PTR SS : [ecx + 0x9C] , 182
		mov  DWORD PTR SS : [ecx + 0xA0] , 256
		mov  DWORD PTR SS : [ecx + 0x98] , 114
		mov  DWORD PTR SS : [ecx + 0xA4] , 219
		jmp ProcessHienThiImageKinhMach

		HienThiPage5ImageMuc1:
		push 318
		push 76
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,[esp+0x4]
		mov  DWORD PTR SS : [ecx + 0x70] , eax
		mov  DWORD PTR SS : [ecx + 0x9C] , 494
		mov  DWORD PTR SS : [ecx + 0xA0] , 66
		mov  DWORD PTR SS : [ecx + 0x98] , 4
		mov  DWORD PTR SS : [ecx + 0xA4] , 516
		jmp ProcessHienThiImageKinhMach

		HienThiPage5ImageMuc2:
		push 318
		push 76
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,[esp+0x4]
		mov  DWORD PTR SS : [ecx + 0x70] , eax
		mov  DWORD PTR SS : [ecx + 0x9C] , 494
		mov  DWORD PTR SS : [ecx + 0xA0] , 138
		mov  DWORD PTR SS : [ecx + 0x98] , 76
		mov  DWORD PTR SS : [ecx + 0xA4] , 516
		jmp ProcessHienThiImageKinhMach

		HienThiPage5ImageMuc3:
		push 318
		push 76
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,[esp+0x4]
		mov  DWORD PTR SS : [ecx + 0x70] , eax
		mov  DWORD PTR SS : [ecx + 0x9C] , 494
		mov  DWORD PTR SS : [ecx + 0xA0] , 207
		mov  DWORD PTR SS : [ecx + 0x98] , 145
		mov  DWORD PTR SS : [ecx + 0xA4] , 516
		jmp ProcessHienThiImageKinhMach

		HienThiPage5ImageMuc4:
		push 318
		push 76
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,[esp+0x4]
		mov  DWORD PTR SS : [ecx + 0x70] , eax
		mov  DWORD PTR SS : [ecx + 0x9C] , 494
		mov  DWORD PTR SS : [ecx + 0xA0] , 277
		mov  DWORD PTR SS : [ecx + 0x98] , 215
		mov  DWORD PTR SS : [ecx + 0xA4] , 516
		jmp ProcessHienThiImageKinhMach

		HienThiPage5ImageMuc5:
        push 318
		push 76
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,[esp+0x4]
		mov  DWORD PTR SS : [ecx + 0x70] , eax
		mov  DWORD PTR SS : [ecx + 0x9C] , 494
		mov  DWORD PTR SS : [ecx + 0xA0] , 349
		mov  DWORD PTR SS : [ecx + 0x98] , 285
		mov  DWORD PTR SS : [ecx + 0xA4] , 516
		jmp ProcessHienThiImageKinhMach

		HienThiMucCHon:
        push 330
		push 76
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,[esp+0x4]
		mov  DWORD PTR SS : [ecx + 0x70] , eax
		mov  DWORD PTR SS : [ecx + 0x9C] , 466
		mov  DWORD PTR SS : [ecx + 0xA0] , 352
		mov  DWORD PTR SS : [ecx + 0x98] , 0
		mov  DWORD PTR SS : [ecx + 0xA4] , 520
		jmp ProcessHienThiImageKinhMach

		HienThiPage1Image:
        push 330
		push 76
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,[esp+0x4]
		mov  DWORD PTR SS : [ecx + 0x70] , eax
		mov  DWORD PTR SS : [ecx + 0x9C] , 485
		mov  DWORD PTR SS : [ecx + 0xA0] , 383
		mov  DWORD PTR SS : [ecx + 0x98] , 355
		mov  DWORD PTR SS : [ecx + 0xA4] , 501
		jmp ProcessHienThiImageKinhMach

		HienThiPage2Image:
        push 330
		push 76
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,[esp+0x4]
		mov  DWORD PTR SS : [ecx + 0x70] , eax
		mov  DWORD PTR SS : [ecx + 0x9C] , 485
		mov  DWORD PTR SS : [ecx + 0xA0] , 414
		mov  DWORD PTR SS : [ecx + 0x98] , 388
		mov  DWORD PTR SS : [ecx + 0xA4] , 501
		jmp ProcessHienThiImageKinhMach

		HienThiPage3Image:
        push 330
		push 76
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,[esp+0x4]
		mov  DWORD PTR SS : [ecx + 0x70] , eax
		mov  DWORD PTR SS : [ecx + 0x9C] , 485
		mov  DWORD PTR SS : [ecx + 0xA0] , 445
		mov  DWORD PTR SS : [ecx + 0x98] , 418
		mov  DWORD PTR SS : [ecx + 0xA4] , 501
		jmp ProcessHienThiImageKinhMach

		HienThiPage4Image:
        push 330
		push 76
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,[esp+0x4]
		mov  DWORD PTR SS : [ecx + 0x70] , eax
		mov  DWORD PTR SS : [ecx + 0x9C] , 485
		mov  DWORD PTR SS : [ecx + 0xA0] , 477
		mov  DWORD PTR SS : [ecx + 0x98] , 450
		mov  DWORD PTR SS : [ecx + 0xA4] , 501
		jmp ProcessHienThiImageKinhMach

		HienThiPage5Image:
		push 330
		push 76
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,[esp+0x4]
		mov  DWORD PTR SS : [ecx + 0x70] , eax
		mov  DWORD PTR SS : [ecx + 0x9C] , 485
		mov  DWORD PTR SS : [ecx + 0xA0] , 508
		mov  DWORD PTR SS : [ecx + 0x98] , 481
		mov  DWORD PTR SS : [ecx + 0xA4] , 501

        ProcessHienThiImageKinhMach:
		push 0xFF7F0000
		push 5188
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,[esp+0x14]
		mov edx,[esp+0x10]
		push ecx
		push edx
		mov ecx, [esp+0x14]
		mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
		call eax
		mov ecx,[esp+0x4]
		push 0x1732CC8
		mov eax, 0x7B9850
		call eax //Draw1
		ret 0x10

        HienThiSlVPYeuCau:
		mov eax,[esp+0x8]
		mov ecx,[esp+0x4]
		push ecx
        push eax
		push 331
		push 76
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		push 0x2
		push 0x3F800000
		mov eax,DWORD PTR SS:[0x01733AC4]
		mov edi,[eax]
		mov edx,[esp+0x24]
		push edx
		mov edx,[esp+0x24]
        push edx
		push eax
		mov ecx,DWORD PTR [0x01733AC4]
		call dword ptr [edi+0x30]
		add esp,0x20
		ret 0x10

        AddOptionImage:
		sub esp,0x4
		xor ecx,ecx
		mov [esp],ecx
		BackGetOptionImage:
		mov ecx,[esp]
		mov eax, 0x010CC088
		mov edx,[eax+ecx]
		mov eax,[esp+0x8]
		mov [eax+ecx],edx
		add ecx,4
		mov [esp],ecx
		cmp ecx,0xB8
		jl BackGetOptionImage
		add esp,0x4
		ret 0x4
	}
};
__declspec(naked)void GetPozJoinEventMap()  //004FDC67
{
__asm
	{
       nop
	   nop
	   nop
	   nop
	   nop
	   pushad
	   //
	   mov ecx,ecx
	   mov ecx,[ebx+0x10]
	   test ecx,ecx
	   jz Default
       mov ecx,[ebx+0x000003D0]
	   cmp ecx,0x3
	   jnz Default
	   mov ecx,[esp+0x1C]
	   xor eax,eax
	   mov al,[ecx+0x8E2]
	   test al,al
       jz ButttonShowOn
       mov ecx,DWORD PTR SS:[0x01733AD0]
	   mov eax,0x007D7FD0
	   call eax
	   mov ecx,[esp+0x1C]
	   mov cl,[eax+0xC]
	   test cl,cl
	   jz ChangeFlagPoz
	   mov edx,[esp+0x1C]
	   mov cl,[edx+0x1]
       test cl,cl
	   jnz Default
       mov ecx,[esp+0x1C]
	   push ecx
	   push eax
	   call CheckPozCheTao
	   jmp Default

	   ButttonShowOn:
       mov ecx,DWORD PTR SS:[0x01733AD0]
	   mov eax,0x007D7FD0
	   call eax
	   mov ecx,[esp+0x1C]
	   mov cl,[eax+0xC]
	   test cl,cl
	   jz ChangeFlagPoz
	   mov edx,[esp+0x1C]
	   mov cl,[edx+0x1]
       test cl,cl
	   jnz Default
       mov ecx,[esp+0x1C]
	   push ecx
	   push eax
	   call CheckPozNutCheTao
	   Default:
       popad
	   mov ecx,DWORD PTR SS:[0x01733AC4]
	   push 0x004FDC6D
	   ret

	   ChangeFlagPoz:
	   //
       mov ecx,[esp+0x1C]
	   push ecx
	   push eax
       call CheckPozHoverCheTao
	   //
	   popad
       mov byte ptr [eax+0x1],0
	   mov ecx,DWORD PTR SS:[0x01733AC4]
	   push 0x004FDC6D
	   ret

	   CheckPozNutCheTao:
       mov eax,[esp+0x4]
	   mov ecx,[eax+0x18]
	   mov edx,[ebx+0x18]
	   add edx,265
	   cmp ecx,edx
	   jl CheckPozNutCheTaoEnd
	   add edx,31
	   cmp ecx,edx
	   ja CheckPozNutCheTaoEnd
       mov eax,[esp+0x4]
	   mov ecx,[eax+0x10]
	   mov edx,[ebx+0x14]
	   add edx,7
	   cmp ecx,edx
	   jl CheckPozNutCheTaoEnd
	   add edx,135
	   cmp ecx,edx
	   ja CheckPozNutCheTaoEnd
	   mov eax,[esp+0x8]
	   mov cl,[eax+0x8E2]
	   test cl,cl
	   jz HienThiPageCheTaoPozNutButton
	   mov byte ptr [eax+0x8E2],0
       mov byte ptr [eax+0x1],1
	   ret 0x8

	   HienThiPageCheTaoPozNutButton:
	   mov byte ptr [eax+0x8E2],1
	   mov byte ptr [eax+0x1],1
	   ret 0x8

	   CheckPozNutCheTaoEnd:
       ret 0x8


	   CheckPozHoverCheTao:
       mov eax,[esp+0x4]
	   mov ecx,[eax+0x18]
	   mov edx,[ebx+0x18]
	   add edx,38
	   cmp ecx,edx
	   jl EndCheckPozHover
	   add edx,30
	   cmp ecx,edx
	   ja HoverAnotherItemReqeust
       mov eax,[esp+0x4]
	   mov ecx,[eax+0x10]
	   mov edx,[ebx+0x14]
	   add edx,509
	   cmp ecx,edx
	   jl HoverAnotherItemReqeust
	   add edx,30
	   cmp ecx,edx
	   ja HoverAnotherItemReqeust
	   mov eax,[esp+0x8]
	   mov byte ptr [eax+0x8E1],0x8
	   ret 0x8

       HoverAnotherItemReqeust:
	   mov eax,[esp+0x4]
	   mov ecx,[eax+0x18]
	   mov edx,[ebx+0x18]
	   add edx,156
	   cmp ecx,edx
	   jl EndCheckPozHover
	   add edx,30
	   cmp ecx,edx
	   ja CheckPozHoverItemRqOther
       mov eax,[esp+0x4]
	   mov ecx,[eax+0x10]
	   mov edx,[ebx+0x14]
	   add edx,511
	   cmp ecx,edx
	   jl EndCheckPozHover
	   add edx,30
	   cmp ecx,edx
	   ja EndCheckPozHover
	   mov eax,[esp+0x8]
	   mov byte ptr [eax+0x8E1],0x1
       ret 0x8

	   CheckPozHoverItemRqOther:
       mov eax,[esp+0x4]
	   mov ecx,[eax+0x18]
	   mov edx,[ebx+0x18]
	   add edx,201
	   cmp ecx,edx
	   jl EndCheckPozHover
	   add edx,30
	   cmp ecx,edx
	   ja EndCheckPozHover
       mov eax,[esp+0x4]
	   mov ecx,[eax+0x10]
	   mov edx,[ebx+0x14]
	   add edx,368
	   cmp ecx,edx
	   jl EndCheckPozHover
	   add edx,30
	   cmp ecx,edx
	   ja KiemTraHoverItem2
       mov eax,[esp+0x8]
	   mov byte ptr [eax+0x8E1],0x2
	   ret 0x8

	   KiemTraHoverItem2:
       mov eax,[esp+0x4]
	   mov ecx,[eax+0x10]
	   mov edx,[ebx+0x14]
	   add edx,426
	   cmp ecx,edx
	   jl EndCheckPozHover
	   add edx,30
	   cmp ecx,edx
	   ja KiemTraHoverItem3
       mov eax,[esp+0x8]
	   mov byte ptr [eax+0x8E1],0x3
	   ret 0x8

	   KiemTraHoverItem3:
       mov eax,[esp+0x4]
	   mov ecx,[eax+0x10]
	   mov edx,[ebx+0x14]
	   add edx,483
	   cmp ecx,edx
	   jl EndCheckPozHover
	   add edx,30
	   cmp ecx,edx
	   ja KiemTraHoverItem4
       mov eax,[esp+0x8]
	   mov byte ptr [eax+0x8E1],0x4
	   ret 0x8

	   KiemTraHoverItem4:
       mov eax,[esp+0x4]
	   mov ecx,[eax+0x10]
	   mov edx,[ebx+0x14]
	   add edx,536
	   cmp ecx,edx
	   jl EndCheckPozHover
	   add edx,30
	   cmp ecx,edx
	   ja KiemTraHoverItem5
	   mov eax,[esp+0x8]
	   mov byte ptr [eax+0x8E1],0x5
       ret 0x8

	   KiemTraHoverItem5:
       mov eax,[esp+0x4]
	   mov ecx,[eax+0x10]
	   mov edx,[ebx+0x14]
	   add edx,598
	   cmp ecx,edx
	   jl EndCheckPozHover
	   add edx,30
	   cmp ecx,edx
	   ja KiemTraHoverItem6
	   mov eax,[esp+0x8]
	   mov byte ptr [eax+0x8E1],0x6
	   ret 0x8

	   KiemTraHoverItem6:
       mov eax,[esp+0x4]
	   mov ecx,[eax+0x10]
	   mov edx,[ebx+0x14]
	   add edx,654
	   cmp ecx,edx
	   jl EndCheckPozHover
	   add edx,30
	   cmp ecx,edx
	   ja EndCheckPozHover
       mov eax,[esp+0x8]
	   mov byte ptr [eax+0x8E1],0x7
       ret 0x8

	   EndCheckPozHover:
       mov eax,[esp+0x8]
	   mov byte ptr [eax+0x8E1],0x0
       ret 0x8

	   CheckPozCheTao:
	   mov eax,[esp+0x4]
	   mov ecx,[eax+0x10]
	   mov edx,[ebx+0x14]
	   add edx,349
	   cmp ecx,edx
	   jl CheckPozNutCheTaoPageChinhShow
	   add edx,353
	   cmp ecx,edx
	   ja CheckPozPage
	   mov eax,[esp+0x4]
	   mov ecx,[eax+0x18]
	   mov edx,[ebx+0x18]
	   add edx,336
	   cmp ecx,edx
	   jl EndCheckPoz
	   add edx,17
	   cmp ecx,edx
       ja CheckPozMucTypeCheTao
       mov eax,[esp+0x4]
	   mov ecx,[eax+0x10]
	   mov edx,[ebx+0x14]
	   add edx,563
	   cmp ecx,edx
	   jl EndCheckPoz
	   add edx,55
	   cmp ecx,edx
	   ja CheckPozHuy
       mov eax,[esp+0x8]
	   mov byte ptr [eax+0x1],1
	   mov dword ptr [eax+0x8AC],0xA47C0010
	   xor ecx,ecx
       mov cx,[eax+0x4]
	   mov [eax+0x8B0],cx
       xor ecx,ecx
       mov cl,[eax+0x8]
	   mov [eax+0x8B2],cl
       xor ecx,ecx
	   mov cl,[eax+0x9]
	   mov [eax+0x8B3],cl
	   xor ecx,ecx
	   mov cl,[eax+0xA]
	   mov [eax+0x8B4],cl
	   xor ecx,ecx
	   mov cl,[eax+0xB]
	   mov [eax+0x8B5],cl
	   xor ecx,ecx
	   mov cl,[eax+0xC]
	   mov [eax+0x8B6],cl
	   xor ecx,ecx
	   mov cl,[eax+0xD]
	   mov [eax+0x8B7],cl
	   xor ecx,ecx
	   mov cl,[eax+0xE]
	   mov [eax+0x8B8],cl
	   xor ecx,ecx
	   mov cl,[eax+0xF]
	   mov [eax+0x8B9],cl
	   xor ecx,ecx
       mov cl,[eax+0x10]
	   mov [eax+0x8BA],cl
	   lea eax,[eax+0x8AC]
	   push eax
	   mov ecx,0x155EE60
	   mov eax,0x006B2F60
	   call eax
	   ret 0x8

       CheckPozNutCheTaoPageChinhShow:
       mov eax,[esp+0x4]
	   mov ecx,[eax+0x18]
	   mov edx,[ebx+0x18]
	   add edx,265
	   cmp ecx,edx
	   jl EndCheckPoz
	   add edx,31
	   cmp ecx,edx
	   ja EndCheckPoz
       mov eax,[esp+0x4]
	   mov ecx,[eax+0x10]
	   mov edx,[ebx+0x14]
	   add edx,7
	   cmp ecx,edx
	   jl EndCheckPoz
	   add edx,135
	   cmp ecx,edx
	   ja EndCheckPoz
	   mov eax,[esp+0x8]
	   mov cl,[eax+0x8E2]
	   test cl,cl
	   jz HienThiPageCheTaoPozNutButton2
	   mov byte ptr [eax+0x8E2],0
	   mov byte ptr [eax+0x1],1
	   ret 0x8

	   HienThiPageCheTaoPozNutButton2:
	   mov byte ptr [eax+0x8E2],1
       mov byte ptr [eax+0x1],1
	   ret 0x8

	   CheckPozHuy:
       mov eax,[esp+0x4]
	   mov ecx,[eax+0x10]
	   mov edx,[ebx+0x14]
	   add edx,631
	   cmp ecx,edx
	   jl EndCheckPoz
	   add edx,55
	   cmp ecx,edx
	   ja EndCheckPoz
       mov eax,[esp+0x8]
       mov byte ptr [eax+0x1],1
	   mov dword ptr [eax+0x4],0x0
	   mov dword ptr [eax+0x8],0x0
	   mov dword ptr [eax+0xC],0x0
	   mov word ptr [eax+0x10],0x0
       xor edx,edx
	   mov [eax+0x8C4],edx
	   mov [eax+0x8C8],edx
	   mov [eax+0x8CC],edx
	   mov [eax+0x8D0],edx
	   mov [eax+0x8D4],edx
	   mov [eax+0x8D8],edx
	   mov [eax+0x8DC],edx
	   ret 0x8

	   GhanGiaTriSlotYeuCau:
	   mov eax,[esp+0x4]
	   mov ecx,[esp+0x8]
	   xor cl,0x1F
	   mov [eax+0x16],cl
       mov eax,[esp+0x4]
	   mov ecx,[esp+0xC]
	   xor cx,0xCE43
	   mov [eax+0x14],cx
       mov eax,[esp+0x4]
	   mov ecx,1
	   xor cl,0xC5
	   mov [eax+0x19],cl
	   ret 0xC

	   KhongCoVatPhamRequest:
	   mov eax,[esp+0x4]
	   mov ecx,0
	   xor cl,0x1F
	   mov [eax+0x16],cl
       mov eax,[esp+0x4]
	   mov ecx,0
	   xor cx,0xCE43
	   mov [eax+0x14],cx
       mov eax,[esp+0x4]
	   mov ecx,0
	   xor cl,0xC5
	   mov [eax+0x19],cl
       ret 0x4


	   CheckPozMucTypeCheTao:
       mov eax,[esp+0x4]
	   mov ecx,[eax+0x18]
	   mov edx,[ebx+0x18]
	   add edx,395
	   cmp ecx,edx
	   jl EndCheckPoz
	   add edx,16
	   cmp ecx,edx
	   ja EndCheckPoz
       mov eax,[esp+0x4]
	   mov ecx,[eax+0x10]
	   mov edx,[ebx+0x14]
	   add edx,357
	   cmp ecx,edx
	   jl EndCheckPoz
	   add edx,56
	   cmp ecx,edx
	   ja CheckPozPageQuanAo
	   mov eax,[esp+0x8]
	   mov byte ptr [eax+0x1],1
	   mov byte ptr [eax+0x8E0],0
	   mov dword ptr [eax+0x8AC],0xA37C0005
	   mov byte ptr [eax+0x8B0],0x1
	   lea eax,[eax+0x8AC]
	   push eax
	   mov ecx,0x155EE60
	   mov eax,0x006B2F60
	   call eax
	   ret 0x8

	   CheckPozPageQuanAo:
       mov eax,[esp+0x4]
	   mov ecx,[eax+0x10]
	   mov edx,[ebx+0x14]
	   add edx,428
	   cmp ecx,edx
	   jl EndCheckPoz
	   add edx,56
	   cmp ecx,edx
	   ja CheckPozPageTinVat
	   mov eax,[esp+0x8]
	   mov byte ptr [eax+0x1],1
	   mov byte ptr [eax+0x8E0],1
	   mov dword ptr [eax+0x8AC],0xA37C0005
       mov byte ptr [eax+0x8B0],0x2
	   lea eax,[eax+0x8AC]
	   push eax
	   mov ecx,0x155EE60
	   mov eax,0x006B2F60
	   call eax
	   ret 0x8

	   CheckPozPageTinVat:
       mov eax,[esp+0x4]
	   mov ecx,[eax+0x10]
	   mov edx,[ebx+0x14]
	   add edx,497
	   cmp ecx,edx
	   jl EndCheckPoz
	   add edx,56
	   cmp ecx,edx
	   ja CheckPozPageNguyenlieu
	   mov eax,[esp+0x8]
	   mov byte ptr [eax+0x1],1
	   mov byte ptr [eax+0x8E0],2
	   mov dword ptr [eax+0x8AC],0xA37C0005
       mov byte ptr [eax+0x8B0],0x3
	   lea eax,[eax+0x8AC]
	   push eax
	   mov ecx,0x155EE60
	   mov eax,0x006B2F60
	   call eax
	   ret 0x8

	   CheckPozPageNguyenlieu:
       mov eax,[esp+0x4]
	   mov ecx,[eax+0x10]
	   mov edx,[ebx+0x14]
	   add edx,567
	   cmp ecx,edx
	   jl EndCheckPoz
	   add edx,56
	   cmp ecx,edx
	   ja CheckPozPageBuaChu
	   mov eax,[esp+0x8]
	   mov byte ptr [eax+0x1],1
	   mov byte ptr [eax+0x8E0],3
	   mov dword ptr [eax+0x8AC],0xA37C0005
	   mov byte ptr [eax+0x8B0],0x4
	   lea eax,[eax+0x8AC]
	   push eax
	   mov ecx,0x155EE60
	   mov eax,0x006B2F60
	   call eax
	   ret 0x8

	   CheckPozPageBuaChu:
       mov eax,[esp+0x4]
	   mov ecx,[eax+0x10]
	   mov edx,[ebx+0x14]
	   add edx,638
	   cmp ecx,edx
	   jl EndCheckPoz
	   add edx,56
	   cmp ecx,edx
	   ja EndCheckPoz
	   mov eax,[esp+0x8]
	   mov byte ptr [eax+0x1],1
	   mov byte ptr [eax+0x8E0],4
	   mov dword ptr [eax+0x8AC],0xA37C0005
	   mov byte ptr [eax+0x8B0],0x5
	   lea eax,[eax+0x8AC]
	   push eax
	   mov ecx,0x155EE60
	   mov eax,0x006B2F60
	   call eax
	   ret 0x8

	   CheckPozPage:
	   add edx,155
	   cmp ecx,edx
       ja EndCheckPoz
       mov eax,[esp+0x4]
	   mov ecx,[eax+0x10]
	   mov edx,[ebx+0x14]
	   add edx,705
	   cmp ecx,edx
	   jl EndCheckPoz
	   add edx,155
	   cmp ecx,edx
	   ja EndCheckPoz
       mov eax,[esp+0x4]
	   mov ecx,[eax+0x18]
	   mov edx,[ebx+0x18]
	   add edx,39
	   cmp ecx,edx
	   jl EndCheckPoz
	   add edx,23
	   cmp ecx,edx
	   ja CheckCT2
       mov eax,[esp+0x8]
       mov byte ptr [eax+0x1],1
	   xor ecx,ecx
	   mov cl,[eax+0x3]
	   xor edx,edx
	   imul ecx,0x1B0
	   lea eax,[eax+ecx+0x2C]
       mov ecx,0
       imul ecx,0x24
	   mov dx,word ptr[eax+ecx]
       mov ebx,[esp+0x8]
	   mov [ebx+0x4],dx
       xor edx,edx
	   mov dl,[eax+ecx+0x2]
	   mov [ebx+0x6],dl
       xor edx,edx
	   mov dl,[eax+ecx+0x3]
	   mov [ebx+0x7],dl
	   //
	   mov dword ptr [ebx+0x8],0x0
	   mov dword ptr [ebx+0xC],0x0
	   mov word ptr [ebx+0x10],0x0
	   //
	   mov edx,[eax+ecx+0x4]
	   mov [ebx+0x8C0],edx
	   mov edx,[eax+ecx+0x8]
	   mov [ebx+0x8C4],edx
	   mov edx,[eax+ecx+0xC]
	   mov [ebx+0x8C8],edx
	   mov edx,[eax+ecx+0x10]
	   mov [ebx+0x8CC],edx
	   mov edx,[eax+ecx+0x14]
	   mov [ebx+0x8D0],edx
	   mov edx,[eax+ecx+0x18]
	   mov [ebx+0x8D4],edx
	   mov edx,[eax+ecx+0x1C]
	   mov [ebx+0x8D8],edx
	   mov edx,[eax+ecx+0x20]
	   mov [ebx+0x8DC],edx
	   jmp GetGiaTriFromItemRequest

       GetGiaTriFromItemRequest:
       xor ecx,ecx
       mov eax,[esp+0x8]
	   mov cx,[eax+0x8C5]
	   test cx,cx
	   jz KhongHienThiVPNay
	   push ecx
       xor ecx,ecx
	   mov cl,[eax+0x8C4]
	   push ecx
	   mov eax,[esp+0x10]
	   add eax,0x900
	   push eax
	   call GhanGiaTriSlotYeuCau
	   jmp CheckHienThiVp2

	   KhongHienThiVPNay:
	   mov eax,[esp+0x8]
       add eax,0x900
	   push eax
	   call KhongCoVatPhamRequest
	   CheckHienThiVp2:
       xor ecx,ecx
       mov eax,[esp+0x8]
	   mov cx,[eax+0x8C9]
	   test cx,cx
	   jz KhongHienThiVPNay1
       push ecx
       xor ecx,ecx
	   mov cl,[eax+0x8C8]
	   push ecx
	   mov eax,[esp+0x10]
	   add eax,0x990
	   push eax
	   call GhanGiaTriSlotYeuCau
	   jmp CheckHienThiVp3

	   KhongHienThiVPNay1:
	   mov eax,[esp+0x8]
       add eax,0x990
	   push eax
	   call KhongCoVatPhamRequest
       CheckHienThiVp3:
       xor ecx,ecx
       mov eax,[esp+0x8]
	   mov cx,[eax+0x8CD]
	   test cx,cx
	   jz KhongHienThiVPNay2
       push ecx
       xor ecx,ecx
	   mov cl,[eax+0x8CC]
	   push ecx
	   mov eax,[esp+0x10]
	   add eax,0xA20
	   push eax
	   call GhanGiaTriSlotYeuCau
       jmp CheckHienThiVp4
	   KhongHienThiVPNay2:
       mov eax,[esp+0x8]
       add eax,0xA20
	   push eax
	   call KhongCoVatPhamRequest
	   CheckHienThiVp4:
       xor ecx,ecx
       mov eax,[esp+0x8]
	   mov cx,[eax+0x8D1]
	   test cx,cx
	   jz KhongHienThiVPNay3
       push ecx
       xor ecx,ecx
	   mov cl,[eax+0x8D0]
	   push ecx
	   mov eax,[esp+0x10]
	   add eax,0xAB0
	   push eax
	   call GhanGiaTriSlotYeuCau
	   jmp CheckHienThiVp5

	   KhongHienThiVPNay3:
       mov eax,[esp+0x8]
       add eax,0xAB0
	   push eax
	   call KhongCoVatPhamRequest
	   CheckHienThiVp5:
       xor ecx,ecx
       mov eax,[esp+0x8]
	   mov cx,[eax+0x8D5]
	   test cx,cx
	   jz KhongHienThiVPNay4
       push ecx
       xor ecx,ecx
	   mov cl,[eax+0x8D4]
	   push ecx
	   mov eax,[esp+0x10]
	   add eax,0xB40
	   push eax
	   call GhanGiaTriSlotYeuCau
	   jmp CheckHienThiVp6

	   KhongHienThiVPNay4:
       mov eax,[esp+0x8]
       add eax,0xB40
	   push eax
	   call KhongCoVatPhamRequest
	   CheckHienThiVp6:
       xor ecx,ecx
       mov eax,[esp+0x8]
	   mov cx,[eax+0x8D9]
	   test cx,cx
	   jz KhongHienThiVPNay5
       push ecx
       xor ecx,ecx
	   mov cl,[eax+0x8D8]
	   push ecx
	   mov eax,[esp+0x10]
	   add eax,0xBD0
	   push eax
	   call GhanGiaTriSlotYeuCau
	   jmp CheckHienThiVp7

	   KhongHienThiVPNay5:
       mov eax,[esp+0x8]
       add eax,0xBD0
	   push eax
	   call KhongCoVatPhamRequest
	   CheckHienThiVp7:
       xor ecx,ecx
       mov eax,[esp+0x8]
	   mov cx,[eax+0x8DD]
	   test cx,cx
	   jz KhongHienThiVPNay6
       push ecx
       xor ecx,ecx
	   mov cl,[eax+0x8DC]
	   push ecx
	   mov eax,[esp+0x10]
	   add eax,0xC60
	   push eax
	   call GhanGiaTriSlotYeuCau
	   jmp HienThiVatPhamCheTaoSuccess

	   KhongHienThiVPNay6:
       mov eax,[esp+0x8]
       add eax,0xC60
	   push eax
	   call KhongCoVatPhamRequest
	   HienThiVatPhamCheTaoSuccess:
	   xor ecx,ecx
       mov eax,[esp+0x8]
	   mov cx,[eax+0x8C1]
	   test cx,cx
	   jz KhongHienThiVPSuccess
       push ecx
       xor ecx,ecx
	   mov cl,[eax+0x8C0]
	   push ecx
	   mov eax,[esp+0x10]
	   add eax,0xCF0
	   push eax
	   call GhanGiaTriSlotYeuCau
       KhongHienThiVPSuccess:
       ret 0x8

	   CheckCT2:
       mov eax,[esp+0x4]
	   mov ecx,[eax+0x18]
	   mov edx,[ebx+0x18]
	   add edx,66
	   cmp ecx,edx
	   jl EndCheckPoz
	   add edx,22
	   cmp ecx,edx
	   ja CheckCT3
       mov eax,[esp+0x8]
       mov byte ptr [eax+0x1],1
	   xor ecx,ecx
	   mov cl,[eax+0x3]
	   xor edx,edx
	   imul ecx,0x1B0
	   lea eax,[eax+ecx+0x2C]
       mov ecx,1
       imul ecx,0x24
	   mov dx,word ptr[eax+ecx]
       mov ebx,[esp+0x8]
	   mov [ebx+0x4],dx
       xor edx,edx
	   mov dl,[eax+ecx+0x2]
	   mov [ebx+0x6],dl
       xor edx,edx
	   mov dl,[eax+ecx+0x3]
	   mov [ebx+0x7],dl
	   //
	   mov dword ptr [ebx+0x8],0x0
	   mov dword ptr [ebx+0xC],0x0
	   mov word ptr [ebx+0x10],0x0
	   //
       mov edx,[eax+ecx+0x4]
	   mov [ebx+0x8C0],edx
	   mov edx,[eax+ecx+0x8]
	   mov [ebx+0x8C4],edx
	   mov edx,[eax+ecx+0xC]
	   mov [ebx+0x8C8],edx
	   mov edx,[eax+ecx+0x10]
	   mov [ebx+0x8CC],edx
	   mov edx,[eax+ecx+0x14]
	   mov [ebx+0x8D0],edx
	   mov edx,[eax+ecx+0x18]
	   mov [ebx+0x8D4],edx
	   mov edx,[eax+ecx+0x1C]
	   mov [ebx+0x8D8],edx
	   mov edx,[eax+ecx+0x20]
	   mov [ebx+0x8DC],edx
       jmp GetGiaTriFromItemRequest

       CheckCT3:
       mov eax,[esp+0x4]
	   mov ecx,[eax+0x18]
	   mov edx,[ebx+0x18]
	   add edx,90
	   cmp ecx,edx
	   jl EndCheckPoz
	   add edx,23
	   cmp ecx,edx
	   ja CheckCT4
       mov eax,[esp+0x8]
       mov byte ptr [eax+0x1],1
	   xor ecx,ecx
	   mov cl,[eax+0x3]
	   xor edx,edx
	   imul ecx,0x1B0
	   lea eax,[eax+ecx+0x2C]
       mov ecx,2
       imul ecx,0x24
	   mov dx,word ptr[eax+ecx]
       mov ebx,[esp+0x8]
	   mov [ebx+0x4],dx
       xor edx,edx
	   mov dl,[eax+ecx+0x2]
	   mov [ebx+0x6],dl
       xor edx,edx
	   mov dl,[eax+ecx+0x3]
	   mov [ebx+0x7],dl
       //
	   mov dword ptr [ebx+0x8],0x0
	   mov dword ptr [ebx+0xC],0x0
	   mov word ptr [ebx+0x10],0x0
	   //
       mov edx,[eax+ecx+0x4]
	   mov [ebx+0x8C0],edx
	   mov edx,[eax+ecx+0x8]
	   mov [ebx+0x8C4],edx
	   mov edx,[eax+ecx+0xC]
	   mov [ebx+0x8C8],edx
	   mov edx,[eax+ecx+0x10]
	   mov [ebx+0x8CC],edx
	   mov edx,[eax+ecx+0x14]
	   mov [ebx+0x8D0],edx
	   mov edx,[eax+ecx+0x18]
	   mov [ebx+0x8D4],edx
	   mov edx,[eax+ecx+0x1C]
	   mov [ebx+0x8D8],edx
	   mov edx,[eax+ecx+0x20]
	   mov [ebx+0x8DC],edx
	   jmp GetGiaTriFromItemRequest

	   CheckCT4:
       mov eax,[esp+0x4]
	   mov ecx,[eax+0x18]
	   mov edx,[ebx+0x18]
	   add edx,114
	   cmp ecx,edx
	   jl EndCheckPoz
	   add edx,23
	   cmp ecx,edx
	   ja CheckCT5
       mov eax,[esp+0x8]
       mov byte ptr [eax+0x1],1
	   xor ecx,ecx
	   mov cl,[eax+0x3]
	   xor edx,edx
	   imul ecx,0x1B0
	   lea eax,[eax+ecx+0x2C]
	   mov ecx,3
       imul ecx,0x24
	   mov dx,word ptr[eax+ecx]
       mov ebx,[esp+0x8]
	   mov [ebx+0x4],dx
       xor edx,edx
	   mov dl,[eax+ecx+0x2]
	   mov [ebx+0x6],dl
       xor edx,edx
	   mov dl,[eax+ecx+0x3]
	   mov [ebx+0x7],dl
       //
	   mov dword ptr [ebx+0x8],0x0
	   mov dword ptr [ebx+0xC],0x0
	   mov word ptr [ebx+0x10],0x0
	   //
       mov edx,[eax+ecx+0x4]
	   mov [ebx+0x8C0],edx
	   mov edx,[eax+ecx+0x8]
	   mov [ebx+0x8C4],edx
	   mov edx,[eax+ecx+0xC]
	   mov [ebx+0x8C8],edx
	   mov edx,[eax+ecx+0x10]
	   mov [ebx+0x8CC],edx
	   mov edx,[eax+ecx+0x14]
	   mov [ebx+0x8D0],edx
	   mov edx,[eax+ecx+0x18]
	   mov [ebx+0x8D4],edx
	   mov edx,[eax+ecx+0x1C]
	   mov [ebx+0x8D8],edx
	   mov edx,[eax+ecx+0x20]
	   mov [ebx+0x8DC],edx
	   jmp GetGiaTriFromItemRequest

	   CheckCT5:
       mov eax,[esp+0x4]
	   mov ecx,[eax+0x18]
	   mov edx,[ebx+0x18]
	   add edx,136
	   cmp ecx,edx
	   jl EndCheckPoz
	   add edx,23
	   cmp ecx,edx
	   ja CheckCT6
       mov eax,[esp+0x8]
       mov byte ptr [eax+0x1],1
	   xor ecx,ecx
	   mov cl,[eax+0x3]
	   xor edx,edx
	   imul ecx,0x1B0
	   lea eax,[eax+ecx+0x2C]
	   mov ecx,4
       imul ecx,0x24
	   mov dx,word ptr[eax+ecx]
       mov ebx,[esp+0x8]
	   mov [ebx+0x4],dx
       xor edx,edx
	   mov dl,[eax+ecx+0x2]
	   mov [ebx+0x6],dl
       xor edx,edx
	   mov dl,[eax+ecx+0x3]
	   mov [ebx+0x7],dl
       //
	   mov dword ptr [ebx+0x8],0x0
	   mov dword ptr [ebx+0xC],0x0
	   mov word ptr [ebx+0x10],0x0
	   //
       mov edx,[eax+ecx+0x4]
	   mov [ebx+0x8C0],edx
	   mov edx,[eax+ecx+0x8]
	   mov [ebx+0x8C4],edx
	   mov edx,[eax+ecx+0xC]
	   mov [ebx+0x8C8],edx
	   mov edx,[eax+ecx+0x10]
	   mov [ebx+0x8CC],edx
	   mov edx,[eax+ecx+0x14]
	   mov [ebx+0x8D0],edx
	   mov edx,[eax+ecx+0x18]
	   mov [ebx+0x8D4],edx
	   mov edx,[eax+ecx+0x1C]
	   mov [ebx+0x8D8],edx
	   mov edx,[eax+ecx+0x20]
	   mov [ebx+0x8DC],edx
	   jmp GetGiaTriFromItemRequest

       CheckCT6:
       mov eax,[esp+0x4]
	   mov ecx,[eax+0x18]
	   mov edx,[ebx+0x18]
	   add edx,162
	   cmp ecx,edx
	   jl EndCheckPoz
	   add edx,23
	   cmp ecx,edx
	   ja CheckCT7
       mov eax,[esp+0x8]
       mov byte ptr [eax+0x1],1
	   xor ecx,ecx
	   mov cl,[eax+0x3]
	   xor edx,edx
	   imul ecx,0x1B0
	   lea eax,[eax+ecx+0x2C]
	   mov ecx,5
       imul ecx,0x24
	   mov dx,word ptr[eax+ecx]
       mov ebx,[esp+0x8]
	   mov [ebx+0x4],dx
       xor edx,edx
	   mov dl,[eax+ecx+0x2]
	   mov [ebx+0x6],dl
       xor edx,edx
	   mov dl,[eax+ecx+0x3]
	   mov [ebx+0x7],dl
       //
	   mov dword ptr [ebx+0x8],0x0
	   mov dword ptr [ebx+0xC],0x0
	   mov word ptr [ebx+0x10],0x0
	   //
       mov edx,[eax+ecx+0x4]
	   mov [ebx+0x8C0],edx
	   mov edx,[eax+ecx+0x8]
	   mov [ebx+0x8C4],edx
	   mov edx,[eax+ecx+0xC]
	   mov [ebx+0x8C8],edx
	   mov edx,[eax+ecx+0x10]
	   mov [ebx+0x8CC],edx
	   mov edx,[eax+ecx+0x14]
	   mov [ebx+0x8D0],edx
	   mov edx,[eax+ecx+0x18]
	   mov [ebx+0x8D4],edx
	   mov edx,[eax+ecx+0x1C]
	   mov [ebx+0x8D8],edx
	   mov edx,[eax+ecx+0x20]
	   mov [ebx+0x8DC],edx
	   jmp GetGiaTriFromItemRequest

	   CheckCT7:
       mov eax,[esp+0x4]
	   mov ecx,[eax+0x18]
	   mov edx,[ebx+0x18]
	   add edx,187
	   cmp ecx,edx
	   jl EndCheckPoz
	   add edx,23
	   cmp ecx,edx
	   ja CheckCT8
	   mov eax,[esp+0x8]
       mov byte ptr [eax+0x1],1
	   xor ecx,ecx
	   mov cl,[eax+0x3]
	   xor edx,edx
	   imul ecx,0x1B0
	   lea eax,[eax+ecx+0x2C]
       mov ecx,6
       imul ecx,0x24
	   mov dx,word ptr[eax+ecx]
       mov ebx,[esp+0x8]
	   mov [ebx+0x4],dx
       xor edx,edx
	   mov dl,[eax+ecx+0x2]
	   mov [ebx+0x6],dl
       xor edx,edx
	   mov dl,[eax+ecx+0x3]
	   mov [ebx+0x7],dl
       //
	   mov dword ptr [ebx+0x8],0x0
	   mov dword ptr [ebx+0xC],0x0
	   mov word ptr [ebx+0x10],0x0
	   //
       mov edx,[eax+ecx+0x4]
	   mov [ebx+0x8C0],edx
	   mov edx,[eax+ecx+0x8]
	   mov [ebx+0x8C4],edx
	   mov edx,[eax+ecx+0xC]
	   mov [ebx+0x8C8],edx
	   mov edx,[eax+ecx+0x10]
	   mov [ebx+0x8CC],edx
	   mov edx,[eax+ecx+0x14]
	   mov [ebx+0x8D0],edx
	   mov edx,[eax+ecx+0x18]
	   mov [ebx+0x8D4],edx
	   mov edx,[eax+ecx+0x1C]
	   mov [ebx+0x8D8],edx
	   mov edx,[eax+ecx+0x20]
	   mov [ebx+0x8DC],edx
	   jmp GetGiaTriFromItemRequest

	   CheckCT8:
       mov eax,[esp+0x4]
	   mov ecx,[eax+0x18]
	   mov edx,[ebx+0x18]
	   add edx,211
	   cmp ecx,edx
	   jl EndCheckPoz
	   add edx,23
	   cmp ecx,edx
	   ja CheckCT9
       mov eax,[esp+0x8]
       mov byte ptr [eax+0x1],1
	   xor ecx,ecx
	   mov cl,[eax+0x3]
	   xor edx,edx
	   imul ecx,0x1B0
	   lea eax,[eax+ecx+0x2C]
       mov ecx,7
       imul ecx,0x24
	   mov dx,word ptr[eax+ecx]
       mov ebx,[esp+0x8]
	   mov [ebx+0x4],dx
       xor edx,edx
	   mov dl,[eax+ecx+0x2]
	   mov [ebx+0x6],dl
       xor edx,edx
	   mov dl,[eax+ecx+0x3]
	   mov [ebx+0x7],dl
       //
	   mov dword ptr [ebx+0x8],0x0
	   mov dword ptr [ebx+0xC],0x0
	   mov word ptr [ebx+0x10],0x0
	   //
       mov edx,[eax+ecx+0x4]
	   mov [ebx+0x8C0],edx
	   mov edx,[eax+ecx+0x8]
	   mov [ebx+0x8C4],edx
	   mov edx,[eax+ecx+0xC]
	   mov [ebx+0x8C8],edx
	   mov edx,[eax+ecx+0x10]
	   mov [ebx+0x8CC],edx
	   mov edx,[eax+ecx+0x14]
	   mov [ebx+0x8D0],edx
	   mov edx,[eax+ecx+0x18]
	   mov [ebx+0x8D4],edx
	   mov edx,[eax+ecx+0x1C]
	   mov [ebx+0x8D8],edx
	   mov edx,[eax+ecx+0x20]
	   mov [ebx+0x8DC],edx
	   jmp GetGiaTriFromItemRequest

	   CheckCT9:
       mov eax,[esp+0x4]
	   mov ecx,[eax+0x18]
	   mov edx,[ebx+0x18]
	   add edx,235
	   cmp ecx,edx
	   jl EndCheckPoz
	   add edx,23
	   cmp ecx,edx
	   ja CheckCT10
       mov eax,[esp+0x8]
       mov byte ptr [eax+0x1],1
	   xor ecx,ecx
	   mov cl,[eax+0x3]
	   xor edx,edx
	   imul ecx,0x1B0
	   lea eax,[eax+ecx+0x2C]
       mov ecx,8
       imul ecx,0x24
	   mov dx,word ptr[eax+ecx]
       mov ebx,[esp+0x8]
	   mov [ebx+0x4],dx
       xor edx,edx
	   mov dl,[eax+ecx+0x2]
	   mov [ebx+0x6],dl
       xor edx,edx
	   mov dl,[eax+ecx+0x3]
	   mov [ebx+0x7],dl
       //
	   mov dword ptr [ebx+0x8],0x0
	   mov dword ptr [ebx+0xC],0x0
	   mov word ptr [ebx+0x10],0x0
	   //
       mov edx,[eax+ecx+0x4]
	   mov [ebx+0x8C0],edx
	   mov edx,[eax+ecx+0x8]
	   mov [ebx+0x8C4],edx
	   mov edx,[eax+ecx+0xC]
	   mov [ebx+0x8C8],edx
	   mov edx,[eax+ecx+0x10]
	   mov [ebx+0x8CC],edx
	   mov edx,[eax+ecx+0x14]
	   mov [ebx+0x8D0],edx
	   mov edx,[eax+ecx+0x18]
	   mov [ebx+0x8D4],edx
	   mov edx,[eax+ecx+0x1C]
	   mov [ebx+0x8D8],edx
	   mov edx,[eax+ecx+0x20]
	   mov [ebx+0x8DC],edx
	   jmp GetGiaTriFromItemRequest

	   CheckCT10:
       mov eax,[esp+0x4]
	   mov ecx,[eax+0x18]
	   mov edx,[ebx+0x18]
	   add edx,259
	   cmp ecx,edx
	   jl EndCheckPoz
	   add edx,23
	   cmp ecx,edx
	   ja CheckCT11
       mov eax,[esp+0x8]
       mov byte ptr [eax+0x1],1
	   xor ecx,ecx
	   mov cl,[eax+0x3]
	   xor edx,edx
	   imul ecx,0x1B0
	   lea eax,[eax+ecx+0x2C]
	   mov ecx,9
	   imul ecx,0x24
	   mov dx,word ptr[eax+ecx]
       mov ebx,[esp+0x8]
	   mov [ebx+0x4],dx
       xor edx,edx
	   mov dl,[eax+ecx+0x2]
	   mov [ebx+0x6],dl
       xor edx,edx
	   mov dl,[eax+ecx+0x3]
	   mov [ebx+0x7],dl
       //
	   mov dword ptr [ebx+0x8],0x0
	   mov dword ptr [ebx+0xC],0x0
	   mov word ptr [ebx+0x10],0x0
	   //
       mov edx,[eax+ecx+0x4]
	   mov [ebx+0x8C0],edx
	   mov edx,[eax+ecx+0x8]
	   mov [ebx+0x8C4],edx
	   mov edx,[eax+ecx+0xC]
	   mov [ebx+0x8C8],edx
	   mov edx,[eax+ecx+0x10]
	   mov [ebx+0x8CC],edx
	   mov edx,[eax+ecx+0x14]
	   mov [ebx+0x8D0],edx
	   mov edx,[eax+ecx+0x18]
	   mov [ebx+0x8D4],edx
	   mov edx,[eax+ecx+0x1C]
	   mov [ebx+0x8D8],edx
	   mov edx,[eax+ecx+0x20]
	   mov [ebx+0x8DC],edx
	   jmp GetGiaTriFromItemRequest

	   CheckCT11:
       mov eax,[esp+0x4]
	   mov ecx,[eax+0x18]
	   mov edx,[ebx+0x18]
	   add edx,281
	   cmp ecx,edx
	   jl EndCheckPoz
	   add edx,23
	   cmp ecx,edx
	   ja CheckCT12
	   mov eax,[esp+0x8]
       mov byte ptr [eax+0x1],1
	   xor ecx,ecx
	   mov cl,[eax+0x3]
	   xor edx,edx
	   imul ecx,0x1B0
	   lea eax,[eax+ecx+0x2C]
	   mov ecx,10
       imul ecx,0x24
	   mov dx,word ptr[eax+ecx]
       mov ebx,[esp+0x8]
	   mov [ebx+0x4],dx
       xor edx,edx
	   mov dl,[eax+ecx+0x2]
	   mov [ebx+0x6],dl
       xor edx,edx
	   mov dl,[eax+ecx+0x3]
	   mov [ebx+0x7],dl
       //
	   mov dword ptr [ebx+0x8],0x0
	   mov dword ptr [ebx+0xC],0x0
	   mov word ptr [ebx+0x10],0x0
	   //
       mov edx,[eax+ecx+0x4]
	   mov [ebx+0x8C0],edx
	   mov edx,[eax+ecx+0x8]
	   mov [ebx+0x8C4],edx
	   mov edx,[eax+ecx+0xC]
	   mov [ebx+0x8C8],edx
	   mov edx,[eax+ecx+0x10]
	   mov [ebx+0x8CC],edx
	   mov edx,[eax+ecx+0x14]
	   mov [ebx+0x8D0],edx
	   mov edx,[eax+ecx+0x18]
	   mov [ebx+0x8D4],edx
	   mov edx,[eax+ecx+0x1C]
	   mov [ebx+0x8D8],edx
	   mov edx,[eax+ecx+0x20]
	   mov [ebx+0x8DC],edx
	   jmp GetGiaTriFromItemRequest

	   CheckCT12:
       mov eax,[esp+0x4]
	   mov ecx,[eax+0x18]
	   mov edx,[ebx+0x18]
	   add edx,305
	   cmp ecx,edx
	   jl EndCheckPoz
	   add edx,23
	   cmp ecx,edx
	   ja CheckPageCT
	   mov eax,[esp+0x8]
       mov byte ptr [eax+0x1],1
	   xor ecx,ecx
	   mov cl,[eax+0x3]
	   xor edx,edx
	   imul ecx,0x1B0
	   lea eax,[eax+ecx+0x2C]
	   mov ecx,11
       imul ecx,0x24
	   mov dx,word ptr[eax+ecx]
       mov ebx,[esp+0x8]
	   mov [ebx+0x4],dx
       xor edx,edx
	   mov dl,[eax+ecx+0x2]
	   mov [ebx+0x6],dl
       xor edx,edx
	   mov dl,[eax+ecx+0x3]
	   mov [ebx+0x7],dl
       //
	   mov dword ptr [ebx+0x8],0x0
	   mov dword ptr [ebx+0xC],0x0
	   mov word ptr [ebx+0x10],0x0
	   //
       mov edx,[eax+ecx+0x4]
	   mov [ebx+0x8C0],edx
	   mov edx,[eax+ecx+0x8]
	   mov [ebx+0x8C4],edx
	   mov edx,[eax+ecx+0xC]
	   mov [ebx+0x8C8],edx
	   mov edx,[eax+ecx+0x10]
	   mov [ebx+0x8CC],edx
	   mov edx,[eax+ecx+0x14]
	   mov [ebx+0x8D0],edx
	   mov edx,[eax+ecx+0x18]
	   mov [ebx+0x8D4],edx
	   mov edx,[eax+ecx+0x1C]
	   mov [ebx+0x8D8],edx
	   mov edx,[eax+ecx+0x20]
	   mov [ebx+0x8DC],edx
       jmp GetGiaTriFromItemRequest


	   CheckPageCT:
       mov eax,[esp+0x4]
	   mov ecx,[eax+0x18]
	   mov edx,[ebx+0x18]
	   add edx,346
	   cmp ecx,edx
	   jl EndCheckPoz
	   add edx,13
	   cmp ecx,edx
	   ja EndCheckPoz
       mov eax,[esp+0x4]
	   mov ecx,[eax+0x10]
	   mov edx,[ebx+0x14]
	   add edx,707
	   cmp ecx,edx
	   jl EndCheckPoz
	   add edx,24
	   cmp ecx,edx
	   ja CheckPage1
       mov eax,[esp+0x8]
       mov byte ptr [eax+0x1],1
	   mov byte ptr [eax+0x3],0
	   ret 0x8

	   CheckPage1:
       mov eax,[esp+0x4]
	   mov ecx,[eax+0x10]
	   mov edx,[ebx+0x14]
	   add edx,739
	   cmp ecx,edx
	   jl EndCheckPoz
	   add edx,24
	   cmp ecx,edx
	   ja CheckPage2
       mov eax,[esp+0x8]
       mov byte ptr [eax+0x1],1
	   mov byte ptr [eax+0x3],1
	   ret 0x8

	   CheckPage2:
       mov eax,[esp+0x4]
	   mov ecx,[eax+0x10]
	   mov edx,[ebx+0x14]
	   add edx,770
	   cmp ecx,edx
	   jl EndCheckPoz
	   add edx,24
	   cmp ecx,edx
	   ja CheckPage3
       mov eax,[esp+0x8]
       mov byte ptr [eax+0x1],1
	   mov byte ptr [eax+0x3],2
	   ret 0x8

	   CheckPage3:
       mov eax,[esp+0x4]
	   mov ecx,[eax+0x10]
	   mov edx,[ebx+0x14]
	   add edx,802
	   cmp ecx,edx
	   jl EndCheckPoz
	   add edx,24
	   cmp ecx,edx
	   ja CheckPage4
	   mov eax,[esp+0x8]
       mov byte ptr [eax+0x1],1
	   mov byte ptr [eax+0x3],3
	   ret 0x8

	   CheckPage4:
       mov eax,[esp+0x4]
	   mov ecx,[eax+0x10]
	   mov edx,[ebx+0x14]
	   add edx,833
	   cmp ecx,edx
	   jl EndCheckPoz
	   add edx,24
	   cmp ecx,edx
	   ja EndCheckPoz
	   mov eax,[esp+0x8]
       mov byte ptr [eax+0x1],1
	   mov byte ptr [eax+0x3],4
       ret 0x8

	   EndCheckPoz:
       ret 0x8

	   HoverForm:
       mov eax,[esp+0x1C]
	   mov byte ptr [eax],0
	   popad
	   mov ecx,DWORD PTR SS:[0x01733AC4]
	   push 0x004FDC6D
       ret


	}
};
__declspec(naked)void GetPackageCheTaoFromServer()  //006ABB4E
{
__asm
	{
		nop
		nop
		nop
		nop
		nop
        push eax
		mov al,[ebp+0x3]
		mov cl,al
		cmp cl,20
		jz PackageInfoSlot
        cmp cl,21
		jz PackageCheTaoProcess
        jmp Default

		PackageCheTaoProcess:
        mov al,[ebp+0x4]
		cmp al,0
        jz ThanhCongCheTao
		cmp al,1
		jz KhongAddDuocReward
		cmp al,2
		jz ThatBaiCheTao
		cmp al,3
		jz KhongTimThayCheTao
		cmp al,4
		jz KhongDuNguyenLieu
		cmp al,5
		jz KhongDungVatPham
		//KhongRoLoiCheTao:
        push 0xFFFF2323
		push 0x1
		push 0xC
		push 328
		push 76
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x0155EE60
		mov eax,0x006A9800
		call eax
		mov eax,[esp]
		mov byte ptr [eax+0x1],1
		mov byte ptr [eax+0x11],5
		mov dword ptr [eax+0x4],0x0
		mov dword ptr [eax+0x8],0x0
		mov dword ptr [eax+0xC],0x0
		mov word ptr [eax+0x10],0x0
		xor edx,edx
		mov [eax+0x8C4],edx
		mov [eax+0x8C8],edx
		mov [eax+0x8CC],edx
		mov [eax+0x8D0],edx
		mov [eax+0x8D4],edx
		mov [eax+0x8D8],edx
		mov [eax+0x8DC],edx
		pop eax
		push 0x006B21F7
		ret

		ThanhCongCheTao:
		push 0xFFFF2323
		push 0x1
		push 0xC
		push 324
		push 76
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x0155EE60
		mov eax,0x006A9800
		call eax
        xor ecx,ecx
		lea ecx,[ebp+0x6]
		push ecx
		call CheckItemAdRemove
        mov eax,[esp]
		mov byte ptr [eax+0x1],1
        mov byte ptr [eax+0x11],1
		mov word ptr [eax+0x4],0x0
		mov byte ptr [eax+0x6],0
		mov dl,[ebp+0x5]
        mov [eax+0x7],dl
		mov dword ptr [eax+0x8],0x0
		mov dword ptr [eax+0xC],0x0
		mov word ptr [eax+0x10],0x0
		xor edx,edx
		mov [eax+0x8C4],edx
		mov [eax+0x8C8],edx
		mov [eax+0x8CC],edx
		mov [eax+0x8D0],edx
		mov [eax+0x8D4],edx
		mov [eax+0x8D8],edx
		mov [eax+0x8DC],edx
		xor eax,eax
		mov al,[ebp+0x33]
        push eax
		lea eax,[ebp+0x34]
        push eax
		xor edx,edx
		mov dl,[ebp+0x5]
        push edx
        call CopyOptionMoreFromTheOldItem
        //
		pop eax
		push 0x006B21F7
		ret

		CopyOptionMoreFromTheOldItem:
		sub esp,0x4
		xor ecx,ecx
		mov [esp],ecx
		BackLoopCopyOptionMoreFromTheOldItem:
		//
		mov ecx,[esp]
		imul ecx,0x5
		mov edx,[esp+0xC]
		lea edx,[edx+ecx]
		xor ecx,ecx
		mov cx,[edx]
		xor cx,0xCE43
        mov eax,[esp]
		imul eax,0x6
		mov edx,[esp+0x8]
		imul edx,0x90
		lea eax,[0x1107258+edx+0x22DC8+0x2A+eax]
		mov [eax],cx
		//
        mov ecx,[esp]
		imul ecx,0x5
		mov edx,[esp+0xC]
		lea edx,[edx+ecx+0x2]
		xor ecx,ecx
		mov cx,[edx]
		xor cx,0xCE43
        mov eax,[esp]
		imul eax,0x6
		mov edx,[esp+0x8]
		imul edx,0x90
		lea eax,[0x1107258+edx+0x22DC8+0x2C+eax]
		mov [eax],cx
		//
        mov ecx,[esp]
		imul ecx,0x5
		mov edx,[esp+0xC]
		lea edx,[edx+ecx+0x4]
		xor ecx,ecx
		mov cl,[edx]
		shr cl,0x4
        xor cl,0xC5
        mov eax,[esp]
		imul eax,0x6
		mov edx,[esp+0x8]
		imul edx,0x90
		lea eax,[0x1107258+edx+0x22DC8+0x2F+eax]
		mov [eax],cl
		//
        mov ecx,[esp]
		imul ecx,0x5
		mov edx,[esp+0xC]
		lea edx,[edx+ecx+0x4]
		xor ecx,ecx
		mov cl,[edx]
        and cl,0xF
        xor cl,0xC5
		mov eax,[esp]
		imul eax,0x6
		mov edx,[esp+0x8]
		imul edx,0x90
		lea eax,[0x1107258+edx+0x22DC8+0x2E+eax]
		mov [eax],cl

		CheckAnotherOptionAdd:
		mov ecx,[esp]
		add ecx,1
		mov [esp],ecx
		cmp ecx,6
        jl BackLoopCopyOptionMoreFromTheOldItem
		add esp,0x4
		mov eax,[esp+0x4]
		mov ecx,[esp+0xC]
        xor cl,0xC5
		imul eax,0x90
		mov [0x1107258+0x22DC8+0x10+eax],cl
        ret 0xC


		KhongAddDuocReward:
		push 0xFFFF2323
		push 0x1
		push 0xC
		push 328
		push 76
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x0155EE60
		mov eax,0x006A9800
		call eax
        xor ecx,ecx
		lea ecx,[ebp+0x6]
		push ecx
		call CheckItemAdRemove
        mov eax,[esp]
		mov byte ptr [eax+0x1],1
		mov byte ptr [eax+0x11],5
		mov dword ptr [eax+0x4],0x0
		mov dword ptr [eax+0x8],0x0
		mov dword ptr [eax+0xC],0x0
		mov word ptr [eax+0x10],0x0
		xor edx,edx
		mov [eax+0x8C4],edx
		mov [eax+0x8C8],edx
		mov [eax+0x8CC],edx
		mov [eax+0x8D0],edx
		mov [eax+0x8D4],edx
		mov [eax+0x8D8],edx
		mov [eax+0x8DC],edx
		pop eax
		push 0x006B21F7
		ret

		ThatBaiCheTao:
		push 0xFFFF2323
		push 0x1
		push 0xC
		push 325
		push 76
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x0155EE60
		mov eax,0x006A9800
		call eax
		xor ecx,ecx
		lea ecx,[ebp+0x6]
		push ecx
		call CheckItemAdRemove
        mov eax,[esp]
		mov byte ptr [eax+0x1],1
        mov byte ptr [eax+0x11],2
		mov dword ptr [eax+0x4],0x0
		mov dword ptr [eax+0x8],0x0
		mov dword ptr [eax+0xC],0x0
		mov word ptr [eax+0x10],0x0
		xor edx,edx
		mov [eax+0x8C4],edx
		mov [eax+0x8C8],edx
		mov [eax+0x8CC],edx
		mov [eax+0x8D0],edx
		mov [eax+0x8D4],edx
		mov [eax+0x8D8],edx
		mov [eax+0x8DC],edx
		pop eax
		push 0x006B21F7
		ret

		CheckItemAdRemove:
		sub esp,0x4
		xor ecx,ecx
		mov [esp],ecx
		BackLoopCheckItemAdRemove:
		mov ecx,[esp]
        imul ecx,0x5
		xor edx,edx
		mov eax,[esp+0x8]
		mov dl,[eax+ecx]
		test dl,dl
        jz KhongTimThayVatPhamDeKiemTra
		cmp dl,19
		jl KhongTimThayVatPhamDeKiemTra
        cmp dl,140
		ja KhongTimThayVatPhamDeKiemTra
		xor edx,edx
		mov dl,[eax+ecx+0x4]
		test dl,dl
		jz XoaVatPhamNay
        push edx
		xor edx,edx
		mov dl,[eax+ecx]
		imul edx,0x90
		lea ecx,[0x1107258+0x22DC8+edx]
		pop edx
		xor dl,0xC5
	   	mov [ecx+0x19],dl
        jmp KhongTimThayVatPhamDeKiemTra
		XoaVatPhamNay:
        xor edx,edx
		mov dl,[eax+ecx]
        imul edx,0x90
		lea ecx,[0x1107258+0x22DC8+edx]
		mov edx,[0x1107258+0x22DC8+edx]
		call dword ptr [edx+0x4]
		KhongTimThayVatPhamDeKiemTra:
		mov ecx,[esp]
		add ecx,1
		mov [esp],ecx
		cmp ecx,9
        jl BackLoopCheckItemAdRemove
		add esp,0x4
        ret 0x4

		KhongTimThayCheTao:
		push 0xFFFF2323
		push 0x1
		push 0xC
		push 312
		push 76
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x0155EE60
		mov eax,0x006A9800
		call eax
		mov eax,[esp]
		mov byte ptr [eax+0x1],1
        mov byte ptr [eax+0x11],5
		mov dword ptr [eax+0x4],0x0
		mov dword ptr [eax+0x8],0x0
		mov dword ptr [eax+0xC],0x0
		mov word ptr [eax+0x10],0x0
		xor edx,edx
		mov [eax+0x8C4],edx
		mov [eax+0x8C8],edx
		mov [eax+0x8CC],edx
		mov [eax+0x8D0],edx
		mov [eax+0x8D4],edx
		mov [eax+0x8D8],edx
		mov [eax+0x8DC],edx
		pop eax
		push 0x006B21F7
		ret

		KhongDuNguyenLieu:
		push 0xFFFF2323
		push 0x1
		push 0xC
		push 327
		push 76
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x0155EE60
		mov eax,0x006A9800
		call eax
        mov eax,[esp]
		mov byte ptr [eax+0x1],1
        mov byte ptr [eax+0x11],4
		mov dword ptr [eax+0x4],0x0
		mov dword ptr [eax+0x8],0x0
		mov dword ptr [eax+0xC],0x0
		mov word ptr [eax+0x10],0x0
		xor edx,edx
		mov [eax+0x8C4],edx
		mov [eax+0x8C8],edx
		mov [eax+0x8CC],edx
		mov [eax+0x8D0],edx
		mov [eax+0x8D4],edx
		mov [eax+0x8D8],edx
		mov [eax+0x8DC],edx
		pop eax
		push 0x006B21F7
		ret

		KhongDungVatPham:
		push 0xFFFF2323
		push 0x1
		push 0xC
		push 326
		push 76
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x0155EE60
		mov eax,0x006A9800
		call eax
        mov eax,[esp]
		mov byte ptr [eax+0x1],1
		mov byte ptr [eax+0x11],3
		mov dword ptr [eax+0x4],0x0
		mov dword ptr [eax+0x8],0x0
		mov dword ptr [eax+0xC],0x0
		mov word ptr [eax+0x10],0x0
		xor edx,edx
		mov [eax+0x8C4],edx
		mov [eax+0x8C8],edx
		mov [eax+0x8CC],edx
		mov [eax+0x8D0],edx
		mov [eax+0x8D4],edx
		mov [eax+0x8D8],edx
		mov [eax+0x8DC],edx
		pop eax
		push 0x006B21F7
		ret

        PackageInfoSlot:
		mov eax,[esp]
		xor ecx,ecx
		mov cl,[ebp+0x4]
		mov [eax+0x12],cl
        //
        mov cx,[ebp+0x5]
		mov [eax+0x13],cx
        //
		mov cx,[ebp+0x7]
		mov [eax+0x15],cx
		//
		mov cx,[ebp+0x9]
		mov [eax+0x17],cx
		//
        mov cx,[ebp+0xB]
		mov [eax+0x19],cx
		//
		mov cl,[ebp+0xD]
		mov [eax+0x1B],cl
		//
		mov cx,[ebp+0xE]
		mov [eax+0x1C],cx
		//
		lea ecx,[ebp+0x10]
		push ecx
		add eax,0x2C
        push eax
		call CopyValueFromServer
		pop eax
		push 0x006B21F7
		ret

		Default:
		pop eax
        xor eax,eax
        mov al,[ebp+0x3]
		mov cl,al
		and cl,0xF
		push 0x006ABB56
		ret

		CopyValueFromServer:
		sub esp,0x4
		xor ecx,ecx
		mov [esp],ecx
		BackLoopCopyFile:
		mov ecx,[esp]
		mov eax,[esp+0xC]
		xor edx,edx
		mov dl,[eax+ecx]
		mov eax,[esp+0x8]
		mov [eax+ecx],dl
		mov ecx,[esp]
		add ecx,1
		mov [esp],ecx
		cmp ecx,0x870
		jl BackLoopCopyFile
        add esp,0x4
        ret 0x8

	}
};
__declspec(naked)void GetItemRequestFormCheTao()  //0048C100
{
__asm
	{
		nop
		nop
		nop
		nop
		nop
        pushad
        push 0x275A
		mov ecx,0x017323A8
		mov eax,0x007D8550
		call eax
		test eax,eax
		jz Default
		mov cl,[eax+0x10]
		test cl,cl
		jz Default
        mov ecx,[eax+0x36C]
        test ecx,ecx
		jz Default
		xor eax,eax
		mov al,[ecx+0x10]
		test al,al
        jz Default
        mov eax,[ecx+0x000003D0]
		cmp eax,0x3
		jnz Default
        mov eax,[esp+0x1C]
		xor edx,edx
		mov dl,[eax+0x8E2]
		test edx,edx
		jz Default
		mov eax,[esp+0x1C]
		xor edx,edx
		mov dx,[eax+0x4]
		test edx,edx
		jz Default
		mov eax,[esi+0x98]
		imul eax,0x90
		lea eax,[eax+0x1107258+0x22DC8]
		xor edx,edx
		mov dx,[eax+0x14]
		xor dx,0xCE43
		push edx
		xor edx,edx
		mov dl,[eax+0x16]
		xor dl,0x1F
		push edx
		mov eax,[esp+0x1C]
		push eax
        call CheckValidItemGet
		test al,al
		jz KhongPhuHopVPCheTao
        popad
		mov DWORD PTR SS:[esi],0xFFFFFFFF
		push 0x0048DCCB
		ret

		KhongPhuHopVPCheTao:
        popad
		mov DWORD PTR SS:[esi],0xFFFFFFFF
        push 0xFFFF2323
		push 0x1
		push 0xC
		push 313
		push 76
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x0155EE60
		mov eax,0x006A9800
	   	call eax
		push 0x0048DCCB
		ret

		Default:
        popad
		mov DWORD PTR SS:[esi],0xFFFFFFFF
		push 0x0048C106
		ret

		CheckValidItemGet:
		sub esp,0x4
		xor ecx,ecx
		mov [esp],ecx
		BackLoopCheckValidItemGet:
		mov ecx,[esp]
		imul ecx,0x4
		mov eax,[esp+0x30]
		xor edx,edx
		mov dl,[eax+ecx+0x8C4]
		mov eax,[esp+0xC]
		cmp edx,eax
        jnz CheckAnoterItemRequest
        mov ecx,[esp]
		imul ecx,0x4
		mov eax,[esp+0x30]
		xor edx,edx
		mov dx,[eax+ecx+0x8C4+0x1]
		mov eax,[esp+0x10]
		cmp edx,eax
		jnz CheckAnoterItemRequest
		mov eax,[esp+0x30]
		mov ecx,[esp]
		mov edx,[esi+0x98]
		mov [eax+0x8+ecx],dl
        mov eax,1
        add esp,0x4
		ret 0xC

		CheckAnoterItemRequest:
		mov ecx,[esp]
		add ecx,1
		mov [esp],ecx
        xor edx,edx
		mov dl,[esp+0x7]
		cmp ecx,edx
		jl BackLoopCheckValidItemGet
		//Check Correct Item Bonus
		xor ecx,ecx
		mov [esp],ecx
		mov eax,[esp+0x30]
		xor edx,edx
		mov dl,[eax+0x12]
		mov eax,[esp+0xC]
		cmp edx,eax
		jnz CheckItemBonusCheTao2
        BackLoopCheckAnoterItemRequestBonus:
        mov ecx,[esp]
		imul ecx,0x2
		mov eax,[esp+0x30]
		xor edx,edx
		mov dx,[eax+ecx+0x13]
		mov eax,[esp+0x10]
		cmp edx,eax
		jnz CheckAnoterItemRequestBonus
		mov eax,[esp+0x30]
		mov ecx,[esp]
		mov edx,[esi+0x98]
		mov [eax+0x10],dl
        mov eax,1
        add esp,0x4
		ret 0xC

		CheckAnoterItemRequestBonus:
		mov ecx,[esp]
		add ecx,1
		mov [esp],ecx
		cmp ecx,4
		jl BackLoopCheckAnoterItemRequestBonus
		CheckItemBonusCheTao2:
		mov eax,[esp+0x30]
		xor edx,edx
		mov dl,[eax+0x1B]
		mov eax,[esp+0xC]
		cmp edx,eax
		jnz EndCheckItemRequestFromCheTao
		mov eax,[esp+0x30]
		xor edx,edx
		mov dx,[eax+0x1C]
		mov eax,[esp+0x10]
		cmp edx,eax
		jnz EndCheckItemRequestFromCheTao
		mov eax,[esp+0x30]
		mov ecx,[esp]
		mov edx,[esi+0x98]
		mov [eax+0x0F],dl
        mov eax,1
        add esp,0x4
		ret 0xC

        EndCheckItemRequestFromCheTao:
        mov eax,0
		add esp,0x4
        ret 0xC
	}
};
__declspec(naked)void AntiChangeTarge3()  //0062B914
{
__asm
	{
       xor eax,eax
	   mov ax,word ptr [0x1107258+0x84FC]
	   cmp eax,30
	   jz AcceptChangeTarget
       cmp eax,7
	   jz AcceptChangeTarget
       cmp eax,0
	   jz AcceptChangeTarget
	   cmp eax,103
	   jz AcceptChangeTarget
	   cmp eax,105
	   jz AcceptChangeTarget
	   cmp eax,114
	   jz AcceptChangeTarget
	   cmp eax,106
	   jz AcceptChangeTarget
	   cmp eax,31
	   jz AcceptChangeTarget
	   cmp eax,13
	   jz AcceptChangeTarget
	   cmp eax,2
	   jz AcceptChangeTarget
	   cmp eax,101
	   jz AcceptChangeTarget
	   cmp eax,32
	   jz AcceptChangeTarget
	   cmp eax,19
	   jz AcceptChangeTarget
	   cmp eax,4
	   jz AcceptChangeTarget
	   cmp eax,792
	   jz AcceptChangeTarget
	   cmp eax,569
	   jz AcceptChangeTarget
	   cmp eax,1316
	   jz AcceptChangeTarget
       cmp eax,296
	   jz AcceptChangeTarget
       cmp eax,1074
	   jz AcceptChangeTarget
	   cmp eax,542
	   jz AcceptChangeTarget
	   cmp eax,274
	   jz AcceptChangeTarget
	   cmp eax,820
	   jz AcceptChangeTarget
       cmp eax,316
	   jz AcceptChangeTarget
	   cmp eax,782
	   jz AcceptChangeTarget
       cmp eax,114
	   jz AcceptChangeTarget
	   cmp eax,1068
	   jz AcceptChangeTarget
	   cmp eax,1310
	   jz AcceptChangeTarget
       cmp eax,1355
	   jz AcceptChangeTarget
	   cmp eax,810
	   jz AcceptChangeTarget
	   cmp eax,510
	   jz AcceptChangeTarget
	   push 0x0062BA53
       ret


	   AcceptChangeTarget:
       mov eax,[esi+0x0002BF18]
	   push 0x0062B91A
       ret
	}
};
__declspec(naked)void HienThiHoverCast()  //0050F12B
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
	   xor ecx,ecx
	   mov cl,[eax+0x2E]
	   push ecx
	   mov cx,[ebx]
	   push esi
	   push ecx
	   push 0x0050F130
       ret
	}
};
__declspec(naked)void HienThiHoverCast2()  //004C8C46
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
	   xor ecx,ecx
	   mov cl,[eax+0x2E]
	   push ecx
	   mov cx,[ebp+0x0005844]
	   push 0x004C8C4D
       ret
	}
};
__declspec(naked)void HienThiHoverCoolDown()  //0050F233
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
	   xor ecx,ecx
	   mov cl,[eax+0x2D]
	   push ecx
	   mov ax,[ebx]
	   push esi
	   push eax
	   push 0x0050F238
       ret
	}
};
__declspec(naked)void HienThiHoverCoolDown2()  //004C8D75
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
	   xor ecx,ecx
	   mov cl,[eax+0x2D]
	   push ecx
	   mov dx,[ebp+0x00005844]
	   push 0x004C8D7C
       ret
	}
};
__declspec(naked)void HienThiColorInfoCast()  //0050A497
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
       pushad
	   xor ecx,ecx
	   mov cl,[eax+0x2D]
	   test ecx,ecx
       jz KhongCoMauSac
	   mov ecx,DWORD PTR SS:[0x01733AC4]
	   push 0xFFB5FD00
	   mov edx,[ecx]
	   call dword ptr [edx+0xC]
	   KhongCoMauSac:
       popad
	   mov eax,DWORD PTR SS:[0x00897518]
	   push 0x0050A49C
	   ret

	}
};
__declspec(naked)void HienThiColorInfoCast2()  //0050A4C9
{
__asm
	{
	   mov ecx,DWORD PTR SS:[0x01733AC4]
       mov edx,DWORD PTR SS:[0x01733954]
	   push edx
	   mov edx,[ecx]
	   call dword ptr [edx+0xC]
	   lea ebx,[esi+0X0000708]
	   push 0x0050A4CF
	   ret
	}
};
__declspec(naked)void HienThiColorInfoCast3()  //0050A4DD
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
       pushad
	   xor ecx,ecx
	   mov cl,[eax+0x2E]
	   test ecx,ecx
       jz KhongCoMauSac
	   mov ecx,DWORD PTR SS:[0x01733AC4]
	   push 0xFFB5FD00
	   mov edx,[ecx]
	   call dword ptr [edx+0xC]
	   KhongCoMauSac:
       popad
	   mov edi,[esi+0X00000C8C]
	   push 0x0050A4E3
	   ret

	}
};
__declspec(naked)void HienThiColorInfoCast4()  //0050A548
{
__asm
	{
	   mov ecx,DWORD PTR SS:[0x01733AC4]
	   mov edx,DWORD PTR SS:[0x01733954]
	   push edx
	   mov edx,[ecx]
	   call dword ptr [edx+0xC]
	   lea edx,[esi+0x00000788]
	   push 0x0050A54E
	   ret
	}
};
__declspec(naked)void DecreaseCoolDownSkill1()  //0069E9F0
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
	   xor ecx,ecx
       mov eax,esi
	   mov cl,[edx+0x2D]
	   test ecx,ecx
	   jz Default
	   test eax,eax
       jz Default
       push edx
	   push eax
	   push ecx
	   call GetTimeCoolDownReal
       Default:
	   pop esi
	   pop ebx
	   add esp,0x18
	   ret

	   GetTimeCoolDownReal:
	   sub esp,0x4
	   xor ecx,ecx
	   mov [esp],ecx
	   BackloopGetTimeCoolDownReal:
	   mov eax,[esp+0x10]
	   mov ecx,[esp]
	   lea eax,[eax+0x30+ecx*0x4]
	   xor ecx,ecx
	   mov cl,[eax]
	   mov edx,[esp+0x8]
	   cmp edx,ecx
	   ja CheckAnotherGetTimeCoolDownReal
	   xor ecx,ecx
	   mov cl,[eax+0x2]
	   push ecx
	   fild DWORD PTR [esp]
	   fimul dword ptr [esp+0x10]
	   fdiv dword ptr [0x0085E274]
	   mov eax,0x00848168
	   call eax
	   add esp,0x4
	   mov ecx,[esp+0xC]
	   sub ecx,eax
	   mov eax,ecx
	   add esp,0x4
	   ret 0xC

	   CheckAnotherGetTimeCoolDownReal:
	   mov ecx,[esp]
	   add ecx,1
	   mov [esp],ecx
	   cmp ecx,10
	   jl BackloopGetTimeCoolDownReal
	   mov eax,[esp+0xC]
	   add esp,0x4
	   ret 0xC
	}
};
__declspec(naked)void DecreaseCoolDownSkill12()  //0069E9E8
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
       mov eax,[eax+ecx+0x20]
	   test eax,eax
       jz Defualt
	   xor ecx,ecx
	   mov cl,[edx+0x2D]
	   test ecx,ecx
       jz Defualt
       push edx
	   push eax
	   push ecx
	   call GetTimeCoolDownReal
       Defualt:
	   add esp,0x18
	   ret

	   GetTimeCoolDownReal:
	   sub esp,0x4
	   xor ecx,ecx
	   mov [esp],ecx
	   BackloopGetTimeCoolDownReal:
	   mov eax,[esp+0x10]
	   mov ecx,[esp]
	   lea eax,[eax+0x30+ecx*0x4]
	   xor ecx,ecx
	   mov cl,[eax]
	   mov edx,[esp+0x8]
	   cmp edx,ecx
	   ja CheckAnotherGetTimeCoolDownReal
	   xor ecx,ecx
	   mov cl,[eax+0x2]
	   push ecx
	   fild DWORD PTR [esp]
	   fimul dword ptr [esp+0x10]
	   fdiv dword ptr [0x0085E274]
	   mov eax,0x00848168
	   call eax
	   add esp,0x4
	   mov ecx,[esp+0xC]
	   sub ecx,eax
	   mov eax,ecx
	   add esp,0x4
	   ret 0xC

	   CheckAnotherGetTimeCoolDownReal:
	   mov ecx,[esp]
	   add ecx,1
	   mov [esp],ecx
	   cmp ecx,10
	   jl BackloopGetTimeCoolDownReal
	   mov eax,[esp+0xC]
	   add esp,0x4
	   ret 0xC
	}
};
__declspec(naked)void DecreaseCastSkill1()  //0069E850
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
       mov eax,esi
	   xor ecx,ecx
	   mov cl,[edx+0x2E]
	   test ecx,ecx
	   jz Default
	   test eax,eax
       jz Default
       push edx
	   push eax
	   push ecx
	   call GetTimeCoolDownReal
       Default:
	   pop esi
	   pop ebx
	   add esp,0x18
	   ret

	   GetTimeCoolDownReal:
	   sub esp,0x4
	   xor ecx,ecx
	   mov [esp],ecx
	   BackloopGetTimeCoolDownReal:
	   mov eax,[esp+0x10]
	   mov ecx,[esp]
	   lea eax,[eax+0x30+ecx*0x4]
	   xor ecx,ecx
	   mov cl,[eax]
	   mov edx,[esp+0x8]
	   cmp edx,ecx
	   ja CheckAnotherGetTimeCoolDownReal
	   xor ecx,ecx
	   mov cl,[eax+0x2]
	   push ecx
	   fild DWORD PTR [esp]
	   fimul dword ptr [esp+0x10]
	   fdiv dword ptr [0x0085E274]
	   mov eax,0x00848168
	   call eax
	   add esp,0x4
	   mov ecx,[esp+0xC]
	   sub ecx,eax
	   mov eax,ecx
	   add esp,0x4
	   ret 0xC

	   CheckAnotherGetTimeCoolDownReal:
	   mov ecx,[esp]
	   add ecx,1
	   mov [esp],ecx
	   cmp ecx,10
	   jl BackloopGetTimeCoolDownReal
	   mov eax,[esp+0xC]
	   add esp,0x4
	   ret 0xC
	}
};
__declspec(naked)void DecreaseCastSkill12()  //0069E848
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
	   mov eax,[eax+ecx+0x18]
	   test eax,eax
       jz Default
	   xor ecx,ecx
	   mov cl,[edx+0x2E]
	   test ecx,ecx
       jz Default
       push edx
	   push eax
	   push ecx
	   call GetTimeCoolDownReal
       Default:
	   add esp,0x18
	   ret

	   GetTimeCoolDownReal:
	   sub esp,0x4
	   xor ecx,ecx
	   mov [esp],ecx
	   BackloopGetTimeCoolDownReal:
	   mov eax,[esp+0x10]
	   mov ecx,[esp]
	   lea eax,[eax+0x30+ecx*0x4]
	   xor ecx,ecx
	   mov cl,[eax]
	   mov edx,[esp+0x8]
	   cmp edx,ecx
	   ja CheckAnotherGetTimeCoolDownReal
	   xor ecx,ecx
	   mov cl,[eax+0x2]
	   push ecx
	   fild DWORD PTR [esp]
	   fimul dword ptr [esp+0x10]
	   fdiv dword ptr [0x0085E274]
	   mov eax,0x00848168
	   call eax
	   add esp,0x4
	   mov ecx,[esp+0xC]
	   sub ecx,eax
	   mov eax,ecx
	   add esp,0x4
	   ret 0xC

	   CheckAnotherGetTimeCoolDownReal:
	   mov ecx,[esp]
	   add ecx,1
	   mov [esp],ecx
	   cmp ecx,10
	   jl BackloopGetTimeCoolDownReal
	   mov eax,[esp+0xC]
	   add esp,0x4
	   ret 0xC
	}
};
__declspec(naked)void DrawGuideInfomation()  //00447FCD
{
__asm
	{
	   /*
	   28 - ID NV W
	   2A - Tinh Trang  B
	   2B - Cur NV Trong Ngay   B
	   2C - Tong NV  W
	   //
	   30 - Cate Drop  B
	   31 - ID Item Drop  W
	   33 - Sl Item Drop B
	   //
	   34 - Cate Option VP  B
	   35 - ID Item Option VP  W
	   37 - Valu Option VP W
	   //
	   3C - Cate Mon Phai B
	   3D - ID Mon phai  W
	   3F - SL B
	   54
	   //
	   40 - Cate Mons  B
	   41 - ID Mons  W
	   43 - SL B
	   58
	   //
	   44 - Cate Mons  B
	   45 - ID Mons  W
	   47 - SL B
	   5C
	   //
	   48 - Sl EXP W
	   60
	   //
	   4C - Sl AC W
	   64
	   //
       */
	   nop
	   nop
	   nop
	   nop
	   nop
	   push eax
	   mov ecx,[eax+0x70]
	   test ecx,ecx
	   jnz DaCoHinhAnh
	   add eax,0x70
	   push eax
	   call AddOptionImage
	   DaCoHinhAnh:
	   mov ecx,[esi+0x00000208]
	   mov edx,[ecx+0x000007F4]
	   cmp edx,1
	   jz HienThiNhapMon
	   cmp edx,10
	   jz HienThiFormNV
       jmp ChuaXuatHienGuide

	   HienThiFormNV:
       mov ecx,DWORD PTR SS:[0x01733AC4]
	   push 0xFFFFFFFF
	   mov edx,[ecx]
	   call dword ptr [edx+0xC]
	   //
       mov eax,[esp]
	   mov dl,[eax+0x28]
	   cmp dl,1
	   jz DropVatPham
	   cmp dl,2
	   jz VatPhamOpt
	   cmp dl,3
	   jz NhiemVuPk
	   cmp dl,4
	   jz NhiemVuGietBoss
	   cmp dl,5
	   jz NhiemVuEXP
	   cmp dl,6
	   jz NhiemVuAcDanh
	   cmp dl,7
	   jz NhiemVuGietQuai
	   AnotherInfo:
       mov eax,[esp]
	   xor edx,edx
	   mov dl,[eax+0x2B]
	   push edx
	   push 0
	   push 74
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   //
	   push 0x0
	   push 0x3F800000
	   mov eax,DWORD PTR [0x01733AC4]
	   mov edi,[eax]
	   mov edx,[esi+0x18]
	   add edx,0xA5
	   push edx
	   mov edx,[esi+0x14]
	   add edx,0xD5
	   push edx
	   push eax
	   mov ecx,DWORD PTR [0x01733AC4]
	   call dword ptr [edi+0x30]
	   add esp,0x1C
	   //
       mov eax,[esp]
	   xor edx,edx
	   mov dx,[eax+0x2C]
	   push edx
	   push 18
	   push 74
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   push 0x0
	   push 0x3F800000
	   mov eax,DWORD PTR [0x01733AC4]
	   mov edi,[eax]
	   mov edx,[esi+0x18]
	   add edx,0x95
	   push edx
	   mov edx,[esi+0x14]
	   add edx,0xD5
	   push edx
	   push eax
	   mov ecx,DWORD PTR [0x01733AC4]
	   call dword ptr [edi+0x30]
	   add esp,0x1C
	   //
       mov eax,[esp]
	   xor edx,edx
	   mov dl,[eax+0x2A]
	   add edx,21
	   push edx
	   push 74
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   push 0x0
	   push 0x3F800000
	   mov eax,DWORD PTR [0x01733AC4]
	   mov edi,[eax]
	   mov edx,[esi+0x18]
	   add edx,0xB5
	   push edx
	   mov edx,[esi+0x14]
	   add edx,0xD5
	   push edx
	   push eax
	   mov ecx,DWORD PTR [0x01733AC4]
	   call dword ptr [edi+0x30]
	   add esp,0x18
	   // Hien Thi Nen NV
	   //
       mov eax,[esp]
	   xor edx,edx
	   mov dl,[eax+0x2A]
	   add dl,30
	   push edx
	   mov edx,[esi+0x18]
	   add edx,0x32
	   mov ecx,[esi+0x14]
	   add ecx,0x10D
	   push edx
	   push ecx
	   mov eax,[esp+0xC]
	   push eax
	   call GetImageClass
       mov eax,[esp]
	   xor ecx,ecx
	   mov cl,[eax+0x20]
	   test cl,cl
       jz KhongCoItemHienThi
	   //
       push 0x0
	   push 0x1
	   imul ecx,ecx,0x90
	   lea edx,[ecx+0x0112A020]
	   push 0x0
	   push edx
	   mov edx,[esi+0x18]
	   add edx,220
	   push edx
       mov edx,[esi+0x14]
	   add edx,231
	   push edx
	   push 0x1
	   mov ecx,DWORD PTR SS:[0x01615E90]
	   mov eax,0x004913F0
	   call eax
       KhongCoItemHienThi:
	   pop eax
       push 0x00447FF4
       ret

	   DropVatPham:
       mov eax,[esp]
	   xor edx,edx
	   mov dl,[eax+0x30]
	   xor ecx,ecx
	   mov cx,[eax+0x31]
	   push ecx
	   push edx
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov eax,[esp+0x4]
	   xor edx,edx
	   mov dl,[eax+0x33]
	   push edx
	   push 1
	   push 74
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   //
	   push 0x0
	   push 0x3F800000
	   mov eax,DWORD PTR [0x01733AC4]
	   mov edi,[eax]
	   mov edx,[esi+0x18]
	   add edx,0x60
	   push edx
	   mov edx,[esi+0x14]
	   add edx,0xC9
	   push edx
	   push eax
	   mov ecx,DWORD PTR [0x01733AC4]
	   call dword ptr [edi+0x30]
	   add esp,0x20
	   jmp AnotherInfo

	   VatPhamOpt:
	   mov eax,[esp]
       xor edx,edx
	   mov edx,[eax+0x37]
       push edx
	   xor edx,edx
	   mov dl,[eax+0x34]
	   xor ecx,ecx
	   mov cx,[eax+0x35]
	   push ecx
	   push edx
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   push 2
	   push 74
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   //
	   push 0x0
	   push 0x3F800000
	   mov eax,DWORD PTR [0x01733AC4]
	   mov edi,[eax]
       mov edx,[esi+0x18]
	   add edx,0x60
	   push edx
	   mov edx,[esi+0x14]
	   add edx,0xC9
	   push edx
	   push eax
	   mov ecx,DWORD PTR [0x01733AC4]
	   call dword ptr [edi+0x30]
	   add esp,0x20
	   //
	   jmp AnotherInfo

	   NhiemVuPk:
	   mov eax,[esp]
	   mov edx,[eax+0x54]
       push edx
	   xor edx,edx
	   mov dl,[eax+0x3F]
	   push edx
	   xor ecx,ecx
	   mov cx,[eax+0x3D]
	   xor edx,edx
	   mov dl,[eax+0x3C]
	   push ecx
	   push edx
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   push 4
	   push 74
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   //
	   push 0x0
	   push 0x3F800000
	   mov eax,DWORD PTR [0x01733AC4]
	   mov edi,[eax]
	   mov edx,[esi+0x18]
	   add edx,0x60
	   push edx
	   mov edx,[esi+0x14]
	   add edx,0xC9
	   push edx
	   push eax
	   mov ecx,DWORD PTR [0x01733AC4]
	   call dword ptr [edi+0x30]
	   add esp,0x24
	   jmp AnotherInfo

	   NhiemVuGietBoss:
	   mov eax,[esp]
	   mov edx,[eax+0x54]
       push edx
	   xor edx,edx
	   mov dl,[eax+0x40]
	   xor ecx,ecx
	   mov cx,[eax+0x41]
	   push ecx
	   push edx
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov eax,[esp+0x8]
	   xor edx,edx
	   mov dl,[eax+0x43]
	   push edx
	   push 6
	   push 74
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   //
	   push 0x0
	   push 0x3F800000
	   mov eax,DWORD PTR [0x01733AC4]
	   mov edi,[eax]
       mov edx,[esi+0x18]
	   add edx,0x60
	   push edx
	   mov edx,[esi+0x14]
	   add edx,0xC9
	   push edx
	   push eax
	   mov ecx,DWORD PTR [0x01733AC4]
	   call dword ptr [edi+0x30]
	   add esp,0x24
	   jmp AnotherInfo

	   NhiemVuEXP:
	   mov eax,[esp]
	   mov edx,[eax+0x54]
       push edx
	   mov edx,[eax+0x48]
	   push edx
	   push 7
	   push 74
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   //
	   push 0x0
	   push 0x3F800000
	   mov eax,DWORD PTR [0x01733AC4]
	   mov edi,[eax]
	   mov edx,[esi+0x18]
	   add edx,0x60
	   push edx
	   mov edx,[esi+0x14]
	   add edx,0xC9
	   push edx
	   push eax
	   mov ecx,DWORD PTR [0x01733AC4]
	   call dword ptr [edi+0x30]
	   add esp,0x20
	   jmp AnotherInfo

	   NhiemVuAcDanh:
	   mov eax,[esp]
	   mov edx,[eax+0x54]
       push edx
	   mov edx,[eax+0x4C]
	   push edx
	   push 34
	   push 74
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   //
	   push 0x0
	   push 0x3F800000
	   mov eax,DWORD PTR [0x01733AC4]
	   mov edi,[eax]
	   mov edx,[esi+0x18]
	   add edx,0x60
	   push edx
	   mov edx,[esi+0x14]
	   add edx,0xC9
	   push edx
	   push eax
	   mov ecx,DWORD PTR [0x01733AC4]
	   call dword ptr [edi+0x30]
	   add esp,0x20
	   jmp AnotherInfo

	   NhiemVuGietQuai:
	   mov eax,[esp]
	   mov edx,[eax+0x54]
       push edx
	   xor edx,edx
	   mov dl,[eax+0x44]
	   xor ecx,ecx
	   mov cx,[eax+0x45]
	   push ecx
	   push edx
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov eax,[esp+0x8]
	   xor edx,edx
	   mov dl,[eax+0x47]
	   push edx
	   push 5
	   push 74
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   //
	   push 0x0
	   push 0x3F800000
	   mov eax,DWORD PTR [0x01733AC4]
	   mov edi,[eax]
       mov edx,[esi+0x18]
	   add edx,0x60
	   push edx
	   mov edx,[esi+0x14]
	   add edx,0xC9
	   push edx
	   push eax
	   mov ecx,DWORD PTR [0x01733AC4]
	   call dword ptr [edi+0x30]
	   add esp,0x24
	   jmp AnotherInfo

	   //
	   HienThiNhapMon:
	   mov ecx,[0x1107258+0x474]
	   test ecx,ecx
	   jnz DaCoMonPhai
       mov eax,[esp]
	   mov cl,[eax]
	   cmp cl,2
	   jnz KiemTraHinhAnhGuide
	   mov byte ptr [eax],0
	   DaCoMonPhai:
	   xor edx,edx
	   mov dl,[0x1107258+0x000082B4]
	   xor dl,0x1F
	   test dl,dl
	   jnz ChuaXuatHienGuide
	   mov eax,[esp]
	   mov byte ptr [eax],2
	   //
       KiemTraHinhAnhGuide:
	   mov eax,[esp]
	   xor ecx,ecx
	   mov cl,[eax]
	   cmp cl,0
	   jnz KiemTraGiaTri1
	   push 1
	   push 10
	   push 84
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov eax,[esp+0x8]
	   add eax,4
	   push eax
	   mov eax,0x0085C564
	   call dword ptr [eax]
	   add esp,0xC
       jmp LoadImageMonPhai
	   //
	   KiemTraGiaTri1:
	   cmp cl,1
	   jnz KiemTraGiaTri2
       push 2
	   push 10
	   push 84
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov eax,[esp+0x8]
	   add eax,4
	   push eax
	   mov eax,0x0085C564
	   call dword ptr [eax]
	   add esp,0xC
       jmp LoadImageMonPhai
	   KiemTraGiaTri2:
       cmp cl,2
	   jnz ChuaXuatHienGuide
       push 3
	   push 10
	   push 84
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov eax,[esp+0x8]
	   add eax,4
	   push eax
	   mov eax,0x0085C564
	   call dword ptr [eax]
	   add esp,0xC
	   LoadImageMonPhai:
       push 0
       mov edx,[esi+0x18]
	   add edx,0x32
	   mov ecx,[esi+0x14]
	   add ecx,0x10D
	   push edx
	   push ecx
	   mov eax,[esp+0xC]
	   push eax
	   call GetImageClass
	   pop eax
	   push 0x00447FF4
       ret
	   //

	   //
       ChuaXuatHienGuide:
       pop eax
	   mov ecx, [esi+0x4C4]
	   push 0x00447FD3
       ret

       AddOptionImage:
	   sub esp,0x4
	   xor ecx,ecx
	   mov [esp],ecx
	   BackGetOptionImage:
	   mov ecx,[esp]
	   mov eax, 0x010CC088
	   mov edx,[eax+ecx]
	   mov eax,[esp+0x8]
	   mov [eax+ecx],edx
	   add ecx,4
	   mov [esp],ecx
	   cmp ecx,0xB8
	   jl BackGetOptionImage
	   add esp,0x4
	   ret 0x4

	   GetImageClass:
	   mov ecx,[esp+0x10]
	   cmp ecx,0
	   jz HienThiFormNhapMon
       push ecx
	   push 74
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
       push eax
       mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
	   mov ecx,[esp+0x4]
	   add ecx,0x70
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 64
	   mov  DWORD PTR SS : [ecx + 0xA0] , 321
	   mov  DWORD PTR SS : [ecx + 0x98] , 77
	   mov  DWORD PTR SS : [ecx + 0xA4] , 323
	   jmp JMpDefaultShowImage

       HienThiFormNhapMon:
	   mov ecx,[esp+04]
       add ecx,0x4
	   push ecx
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
	   mov ecx,[esp+0x4]
	   add ecx,0x70
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 69
	   mov  DWORD PTR SS : [ecx + 0xA0] , 321
	   mov  DWORD PTR SS : [ecx + 0x98] , 77
	   mov  DWORD PTR SS : [ecx + 0xA4] , 323
       JMpDefaultShowImage:
	   push 0xFF7F0000
	   push 5188
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,[esp+0x14]
	   mov edx,[esp+0x10]
	   push ecx
	   push edx
	   mov ecx, [esp+0x14]
	   add ecx,0x70
	   mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
	   call eax
	   mov ecx,[esp+0x4]
       add ecx,0x70
	   push 0x1732CC8
	   mov eax, 0x7B9850
	   call eax //Draw1
	   ret 0x10
	}
};
__declspec(naked)void IncreaseFormGuide()  //0059487B
{
__asm
	{
		xor ecx,0xE137FDB1
		cmp ecx,300
		push 0x00594884
        ret
	}
};
__declspec(naked)void IncreaseFormGuide2()  //00596717
{
__asm
	{
		xor ecx,0xE137FDB1
		cmp ecx,300
		push 0x00596720
        ret
	}
};
__declspec(naked)void GetPoZFormGuideInformation()  //00447FF4
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
	   //
	   push eax
	   //
       mov ecx,[esi+0x00000208]
	   mov edx,[ecx+0x000007F4]
	   cmp edx,1
	   jz LoadNhapMon
	   cmp edx,10
	   jz LoadFormNV
       jmp Default
	   //
       LoadNhapMon:
       mov ecx,DWORD PTR SS:[0x01733AD0]
	   mov eax,0x007D7FD0
	   call eax
       mov cl,[eax+0xC]
	   test cl,cl
	   jz Default1
	   //
	   mov ecx,[esp]
	   xor edx,edx
	   mov dl,[ecx+0x2]
	   test dl,dl
	   jnz ChuaChoPhepNhan
	   //
       mov ecx,[0x1107258+0x474]
	   test ecx,ecx
	   jz AcceptPozGuideForm
	   xor edx,edx
	   mov dl,[0x1107258+0x000082B4]
	   xor dl,0x1F
	   test dl,dl
	   jz AcceptPozGuideForm
       jmp ChuaChoPhepNhan
	   //
       AcceptPozGuideForm:
	   push eax
	   call GetPozToProcess
	   jmp ChuaChoPhepNhan

	   LoadFormNV:
       mov ecx,DWORD PTR SS:[0x01733AD0]
	   mov eax,0x007D7FD0
	   call eax
       mov cl,[eax+0xC]
	   test cl,cl
	   jz Default1
       mov ecx,[esp]
	   xor edx,edx
	   mov dl,[ecx+0x2]
	   test dl,dl
	   jnz ChuaChoPhepNhan
       push eax
	   call GetPozToProcessQuest
	   pop eax
	   push 0x00448006
       ret

	   Default1:
	   pop eax
	   mov byte ptr [eax+0x2],0
	   push 0x00448006
       ret

       Default:
	   pop eax
       mov ecx,DWORD PTR SS:[0x008CDEBC]
	   push ecx
	   lea ecx, [esi+0x4FC]
	   mov eax,0x007E0380
	   call eax
	   push 0x00448006
	   ret

	   GetPozToProcessQuest:
       mov eax,[esp+0x4]
       mov eax,[eax+0x18]
	   mov ecx,[esi+0x18]
	   add ecx,232
	   cmp eax,ecx
	   jl DefaultNotChooseQuest
	   add ecx,16
	   cmp eax,ecx
	   ja DefaultNotChooseQuest
	   mov eax,[esp+0x4]
       mov eax,[eax+0x10]
	   mov ecx,[esi+0x14]
	   add ecx,364
	   cmp eax,ecx
	   jl DefaultNotChoose
	   add ecx,57
	   cmp eax,ecx
	   ja DefaultNotChoose
	   mov eax,[esp+0x8]
	   mov byte ptr [eax+0x2],1
	   xor edx,edx
	   mov dl,[eax+0x2A]
	   cmp dl,0
	   jz NhanNhiemVuQ
	   cmp dl,1
	   jz HuyNhiemVu
       cmp dl,2
	   jz TraNV
       ret 0x4

       NhanNhiemVuQ:
	   mov dword ptr [eax+0x1C],0xC17C0004
	   mov byte ptr [eax+0x20],14
	   lea eax,[eax+0x1C]
	   push eax
	   mov ecx,0x155EE60
	   mov eax,0x006B2F60
	   call eax
	   ret 0x4

	   HuyNhiemVu:
	   mov dword ptr [eax+0x1C],0xC27C0005
	   lea eax,[eax+0x1C]
	   push eax
	   mov ecx,0x155EE60
	   mov eax,0x006B2F60
	   call eax
	   ret 0x4

       TraNV:
	   mov dword ptr [eax+0x1C],0xC27C0005
	   mov byte ptr [eax+0x20],14
	   lea eax,[eax+0x1C]
	   push eax
	   mov ecx,0x155EE60
	   mov eax,0x006B2F60
	   call eax
	   ret 0x4

	   DefaultNotChooseQuest:
       ret 0x4

	   GetPozToProcess:
	   //Chon Party HD
	   mov eax,[esp+0x8]
	   mov cl,[eax]
       cmp cl,2
	   jz FormChonClass
       mov eax,[esp+0x4]
       mov eax,[eax+0x18]
	   mov ecx,[esi+0x18]
	   add ecx,67
	   cmp eax,ecx
	   jl DefaultNotChoose
	   add ecx,18
	   cmp eax,ecx
	   ja KiemTraHangChonPhaiHD
	   mov eax,[esp+0x4]
       mov eax,[eax+0x10]
	   mov ecx,[esi+0x14]
	   add ecx,209
	   cmp eax,ecx
	   jl DefaultNotChoose
	   add ecx,98
	   cmp eax,ecx
	   ja KiemTraChonBD
	   mov eax,[esp+0x8]
	   mov byte ptr [eax+0x2],1
	   mov byte ptr [eax],0
	   ret 0x4

	   KiemTraChonBD:
       mov eax,[esp+0x4]
       mov eax,[eax+0x10]
	   mov ecx,[esi+0x14]
	   add ecx,331
	   cmp eax,ecx
	   jl DefaultNotChoose
	   add ecx,98
	   cmp eax,ecx
	   ja DefaultNotChoose
	   mov eax,[esp+0x8]
	   mov byte ptr [eax+0x2],1
	   mov byte ptr [eax],1
	   ret 0x4

       KiemTraHangChonPhaiHD:
       mov eax,[esp+0x4]
	   mov eax,[eax+0x10]
	   mov ecx,[esi+0x14]
	   add ecx,268
	   cmp eax,ecx
	   jl DefaultNotChoose
	   add ecx,117
	   cmp eax,ecx
	   ja DefaultNotChoose
	   mov eax,[esp+0x4]
	   mov eax,[eax+0x18]
	   mov ecx,[esi+0x18]
	   add ecx,102
	   cmp eax,ecx
	   jl DefaultNotChoose
	   add ecx,19
	   cmp eax,ecx
	   ja KiemTraChonHD2
	   mov eax,[esp+0x8]
	   mov byte ptr [eax+0x2],1
	   //
	   xor ecx,ecx
	   mov cl,[eax]
	   cmp cl,0
       jnz ChonPheBD
	   mov dword ptr [eax+0x1C],0xD27C0005
	   mov byte ptr [eax+0x20],2
	   lea eax,[eax+0x1C]
	   push eax
	   mov ecx,0x155EE60
	   mov eax,0x006B2F60
	   call eax
	   ret 0x4

	   ChonPheBD:
	   mov dword ptr [eax+0x1C],0xD27C0005
	   mov byte ptr [eax+0x20],1
	   lea eax,[eax+0x1C]
	   push eax
	   mov ecx,0x155EE60
	   mov eax,0x006B2F60
	   call eax
	   ret 0x4

	   KiemTraChonHD2:
       mov eax,[esp+0x4]
	   mov eax,[eax+0x18]
	   mov ecx,[esi+0x18]
	   add ecx,134
	   cmp eax,ecx
	   jl DefaultNotChoose
	   add ecx,19
	   cmp eax,ecx
	   ja KiemTraChonHD3
	   mov eax,[esp+0x8]
	   mov byte ptr [eax+0x2],1
	   //
	   xor ecx,ecx
	   mov cl,[eax]
	   cmp cl,0
	   jnz ChonPheBD1
	   mov dword ptr [eax+0x1C],0xD27C0005
	   mov byte ptr [eax+0x20],4
	   lea eax,[eax+0x1C]
	   push eax
	   mov ecx,0x155EE60
	   mov eax,0x006B2F60
	   call eax
	   ret 0x4

	   ChonPheBD1:
	   mov dword ptr [eax+0x1C],0xD27C0005
	   mov byte ptr [eax+0x20],3
	   lea eax,[eax+0x1C]
	   push eax
	   mov ecx,0x155EE60
	   mov eax,0x006B2F60
	   call eax
	   ret 0x4

       KiemTraChonHD3:
       mov eax,[esp+0x4]
	   mov eax,[eax+0x18]
	   mov ecx,[esi+0x18]
	   add ecx,166
	   cmp eax,ecx
	   jl DefaultNotChoose
	   add ecx,19
	   cmp eax,ecx
	   ja DefaultNotChoose
	   mov eax,[esp+0x8]
	   mov byte ptr [eax+0x2],1
	   //
	   xor ecx,ecx
	   mov cl,[eax]
	   cmp cl,0
	   jnz ChonPheBD3
	   mov dword ptr [eax+0x1C],0xD27C0005
	   mov byte ptr [eax+0x20],6
	   lea eax,[eax+0x1C]
	   push eax
	   mov ecx,0x155EE60
	   mov eax,0x006B2F60
	   call eax
	   ret 0x4

	   ChonPheBD3:
	   mov dword ptr [eax+0x1C],0xD27C0005
	   mov byte ptr [eax+0x20],5
	   lea eax,[eax+0x1C]
	   push eax
	   mov ecx,0x155EE60
	   mov eax,0x006B2F60
	   call eax
	   ret 0x4

	   FormChonClass:
       mov eax,[esp+0x4]
	   mov eax,[eax+0x10]
	   mov ecx,[esi+0x14]
	   add ecx,271
	   cmp eax,ecx
	   jl DefaultNotChoose
	   add ecx,117
	   cmp eax,ecx
	   ja DefaultNotChoose
	   mov eax,[esp+0x4]
	   mov eax,[eax+0x18]
	   mov ecx,[esi+0x18]
	   add ecx,110
	   cmp eax,ecx
	   jl DefaultNotChoose
	   add ecx,19
	   cmp eax,ecx
	   ja KiemTraChonClass2
	   mov eax,[esp+0x8]
	   mov byte ptr [eax+0x2],1
	   mov dword ptr [eax+0x1C],0xD27C0005
	   mov byte ptr [eax+0x20],11
	   lea eax,[eax+0x1C]
	   push eax
	   mov ecx,0x155EE60
	   mov eax,0x006B2F60
	   call eax
	   ret 0x4

	   KiemTraChonClass2:
       mov eax,[esp+0x4]
	   mov eax,[eax+0x18]
	   mov ecx,[esi+0x18]
	   add ecx,142
	   cmp eax,ecx
	   jl DefaultNotChoose
	   add ecx,19
	   cmp eax,ecx
	   ja KiemTraChonClass3
       mov eax,[esp+0x8]
	   mov byte ptr [eax+0x2],1
	   mov dword ptr [eax+0x1C],0xD27C0005
	   mov byte ptr [eax+0x20],13
	   lea eax,[eax+0x1C]
	   push eax
	   mov ecx,0x155EE60
	   mov eax,0x006B2F60
	   call eax
	   ret 0x4

	   KiemTraChonClass3:
       mov eax,[esp+0x4]
	   mov eax,[eax+0x18]
	   mov ecx,[esi+0x18]
	   add ecx,174
	   cmp eax,ecx
	   jl DefaultNotChoose
	   add ecx,19
	   cmp eax,ecx
	   ja KiemTraChonClass4
       mov eax,[esp+0x8]
	   mov byte ptr [eax+0x2],1
	   mov dword ptr [eax+0x1C],0xD27C0005
	   mov byte ptr [eax+0x20],12
	   lea eax,[eax+0x1C]
	   push eax
	   mov ecx,0x155EE60
	   mov eax,0x006B2F60
	   call eax
	   ret 0x4

	   KiemTraChonClass4:
       mov eax,[esp+0x4]
	   mov eax,[eax+0x18]
	   mov ecx,[esi+0x18]
	   add ecx,206
	   cmp eax,ecx
	   jl DefaultNotChoose
	   add ecx,19
	   cmp eax,ecx
	   ja DefaultNotChoose
       mov eax,[esp+0x8]
	   mov byte ptr [eax+0x2],1
	   mov dword ptr [eax+0x1C],0xD27C0005
	   mov byte ptr [eax+0x20],14
	   lea eax,[eax+0x1C]
	   push eax
	   mov ecx,0x155EE60
	   mov eax,0x006B2F60
	   call eax
	   ret 0x4

	   DefaultNotChoose:
       ret 0x4

	   ChuaChoPhepNhan:
	   pop eax
	   push 0x00448006
       ret
	}
};
int powerDecrypt(int a, int b, int n) {
    int res = 1;
    a = a % n;
    while (b > 0) {
        if (b & 1) {
            res = (res * a) % n;
        }
        b = b >> 1;
        a = (a * a) % n;
	}
    return res;
}
__declspec(naked) void TestDecryptFileSkill()// 006993A3
{
	  __asm {
		nop
		nop
		nop
		nop
        nop
		pushad
		//
		push esi
		call FuncDecryptFile
		add esp,0x4
        popad
		mov ecx,0xC
		push 0x006992D9
		ret


		FuncDecryptFile:
		push ebp
		mov ebp,esp
		push ebx
		push edi
		push esi
		sub esp,0x1C
		mov esi,[ebp+0x8]
		mov DWORD PTR SS:[ebp-0x1C],00000000
		sub esp,0x4
		push 02
		push 00
		push esi
		call DWORD PTR SS:[0x0085C55C]
		add esp,0x4
		push esi
		call DWORD PTR SS:[0x0085C558]
		add esp,0x10
		mov ebx,eax
		sub esp,0x4
		push 02
		push 00
		push esi
		call DWORD PTR SS:[0x0085C55C]
		add esp,0x4
		push ebx
		mov eax,0x00848138
        call eax
		add esp,0x10
		mov edi,eax
		sub esp,0xC
		push esi
		call DWORD PTR SS:[0x0085C4D4]
		add esp,0x10
		push esi
		push 0x1
		push ebx
		push edi
		call DWORD PTR SS:[0x0085C540]
		add esp,0x10
		mov [ebp-0x20],ebx
		test ebx,ebx
		jng Adr08560101
		mov [ebp-0x18],edi
		xor eax,eax
		xor ebx,ebx
		mov DWORD PTR SS:[ebp-0x14],0x0
		xor ecx,ecx
		mov esi,[ebp-0x18]
		Adr08560080:
        push eax
		mov edi,[esi+eax*0x4]
		mov eax,[esp+0x4C]
		mov edx,[eax+ebx*0x8]
		mov ecx,[eax+ebx*0x8+0x4]
		push edx
		push ecx
        push edi
		nop
		nop
		nop
		nop
		nop
		nop
        nop
		add esp,0xC
		mov [ebp-0xD],al
        pop eax
		movzx edx,byte ptr [ebp-0xD]
		mov [esi+eax],dl
		mov edx,[ebp-0x14]
		cmp edx,0xFF
		jl Adr085600E0
		cmp ebx,0xF
		mov edi,0x0
		jg Adr085600CE
		inc ebx
		mov edi,ebx
		Adr085600CE:
		mov DWORD PTR SS:[ebp-0x14],0x0
		mov ebx,edi
		jmp Adr085600E4
		Adr085600E0:
		inc edx
		mov [ebp-0x14],edx
		Adr085600E4:
		inc eax
		mov edx,eax
        imul edx,0x4
		cmp edx,[ebp-0x20]
		jl Adr08560080
		push eax
		//
        push [ebp+0x28]
		call DWORD PTR SS:[0x0085C4D4]
        add esp,0x4
		//
		push 0x1
        push 0x390000
		push [ebp+0x28]
		call DWORD PTR SS:[0x0085C55C]
		add esp,0xC
		//
		pop eax
		push [ebp+0x8]
		push eax
		push 0x1
		mov edi,[ebp-0x18]
		push edi
		call DWORD PTR SS:[0x0085C4E8]
		add esp,0x10
        push [ebp+0x28]
		call DWORD PTR SS:[0x0085C4D4]
		add esp,0x4
		push 0x1
        push 0x390000
		push [ebp+0x28]
		call DWORD PTR SS:[0x0085C55C]
		add esp,0xC
		jmp Adr08560105
        Adr08560101:
		test edi,edi
		je Adr08560111
		Adr08560105:
		sub esp,0xC
		push edi
        mov eax,0x00847F60
		call eax
		add esp,0x10
		add esp,0x1C
		Adr08560111:
		pop esi
		pop edi
		pop ebx
		pop ebp
		ret
	  }
};
__declspec(naked) void ChangeTypeRead()// 0069929B
{
__asm {
		 mov eax,0x00891C76
		 mov byte ptr [eax],0x2B
		 push 0x0089F5EC
		 push 0x006992A0
         ret
	  }
}
__declspec(naked) void ChangeTypeRead2()// 006992A5
{
__asm {
		 mov eax,0x007B7560
		 call eax
		 mov ecx,0x00891C76
		 mov byte ptr [ecx],0x00
		 push 0x006992AA
         ret
	  }
}
__declspec(naked) void VerifyXCode()// 0040CFB0
{
__asm {
		 mov eax,DWORD PTR SS:[0x0085C7D8]
		 xor ecx,ecx
		 mov cl,[eax+0x18]
		 cmp cl,0xDA
		 jnz NotFound
         mov eax,DWORD PTR SS:[0x017321E8]
		 push 0x0040CFB5
		 ret

		 NotFound:
		 push 0x0
         ret
	  }
}
__declspec(naked) void ChangeTypeExode()// 006B3AD0
{
__asm {
		 mov [esp+0x70],cx
		 xor ecx,ecx
		 mov cl,[edx+0x3]
		 xor cl,0xBA
		 mov [edx+0x3],cl
		 push 0x006B3AD5
         ret
	  }
};
__declspec(naked)void TestAttackMod()  //00493FA9
{
   __asm{
	   nop
	   nop
	   nop
	   nop
	   nop
	   pushad
       xor ecx,ecx
	   mov ecx,[eax+0x4]
	   test ecx,ecx
	   jz Default
       xor ecx,ecx
	   mov ecx,[eax+0x5]
	   test ecx,ecx
	   jnz Default
	   xor ecx,ecx
	   mov cl,[eax+0x2C]
	   test ecx,ecx
	   jnz Default
	   mov ecx,[0x1107258+0x2BF18]
	   test ecx,ecx
	   jnz Default
       xor ecx,ecx
	   mov cl,[eax+0x30]
	   test ecx,ecx
	   jnz Default
       xor ecx,ecx
	   mov cl,[eax+0x2E]
	   test ecx,ecx
	   jnz Default
	   xor ecx,ecx
	   mov cl,[eax+0x2F]
	   test ecx,ecx
	   jz Default
       mov cl,[eax+0x1C]
	   test ecx,ecx
	   jz Default
       xor ecx,ecx
	   mov cl,[eax+0x32]
	   cmp ecx,0x1
       jz KTDaDenDungViTri
	   xor ecx,ecx
	   mov cl,[eax+0x31]
	   add cl,1
       mov [eax+0x31],cl
	   xor edx,edx
	   mov dl,[eax+0x33]
	   cmp cl,dl
	   jnz DiChuyenBinhThuong
       mov byte ptr [eax+0x31],0
	   DiChuyenBinhThuong:
       xor ecx,ecx
	   mov cl,[eax+0x31]
       imul ecx,0xC
	   mov edx,[eax+ecx+0x50]
	   sub esp,0xC
	   mov [esp],edx
	   mov edx,[eax+ecx+0x50+0x4]
	   mov [esp+0x4],edx
	   mov edx,[eax+ecx+0x50+0x8]
	   mov [esp+0x8],edx
	   mov ecx,0x1107258
	   mov eax,0x0062BB50
	   call eax
       mov ecx,0x1107258
	   mov eax,0x00620410
	   call eax
	   mov eax,[esp+0x1C]
	   mov byte ptr [eax+0x32],0x1
	   Default:
	   DefaultNotLoad:
	   //

	   //
	   popad
	   mov eax,[ebx+0x10]
	   test eax,eax
	   push 0x00493FAE
	   ret

	   KTDaDenDungViTri:
       xor ecx,ecx
	   mov cl,[eax+0x31]
	   imul ecx,0xC
       sub esp,0xC
	   mov edx,[eax+ecx+0x50]
	   mov [esp],edx
	   mov edx,[eax+ecx+0x50+0x4]
	   mov [esp+0x4],edx
	   mov edx,[eax+ecx+0x50+0x8]
	   mov [esp+0x8],edx
	   call GetDistanceCurPozandNextPoz
	   cmp eax,0x1
	   jz KiemTraSoLanCho
       mov eax,[esp+0x1C]
	   mov byte ptr [eax+0x32],0x0
	   mov byte ptr [eax+0x2F],0x0
       mov byte ptr [eax+0x13F],0x0
	   jmp Default

	   KiemTraSoLanCho:
	   mov eax,[esp+0x1C]
	   mov cl,[eax+0x13F]
	   add cl,1
       mov [eax+0x13F],cl
	   cmp cl,50
	   jl Default
	   mov byte ptr [eax+0x13F],0x0
       xor ecx,ecx
	   mov cl,[eax+0x31]
       imul ecx,0xC
	   mov edx,[eax+ecx+0x50]
	   sub esp,0xC
	   mov [esp],edx
	   mov edx,[eax+ecx+0x50+0x4]
	   mov [esp+0x4],edx
	   mov edx,[eax+ecx+0x50+0x8]
	   mov [esp+0x8],edx
	   mov ecx,0x1107258
	   mov eax,0x0062BB50
	   call eax
       mov ecx,0x1107258
	   mov eax,0x00620410
	   call eax
       jmp Default



       GetDistanceCurPozandNextPoz:
	   sub esp,0x8
	   mov eax,0x40000000
	   mov [esp],eax
       mov eax,0x41200000
	   mov [esp+0x4],eax
	   fld dword ptr [esp]
	   mov eax,0x1107258
	   fld dword ptr [eax+0x83D4]
	   fsub dword ptr [esp+0xC]
	   fld dword ptr [eax+0x83DC]
	   fsub dword ptr [esp+0x14]
	   fld st(0)
	   fmul st(0),st(1)
	   fld st(2)
	   fmul st(0),st(3)
	   faddp
	   fstp dword ptr [esp]
	   fstp st(0)
	   fstp st(0)
	   mov eax,0x007C76B0
	   call eax
	   //add esp,0x4
	   fcomp   st(1)
	   fnstsw  ax
	   test    ah, 0x41
	   fstp    st
	   jz KhongBangCurPoz
	   mov eax,0x0
	   add esp,0x8
	   ret 0xC

	   KhongBangCurPoz:
       mov eax,0x1
	   add esp,0x8
	   ret 0xC

   }
};
__declspec(naked)void AttackMonster()  //0051D2DF
{
   __asm{
	   nop
	   nop
	   nop
	   nop
	   nop
	   pushad
	   mov ecx,esi
	   mov eax,0x0051EBF0
	   call eax
	   mov eax,[0x1107258+0x2BF18]
	   test eax,eax
	   jz Default
       push 0x00002739
	   mov ecx,0x017323A8
	   mov eax,0x007D8550
	   call eax
	   test eax,eax
	   jz Default
	   mov ecx,[eax+0x10]
	   test ecx,ecx
       jz Default
	   mov eax,[esp+0x1C]
       xor ecx,ecx
	   mov cl,[eax+0x4]
	   test ecx,ecx
	   jz Default
	   mov cl,[eax+0x2C]
	   test ecx,ecx
	   jnz Default
       mov cl,[eax+0x30]
	   test ecx,ecx
	   jz Default
       mov cl,[eax+0x2F]
	   test ecx,ecx
	   jnz Default
	   mov cl,[eax+0x32]
	   test ecx,ecx
	   jnz Default
	   mov ecx,[eax+0x64]
	   cmp ecx,[0x1107258+0x2BF18]
	   jnz AddMonsMoi
	   mov edx,DWORD PTR SS:[0x01733B04]
	   mov ecx,[eax+0x68]
	   cmp ecx,edx
	   ja Default
	   jmp AttackMonsterNewAddress
	   AddMonsMoi:
	   mov ecx,[0x1107258+0x2BF18]
	   mov [eax+0x64],ecx
	   mov edx,DWORD PTR SS:[0x01733B04]
	   add edx,2000
	   mov [eax+0x68],edx
       jmp Default
	   //
	   AttackMonsterNewAddress:
	   mov eax,[esp+0x1C]
       mov edx,DWORD PTR SS:[0x01733B04]
	   mov ecx,[eax+0x104]
	   cmp ecx,edx
       ja AcceptAttackMonsterCheck
	   //
	   mov edx,[0x1107258+0x2BF18]
	   mov ecx,[eax+0x100]
	   cmp ecx,edx
	   jnz AcceptAttackMonsterCheck
	   mov byte ptr [eax+0x2C],0
	   mov ecx,0x1107258
	   mov eax,0x0062B910
	   call eax
       jmp Default
       AcceptAttackMonsterCheck:
	   mov eax,[esp+0x1C]
	   mov ecx,[eax+0x40]
	   mov edx,DWORD PTR SS:[0x01733B04]
	   cmp ecx,edx
	   ja Default
	   mov edx,DWORD PTR SS:[0x01733B04]
	   add edx,3500
	   mov [eax+0x40],edx
       push eax
	   call AttackModWithSkill
       Default:
	   popad
	   push 0x0051D2E6
	   ret

	   MoveCharacterToMod:
	   mov eax,[0x1107258+0x2BF18]
	   sub esp,0xC
	   mov edx,[eax+0x9C]
	   mov [esp],edx
	   mov edx,[eax+0xA0]
	   mov [esp+0x4],edx
	   mov edx,[eax+0xA4]
	   mov [esp+0x8],edx
	   mov ecx,0x1107258
	   mov eax,0x0062BB50
	   call eax
	   mov ecx,0x1107258
	   mov eax,0x00620410
	   call eax
	   jmp Default

       GetDistanceModAndArround:
	   sub esp,0x8
	   mov eax,0x40000000
	   mov [esp],eax
       mov eax,0x40000000
	   mov [esp+0x4],eax
	   fld dword ptr [esp]
	   mov eax,0x1107258
	   fld dword ptr [eax+0x83D4]
	   fsub dword ptr [esp+0xC]
	   fld dword ptr [eax+0x83DC]
	   fsub dword ptr [esp+0x14]
	   fld st(0)
	   fmul st(0),st(1)
	   fld st(2)
	   fmul st(0),st(3)
	   faddp
	   fstp dword ptr [esp]
	   fstp st(0)
	   fstp st(0)
	   mov eax,0x007C76B0
	   call eax
	   //add esp,0x4
	   fcomp   st(1)
	   fnstsw  ax
	   test    ah, 0x41
	   fstp    st
	   jz KhongBangCurPoz
	   mov eax,0x0
	   add esp,0x8
	   ret 0xC

	   KhongBangCurPoz:
       mov eax,0x1
	   add esp,0x8
	   ret 0xC


	   AttackModWithSkill:
	   sub esp,0x8
	   xor ecx,ecx
	   mov [esp],ecx
	   push 0x00002712
	   mov ecx,0x017323A8
	   mov eax,0x007D8550
	   call eax
	   test eax,eax
	   jz OutFundUseSkill
	   BackLoopUseSkill:
       mov ecx,[eax+0x354]
	   imul ecx,10
	   imul ecx,0x20
       lea eax,[eax+ecx]
	   mov ecx,[esp]
	   mov edx,[esp+0xC]
       xor ebx,ebx
	   mov bl,[edx+ecx+0x10]
	   test ebx,ebx
       jz EndFuncUseSkill
	   imul ecx,0x20
	   mov dl,[eax+0x46B4+ecx]
	   cmp dl,1
	   jnz EndFuncUseSkill
	   mov dx,[eax+0x46B4+ecx+0x4]
	   test dx,dx
	   jz EndFuncUseSkill
	   mov dl,[eax+ecx+0x46B4+0x11]
	   cmp dl,1
	   jz EndFuncUseSkill
       mov ecx,[esp]
	   push ecx
	   mov ecx,DWORD PTR SS:[0x01616230]
	   mov eax,0x560350
	   call eax
	   cmp eax,0x1
	   jnz EndFuncUseSkill
       mov ecx,[esp]
	   push ecx
	   mov ecx,DWORD PTR SS:[0x01616230]
	   mov eax,0x005603C0
	   call eax
       xor ecx,ecx
	   mov cx,ax
       mov [esp+0x4],ecx
	   push ecx
	   push 0x0
	   mov eax,0x56D530
	   call eax
	   test eax,eax
	   jz EndFuncUseSkill
       mov ecx,[esp]
	   push ecx
	   push 0x1
	   mov ecx,[esp+0xC]
	   push ecx
       mov ecx,DWORD PTR SS:[0x01733A9C]
	   add ecx,0x5664
	   mov eax,0x005B0100
	   call eax
       add esp,0x8
	   ret 0x4

       EndFuncUseSkill:
	   mov ecx,[esp]
	   add ecx,0x1
       mov [esp],ecx
	   cmp ecx,0x9
	   jl BackLoopUseSkill
	   OutFundUseSkill:
       mov ecx,[0x010D94A8]
	   mov eax,0x006215E0
	   call eax
	   add esp,0x8
	   ret 0x4
   }
};
__declspec(naked)void NotMoveWhenAutoPick()  //0061FC08
{
	__asm
	{
       nop
	   nop
	   nop
	   nop
	   nop
	   pushad
       mov ecx,[esp+0x1C]
	   xor edx,edx
	   mov dl,[ecx+0x4]
	   test dl,dl
	   jz DefaultNotByPass
	   mov dl,[ecx+0x20]
	   test dl,dl
	   jnz AcceptPickItem
	   mov dl,[ecx+0x21]
	   test dl,dl
	   jnz AcceptPickItem
	   mov dl,[ecx+0x22]
	   test dl,dl
	   jnz AcceptPickItem
	   mov dl,[ecx+0x23]
	   test dl,dl
	   jnz AcceptPickItem
       DefaultNotByPass:
	   popad
	   mov ecx, esi
	   mov eax,0x0062C550
       call eax
	   push 0x0061FC0F
	   ret

	   AcceptPickItem:
       popad
	   push 0x0061FC0F
	   ret
    }
};
__declspec(naked)void PickItemDrop()  //0067813E
{
   // 0x28 : Thoi Gian Delay Nhat
   // 0x2C : Phat Hien VP

   __asm{
	   nop
	   nop
	   nop
	   nop
	   nop
	   pushad
	   mov ecx,[esi+0x28]
	   cmp ecx,-1
	   jz Default2
	   xor eax,eax
	   mov ax,[esi+0x30]
	   push eax
	   xor eax,eax
	   mov al,[esi+0x2D]
	   push eax
	   mov eax,0x00675CF0
	   call eax
	   add esp,0x8
	   mov ecx,[esp+0x1C]
	   xor edx,edx
	   mov dl,[ecx+0x20]
	   cmp dl,1
	   jz AcceptPickItemWithColor
	   xor ecx,ecx
	   mov cl,al
	   push ecx
	   mov ecx,[esp+0x20]
	   push ecx
       call CheckItemPickCorrectGrade
	   test eax,eax
       jz Default2
	   AcceptPickItemWithColor:
	   push esi
	   mov ecx,0x1107258
	   mov eax,0x0062C730
	   call eax
	   cmp eax,-1
	   jz Default2
	   AcceptPickItem:
	   mov edx,[0x01733B04]
       mov eax,[esp+0x1C]
	   mov ecx,[eax+0x28]
	   cmp ecx,edx
	   ja Default2
	   add edx,350
       mov [eax+0x28],edx
	   xor ecx,ecx
	   mov cx,[esi+0x32]
	   test ecx,ecx
       jz ProcessPickItem
	   cmp cx,[0x1107258+0x83C8]
	   jnz Default
	   ProcessPickItem:
	   mov edx,[0x1107258+0x282AC]
	   test edx,edx
       jnz DaCoDoiTuongNhat
	   mov [0x1107258+0x282AC],esi
       DaCoDoiTuongNhat:
	   xor ecx,ecx
	   mov eax,[0x1107258+0x282AC]
	   mov cx,[eax+0x32]
	   cmp cx,-1
	   jnz AcceptPickThisItem
	   mov DWORD PTR SS:[0x1107258+0x282AC],0x0
       jmp Default
	   //
       AcceptPickThisItem:
	   mov ecx, [0x1107258+0x282AC]
	   push ecx
	   mov ecx,0x1107258
	   mov eax,0x0062C730
	   call eax
	   cmp eax,-1
	   jz Default2
	   mov edx, [0x1107258+0x282AC]
	   push 0
	   push 0
	   push eax
	   mov eax, [edx+0x28]
	   mov ecx,0x0155EE60
	   push eax
	   push 0x73
	   mov eax,0x006B3170
	   call eax
       mov edx, [0x1107258+0x282AC]
	   mov WORD PTR SS:[edx+0x32],-1
	   mov edx,DWORD PTR SS:[0x010D94A8]
	   mov ecx,[edx+0x0002B868]
	   mov esi,ecx
	   xor esi,eax
	   mov al,0x1
	   and esi,0x1
	   xor esi,ecx
	   mov [edx+0x0002B868],esi
	   popad
	   mov eax,DWORD PTR SS:[0x01733AA4]
	   push 0x00678944
	   ret

	   CheckItemPickCorrectGrade:
	   mov eax,[esp+0x8]
	   cmp eax,8
	   jnz CheckCheckItemPickCorrectGradeAnother1
	   mov eax,[esp+0x4]
	   xor ecx,ecx
	   mov cl,[eax+0x21]
	   test cl,cl
	   jz EndCheckItemPickCorrectGrade
	   mov eax,1
       ret 0x8

	   CheckCheckItemPickCorrectGradeAnother1:
	   cmp eax,7
	   jnz CheckCheckItemPickCorrectGradeAnother2
	   mov eax,[esp+0x4]
	   xor ecx,ecx
	   mov cl,[eax+0x22]
	   test cl,cl
	   jz EndCheckItemPickCorrectGrade
	   mov eax,1
	   ret 0x8

	   CheckCheckItemPickCorrectGradeAnother2:
	   cmp eax,6
	   jnz EndCheckItemPickCorrectGrade
	   mov eax,[esp+0x4]
	   xor ecx,ecx
	   mov cl,[eax+0x23]
	   test cl,cl
	   jz EndCheckItemPickCorrectGrade
	   mov eax,1
       ret 0x8

	   EndCheckItemPickCorrectGrade:
	   mov eax,0x0
       ret 0x8


	   Default:
	   popad
	   mov eax,DWORD PTR SS:[0x01733AA4]
	   push 0x00678944
	   ret

       CheckItemXepChong:
	   sub esp,0x4
	   mov DWORD PTR SS:[esp],25
	   BackloopCheckItemXepChong:
	   mov ecx,[esp+0x8]
	   cmp ecx,0
       jz KhongPhaiTypeCoXepChong
       cmp ecx,1
	   jz KhongPhaiTypeCoXepChong
       cmp ecx,9
	   jz KhongPhaiTypeCoXepChong
	   cmp ecx,15
	   jz KhongPhaiTypeCoXepChong
	   cmp ecx,14
       jz KhongPhaiTypeCoXepChong
	   cmp ecx,16
	   jz KhongPhaiTypeCoXepChong
	   cmp ecx,19
	   jz KhongPhaiTypeCoXepChong
	   cmp ecx,20
       jz KhongPhaiTypeCoXepChong
	   mov ecx,[esp]
	   imul ecx,0x90
	   lea eax,[0x1107258+ecx+0x22DC8]
	   xor edx,edx
       mov dl,[eax+0x16]
	   xor dl,0x1F
	   mov ecx,[esp+0x8]
	   cmp ecx,edx
	   jnz CheckCheckItemXepChongUp
	   xor edx,edx
	   mov dx,[eax+0x14]
	   xor dx,0xCE43
	   mov ecx,[esp+0xC]
	   cmp ecx,edx
	   jnz CheckCheckItemXepChongUp
       xor edx,edx
	   mov dl,[eax+0x19]
	   xor dl,0xC5
	   cmp edx,255
       jae CheckCheckItemXepChongUp
	   mov eax,1
       add esp,0x4
	   ret 0x8

	   CheckCheckItemXepChongUp:
	   mov ecx,[esp]
	   add ecx,1
	   mov [esp],ecx
	   cmp ecx,[0x1107258+0x22DC0]
	   jl BackloopCheckItemXepChong
	   KhongPhaiTypeCoXepChong:
	   mov eax,0
       add esp,0x4
	   ret 0x8

	   Default2:
	   popad
	   mov eax,DWORD PTR SS:[0x01733AA4]
	   push 0x00678944
	   ret

	   GetEmptySlot:
	   sub esp,0x4
	   xor ecx,ecx
	   mov dword ptr [esp],0x19
       BackLoopCheckEmtypSlot:
	   mov ecx,[esp]
	   imul ecx,0x90
	   xor edx,edx
	   mov dx,[0x1107258+ecx+0x22DC8+0x14]
	   xor dx,0xCE43
	   test edx,edx
	   jz ConSlotTrong
	   mov ecx,[esp]
	   add ecx,0x1
	   mov [esp],ecx
       xor edx,edx
	   mov dl,[0x1107258+0x22DC0]
	   cmp ecx,edx
	   jle BackLoopCheckEmtypSlot
       mov eax,0x0
	   add esp,0x4
       ret

	   ConSlotTrong:
       mov eax,[esp]
	   add esp,0x4
	   ret
   }
}
__declspec(naked)void AutoMoRuongFunc()  //0056E3A6
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
      push eax
	  mov DWORD PTR SS:[0x008B077C],00000001
	  mov cl,[eax+0x24]
	  test cl,cl
	  jz Default
	  mov ecx,[esi+0x2A0]
	  test ecx,ecx
      jnz Default
	  mov ecx,[eax+0x128]
	  mov edx,DWORD PTR SS:[0x01733B04]
	  cmp ecx,edx
	  ja Default
	  add edx,2000
	  mov [eax+0x128],edx
	  push 0x000028A3
	  mov ecx,0x017323A8
	  mov eax,0x007D8550
	  call eax
	  test eax,eax
	  jz Default
	  push 00
	  push 00
	  push 00
	  push 0x6
	  push 0x000000F2
	  mov ecx,0x0155EE60
	  mov byte ptr [eax+0x00000208],01
	  mov eax,0x006B3170
      call eax
	  Default:
      pop eax
	  push 0x0056E3B0
      ret
	}
};
__declspec(naked) void UsePotionAuto() // 005904A6
{
	  __asm {
		nop
		nop
		nop
		nop
		nop
		pushad
		xor ecx,ecx
	   /*	mov cl,[eax]
		test ecx,ecx
		jz Default */
		mov cl,[eax+0x4]
		test ecx,ecx
		jnz AcceptFuncUsedPotion
        mov cl,[eax+0x5]
		test ecx,ecx
		jnz AcceptFuncUsedPotion
		mov cl,[eax+0x24]
		test ecx,ecx
		jnz AutoMoRuong
		jmp Default

		AutoMoRuong:
		//
		call CheckTLBRExist
		test eax,eax
		jz Default
		push eax
		//
        push 10403
		mov ecx,0x017323A8
		mov eax,0x007D8550
		call eax
		mov cl,[eax+0x10]
		test cl,cl
        jnz KhongTheMoRuongLucNay
		//
		mov edx,DWORD PTR SS:[0x01733A9C]
        lea ecx,[edx+0x00005664]
		mov eax,0x005BBBC0
		call eax
		test al,al
		jnz KhongTheMoRuongLucNay
		//
		mov eax,[esp+0x20]
		mov cl,[eax+0x124]
		test cl,cl
		jnz KhongTheMoRuongLucNay
		mov edx,DWORD PTR SS:[0x01733B04]
		mov ecx,[eax+0x124]
		cmp ecx,edx
		ja KhongTheMoRuongLucNay
		add edx,5000
        mov [eax+0x128],edx
		//
		push 10403
		mov ecx,0x017323A8
		mov eax,0x007D8550
		call eax
		mov cl,[eax+0x10]
		test cl,cl
        jnz KhongTheMoRuongLucNay
		mov byte ptr [eax+0x00000208],00
		mov ecx,[esp]
		mov [eax+0x00000300],ecx
		imul ecx,0x90
		xor edx,edx
		mov dx,[0x1107258+0x22DC8+ecx+0x14]
		xor dx,0xCE43
        mov ecx,edx
		push 00
		push 00
		push 00
		push 02
		lea edx,[ecx+ecx*0x8]
		push 0x000000F2
		lea ecx,[ecx+edx*0x2]
		mov edx,DWORD PTR SS:[0x016DFA18]
		movsx ecx,word ptr [edx+ecx*0x4+0x44]
		mov [eax+0x000002FC],ecx
		mov ecx,0x0155EE60
		mov eax,0x006B3170
		call eax
		KhongTheMoRuongLucNay:
		pop eax
        jmp Default


		CheckTLBRExist:
		sub esp,0x4
		xor ecx,ecx
		mov dword ptr [esp],25
		BackLoopCheckTLBR:
		mov ecx,[esp]
		imul ecx,0x90
		mov dl,[0x1107258+0x22DC8+ecx+0x16]
		xor dl,0x1F
		cmp dl,7
		jnz CheckAnotherSlotTLBR
		mov dl,[0x1107258+0x22DC8+ecx+0x17]
		xor dl,0x1F
		cmp dl,9
		jnz CheckAnotherSlotTLBR
        mov dl,[0x1107258+0x22DC8+ecx+0x19]
		xor dl,0xC5
		cmp dl,1
		jl CheckAnotherSlotTLBR
		mov ecx,[esp]
        mov eax,ecx
		add esp,0x4
		ret

        CheckAnotherSlotTLBR:
		mov ecx,[esp]
		add ecx,1
		mov [esp],ecx
		cmp ecx,140
		jl BackLoopCheckTLBR
        xor eax,eax
		add esp,0x4
        ret

		AcceptFuncUsedPotion:
		mov cl,[eax+0x8]
		test ecx,ecx
		jz KiemTraMana
		//
        mov ecx,[eax+0x54]
        mov edx,DWORD PTR SS:[0x01733B04]
		cmp ecx,edx
		ja KiemTraMana
		//
        push ecx
		mov ecx,[0x1107258+0x826C]
		xor ecx,0xAE1CDB23
		push ecx
		mov ecx,[0x1107258+0x2DB90]
		xor ecx,0xAE1CDB23
		push ecx
	    call CheckPhanTram
        cmp eax,0x1
		jz KiemTraMana
		call UseHealth
		mov edx,DWORD PTR SS:[0x01733B04]
		add edx,5000
		mov ecx,[esp+0x1C]
		mov [ecx+0x54],edx


		KiemTraMana:
		xor ecx,ecx
        mov eax,[esp+0x1C]
        mov cl,[eax+0x9]
		test ecx,ecx
		jz VanKhiKhiHetMau
        mov ecx,[eax+0x58]
        mov edx,DWORD PTR SS:[0x01733B04]
		cmp ecx,edx
		ja VanKhiKhiHetMau
        push ecx
		mov ecx,[0x1107258+0x8270]
		xor ecx,0xAE1CDB23
		push ecx
		mov ecx,[0x1107258+0x2DBB8]
		xor ecx,0xAE1CDB23
		push ecx
	    call CheckPhanTram
        cmp eax,0x1
		jz VanKhiKhiHetMau
		call UseMana
        mov edx,DWORD PTR SS:[0x01733B04]
		add edx,5000
		mov ecx,[esp+0x1C]
		mov [ecx+0x58],edx


		VanKhiKhiHetMau:
		xor ecx,ecx
		mov eax,[esp+0x1C]
		mov cl,[eax+0xA]
		test ecx,ecx
		jz VanKhiKhiHetMana
		mov ecx,[eax+0x5C]
        mov edx,DWORD PTR SS:[0x01733B04]
		cmp ecx,edx
        ja VanKhiKhiHetMana
		/*push ecx
		mov ecx,[0x1107258+0x826C]
		xor ecx,0xAE1CDB23
		push ecx
		mov ecx,[0x1107258+0x2DB90]
		xor ecx,0xAE1CDB23
		push ecx
	    call CheckPhanTram
		cmp eax,0x1
		jz VanKhiKhiHetMana
		mov eax,DWORD PTR SS:[0x017321E8]
		push eax
		push 1406
		push 273
		push eax
		mov eax,0x0085C678
		call dword ptr [eax]
        mov edx,DWORD PTR SS:[0x01733B04]
		add edx,5000
		mov ecx,[esp+0x1C]
		mov [ecx+0x5C],edx */


		VanKhiKhiHetMana:
		xor ecx,ecx
		mov eax,[esp+0x1C]
		mov cl,[eax+0xB]
		test ecx,ecx
		jz SuDungTienHacThao
		mov ecx,[eax+0x60]
        mov edx,DWORD PTR SS:[0x01733B04]
		cmp ecx,edx
        ja SuDungTienHacThao
		/*push ecx
		mov ecx,[0x1107258+0x8270]
		xor ecx,0xAE1CDB23
		push ecx
		mov ecx,[0x1107258+0x2DBB8]
		xor ecx,0xAE1CDB23
		push ecx
	    call CheckPhanTram
		cmp eax,0x1
		jz SuDungTienHacThao
		mov eax,DWORD PTR SS:[0x017321E8]
		push eax
		push 1406
		push 273
        push eax
		mov eax,0x0085C678
		call dword ptr [eax]
        mov edx,DWORD PTR SS:[0x01733B04]
		add edx,5000
		mov ecx,[esp+0x1C]
		mov [ecx+0x60],edx */

		SuDungTienHacThao:
        xor ecx,ecx
		mov eax,[esp+0x1C]
		mov cl,[eax+0xE]
		test ecx,ecx
		jz Default
        mov ecx,[eax+0x64]
        mov edx,DWORD PTR SS:[0x01733B04]
		cmp ecx,edx
        ja Default
		mov ecx,[0x1107258+0x8284]
		xor ecx,0xAE1CDB23
		test ecx,ecx
		jz Default
		call UseChuaTriNgoaiThuong
        mov edx,DWORD PTR SS:[0x01733B04]
		add edx,5000
		mov ecx,[esp+0x1C]
		mov [ecx+0x64],edx

		Default:
		popad
		mov eax,[esi+0x10]
        test eax,eax
		push 0x005904AB
		ret

        CheckPhanTram:
		mov ecx,[esp+0xC]
		push ecx
		call GetFuncKiemTra
		mov ebx,eax
		mov eax,[esp+0x8]
		imul eax,0x64
		xor edx,edx
		mov ecx,[esp+0x4]
		idiv ecx
		cmp eax,ebx
		ja KhongBangPhanTramMau
		mov eax,0x0
		ret 0xC

        KhongBangPhanTramMau:
		mov eax,0x1
		ret 0xC


        GetFuncKiemTra:
		mov ecx,[esp+0x4]
		cmp ecx,0x1
		jnz KiemTra50
		mov eax,25
		ret 0x4
		KiemTra50:
		cmp ecx,0x2
		jnz KiemTra75
		mov eax,50
		ret 0x4
		KiemTra75:
		mov eax,75
		ret 0x4

        UseHealth:
		sub esp,0x4
		mov dword ptr [esp],25
		BackLoopCheckHealth:
		mov ecx,[esp]
		imul ecx,0x90
		xor eax,eax
		mov al,[0x1107258+0x22DC8+ecx+0x16]
		xor al,0x1F
		cmp eax,0x3
		jnz NextCheckHealth
		xor eax,eax
		mov ax,[0x1107258+0x22DC8+ecx+0x14]
		xor ax,0xCE43
		mov ecx,DWORD PTR SS:[0x016DFA28]
		lea edx,[eax+eax*0x2]
		shl edx,0x3
		sub edx,eax
		xor eax,eax
		mov al,[ecx+edx*0x4+0x42]
		cmp al,119
        jnz NextCheckHealth
		push 0x0
		push 0x0
		push 0x0
		mov eax,[esp+0xC]
		push eax
		push 0x7A
		mov ecx,0x0155EE60
		mov eax,0x006B3170
		call eax
		add esp,0x4
		ret

        NextCheckHealth:
		mov ecx,[esp]
		add ecx,0x1
		mov [esp],ecx
		cmp ecx,0x8C
		jl BackLoopCheckHealth
		add esp,0x4
		ret

        UseChuaTriNgoaiThuong:
		sub esp,0x4
		mov dword ptr [esp],25
		BackLoopCheckNgoaiThuong:
		mov ecx,[esp]
		imul ecx,0x90
		xor eax,eax
		mov al,[0x1107258+0x22DC8+ecx+0x16]
		xor al,0x1F
		cmp eax,0x3
		jnz NextCheckNgoaiThuong
		xor eax,eax
		mov ax,[0x1107258+0x22DC8+ecx+0x14]
		xor ax,0xCE43
		cmp eax,51
		jz AcceptUseNgoaiThuongUser
		cmp eax,52
		jz AcceptUseNgoaiThuongUser
		cmp eax,53
		jz AcceptUseNgoaiThuongUser
		cmp eax,54
		jz AcceptUseNgoaiThuongUser
		cmp eax,55
		jz AcceptUseNgoaiThuongUser
		cmp eax,56
		jz AcceptUseNgoaiThuongUser
		cmp eax,57
		jz AcceptUseNgoaiThuongUser
        cmp eax,58
		jz AcceptUseNgoaiThuongUser
        cmp eax,3516
		jz AcceptUseNgoaiThuongUser
        cmp eax,3437
		jz AcceptUseNgoaiThuongUser
		jmp NextCheckNgoaiThuong

        AcceptUseNgoaiThuongUser:
		push 0x0
		push 0x0
		push 0x0
		mov eax,[esp+0xC]
		push eax
		push 0x7A
		mov ecx,0x0155EE60
		mov eax,0x006B3170
		call eax
		add esp,0x4
		ret

		NextCheckNgoaiThuong:
		mov ecx,[esp]
		add ecx,0x1
		mov [esp],ecx
		cmp ecx,0x8C
		jl BackLoopCheckNgoaiThuong
		add esp,0x4
		ret


		UseMana:
		sub esp,0x4
		mov dword ptr [esp],25
		BackLoopCheckMana:
		mov ecx,[esp]
		imul ecx,0x90
		xor eax,eax
		mov al,[0x1107258+0x22DC8+ecx+0x16]
		xor al,0x1F
		cmp eax,0x3
		jnz NextCheckMana
		xor eax,eax
		mov ax,[0x1107258+0x22DC8+ecx+0x14]
		xor ax,0xCE43
		mov ecx,DWORD PTR SS:[0x016DFA28]
		lea edx,[eax+eax*0x2]
		shl edx,0x3
		sub edx,eax
		xor eax,eax
		mov al,[ecx+edx*0x4+0x42]
		cmp al,120
		jnz NextCheckMana
		push 0x0
		push 0x0
		push 0x0
		mov eax,[esp+0xC]
		push eax
		push 0x7A
		mov ecx,0x0155EE60
		mov eax,0x006B3170
		call eax
		add esp,0x4
		ret

		NextCheckMana:
		mov ecx,[esp]
		add ecx,0x1
		mov [esp],ecx
		cmp ecx,0x8C
		jl BackLoopCheckMana
		add esp,0x4
	    ret
	}
};
__declspec(naked) void AutoHoiSinh() //00562B88
{
	  __asm {
        nop
        nop
		nop
		nop
		nop
		pushad
		xor ecx,ecx
		mov ecx,[esi+0x10]
		cmp ecx,1
        jnz ChuaAuto
		mov cl,[eax+0x4]
		test cl,cl
		jz ChuaAuto
        mov cl,[eax+0xC]
		test cl,cl
		jz ChuaAuto // Chua Su Dung Hoi Sinh
		mov ecx,[esi+0x210]
		test ecx,ecx
		jz KiemTraHoiSinhTaiCHo
		mov dl,[ecx+0x10]
		test dl,dl
		jz KiemTraHoiSinhTaiCHo
		//
		mov eax,[esp+0x1C]
		mov ecx,[eax+0x12C]
		mov edx,DWORD PTR SS:[0x01733B04]
		cmp ecx,edx
		ja ChuaAuto
		add edx,6000
        mov [eax+0x12C],edx
		//
		push 10060
		mov ecx,0x017323A8
		mov eax,0x007D8550
		call eax
		mov ecx,DWORD PTR SS:[0x010D94A8]
		push 06
		push 03
		mov esi,eax
		mov eax,0x0061F140
		call eax
		test eax,eax
		jl KiemTraHoiSinhTaiCHo
		push 00
		push 00
		push 00
		push eax
		push 0x7A
		mov ecx,0x0155EE60
		mov eax,0x006B3170
        call eax
		mov edx,[esi]
		push 00
		mov ecx,esi
		call dword ptr [edx+0x2C]
		jmp ChuaAuto

		KiemTraHoiSinhTaiCHo:
        mov ecx,[esi+0x20C]
		test ecx,ecx
		jz ChuaAuto
		mov dl,[ecx+0x10]
		test dl,dl
		jz ChuaAuto
		//
        mov eax,[esp+0x1C]
		mov ecx,[eax+0x12C]
        mov edx,DWORD PTR SS:[0x01733B04]
		cmp ecx,edx
		ja ChuaAuto
		add edx,6000
        mov [eax+0x12C],edx
		//
        push 10060
		mov ecx,0x017323A8
		mov eax,0x007D8550
		call eax
		mov esi,eax
		test esi,esi
		jz ChuaAuto
        push 00
		push 00
		push 00
		push 2
		push 0x21
		mov ecx,0x0155EE60
		mov eax,0x006B3170
        call eax
		mov edx,[esi]
		push 00
		mov ecx,esi
		call dword ptr [edx+0x2C]

        ChuaAuto:
		popad
		mov edx,[esp+0x10]
        mov ecx,esi
		push 0x00562B8E
		ret
	}
};
__declspec(naked) void CheckAutoDelay() // 00661C0F
{
	  __asm {
		nop
		nop
		nop
		nop
		nop
		xor ecx,ecx
		mov cl,[eax+0x4]
		test ecx,ecx
        jz Default
		mov ecx,[eax+0x3C]
        mov edx,DWORD PTR SS:[0x01733B04]
		cmp ecx,edx
		ja Default
		add edx,10000
        mov [eax+0x3C],edx
		mov ecx,[0x1107258+0x2BF18]
		test ecx,ecx
		jz KhongCoQuai
		mov byte ptr [eax+0x4C],0
		mov ecx,[eax+0x38]
		test ecx,ecx
		jz ChuaCoGiaTriKiemTra
		mov edx,[0x1107258+0x2BF18]
		cmp ecx,edx
		jz CheckGiaTriTonTai
		mov [eax+0x38],edx
		mov byte ptr [eax+0x4D],0
		jmp Default

		CheckGiaTriTonTai:
		xor ecx,ecx
		mov cl,[eax+0x4D]
		add cl,1
		cmp ecx,20
        jl TiepTucCho2
        mov byte ptr [eax+0x2C],0
		mov byte ptr [eax+0x2F],0
		mov byte ptr [eax+0x30],0
		mov byte ptr [eax+0x32],0
        jmp Default
		TiepTucCho2:
		mov [eax+0x4D],cl
		jmp Default

		ChuaCoGiaTriKiemTra:
		mov ecx,[0x1107258+0x2BF18]
        mov [eax+0x38],ecx
		jmp Default

		KhongCoQuai:
		mov byte ptr [eax+0x4D],0
		xor ecx,ecx
		mov cl,[eax+0x4C]
		add cl,1
		cmp ecx,20
		jl TiepTucCho
        mov byte ptr [eax+0x2C],0
		mov byte ptr [eax+0x2F],0
		mov byte ptr [eax+0x30],0
		mov byte ptr [eax+0x32],0
        jmp Default

		TiepTucCho:
        mov [eax+0x4C],cl
        Default:
        mov eax,DWORD PTR SS:[0x01733AA4]
		push 0x00661C14
        ret
	}
};
__declspec(naked) void HienThiThongTinDangAuto() // 0065F9E7
{
	  __asm {
		nop
		nop
		nop
		nop
		nop
		pushad
		mov dl,[eax+0x4]
		test dl,dl
        jz Default
        mov ecx,DWORD PTR SS:[0x01733AC4]
		push 0xFF000000
		mov edx,[ecx]
		call dword ptr [edx+0xC]
		push 108
		push 76
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		push 0x2
		push 0x3F800000
		mov eax,DWORD PTR [0x01733AC4]
		mov edi,[eax]
		mov eax, DWORD PTR SS : [0x10D94A8]
		mov ecx, [eax + 0x470]
		mov eax, [eax + ecx * 0x4 + 0x20]
        xor ecx,ecx
		test eax,eax
		jz KhongCoDanhHieu
        add ecx,1
		KhongCoDanhHieu:
        mov eax,[0x1107258+0x836C]
		test eax,eax
		jz KhongCoBangHoi
		add ecx,1
		KhongCoBangHoi:
		imul ecx,0x10
		mov edx,ebx
		sub edx,ecx
		sub edx,0x18
		push edx
		mov edx,ebp
		push edx
		mov eax,DWORD PTR [0x01733AC4]
		push eax
		mov ecx,DWORD PTR [0x01733AC4]
		call dword ptr [edi+0x30]
	  	add esp,0x18
		Default:
		popad
        mov ecx,[edx+0x00009EB8]
		push 0x0065F9ED
        ret
	}
};
__declspec(naked) void AutoTheoSauNhomTruong() // 00456897
{
	  __asm {
		nop
		nop
		nop
		nop
		nop
		pushad
        add eax,0x130
		mov cl,[eax+0xC0]
		test cl,cl
		jz Default
		mov edx,DWORD PTR SS:[0x01733B04]
        mov ecx,[eax+0xD0]
		cmp ecx,edx
		ja Default
		mov edx,DWORD PTR SS:[0x01733B04]
		add edx,1000
		mov [eax+0xD0],edx
		mov edx,[eax+0xC4]
		test edx,edx
		jz ChuaCoGiaTriMove
		mov ecx,DWORD PTR SS:[0x10D93F8]
        test ecx,ecx
		jz Default
		mov ecx,[ecx]
		test ecx,ecx
        jz Default
		mov edx,[ecx+0x83D4]
		mov ecx,[eax+0xC4]
		test edx,ecx
        jz Default
		ChuaCoGiaTriMove:
		mov eax,DWORD PTR SS:[0x10D93F8]
		test eax,eax
        jz Default
		mov eax,[eax]
        test eax,eax
        jz Default
		mov ecx,[esp+0x1C]
		add ecx,0x130
        mov edx,[eax+0x83D4]
		mov [ecx+0xC4],edx
        mov edx,[eax+0x83D8]
		mov [ecx+0xC8],edx
        mov edx,[eax+0x83DC]
		mov [ecx+0xCC],edx
		//

        ProcessMove:
		sub esp,0xC
		mov eax,[esp+0x28]
        add eax,0x130
		mov edx,[eax+0xC4]
		mov [esp],edx
		mov edx,[eax+0xC8]
		mov [esp+0x4],edx
		mov edx,[eax+0xCC]
		mov [esp+0x8],edx
		mov ecx,0x1107258
		mov eax,0x0062BB50
		call eax
		mov ecx,0x1107258
		mov eax,0x00620410
		call eax


        Default:
		popad
		mov eax,[esi+0x10]
        test eax,eax
		push 0x0045689C
        ret
	}
};
__declspec(naked)void SetTargetMod()  //0064B5B3
{
   // Toa Do Danh Xung Quang 38 3C
   // Co Set Target Quai 2D
   // Loop Load Quai 2E
   __asm{
	   nop
	   nop
	   nop
	   nop
	   nop
	   push eax
	   test esi,esi
	   jz Default
	   mov eax,[esp]
	   xor ecx,ecx
	   mov cl,[eax+0x4]
	   test ecx,ecx
	   jz Default
	   //
	   xor ecx,ecx
	   mov cx,[esi+0xE]
	   cmp ecx,1219
	   jz Default
	   cmp ecx,1967
	   jz Default
	   cmp ecx,1966
	   jz Default
	   cmp ecx,1968
	   jz Default
	   cmp ecx,1969
	   jz Default
	   cmp ecx,1980
	   jz Default
	   cmp ecx,1973
	   jz Default
	   cmp ecx,1990
	   jz Default
	   cmp ecx,1992
	   jz Default
	   cmp ecx,1989
	   jz Default
	   //
	   xor ecx,ecx
	   mov ecx,DWORD PTR SS:[0x0110FE5C]
	   cmp ecx,0
       jnz KhongPhaiNghiNgoi
	   mov ecx,DWORD PTR SS:[0x010D94A8]
	   mov eax,0x006467D0
	   call eax
	   mov ecx,DWORD PTR SS:[0x010D94A8]
	   push 0x1
	   mov edx,[ecx]
	   call dword ptr [edx+0x20]
	   KhongPhaiNghiNgoi:
	   //
       mov eax,[esp]
       xor ecx,ecx
	   mov cl,[eax+0x5]
	   test ecx,ecx
	   jnz Default
	   xor ecx,ecx
       mov cl,[eax+0x2C]
	   test ecx,ecx
	   jnz Default
	   mov cl,[esi+0x12]
       cmp cl,1
	   jbe Default
       mov cl,[esi+0x13]
       cmp cl,1
	   jbe Default
       mov cl,[eax+0x2F]
	   test ecx,ecx
	   jnz Default
	   mov ecx,[0x1107258+0x2BF18]
	   test ecx,ecx
	   jnz Default
       xor eax,eax
	   mov ax,[esi+0xE]
	   lea ecx,[eax*0x8+0x00000000]
	   sub ecx,eax
	   lea ecx,[ecx+ecx*0x4]
       xor edx,edx
	   mov dl,[ecx*0x4+0x01623C9A]
	   cmp dl,81
	   jz Default
	   cmp dl,82
	   jz Default
       xor eax,eax
	   mov ax,[esi+0xE]
	   lea ecx,[eax*0x8+0x00000000]
	   sub ecx,eax
	   lea ecx,[ecx+ecx*0x4]
       xor edx,edx
	   mov dl,[ecx*0x4+0x01623C98]
	   cmp dl,11
	   jz AcceptTypeModTarget
	   cmp dl,12
	   jz AcceptTypeModTarget
	   cmp dl,13
	   jz AcceptTypeModTarget
	   cmp dl,14
	   jz AcceptTypeModTarget
	   cmp dl,15
	   jz AcceptTypeModTarget
	   cmp dl,16
	   jz AcceptTypeModTarget
	   cmp dl,17
	   jz AcceptTypeModTarget
       cmp dl,18
	   jz AcceptTypeModTarget
	   cmp dl,19
	   jz AcceptTypeModTarget
	   cmp dl,20
	   jz AcceptTypeModTarget
	   cmp dl,21
	   jz AcceptTypeModTarget
	   cmp dl,22
	   jz AcceptTypeModTarget
	   cmp dl,23
	   jz AcceptTypeModTarget
	   cmp dl,24
	   jz AcceptTypeModTarget
	   cmp dl,40
	   jz AcceptTypeModTarget
	   cmp dl,41
	   jz AcceptTypeModTarget
	   cmp dl,42
	   jz AcceptTypeModTarget
	   cmp dl,45
	   jz AcceptTypeModTarget
	   cmp dl,46
	   jz AcceptTypeModTarget
	   cmp dl,47
	   jz AcceptTypeModTarget
	   cmp dl,48
	   jz AcceptTypeModTarget
	   cmp dl,49
	   jz AcceptTypeModTarget
	   //
       jmp Default
	   //
	   AcceptTypeModTarget:
       jmp DanhXungQuanh
	   /*mov ecx,[esp]
	   mov dl,[ecx+0x1C]
	   test dl,dl
	   jz DanhXungQuanh */
	   sub esp,0xC
	   mov edx,[esi+0x9C]
	   mov [esp],edx
	   mov edx,[esi+0xA0]
	   mov [esp+0x4],edx
	   mov edx,[esi+0xA4]
	   mov [esp+0x8],edx
	   call GetDistanceMod
	   test eax,eax
	   jnz QuaiKhongDuKhoangCach
	   //
	   mov eax,[esp]
	   mov cl,[eax+0x1C]
	   test cl,cl
       jnz DanhApSat
	   //
	   mov eax,esi
	   push 0x0
       push 0x2
	   push eax
	   mov ecx,0x1107258
	   mov eax,0x62B6C0
	   call eax
       xor ecx,ecx
	   mov eax,[esp]
	   mov byte ptr [eax+0x2E],0
	   //mov byte ptr [eax+0x2D],0
	   mov byte ptr [eax+0x30],1
	   Default:
	   pop eax
	   pop edi
	   pop esi
	   pop ebp
	   pop ebx
       add esp,0x28
	   push 0x0064B5BA
	   ret

	   DanhXungQuanh:
	   // Chon Quai Gan Nhat
	   KhongCoThongTinMob:
	   mov ecx,[esp]
	   mov al,[ecx+0x134]
	   cmp al,30
	   ja AcceptCurMoster
	   sub esp,0xC
	   mov edx,[esi+0x9C]
	   mov [esp],edx
	   mov edx,[esi+0xA0]
	   mov [esp+0x4],edx
	   mov edx,[esi+0xA4]
	   mov [esp+0x8],edx
	   call GetDistanceModAndArround
	   mov eax,[esp]
	   xor ecx,ecx
	   mov cl,[eax+0x134]
	   add ecx,1
	   mov [eax+0x134],cl
	   jmp Default

       AcceptCurMoster:
	   //
	   /*sub esp,0xC
	   mov edx,[esi+0x9C]
	   mov [esp],edx
	   mov edx,[esi+0xA0]
	   mov [esp+0x4],edx
	   mov edx,[esi+0xA4]
	   mov [esp+0x8],edx
	   call GetDistanceMod2
       test eax,eax
	   jnz Default
	   mov eax,esi */
	   mov eax,[ecx+0x130]
	   test eax,eax
	   jz Default
	   mov dl,[ecx+0x1C]
	   test dl,dl
	   jnz DanhApSatDotDauCheck
	   push 0x0
       push 0x2
	   push eax
	   mov ecx,0x1107258
	   mov eax,0x62B6C0
	   call eax
       xor ecx,ecx
	   mov eax,[esp]
	   mov byte ptr [eax+0x2E],0
	   mov edx,DWORD PTR SS:[0x01733B04]
	   add edx,30000
       mov [eax+0x104],edx
	   mov [eax+0x100],esi
	   //mov byte ptr [eax+0x2D],0
	   mov byte ptr [eax+0x30],1
	   mov dword ptr [eax+0x130],0
	   mov byte ptr [eax+0x134],0
	   mov dword ptr [eax+0x138],0
	   mov byte ptr [eax+0x50],0
	   jmp Default

	   DanhApSatDotDauCheck:
	   mov ecx,[esp]
	   mov dl,[ecx+0x50]
	   cmp dl,1
       jnz LanDauKiemTraQuai
	   mov al,[ecx+0x51]
	   add al,1
       mov [ecx+0x51],al
	   cmp al,100
	   jb Default
       LanDauKiemTraQuai:
	   mov byte ptr [ecx+0x50],1
	   mov byte ptr [ecx+0x51],0
       mov eax,[ecx+0x130]
       sub esp,0xC
	   mov edx,[eax+0x9C]
	   mov [esp],edx
	   mov edx,[eax+0xA0]
	   mov [esp+0x4],edx
	   mov edx,[eax+0xA4]
	   mov [esp+0x8],edx
	   call GetDistanceMod
	   test eax,eax
	   jnz ChoPhepDiChuyenLaiGanDau
	   //
	   mov ecx,[esp]
       mov eax,[ecx+0x130]
       push 0x0
       push 0x2
	   push eax
	   mov ecx,0x1107258
	   mov eax,0x62B6C0
	   call eax
       xor ecx,ecx
	   mov eax,[esp]
	   mov byte ptr [eax+0x2E],0
	   //mov byte ptr [eax+0x2D],0
	   mov byte ptr [eax+0x30],1
	   mov dword ptr [eax+0x130],0
	   mov byte ptr [eax+0x134],0
	   mov dword ptr [eax+0x138],0
	   mov byte ptr [eax+0x50],0
	   jmp Default

	   ChoPhepDiChuyenLaiGanDau:
	   mov ecx,[esp]
	   mov eax,[ecx+0x130]
	   mov byte ptr [ecx+0x51],0
	   sub esp,0xC
	   mov edx,[eax+0x9C]
	   mov [esp],edx
	   mov edx,[eax+0xA0]
	   mov [esp+0x4],edx
	   mov edx,[eax+0xA4]
	   mov [esp+0x8],edx
	   mov ecx,0x1107258
	   mov eax,0x0062BB50
	   call eax
       mov ecx,0x1107258
	   mov eax,0x00620410
	   call eax
       jmp Default


	   DanhApSat:
	   //
	   mov al,[ecx+0x51]
	   add al,1
	   mov [ecx+0x51],al
       cmp al,150
	   jb Default
	   mov eax,[ecx+0x130]
	   test eax,eax
	   jz KhongCoThongTinMob
       sub esp,0xC
	   mov edx,[eax+0x9C]
	   mov [esp],edx
	   mov edx,[eax+0xA0]
	   mov [esp+0x4],edx
	   mov edx,[eax+0xA4]
	   mov [esp+0x8],edx
	   call GetDistanceMod
	   test eax,eax
       jnz ChoPhepDiChuyenLaiGan
	   //
	   mov ecx,[esp]
       mov eax,[ecx+0x130]
       push 0x0
       push 0x2
	   push eax
	   mov ecx,0x1107258
	   mov eax,0x62B6C0
	   call eax
       xor ecx,ecx
	   mov eax,[esp]
	   mov byte ptr [eax+0x2E],0
	   //mov byte ptr [eax+0x2D],0
	   mov byte ptr [eax+0x30],1
	   mov dword ptr [eax+0x130],0
	   mov byte ptr [eax+0x134],0
	   mov dword ptr [eax+0x138],0
       mov byte ptr [eax+0x50],0
	   jmp Default

	   ChoPhepDiChuyenLaiGan:
	   mov ecx,[esp]
	   mov byte ptr [ecx+0x51],0
       mov eax,[ecx+0x130]
	   sub esp,0xC
	   mov edx,[eax+0x9C]
	   mov [esp],edx
	   mov edx,[eax+0xA0]
	   mov [esp+0x4],edx
	   mov edx,[eax+0xA4]
	   mov [esp+0x8],edx
	   mov ecx,0x1107258
	   mov eax,0x0062BB50
	   call eax
       mov ecx,0x1107258
	   mov eax,0x00620410
	   call eax
       jmp Default



	   QuaiKhongDuKhoangCach:
	   mov eax,[esp]
       xor ecx,ecx
	   mov cl,[eax+0x2E]
	   add ecx,1
	   mov [eax+0x2E],cl
	   cmp ecx,100
	   jz KiemtraCheDoDiChuyen
       pop eax
	   pop edi
	   pop esi
	   pop ebp
	   pop ebx
       add esp,0x28
	   push 0x0064B5BA
	   ret

	   KiemtraCheDoDiChuyen:
	   mov byte ptr [eax+0x2E],0
	   //mov byte ptr [eax+0x2D],0
	   mov byte ptr [eax+0x2F],1
       mov byte ptr [eax+0x30],0
       pop eax
	   pop edi
	   pop esi
	   pop ebp
	   pop ebx
       add esp,0x28
	   push 0x0064B5BA
	   ret

	   GetDistanceMod:
	   sub esp,0x8
	   mov eax,0x40000000
	   mov [esp],eax
       mov eax,0x41200000
	   mov [esp+0x4],eax
	   fld dword ptr [esp]
	   mov eax,0x1107258
	   fld dword ptr [eax+0x83D4]
	   fsub dword ptr [esp+0xC]
	   fld dword ptr [eax+0x83DC]
	   fsub dword ptr [esp+0x14]
	   fld st(0)
	   fmul st(0),st(1)
	   fld st(2)
	   fmul st(0),st(3)
	   faddp
	   fstp dword ptr [esp]
	   fstp st(0)
	   fstp st(0)
	   mov eax,0x007C76B0
	   call eax
	   //add esp,0x4
	   fcomp   st(1)
	   fnstsw  ax
	   test    ah, 0x41
	   fstp    st
	   jz KhongBangCurPoz
	   mov eax,0x0
	   add esp,0x8
	   ret 0xC

	   KhongBangCurPoz:
       mov eax,0x1
	   add esp,0x8
	   ret 0xC

       GetDistanceModAndArround:
	   sub esp,0x8
	   mov eax,0x41F00000
	   mov [esp],eax
       mov eax,0x41F00000
	   mov [esp+0x4],eax
	   fld dword ptr [esp]
	   mov eax,[esp+0x18]
	   fld dword ptr [eax+0x38]
	   fsub dword ptr [esp+0xC]
	   fld dword ptr [eax+0x3C]
	   fsub dword ptr [esp+0x14]
	   fld st(0)
	   fmul st(0),st(1)
	   fld st(2)
	   fmul st(0),st(3)
	   faddp
	   fstp dword ptr [esp]
	   fstp st(0)
	   fstp st(0)
	   mov eax,0x007C76B0
	   call eax
	   mov ecx,[esp+0x18]
	   mov edx,[ecx+0x138]
	   test edx,edx
	   jz KhongBang2ModAndArround
	   fld dword ptr [ecx+0x138]
	   fcomp   st(1)
	   fnstsw  ax
	   test    ah, 0x41
	   fstp    st
	   jz KhongBang2ModAndArround
	   add esp,0x8
	   ret 0xC

	   KhongBang2ModAndArround:
	   mov ecx,[esp+0x18]
	   mov [ecx+0x130],esi
	   mov edx,[esp]
	   mov [ecx+0x138],edx
	   add esp,0x8
	   ret 0xC

       GetDistanceMod2:
	   sub esp,0x8
	   mov eax,0x41F00000
	   mov [esp],eax
       mov eax,0x41F00000
	   mov [esp+0x4],eax
	   fld dword ptr [esp]
	   mov eax,[esp+0x18]
	   fld dword ptr [eax+0x38]
	   fsub dword ptr [esp+0xC]
	   fld dword ptr [eax+0x3C]
	   fsub dword ptr [esp+0x14]
	   fld st(0)
	   fmul st(0),st(1)
	   fld st(2)
	   fmul st(0),st(3)
	   faddp
	   fstp dword ptr [esp]
	   fstp st(0)
	   fstp st(0)
	   mov eax,0x007C76B0
	   call eax
	   fcomp   st(1)
	   fnstsw  ax
	   test    ah, 0x41
	   fstp    st
	   jz KhongBang2
	   mov eax,0x0
	   add esp,0x8
	   ret 0xC

	   KhongBang2:
	   mov eax,0x1
	   add esp,0x8
	   ret 0xC

   }
}
__declspec(naked)void SetFlagPickItem()  //00678128
{
   __asm{
	   nop
	   nop
	   nop
	   nop
	   nop
	   mov ecx,[esi+0xC]
	   test ecx,ecx
	   je Adr00678960
	   mov ecx,[0x1107258+0x282AC]
	   test ecx,ecx
	   jz Default
	   mov ecx,[ecx+0x28]
	   cmp ecx,-1
	   jz Adr00678960
	   Default:
	   push 0x00678133
	   ret

	   Adr00678960:
       mov byte ptr [eax+0x2C],0
	   mov byte ptr [eax+0x48],0
       mov dword ptr ss:[0x1107258+0x282AC],0x0
	   push 0x00678960
       ret
   }
}
__declspec(naked)void SetFlagPickItem2()  //006780BB
{
   __asm{
	   nop
	   nop
	   nop
	   nop
	   nop
	   mov edx,[ebx+0xC]
       push edi
       mov [esp+0x3C],ebx
	   test edx,edx
	   je Adr0067897B
       mov ecx,[0x1107258+0x282AC]
	   test ecx,ecx
	   jz Default
	   mov ecx,[ecx+0x28]
	   cmp ecx,-1
	   jz Adr0067897B
       Default:
       mov eax,[ebx+0xC]
	   push 0x006780CB
	   ret

	   Adr0067897B:
       mov byte ptr [eax+0x2C],0
	   mov byte ptr [eax+0x48],0
       mov dword ptr ss:[0x1107258+0x282AC],0x0
	   push 0x0067897B
       ret
   }
}
__declspec(naked)void DisableChangeTableWhenAuto()  //005C27DB
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  mov dl,[eax+0x4]
	  test dl,dl
	  jz Default
      push 0xFFFF2323
	  push 0x1
	  push 0xC
	  push 0x10DB
	  push 0x19
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x0155EE60
	  mov eax,0x006A9800
	  call eax
	  push 0x005C3239
      ret

      Default:
      mov eax,DWORD PTR SS:[0x010D94A8]
      push 0x005C27E0
	  ret
	}
};
__declspec(naked)void LuyenSkill()  //0051D309
{
   __asm{
	   nop
	   nop
	   nop
	   nop
	   nop
       pushad
	   mov ecx,esi
	   mov eax,0x0051EBF0
	   call eax
	   mov eax,[0x1107258+0x2BF18]
	   test eax,eax
	   jz Default
       push 0x00002739
	   mov ecx,0x017323A8
	   mov eax,0x007D8550
	   call eax
	   test eax,eax
	   jz Default
	   mov ecx,[eax+0x10]
	   test ecx,ecx
       jz Default
	   mov eax,[esp+0x1C]
       xor ecx,ecx
	   mov cl,[eax+0x5]
	   test ecx,ecx
	   jz Default
	   mov eax,[esp+0x1C]
	   mov ecx,[eax+0x40]
	   mov edx,DWORD PTR SS:[0x01733B04]
	   cmp ecx,edx
	   ja Default
	   mov edx,DWORD PTR SS:[0x01733B04]
	   add edx,4000
	   mov [eax+0x40],edx
       push eax
	   call AttackModWithSkill

       Default:
	   popad
	   mov ecx,esi
	   mov eax,0x0051F220
       call eax
	   push 0x0051D310
	   ret

	   AttackModWithSkill:
	   sub esp,0x8
	   xor ecx,ecx
	   mov [esp],ecx
	   push 0x00002712
	   mov ecx,0x017323A8
	   mov eax,0x007D8550
	   call eax
	   test eax,eax
	   jz OutFundUseSkill
	   BackLoopUseSkill:
	   //
	   mov ecx,[eax+0x354]
	   imul ecx,10
	   imul ecx,0x20
       lea eax,[eax+ecx]
	   //
	   mov ecx,[esp]
	   mov edx,[esp+0xC]
       xor ebx,ebx
	   mov bl,[edx+ecx+0x10]
	   test ebx,ebx
       jz EndFuncUseSkill
	   imul ecx,0x20
	   mov dl,[eax+0x46B4+ecx]
	   cmp dl,1
	   jnz EndFuncUseSkill
	   mov dx,[eax+0x46B4+ecx+0x4]
	   test dx,dx
	   jz EndFuncUseSkill
	   mov dl,[eax+ecx+0x46B4+0x11]
	   cmp dl,1
	   jz EndFuncUseSkill
       mov ecx,[esp]
	   push ecx
	   mov ecx,DWORD PTR SS:[0x01616230]
	   mov eax,0x560350
	   call eax
	   cmp eax,0x1
	   jnz EndFuncUseSkill
       mov ecx,[esp]
	   push ecx
	   mov ecx,DWORD PTR SS:[0x01616230]
	   mov eax,0x005603C0
	   call eax
       xor ecx,ecx
	   mov cx,ax
       mov [esp+0x4],ecx
	   push ecx
	   push 0x0
	   mov eax,0x56D530
	   call eax
	   test eax,eax
	   jz EndFuncUseSkill
       mov ecx,[esp]
	   push ecx
	   push 0x1
	   mov ecx,[esp+0xC]
	   push ecx
       mov ecx,DWORD PTR SS:[0x01733A9C]
	   add ecx,0x5664
	   mov eax,0x005B0100
	   call eax
       add esp,0x8
	   ret 0x4

       EndFuncUseSkill:
	   mov ecx,[esp]
	   add ecx,0x1
       mov [esp],ecx
	   cmp ecx,0x9
	   jl BackLoopUseSkill
	   OutFundUseSkill:
       mov ecx,[0x010D94A8]
	   mov eax,0x006215E0
	   call eax
	   add esp,0x8
	   ret 0x4

   }
};
__declspec(naked)void GetClassUser()  //006BA779
{
__asm
	{
      xor eax,eax
	  mov al,[ebx+0x1B]
	  shr al,0x4
	  xor al,0x1F
	  mov [ebp+0x82B4],al
      xor eax,eax
	  mov al,[ebx+0x1B]
	  and al,0xF
      push 0x006BA77E
	  ret
	}
};
__declspec(naked)void GetClassUser2()  //006BB3F6
{
__asm
	{
	  xor ecx,ecx
	  mov cl,[ebx+0x1B]
	  shr cl,0x4
	  xor cl,0x1F
	  mov [ebp+0x82B4],cl
	  xor ecx,ecx
	  mov cl,[ebx+0x1B]
	  and cl,0xF
      push 0x006BB3FB
	  ret
	}
};
__declspec(naked)void ShowClassIconAnotherUser()  //00660D16
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  pushad
	  mov edx,[eax]
	  test edx,edx
	  jnz DaCoHinhAnhIcon
      push eax
	  call AddOptionImage
	  DaCoHinhAnhIcon:
	  //
	  lea ecx,[esi+0x10]
	  push ecx
	  mov ecx,DWORD PTR SS:[0x01733AC4]
	  mov eax,[ecx]
      call dword ptr [eax+0x40]
	  //
	  mov ecx,DWORD PTR SS:[0x010CC37C]
	  add eax,ecx
	  add eax,0x52
      xor ecx,ecx
	  mov cl,[esi+0x82B4]
	  xor cl,0x1F
	  push ecx
	  mov edx,ebp
	  add edx,0xB
	  push edx
	  push eax
	  mov eax,[esp+0x28]
	  push eax
      call GetImageClass
	  popad
	  mov eax,[esi+0x9F44]
      push 0x00660D1C
	  ret

      AddOptionImage:
	  sub esp,0x4
	  xor ecx,ecx
	  mov [esp],ecx
	  BackGetOptionImage:
	  mov ecx,[esp]
	  mov eax, 0x010CC088
	  mov edx,[eax+ecx]
	  mov eax,[esp+0x8]
	  mov [eax+ecx],edx
	  add ecx,4
	  mov [esp],ecx
	  cmp ecx,0xB8
	  jl BackGetOptionImage
	  add esp,0x4
	  ret 0x4

      GetImageClass:
	  mov ecx,[esp+0x10]
	  cmp ecx,0
	  jz HienThiIconLangNhan
	  cmp ecx,1
	  jz HienThiIconChienDau
	  cmp ecx,2
	  jz HienThiIconBuff
	  cmp ecx,3
	  jz HienThiIconHoanBao
	  push 0
	  push 84
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
	  mov  DWORD PTR SS : [ecx + 0x9C] , 0
	  mov  DWORD PTR SS : [ecx + 0xA0] , 160
	  mov  DWORD PTR SS : [ecx + 0x98] , 128
	  mov  DWORD PTR SS : [ecx + 0xA4] , 32
	  jmp JMpDefaultShowImage

	  HienThiIconLangNhan:
      push 0
	  push 84
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
	  mov  DWORD PTR SS : [ecx + 0x9C] , 0
	  mov  DWORD PTR SS : [ecx + 0xA0] , 32
	  mov  DWORD PTR SS : [ecx + 0x98] , 0
	  mov  DWORD PTR SS : [ecx + 0xA4] , 32
	  jmp JMpDefaultShowImage

	  HienThiIconChienDau:
      push 0
	  push 84
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
	  mov  DWORD PTR SS : [ecx + 0x9C] , 0
	  mov  DWORD PTR SS : [ecx + 0xA0] , 64
	  mov  DWORD PTR SS : [ecx + 0x98] , 32
	  mov  DWORD PTR SS : [ecx + 0xA4] , 32
	  jmp JMpDefaultShowImage

	  HienThiIconBuff:
	  push 0
	  push 84
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
	  mov  DWORD PTR SS : [ecx + 0x9C] , 0
	  mov  DWORD PTR SS : [ecx + 0xA0] , 96
	  mov  DWORD PTR SS : [ecx + 0x98] , 64
	  mov  DWORD PTR SS : [ecx + 0xA4] , 32
	  jmp JMpDefaultShowImage

      HienThiIconHoanBao:
      push 0
	  push 84
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
	  mov  DWORD PTR SS : [ecx + 0x9C] , 0
	  mov  DWORD PTR SS : [ecx + 0xA0] , 128
	  mov  DWORD PTR SS : [ecx + 0x98] , 96
	  mov  DWORD PTR SS : [ecx + 0xA4] , 32
	  jmp JMpDefaultShowImage

	  JMpDefaultShowImage:
	  push 0xFF7F0000
	  push 5188
	  push 25
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,[esp+0x14]
	  mov edx,[esp+0x10]
	  push ecx
	  push edx
	  mov ecx, [esp+0x14]
	  mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
	  call eax
	  mov ecx,[esp+0x4]
	  push 0x1732CC8
	  mov eax, 0x7B9850
	  call eax //Draw1
	  ret 0x10
	}
};
__declspec(naked)void ShowClassLocalUser()  //0065FDBE
{
__asm
	{
	  nop
	  nop
	  nop
	  nop
	  nop
	  pushad
	  mov edx,[eax]
	  test edx,edx
	  jnz DaCoHinhAnhIcon
      push eax
	  call AddOptionImage
	  DaCoHinhAnhIcon:
	  //
	  lea ecx,[0x1107258+0x10]
	  push ecx
	  mov ecx,DWORD PTR SS:[0x01733AC4]
	  mov eax,[ecx]
      call dword ptr [eax+0x40]
	  //
	  mov ecx,DWORD PTR SS:[0x010CC37C]
	  add eax,ecx
	  add eax,0x52
      xor ecx,ecx
	  mov cl,[0x1107258+0x82B4]
	  xor cl,0x1F
	  push ecx
	  mov edx,ebx
	  add edx,0xB
	  push edx
	  push eax
	  mov eax,[esp+0x28]
	  push eax
      call GetImageClass
	  popad
	  mov eax,DWORD PTR SS:[0x010D94A8]
      push 0x0065FDC3
	  ret

      AddOptionImage:
	  sub esp,0x4
	  xor ecx,ecx
	  mov [esp],ecx
	  BackGetOptionImage:
	  mov ecx,[esp]
	  mov eax, 0x010CC088
	  mov edx,[eax+ecx]
	  mov eax,[esp+0x8]
	  mov [eax+ecx],edx
	  add ecx,4
	  mov [esp],ecx
	  cmp ecx,0xB8
	  jl BackGetOptionImage
	  add esp,0x4
	  ret 0x4

      GetImageClass:
	  mov ecx,[esp+0x10]
	  cmp ecx,0
	  jz HienThiIconLangNhan
	  cmp ecx,1
	  jz HienThiIconChienDau
	  cmp ecx,2
	  jz HienThiIconBuff
	  cmp ecx,3
	  jz HienThiIconHoanBao
	  push 0
	  push 84
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
	  mov  DWORD PTR SS : [ecx + 0x9C] , 0
	  mov  DWORD PTR SS : [ecx + 0xA0] , 160
	  mov  DWORD PTR SS : [ecx + 0x98] , 128
	  mov  DWORD PTR SS : [ecx + 0xA4] , 32
	  jmp JMpDefaultShowImage

	  HienThiIconLangNhan:
      push 0
	  push 84
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
	  mov  DWORD PTR SS : [ecx + 0x9C] , 0
	  mov  DWORD PTR SS : [ecx + 0xA0] , 32
	  mov  DWORD PTR SS : [ecx + 0x98] , 0
	  mov  DWORD PTR SS : [ecx + 0xA4] , 32
	  jmp JMpDefaultShowImage

	  HienThiIconChienDau:
      push 0
	  push 84
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
	  mov  DWORD PTR SS : [ecx + 0x9C] , 0
	  mov  DWORD PTR SS : [ecx + 0xA0] , 64
	  mov  DWORD PTR SS : [ecx + 0x98] , 32
	  mov  DWORD PTR SS : [ecx + 0xA4] , 32
	  jmp JMpDefaultShowImage

	  HienThiIconBuff:
	  push 0
	  push 84
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
	  mov  DWORD PTR SS : [ecx + 0x9C] , 0
	  mov  DWORD PTR SS : [ecx + 0xA0] , 96
	  mov  DWORD PTR SS : [ecx + 0x98] , 64
	  mov  DWORD PTR SS : [ecx + 0xA4] , 32
	  jmp JMpDefaultShowImage

      HienThiIconHoanBao:
      push 0
	  push 84
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,0x015720C8
	  mov eax,0x007B1EC0
	  call eax
	  mov ecx,[esp+0x4]
	  mov  DWORD PTR SS : [ecx + 0x70] , eax
	  mov  DWORD PTR SS : [ecx + 0x9C] , 0
	  mov  DWORD PTR SS : [ecx + 0xA0] , 128
	  mov  DWORD PTR SS : [ecx + 0x98] , 96
	  mov  DWORD PTR SS : [ecx + 0xA4] , 32
	  jmp JMpDefaultShowImage

	  JMpDefaultShowImage:
	  push 0xFF7F0000
	  push 5188
	  push 25
	  mov ecx,0x01733B30
	  mov eax,0x007C2CF0
	  call eax
	  push eax
	  mov ecx,[esp+0x14]
	  mov edx,[esp+0x10]
	  push ecx
	  push edx
	  mov ecx, [esp+0x14]
	  mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
	  call eax
	  mov ecx,[esp+0x4]
	  push 0x1732CC8
	  mov eax, 0x7B9850
	  call eax //Draw1
	  ret 0x10
	}
};
__declspec(naked)void ConvertShortToUShortHealth()  //00602A84
{
__asm
	{
		xor ecx,ecx
		mov cx,[esp+0x28]
		push 0x00602A89
		ret
	}
};
__declspec(naked)void ConvertShortToUShortHealth1()  //00602A97
{
__asm
	{
		xor edx,edx
		mov dx,[esp+0x28]
		push 0x00602A9C
		ret
	}
};
__declspec(naked)void ConvertShortToUShortHealth2()  //00602AB4
{
__asm
	{
		xor eax,eax
		mov ax,[esp+0x28]
		push 0x00602AB9
		ret
	}
};
__declspec(naked)void ConvertShortToUShortHealth3()  //00602AC7
{
__asm
	{
		xor ecx,ecx
		mov cx,[esp+0x28]
		push 0x00602ACC
		ret
	}
};
__declspec(naked)void ConvertShortToUShortMana()  //00602BC4
{
__asm
	{
		xor ecx,ecx
		mov cx,[esp+0x28]
		push 0x00602BC9
		ret
	}
};
__declspec(naked)void ConvertShortToUShortMana1()  //00602BD7
{
__asm
	{
		xor edx,edx
		mov dx,[esp+0x28]
		push 0x00602BDC
		ret
	}
};
__declspec(naked)void ConvertShortToUShortMana2()  //00602BF4
{
__asm
	{
		xor eax,eax
		mov ax,[esp+0x28]
		push 0x00602BF9
		ret
	}
};
__declspec(naked)void ConvertShortToUShortMana3()  //00602C07
{
__asm
	{
		xor ecx,ecx
		mov cx,[esp+0x28]
		push 0x00602C0C
		ret
	}
};
__declspec(naked)void ThongBaoFailInchant()  //006EA334
{
__asm
	{
		mov edx,DWORD PTR SS:[0x01615E90]
		mov eax,[edx+0x114]
		imul eax,0x90
		xor ecx,ecx
		mov cl,[0x1107258+0x22DC8+eax+0x10]
		xor cl,0xC5
		xor edx,edx
		mov dl,[esi+0x5]
		cmp ecx,edx
		jz InChangeFailed
		mov dl,[esi+0x5]
        push edx
		push 1764
        mov ecx,0x01733B30
		push 0x006EA33A
		ret

		InChangeFailed:
		mov dl,[esi+0x5]
        add edx,1
        push edx
		push 3453
        mov ecx,0x01733B30
        push 0x006EA33A
		ret

	}
};
__declspec(naked)void DisableDrawbtCheckQ()  //005032FB
{
__asm
	{
		mov DWORD PTR SS:[esp+28],0x75
		cmp edi,5
		jz XoaBtnCheck
        cmp edi,6
		jz ChinhLaibtn
		push 0x00503303
		ret

		ChinhLaibtn:
        lea eax,[esp+0x1C]
		mov DWORD PTR SS:[eax+0x14],4828
		push 0x00503303
        ret

		XoaBtnCheck:
        lea eax,[esp+0x1C]
		mov DWORD PTR SS:[eax+0x14],1245236
		push 0x00503303
        ret
	}
};
__declspec(naked)void AcceptItemResourceKinhMach()  //0048CAAC
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
	   pushad
       push 0x275A
	   mov ecx,0x017323A8
	   mov eax,0x007D8550
	   call eax
	   test eax,eax
	   jz Default
	   mov ecx,[eax+0x10]
	   test ecx,ecx
	   jz Default
	   mov eax,[eax+0x364]
	   test eax,eax
	   jz Default
	   mov ecx,[eax+0x10]
	   test ecx,ecx
	   jz Default
	   mov eax,[esp+0x14]
	   xor ecx,ecx
	   mov ecx,[esi+0x98]
	   mov [eax+0x2],cl
	   popad
	   push 0x48DAD5
	   ret

       Default:
	   popad
	   lea edx,[eax+eax*0x8]
	   lea eax,[eax+edx*0x2]
	   push 0x0048CAB2
	   ret
	}
};
__declspec(naked)void ClearInfoKinhMach()  //004DFFB8
{
__asm
	{
		nop
		nop
		nop
		nop
		nop
		//
        pushad
        push 0x275A
		mov ecx,0x017323A8
		mov eax,0x007D8550
		call eax
		test eax,eax
		jz ClearInfoKinhMachProcess
		mov ecx,[eax+0x10]
		test ecx,ecx
		jz ClearInfoKinhMachProcess
		mov eax,[eax+0x364]
		test eax,eax
		jz ClearInfoKinhMachProcess
		mov ecx,[eax+0x10]
		test ecx,ecx
		jz ClearInfoKinhMachProcess
		popad
		mov eax,[esi+0x10]
        test eax,eax
		push 0x004DFFBD
		ret

		ClearInfoKinhMachProcess:
		popad
		mov byte ptr [eax+0x1],0
		mov byte ptr [eax+0x2],0
		mov eax,[esi+0x10]
        test eax,eax
		push 0x004DFFBD
		ret
	}
};
__declspec(naked)void GetPackageKinhMachUser()  //006AD758
{
__asm
	{
		nop
		nop
		nop
		nop
		nop
		push eax
        xor eax,eax
		mov al,[ebp+0x3]
		cmp al,6
        jl Default
		cmp al,7
		jz GetPackageKM
		cmp al,8
		jz ThanhCongCoVpHoTro
		cmp al,9
		jz KoRoLoi
		cmp al,10
		jz ThatBaiNangCap
		cmp al,11
		jz KoDuEXpCan
		cmp al,12
		jz KoDuLvCan
		cmp al,13
		jz MoMachMoiFromitem
		cmp al,14
		jz MoMachFromItemFail
        cmp al,18
		jz ThanhCongKoVpHoTro
        cmp al,18
		jz ThanhCongKoVpHoTro
        cmp al,20
        jz KinhMachMax
		Default:
		pop eax
		xor eax,eax
        mov al,[ebp+0x3]
		push 0x006AD75D
		ret

		KinhMachMax:
        push 0xFFFAE6AA
		push 0x1
		push 0xC
		push 39
		push 85
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x0155EE60
		mov eax,0x006A9800
		call eax
		pop eax
        push 0x006B21F7
		ret

		MoMachMoiFromitem:
        mov eax,[esp]
        lea ecx,[ebp+0x7]
		push ecx
		lea eax,[eax+0x10]
		push eax
		call CopyByteValueKM
		pop eax
		//
		mov ecx,DWORD PTR SS:[0x010D94A8]
		mov eax,0x00627CB0
        call eax
		//
        push 0x006B21F7
		ret

		MoMachFromItemFail:
        push 0xFFFAE6AA
		push 0x1
		push 0xC
		push 38
		push 85
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x0155EE60
		mov eax,0x006A9800
		call eax
		pop eax
        push 0x006B21F7
		ret

		ThanhCongKoVpHoTro:
        mov eax,[esp]
		xor ecx,ecx
		mov cl,[ebp+0x4]
		mov [eax+0x3],cl
		lea ecx,[ebp+0x7]
		push ecx
		lea eax,[eax+0x10]
		push eax
		call CopyByteValueKM
		pop eax
		mov byte ptr [eax+0x1],0
		mov byte ptr [eax+0x2],0
		push 0xFFFAE6AA
		push 0x1
		push 0xC
		push 33
		push 85
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x0155EE60
		mov eax,0x006A9800
		call eax
        mov ecx,DWORD PTR SS:[0x010D94A8]
		mov eax,0x00627CB0
        call eax
		push 0x006B21F7
		ret

		KoRoLoi:
        push 0xFFFAE6AA
		push 0x1
		push 0xC
		push 35
		push 85
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x0155EE60
		mov eax,0x006A9800
		call eax
		pop eax
		mov byte ptr [eax+0x1],0
		mov byte ptr [eax+0x2],0
		push 0x006B21F7
		ret

		ThatBaiNangCap:
        pop eax
		mov byte ptr [eax+0x1],0
		mov byte ptr [eax+0x2],0
		//
		xor ecx,ecx
		mov cl,[ebp+0x6]
		test cl,cl
		jz XoaVatPhamHoTro
        xor edx,edx
		mov dl,[ebp+0x5]
        test dl,dl
        jz TiepTucFuncXoaVatPhamHoTro
		imul edx,0x90
		lea ecx,[0x1107258+0x22DC8+edx]
		xor edx,edx
		mov dl,[ebp+0x6]
		xor dl,0xC5
		mov [ecx+0x19],dl
        jmp TiepTucFuncXoaVatPhamHoTro

		XoaVatPhamHoTro:
        xor edx,edx
		mov dl,[ebp+0x5]
		test dl,dl
        jz TiepTucFuncXoaVatPhamHoTro
		imul edx,0x90
		lea ecx,[0x1107258+0x22DC8+edx]
		mov edx,[0x1107258+0x22DC8+edx]
		call dword ptr [edx+0x4]
		//
		TiepTucFuncXoaVatPhamHoTro:
		push 0xFFFAE6AA
		push 0x1
		push 0xC
		push 34
		push 85
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x0155EE60
		mov eax,0x006A9800
		call eax
		push 0x006B21F7
		ret

		KoDuEXpCan:
        push 0xFFFAE6AA
		push 0x1
		push 0xC
		push 37
		push 85
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x0155EE60
		mov eax,0x006A9800
		call eax
		pop eax
		mov byte ptr [eax+0x1],0
		mov byte ptr [eax+0x2],0
		push 0x006B21F7
		ret

		KoDuLvCan:
        push 0xFFFAE6AA
		push 0x1
		push 0xC
		push 36
		push 85
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x0155EE60
		mov eax,0x006A9800
		call eax
		pop eax
		mov byte ptr [eax+0x1],0
		mov byte ptr [eax+0x2],0
		push 0x006B21F7
		ret

        ThanhCongCoVpHoTro:
        mov eax,[esp]
		xor ecx,ecx
		mov cl,[ebp+0x4]
		mov [eax+0x3],cl
		lea ecx,[ebp+0x7]
		push ecx
		lea eax,[eax+0x10]
		push eax
		call CopyByteValueKM
        pop eax
		mov byte ptr [eax+0x1],0
		mov byte ptr [eax+0x2],0
		//
		xor ecx,ecx
		mov cl,[ebp+0x6]
		test cl,cl
		jz XoaVatPhamHoTroThanhCong
        xor edx,edx
		mov dl,[ebp+0x5]
        test dl,dl
        jz  TiepTucFuncCoVatPhamHoTro
		imul edx,0x90
		lea ecx,[0x1107258+0x22DC8+edx]
		xor edx,edx
		mov dl,[ebp+0x6]
		xor dl,0xC5
		mov [ecx+0x19],dl
        jmp TiepTucFuncCoVatPhamHoTro

		XoaVatPhamHoTroThanhCong:
        xor edx,edx
		mov dl,[ebp+0x5]
		test dl,dl
        jz  TiepTucFuncCoVatPhamHoTro
		imul edx,0x90
		lea ecx,[0x1107258+0x22DC8+edx]
		mov edx,[0x1107258+0x22DC8+edx]
		call dword ptr [edx+0x4]
		//
		TiepTucFuncCoVatPhamHoTro:
		push 0xFFFAE6AA
		push 0x1
		push 0xC
		push 33
		push 85
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x0155EE60
		mov eax,0x006A9800
		call eax
        mov ecx,DWORD PTR SS:[0x010D94A8]
		mov eax,0x00627CB0
        call eax
		push 0x006B21F7
		ret

		GetPackageKM:
		mov eax,[esp]
		xor ecx,ecx
		mov cl,[ebp+0x4]
		mov [eax+0x3],cl
		lea ecx,[ebp+0x5]
		push ecx
		lea eax,[eax+0x10]
		push eax
		call CopyByteValueKM
		pop eax
        mov ecx,DWORD PTR SS:[0x010D94A8]
		mov eax,0x00627CB0
        call eax
		push 0x006B21F7
		ret


		CopyByteValueKM:
		sub esp,0x4
		xor ecx,ecx
		mov [esp],ecx
		BackLoopCopyByteValueKM:
		mov ecx,[esp]
		mov eax,[esp+0xC]
		mov dl,[eax+ecx]
		mov eax,[esp+0x8]
		mov [eax+ecx],dl
		mov ecx,[esp]
		add ecx,1
		mov [esp],ecx
		cmp ecx,250
		jbe BackLoopCopyByteValueKM
        add esp,0x4
        ret 0x8
	}
};
__declspec(naked)void GetPozKichMachPage()  //00506824
{
__asm
	{
		nop
		nop
		nop
		nop
		nop
		pushad
		//
        mov ecx,DWORD PTR SS:[0x01733AD0]
		mov eax,0x007D7FD0
		call eax
		mov cl,[eax+0xC]
		cmp cl,1
		jnz Default
        mov ecx,[esp+0x1C]
        mov cl,[ecx]
		cmp cl,1
		jz DefaultNotClear
		push eax
		call CheckPozFuncKinhMach
        DefaultNotClear:
		popad
        mov eax,[esi+0x0000016C]
		push 0x0050682A
		ret

		Default:
		popad
        mov byte ptr [eax],0
        mov eax,[esi+0x0000016C]
		push 0x0050682A
		ret

		CheckPozFuncKinhMach:
		mov eax,[esp+0x4]
		mov ecx,[eax+0x18]
		mov edx,[esi+0x18]
		add edx,13
		cmp ecx,edx
		jl NotFoundPoz
		add edx,18
		cmp ecx,edx
        ja KiemTraPozKinhMach
		mov ecx,[eax+0x10]
		mov edx,[esi+0x14]
		add edx,626
		cmp ecx,edx
		jl NotFoundPoz
		add edx,58
		cmp ecx,edx
		ja NotFoundPoz
		mov eax,[esp+0x24]
		mov byte ptr [eax],1
		mov dword ptr [eax+0x4],0xE37C0006
		mov cl,[eax+0x1]
		mov [eax+0x8],cl
        mov cl,[eax+0x2]
		mov [eax+0x9],cl
		lea eax,[eax+0x4]
		push eax
		mov ecx,0x155EE60
		mov eax,0x006B2F60
		call eax
        ret 0x4

		KiemTraPozKinhMach:
        mov eax,[esp+0x4]
		mov ecx,[eax+0x18]
		mov edx,[esi+0x18]
		add edx,52
		cmp ecx,edx
		jl KiemTraPozKinhMach2
		add edx,12
		cmp ecx,edx
		ja KiemTraPozKinhMach2
		mov ecx,[eax+0x10]
		mov edx,[esi+0x14]
		add edx,520
		cmp ecx,edx
		jl KiemTraPozKinhMach2
		add edx,12
		cmp ecx,edx
		ja KiemTraPozKinhMach2
        mov eax,[esp+0x24]
		mov byte ptr [eax+0x1],1
		mov byte ptr [eax],1
		ret 0x4

		KiemTraPozKinhMach2:
        mov eax,[esp+0x4]
		mov ecx,[eax+0x18]
		mov edx,[esi+0x18]
		add edx,77
		cmp ecx,edx
		jl KiemTraPozKinhMach3
		add edx,12
		cmp ecx,edx
		ja KiemTraPozKinhMach3
		mov ecx,[eax+0x10]
		mov edx,[esi+0x14]
		add edx,520
		cmp ecx,edx
		jl KiemTraPozKinhMach3
		add edx,12
		cmp ecx,edx
		ja KiemTraPozKinhMach3
		mov eax,[esp+0x24]
		mov byte ptr [eax+0x1],2
		mov byte ptr [eax],1
		ret 0x4

		KiemTraPozKinhMach3:
        mov eax,[esp+0x4]
		mov ecx,[eax+0x18]
		mov edx,[esi+0x18]
		add edx,102
		cmp ecx,edx
		jl KiemTraPozKinhMach4
		add edx,12
		cmp ecx,edx
		ja KiemTraPozKinhMach4
		mov ecx,[eax+0x10]
		mov edx,[esi+0x14]
		add edx,520
		cmp ecx,edx
		jl KiemTraPozKinhMach4
		add edx,12
		cmp ecx,edx
		ja KiemTraPozKinhMach4
        mov eax,[esp+0x24]
		mov byte ptr [eax+1],3
		mov byte ptr [eax],1
		ret 0x4

		KiemTraPozKinhMach4:
		mov eax,[esp+0x4]
		mov ecx,[eax+0x18]
		mov edx,[esi+0x18]
		add edx,147
		cmp ecx,edx
		jl KiemTraPozKinhMach5
		add edx,12
		cmp ecx,edx
		ja KiemTraPozKinhMach5
		mov ecx,[eax+0x10]
		mov edx,[esi+0x14]
		add edx,518
		cmp ecx,edx
		jl KiemTraPozKinhMach5
		add edx,12
		cmp ecx,edx
		ja KiemTraPozKinhMach5
        mov eax,[esp+0x24]
		mov byte ptr [eax+1],4
		mov byte ptr [eax],1
		ret 0x4

		KiemTraPozKinhMach5:
        mov eax,[esp+0x4]
		mov ecx,[eax+0x18]
		mov edx,[esi+0x18]
		add edx,166
		cmp ecx,edx
		jl KiemTraPozKinhMach6
		add edx,12
		cmp ecx,edx
		ja KiemTraPozKinhMach6
		mov ecx,[eax+0x10]
		mov edx,[esi+0x14]
		add edx,491
		cmp ecx,edx
		jl KiemTraPozKinhMach6
		add edx,12
		cmp ecx,edx
		ja KiemTraPozKinhMach6
        mov eax,[esp+0x24]
		mov byte ptr [eax+1],5
		mov byte ptr [eax],1
		ret 0x4

		KiemTraPozKinhMach6:
        mov eax,[esp+0x4]
		mov ecx,[eax+0x18]
		mov edx,[esi+0x18]
		add edx,134
		cmp ecx,edx
		jl KiemTraPozKinhMach7
		add edx,12
		cmp ecx,edx
		ja KiemTraPozKinhMach7
		mov ecx,[eax+0x10]
		mov edx,[esi+0x14]
		add edx,483
		cmp ecx,edx
		jl KiemTraPozKinhMach7
		add edx,12
		cmp ecx,edx
		ja KiemTraPozKinhMach7
        mov eax,[esp+0x24]
		mov byte ptr [eax+1],6
		mov byte ptr [eax],1
		ret 0x4

		KiemTraPozKinhMach7:
        mov eax,[esp+0x4]
		mov ecx,[eax+0x18]
		mov edx,[esi+0x18]
		add edx,156
		cmp ecx,edx
		jl KiemTraPozKinhMach8
		add edx,12
		cmp ecx,edx
		ja KiemTraPozKinhMach8
		mov ecx,[eax+0x10]
		mov edx,[esi+0x14]
		add edx,460
		cmp ecx,edx
		jl KiemTraPozKinhMach8
		add edx,12
		cmp ecx,edx
		ja KiemTraPozKinhMach8
        mov eax,[esp+0x24]
		mov byte ptr [eax+1],7
		mov byte ptr [eax],1
		ret 0x4

		KiemTraPozKinhMach8:
        mov eax,[esp+0x4]
		mov ecx,[eax+0x18]
		mov edx,[esi+0x18]
		add edx,197
		cmp ecx,edx
		jl KiemTraPozKinhMach9
		add edx,12
		cmp ecx,edx
		ja KiemTraPozKinhMach9
		mov ecx,[eax+0x10]
		mov edx,[esi+0x14]
		add edx,444
		cmp ecx,edx
		jl KiemTraPozKinhMach9
		add edx,12
		cmp ecx,edx
		ja KiemTraPozKinhMach9
        mov eax,[esp+0x24]
		mov byte ptr [eax+1],8
		mov byte ptr [eax],1
		ret 0x4

		KiemTraPozKinhMach9:
        mov eax,[esp+0x4]
		mov ecx,[eax+0x18]
		mov edx,[esi+0x18]
		add edx,244
		cmp ecx,edx
		jl KiemTraPozKinhMach10
		add edx,12
		cmp ecx,edx
		ja KiemTraPozKinhMach10
		mov ecx,[eax+0x10]
		mov edx,[esi+0x14]
		add edx,421
		cmp ecx,edx
		jl KiemTraPozKinhMach10
		add edx,12
		cmp ecx,edx
		ja KiemTraPozKinhMach10
        mov eax,[esp+0x24]
		mov byte ptr [eax+1],9
		mov byte ptr [eax],1
		ret 0x4

		KiemTraPozKinhMach10:
        mov eax,[esp+0x4]
		mov ecx,[eax+0x18]
		mov edx,[esi+0x18]
		add edx,285
		cmp ecx,edx
		jl KiemTraPozKinhMach11
		add edx,12
		cmp ecx,edx
		ja KiemTraPozKinhMach11
		mov ecx,[eax+0x10]
		mov edx,[esi+0x14]
		add edx,419
		cmp ecx,edx
		jl KiemTraPozKinhMach11
		add edx,12
		cmp ecx,edx
		ja KiemTraPozKinhMach11
        mov eax,[esp+0x24]
		mov byte ptr [eax+1],10
		mov byte ptr [eax],1
		ret 0x4

		KiemTraPozKinhMach11:
        mov eax,[esp+0x4]
		mov ecx,[eax+0x18]
		mov edx,[esi+0x18]
		add edx,165
		cmp ecx,edx
		jl KiemTraPozKinhMach12
		add edx,12
		cmp ecx,edx
		ja KiemTraPozKinhMach12
		mov ecx,[eax+0x10]
		mov edx,[esi+0x14]
		add edx,548
		cmp ecx,edx
		jl KiemTraPozKinhMach12
		add edx,12
		cmp ecx,edx
		ja KiemTraPozKinhMach12
        mov eax,[esp+0x24]
		mov byte ptr [eax+1],11
		mov byte ptr [eax],1
		ret 0x4

		KiemTraPozKinhMach12:
		mov eax,[esp+0x4]
		mov ecx,[eax+0x18]
		mov edx,[esi+0x18]
		add edx,134
		cmp ecx,edx
		jl KiemTraPozKinhMach13
		add edx,12
		cmp ecx,edx
		ja KiemTraPozKinhMach13
		mov ecx,[eax+0x10]
		mov edx,[esi+0x14]
		add edx,554
		cmp ecx,edx
		jl KiemTraPozKinhMach13
		add edx,12
		cmp ecx,edx
		ja KiemTraPozKinhMach13
        mov eax,[esp+0x24]
		mov byte ptr [eax+1],12
		mov byte ptr [eax],1
		ret 0x4

		KiemTraPozKinhMach13:
        mov eax,[esp+0x4]
		mov ecx,[eax+0x18]
		mov edx,[esi+0x18]
		add edx,156
		cmp ecx,edx
		jl KiemTraPozKinhMach14
		add edx,12
		cmp ecx,edx
		ja KiemTraPozKinhMach14
		mov ecx,[eax+0x10]
		mov edx,[esi+0x14]
		add edx,579
		cmp ecx,edx
		jl KiemTraPozKinhMach14
		add edx,12
		cmp ecx,edx
		ja KiemTraPozKinhMach14
        mov eax,[esp+0x24]
		mov byte ptr [eax+1],13
		mov byte ptr [eax],1
		ret 0x4

		KiemTraPozKinhMach14:
		mov eax,[esp+0x4]
		mov ecx,[eax+0x18]
		mov edx,[esi+0x18]
		add edx,197
		cmp ecx,edx
		jl KiemTraPozKinhMach15
		add edx,12
		cmp ecx,edx
		ja KiemTraPozKinhMach15
		mov ecx,[eax+0x10]
		mov edx,[esi+0x14]
		add edx,594
		cmp ecx,edx
		jl KiemTraPozKinhMach15
		add edx,12
		cmp ecx,edx
		ja KiemTraPozKinhMach15
        mov eax,[esp+0x24]
		mov byte ptr [eax+1],14
		mov byte ptr [eax],1
		ret 0x4

		KiemTraPozKinhMach15:
        mov eax,[esp+0x4]
		mov ecx,[eax+0x18]
		mov edx,[esi+0x18]
		add edx,244
		cmp ecx,edx
		jl KiemTraPozKinhMach16
		add edx,12
		cmp ecx,edx
		ja KiemTraPozKinhMach16
		mov ecx,[eax+0x10]
		mov edx,[esi+0x14]
		add edx,609
		cmp ecx,edx
		jl KiemTraPozKinhMach16
		add edx,12
		cmp ecx,edx
		ja KiemTraPozKinhMach16
		mov eax,[esp+0x24]
		mov byte ptr [eax+1],15
		mov byte ptr [eax],1
		ret 0x4

		KiemTraPozKinhMach16:
        mov eax,[esp+0x4]
		mov ecx,[eax+0x18]
		mov edx,[esi+0x18]
		add edx,285
		cmp ecx,edx
		jl KiemTraPozKinhMach17
		add edx,12
		cmp ecx,edx
		ja KiemTraPozKinhMach17
		mov ecx,[eax+0x10]
		mov edx,[esi+0x14]
		add edx,610
		cmp ecx,edx
		jl KiemTraPozKinhMach17
		add edx,12
		cmp ecx,edx
		ja KiemTraPozKinhMach17
        mov eax,[esp+0x24]
		mov byte ptr [eax+1],16
		mov byte ptr [eax],1
		ret 0x4

		KiemTraPozKinhMach17:
        mov eax,[esp+0x4]
		mov ecx,[eax+0x18]
		mov edx,[esi+0x18]
		add edx,190
		cmp ecx,edx
		jl KiemTraPozKinhMach18
		add edx,12
		cmp ecx,edx
		ja KiemTraPozKinhMach18
		mov ecx,[eax+0x10]
		mov edx,[esi+0x14]
		add edx,518
		cmp ecx,edx
		jl KiemTraPozKinhMach18
		add edx,12
		cmp ecx,edx
		ja KiemTraPozKinhMach18
        mov eax,[esp+0x24]
		mov byte ptr [eax+1],17
		mov byte ptr [eax],1
		ret 0x4

		KiemTraPozKinhMach18:
        mov eax,[esp+0x4]
		mov ecx,[eax+0x18]
		mov edx,[esi+0x18]
		add edx,223
		cmp ecx,edx
		jl KiemTraPozKinhMach19
		add edx,12
		cmp ecx,edx
		ja KiemTraPozKinhMach19
		mov ecx,[eax+0x10]
		mov edx,[esi+0x14]
		add edx,518
		cmp ecx,edx
		jl KiemTraPozKinhMach19
		add edx,12
		cmp ecx,edx
		ja KiemTraPozKinhMach19
        mov eax,[esp+0x24]
		mov byte ptr [eax+1],18
		mov byte ptr [eax],1
		ret 0x4

		KiemTraPozKinhMach19:
        mov eax,[esp+0x4]
		mov ecx,[eax+0x18]
		mov edx,[esi+0x18]
		add edx,251
		cmp ecx,edx
		jl KiemTraPozKinhMach20
		add edx,12
		cmp ecx,edx
		ja KiemTraPozKinhMach20
		mov ecx,[eax+0x10]
		mov edx,[esi+0x14]
		add edx,518
		cmp ecx,edx
		jl KiemTraPozKinhMach20
		add edx,12
		cmp ecx,edx
		ja KiemTraPozKinhMach20
        mov eax,[esp+0x24]
		mov byte ptr [eax+1],19
		mov byte ptr [eax],1
		ret 0x4

		KiemTraPozKinhMach20:
        mov eax,[esp+0x4]
		mov ecx,[eax+0x18]
		mov edx,[esi+0x18]
		add edx,238
		cmp ecx,edx
		jl KiemTraPozKinhMach21
		add edx,12
		cmp ecx,edx
		ja KiemTraPozKinhMach21
		mov ecx,[eax+0x10]
		mov edx,[esi+0x14]
		add edx,482
		cmp ecx,edx
		jl KiemTraPozKinhMach21
		add edx,12
		cmp ecx,edx
		ja KiemTraPozKinhMach21
        mov eax,[esp+0x24]
		mov byte ptr [eax+1],20
		mov byte ptr [eax],1
		ret 0x4

		KiemTraPozKinhMach21:
        mov eax,[esp+0x4]
		mov ecx,[eax+0x18]
		mov edx,[esi+0x18]
		add edx,320
		cmp ecx,edx
		jl KiemTraPozKinhMach22
		add edx,12
		cmp ecx,edx
		ja KiemTraPozKinhMach22
		mov ecx,[eax+0x10]
		mov edx,[esi+0x14]
		add edx,452
		cmp ecx,edx
		jl KiemTraPozKinhMach22
		add edx,12
		cmp ecx,edx
		ja KiemTraPozKinhMach22
        mov eax,[esp+0x24]
		mov byte ptr [eax+1],21
		mov byte ptr [eax],1
		ret 0x4

		KiemTraPozKinhMach22:
		mov eax,[esp+0x4]
		mov ecx,[eax+0x18]
		mov edx,[esi+0x18]
		add edx,283
		cmp ecx,edx
		jl KiemTraPozKinhMach23
		add edx,12
		cmp ecx,edx
		ja KiemTraPozKinhMach23
		mov ecx,[eax+0x10]
		mov edx,[esi+0x14]
		add edx,540
		cmp ecx,edx
		jl KiemTraPozKinhMach23
		add edx,12
		cmp ecx,edx
		ja KiemTraPozKinhMach23
        mov eax,[esp+0x24]
		mov byte ptr [eax+1],22
		mov byte ptr [eax],1
		ret 0x4

		KiemTraPozKinhMach23:
        mov eax,[esp+0x4]
		mov ecx,[eax+0x18]
		mov edx,[esi+0x18]
		add edx,238
		cmp ecx,edx
		jl KiemTraPozKinhMach24
		add edx,12
		cmp ecx,edx
		ja KiemTraPozKinhMach24
		mov ecx,[eax+0x10]
		mov edx,[esi+0x14]
		add edx,554
		cmp ecx,edx
		jl KiemTraPozKinhMach24
		add edx,12
		cmp ecx,edx
		ja KiemTraPozKinhMach24
        mov eax,[esp+0x24]
		mov byte ptr [eax+1],23
		mov byte ptr [eax],1
		ret 0x4

		KiemTraPozKinhMach24:
        mov eax,[esp+0x4]
		mov ecx,[eax+0x18]
		mov edx,[esi+0x18]
		add edx,319
		cmp ecx,edx
		jl KiemTraPozKinhMach25
		add edx,12
		cmp ecx,edx
		ja KiemTraPozKinhMach25
		mov ecx,[eax+0x10]
		mov edx,[esi+0x14]
		add edx,590
		cmp ecx,edx
		jl KiemTraPozKinhMach25
		add edx,12
		cmp ecx,edx
		ja KiemTraPozKinhMach25
        mov eax,[esp+0x24]
		mov byte ptr [eax+1],24
		mov byte ptr [eax],1
		ret 0x4

		KiemTraPozKinhMach25:
        mov eax,[esp+0x4]
		mov ecx,[eax+0x18]
		mov edx,[esi+0x18]
		add edx,286
		cmp ecx,edx
		jl NotFoundPoz
		add edx,12
		cmp ecx,edx
		ja NotFoundPoz
		mov ecx,[eax+0x10]
		mov edx,[esi+0x14]
		add edx,501
		cmp ecx,edx
		jl NotFoundPoz
		add edx,12
		cmp ecx,edx
		ja NotFoundPoz
        mov eax,[esp+0x24]
		mov byte ptr [eax+1],25
		mov byte ptr [eax],1
		ret 0x4

		NotFoundPoz:
        ret 0x4
	}
};
__declspec(naked)void ShowPageKinhMach()  //00506819
{
__asm
	{
		// 0 Flag Nut
		// 1 Flag Choose
		// 2 Vi tri Vat Pham
		// 3 CountKM
		// 4 ~ B Package
		// C Thoi Gian Check Run Time
        //
		nop
		nop
		nop
		nop
		nop
		pushad
		mov eax,[esi+0x10]
		test eax,eax
		jz Default
        mov eax,[esp+0x1C]
		mov ecx,[eax+0x140]
		test ecx,ecx
		jnz DaCoHinhAnh
		add eax,0x140
		push eax
		call AddOptionImage
		//
		DaCoHinhAnh:
		//
		mov eax,[esp+0x1C]
		mov cl,[eax+0xA]
		test cl,cl
		jnz DaSendPackageRQ
        mov eax,[esp+0x1C]
		mov byte ptr [eax+0xA],1
		mov dword ptr [eax+0x4],0xE27C0004
		lea eax,[eax+0x4]
		push eax
		mov ecx,0x155EE60
		mov eax,0x006B2F60
		call eax
		DaSendPackageRQ:
		//
        push 0
		mov edx,[esi+0x18]
        sub edx,0x2C
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x1A7
		push ecx
		mov eax,[esp+0x28]
        add eax,0x140
		push eax
		call GetImageClass
		// Loop Hien Thi Lv
		mov eax,[esp+0x1C]
		add eax,0x10
		push eax
        call LoopHienThilvKM
		// Loop Hien Thi Loai Chon
		mov eax,[esp+0x1C]
		mov edx,dword ptr [0x01733B04]
		mov ecx,[eax+0xC]
		cmp ecx,edx
		ja TiepTucHienThiCoTheChoose
		add edx,0x100
		mov [eax+0xC],edx
		mov cl,[eax+0xB]
		test cl,cl
		jz HienThiDo
		mov byte ptr [eax+0xB],0
        jmp TiepTucHienThiCoTheChoose
		HienThiDo:
		mov byte ptr [eax+0xB],1
		TiepTucHienThiCoTheChoose:
		mov eax,[esp+0x1C]
		xor ecx,ecx
        mov cl,[eax+0xB]
		push ecx
		add eax,0x10
		push eax
		call LoopHienThilvKMChoose
		//
		mov eax,[esp+0x1C]
		xor ecx,ecx
		mov cl,[eax+0x1]
		test ecx,ecx
		jz KoCoKinhMachDuocChon
		//
		xor ecx,ecx
		mov cl,[eax+0x1]
		sub cl,1
		push ecx
		add eax,0x10
		push eax
		call LoopHienThiChoosed
        KoCoKinhMachDuocChon:
		//
        mov ecx,DWORD PTR SS:[0x01733AC4]
		push 0xFFFFFFFF
		mov edx,[ecx]
	    call dword ptr [edx+0xC]
		// Hien Thi Thong Tin Chon
		mov eax,[esp+0x1C]
		xor ecx,ecx
		mov cl,[eax+0x1]
		test cl,cl
        jz KhongHienThiMachChon
		// Hien Thi Lv Hien Tai
        mov eax,[esp+0x1C]
		xor ecx,ecx
		mov cl,[eax+0x1]
        sub cl,1
		imul ecx,0xA
		xor edx,edx
		mov dl,[eax+ecx+0x1+0x10]
		push edx
		push 26
		push 85
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		//
		push 0x0
		push 0x3F800000
		mov eax,DWORD PTR [0x01733AC4]
		mov edi,[eax]
		mov edx,[esi+0x18]
		add edx,0x160
		push edx
		mov edx,[esi+0x14]
		add edx,0x166
		push edx
		push eax
		mov ecx,DWORD PTR [0x01733AC4]
		call dword ptr [edi+0x30]
		add esp,0x1C
        // Hien Thi Option Hien Tai
		mov eax,[esp+0x1C]
		xor ecx,ecx
		mov cl,[eax+0x1]
        sub cl,1
		imul ecx,0xA
		xor edx,edx
		mov dx,[eax+ecx+0x2+0x10]
        mov eax,[esp+0x1C]
		xor ecx,ecx
		mov cl,[eax+0x1]
		push edx
		push ecx
		push 85
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		//
		push 0x0
		push 0x3F800000
		mov eax,DWORD PTR [0x01733AC4]
		mov edi,[eax]
		mov edx,[esi+0x18]
		add edx,0x170
		push edx
		mov edx,[esi+0x14]
		add edx,0x166
		push edx
		push eax
		mov ecx,DWORD PTR [0x01733AC4]
		call dword ptr [edi+0x30]
		add esp,0x1C
		//
        // Hien Thi Lv Tiep Theo
		mov eax,[esp+0x1C]
		xor ecx,ecx
		mov cl,[eax+0x1]
        sub cl,1
		imul ecx,0xA
		xor edx,edx
		mov dl,[eax+ecx+0x1+0x10]
		add edx,1
		cmp edx,5
        ja KhongHienThiMachChon
		push edx
		push 27
		push 85
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		//
		push 0x0
		push 0x3F800000
		mov eax,DWORD PTR [0x01733AC4]
		mov edi,[eax]
		mov edx,[esi+0x18]
		add edx,0x160
		push edx
		mov edx,[esi+0x14]
		add edx,0x210
		push edx
		push eax
		mov ecx,DWORD PTR [0x01733AC4]
		call dword ptr [edi+0x30]
		add esp,0x1C
        // Hien Thi Option Hien Tai Tiep Theo
		mov eax,[esp+0x1C]
		xor ecx,ecx
		mov cl,[eax+0x1]
        sub cl,1
		imul ecx,0xA
		xor edx,edx
		mov dx,[eax+ecx+0x4+0x10]
        mov eax,[esp+0x1C]
		xor ecx,ecx
		mov cl,[eax+0x1]
		push edx
		push ecx
		push 85
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		//
		push 0x0
		push 0x3F800000
		mov eax,DWORD PTR [0x01733AC4]
		mov edi,[eax]
		mov edx,[esi+0x18]
		add edx,0x170
		push edx
		mov edx,[esi+0x14]
		add edx,0x210
		push edx
		push eax
		mov ecx,DWORD PTR [0x01733AC4]
		call dword ptr [edi+0x30]
		add esp,0x1C
		// Hien Thi KN Can
		mov eax,[esp+0x1C]
		xor ecx,ecx
		mov cl,[eax+0x1]
        sub cl,1
		imul ecx,0xA
		xor edx,edx
		mov edx,[eax+ecx+0x6+0x10]
		push edx
		push 28
		push 85
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		//
		push 0x0
		push 0x3F800000
		mov eax,DWORD PTR [0x01733AC4]
		mov edi,[eax]
		mov edx,[esi+0x18]
		add edx,0x180
		push edx
		mov edx,[esi+0x14]
		add edx,0x210
		push edx
		push eax
		mov ecx,DWORD PTR [0x01733AC4]
		call dword ptr [edi+0x30]
		add esp,0x1C
		// Hien Thi Tinh Trang
		mov eax,[esp+0x1C]
		xor ecx,ecx
		mov cl,[eax+0x1]
		sub cl,1
		imul ecx,0xA
		xor edx,edx
		mov dl,[eax+ecx+0x10]
		add edx,29
		push edx
		push 85
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		//
		push 0x0
		push 0x3F800000
		mov eax,DWORD PTR [0x01733AC4]
		mov edi,[eax]
		mov edx,[esi+0x18]
		add edx,0x18F
		push edx
		mov edx,[esi+0x14]
		add edx,0x210
		push edx
		push eax
		mov ecx,DWORD PTR [0x01733AC4]
		call dword ptr [edi+0x30]
		add esp,0x18
		//
		KhongHienThiMachChon:
		mov eax,[esp+0x1C]
		xor ecx,ecx
		mov cl,[eax+0x3]
		push ecx
		push 32
		push 85
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		//
		push 0x0
		push 0x3F800000
		mov eax,DWORD PTR [0x01733AC4]
		mov edi,[eax]
		mov edx,[esi+0x18]
        sub edx,0x19
		push edx
		mov edx,[esi+0x14]
		add edx,0x170
		push edx
		push eax
		mov ecx,DWORD PTR [0x01733AC4]
		call dword ptr [edi+0x30]
		add esp,0x1C
		// Hien Thi VP Chon
		mov eax,[esp+0x1C]
		xor ecx,ecx
		mov cl,[eax+0x2]
		cmp cl,25
		jl KhongHienThiHinhAnhVPChon
		cmp cl,140
        ja KhongHienThiHinhAnhVPChon
        push 0x0
		push 0x1
		imul ecx,ecx,0x90
		lea edx,[ecx+0x0112A020]
		push 0x0
		push edx
		mov edx,[esi+0x18]
		add edx,0x8
		push edx
		mov edx,[esi+0x14]
		add edx,0x17B
        push edx
		push 0x1
		mov ecx,DWORD PTR SS:[0x01615E90]
		mov eax,0x004913F0
		call eax
		//
		mov eax,[esp+0x1C]
		xor ecx,ecx
		mov cl,[eax+0x2]
		imul ecx,ecx,0x90
	    lea eax,[ecx+0x0112A020]
		xor edx,edx
		mov dx,[eax+0x14]
		xor dx,0xCE43
		push edx
		xor edx,edx
		mov dl,[eax+0x16]
		xor dl,0x1F
		push edx
		mov eax,0x00674FC0
		call eax
		push eax
		mov eax,[esp+0x28]
		lea eax,[eax+0x118]
		push 0x0089507C
		push eax
		mov edi,DWORD PTR SS:[0x0085C564]
		call edi
		add esp,0x14
		mov eax,[esp+0x1C]
		lea eax,[eax+0x118]
		push eax
		push 0x0
		push 0x3F800000
		mov eax,DWORD PTR SS:[0x01733AC4]
		mov edi,[eax]
		mov edx,[esi+0x18]
		add edx,0x10
		push edx
		mov edx,[esi+0x14]
		add edx,0x1A2
        push edx
		push eax
		mov ecx,DWORD PTR [0x01733AC4]
		call dword ptr [edi+0x30]
		add esp,0x18
		KhongHienThiHinhAnhVPChon:
		//
        mov eax,[esp+0x1C]
		xor ecx,ecx
		mov cl,[eax+0x1]
        sub cl,1
		imul ecx,0xA
		xor edx,edx
		mov dl,[eax+ecx+0x10]
		cmp dl,1
        jnz KhongHienThiNutDaThong
		//
        push 12
		mov edx,[esi+0x18]
        add edx,0x1E
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x2BA
		push ecx
		mov eax,[esp+0x28]
		add eax,0x140
		push eax
		call GetImageClass
		KhongHienThiNutDaThong:
        Default:
		popad
        mov eax,[esi+0x10]
		test eax,eax
		push 0x0050681E
		ret

		LoopHienThilvKM:
		sub esp,0x4
		xor ecx,ecx
		mov [esp],ecx
		BackLoopShowlvKM:
		mov ecx,[esp]
		imul ecx,0xA
		mov eax,[esp+0x8]
        xor edx,edx
		mov dl,[eax+ecx+0x1]
		test dl,dl
		jz KiemTraGiaTriKhac
		push edx
        mov ecx,[esp+0x4]
		cmp ecx,0
		jnz HienThiKM2
        mov edx,[esi+0x18]
		add edx,0x45
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x24E
		push ecx
        jmp ProcessHienThiLvKmImageGame
		HienThiKM2:
		cmp ecx,1
		jnz HienThiKM3
        mov edx,[esi+0x18]
        add edx,0x5F
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x24E
		push ecx
		jmp ProcessHienThiLvKmImageGame

		HienThiKM3:
		cmp ecx,2
		jnz HienThiKM4
        mov edx,[esi+0x18]
        add edx,0x78
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x24E
		push ecx
		jmp ProcessHienThiLvKmImageGame

		HienThiKM4:
		cmp ecx,3
		jnz HienThiKM5
        mov edx,[esi+0x18]
        add edx,0xA5
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x24E
		push ecx
		jmp ProcessHienThiLvKmImageGame

		HienThiKM5:
		cmp ecx,4
		jnz HienThiKM6
        mov edx,[esi+0x18]
        add edx,0xB7
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x234
		push ecx
		jmp ProcessHienThiLvKmImageGame

		HienThiKM6:
		cmp ecx,5
		jnz HienThiKM7
        mov edx,[esi+0x18]
		add edx,0x99
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x22A
		push ecx
		jmp ProcessHienThiLvKmImageGame

		HienThiKM7:
		cmp ecx,6
		jnz HienThiKM8
        mov edx,[esi+0x18]
        add edx,0xAE
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x212
		push ecx
		jmp ProcessHienThiLvKmImageGame

		HienThiKM8:
		cmp ecx,7
		jnz HienThiKM9
        mov edx,[esi+0x18]
        add edx,0xD8
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x203
		push ecx
		jmp ProcessHienThiLvKmImageGame

		HienThiKM9:
		cmp ecx,8
		jnz HienThiKM10
        mov edx,[esi+0x18]
		add edx,0x106
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x1EE
		push ecx
		jmp ProcessHienThiLvKmImageGame

		HienThiKM10:
		cmp ecx,9
		jnz HienThiKM11
        mov edx,[esi+0x18]
		add edx,0x130
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x1EB
		push ecx
		jmp ProcessHienThiLvKmImageGame

		HienThiKM11:
		cmp ecx,10
		jnz HienThiKM12
        mov edx,[esi+0x18]
		add edx,0xB7
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x26A
		push ecx
		jmp ProcessHienThiLvKmImageGame

		HienThiKM12:
		cmp ecx,11
		jnz HienThiKM13
        mov edx,[esi+0x18]
		add edx,0x99
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x272
		push ecx
		jmp ProcessHienThiLvKmImageGame

		HienThiKM13:
		cmp ecx,12
		jnz HienThiKM14
        mov edx,[esi+0x18]
		add edx,0xAE
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x28C
		push ecx
		jmp ProcessHienThiLvKmImageGame

		HienThiKM14:
		cmp ecx,13
		jnz HienThiKM15
        mov edx,[esi+0x18]
		add edx,0xD8
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x29B
		push ecx
		jmp ProcessHienThiLvKmImageGame

		HienThiKM15:
		cmp ecx,14
		jnz HienThiKM16
        mov edx,[esi+0x18]
		add edx,0x106
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x2AA
		push ecx
		jmp ProcessHienThiLvKmImageGame

		HienThiKM16:
		cmp ecx,15
		jnz HienThiKM17
        mov edx,[esi+0x18]
		add edx,0x12D
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x2AA
		push ecx
		jmp ProcessHienThiLvKmImageGame

		HienThiKM17:
		cmp ecx,16
		jnz HienThiKM18
        mov edx,[esi+0x18]
		add edx,0xD0
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x24E
		push ecx
		jmp ProcessHienThiLvKmImageGame

		HienThiKM18:
		cmp ecx,17
		jnz HienThiKM19
        mov edx,[esi+0x18]
        add edx,0xF0
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x24E
		push ecx
		jmp ProcessHienThiLvKmImageGame

		HienThiKM19:
		cmp ecx,18
		jnz HienThiKM20
        mov edx,[esi+0x18]
        add edx,0x10D
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x24E
		push ecx
		jmp ProcessHienThiLvKmImageGame

		HienThiKM20:
		cmp ecx,19
		jnz HienThiKM21
        mov edx,[esi+0x18]
		add edx,0x100
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x22A
		push ecx
		jmp ProcessHienThiLvKmImageGame

		HienThiKM21:
		cmp ecx,20
		jnz HienThiKM22
        mov edx,[esi+0x18]
		add edx,0x152
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x20D
		push ecx
		jmp ProcessHienThiLvKmImageGame

		HienThiKM22:
		cmp ecx,21
		jnz HienThiKM23
        mov edx,[esi+0x18]
        add edx,0x12D
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x265
		push ecx
		jmp ProcessHienThiLvKmImageGame

		HienThiKM23:
		cmp ecx,22
		jnz HienThiKM24
        mov edx,[esi+0x18]
		add edx,0x100
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x272
		push ecx
		jmp ProcessHienThiLvKmImageGame

		HienThiKM24:
		cmp ecx,23
		jnz HienThiKM25
        mov edx,[esi+0x18]
		add edx,0x152
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x298
		push ecx
		jmp ProcessHienThiLvKmImageGame

		HienThiKM25:
		mov edx,[esi+0x18]
        add edx,0x130
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x23D
		push ecx
		ProcessHienThiLvKmImageGame:
		//
		mov eax,[esp+0x14]
		add eax,0x130
		push eax
		call GetImageClass
		KiemTraGiaTriKhac:
		mov ecx,[esp]
		add ecx,1
		mov [esp],ecx
		cmp ecx,25
        jl BackLoopShowlvKM
		add esp,0x4
		ret 0x4

		LoopHienThilvKMChoose:
		sub esp,0x4
		xor ecx,ecx
		mov [esp],ecx
		BackLoopShowlvKMChoose:
		mov ecx,[esp]
		imul ecx,0xA
		mov eax,[esp+0x8]
        xor edx,edx
		mov dl,[eax+ecx]
		cmp dl,1
		jnz KiemTraGiaTriKhacChooseImageLoop
        xor edx,edx
		mov dl,[eax-0xF]
		test dl,dl
		jz VanHienThiLoaiChon
		sub dl,1
		mov ecx,[esp]
        cmp ecx,edx
        jz KiemTraGiaTriKhacChooseImageLoop
        VanHienThiLoaiChon:
		//
		mov eax,[esp+0xC]
		cmp eax,0
		jnz HienThiHinhChooseLoai2
		push 11
        jmp TiepTucHienHienChooseImageLoop
        HienThiHinhChooseLoai2:
		push 21
        TiepTucHienHienChooseImageLoop:
        mov ecx,[esp+0x4]
		cmp ecx,0
		jnz HienThiKMChoose2
        mov edx,[esi+0x18]
		add edx,0x45
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x24E
		push ecx
        jmp ProcessHienThiLvKmImageGameChoose
		HienThiKMChoose2:
		cmp ecx,1
		jnz HienThiKMChoose3
        mov edx,[esi+0x18]
        add edx,0x5F
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x24E
		push ecx
		jmp ProcessHienThiLvKmImageGameChoose

		HienThiKMChoose3:
		cmp ecx,2
		jnz HienThiKMChoose4
		mov edx,[esi+0x18]
        add edx,0x78
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x24E
		push ecx
		jmp ProcessHienThiLvKmImageGameChoose

		HienThiKMChoose4:
		cmp ecx,3
		jnz HienThiKMChoose5
        mov edx,[esi+0x18]
        add edx,0xA5
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x24E
		push ecx
		jmp ProcessHienThiLvKmImageGameChoose

		HienThiKMChoose5:
		cmp ecx,4
		jnz HienThiKMChoose6
		mov edx,[esi+0x18]
        add edx,0xB7
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x234
		push ecx
		jmp ProcessHienThiLvKmImageGameChoose

		HienThiKMChoose6:
		cmp ecx,5
		jnz HienThiKMChoose7
        mov edx,[esi+0x18]
		add edx,0x99
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x22A
		push ecx
		jmp ProcessHienThiLvKmImageGameChoose

		HienThiKMChoose7:
		cmp ecx,6
		jnz HienThiKMChoose8
        mov edx,[esi+0x18]
        add edx,0xAE
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x212
		push ecx
		jmp ProcessHienThiLvKmImageGameChoose

		HienThiKMChoose8:
		cmp ecx,7
		jnz HienThiKMChoose9
        mov edx,[esi+0x18]
        add edx,0xD8
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x203
		push ecx
		jmp ProcessHienThiLvKmImageGameChoose

		HienThiKMChoose9:
		cmp ecx,8
		jnz HienThiKMChoose10
        mov edx,[esi+0x18]
		add edx,0x106
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x1EE
		push ecx
		jmp ProcessHienThiLvKmImageGameChoose

		HienThiKMChoose10:
		cmp ecx,9
		jnz HienThiKMChoose11
        mov edx,[esi+0x18]
		add edx,0x130
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x1EB
		push ecx
		jmp ProcessHienThiLvKmImageGameChoose

		HienThiKMChoose11:
		cmp ecx,10
		jnz HienThiKMChoose12
        mov edx,[esi+0x18]
		add edx,0xB7
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x26A
		push ecx
		jmp ProcessHienThiLvKmImageGameChoose

		HienThiKMChoose12:
		cmp ecx,11
		jnz HienThiKMChoose13
        mov edx,[esi+0x18]
		add edx,0x99
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x272
		push ecx
		jmp ProcessHienThiLvKmImageGameChoose

		HienThiKMChoose13:
		cmp ecx,12
		jnz HienThiKMChoose14
        mov edx,[esi+0x18]
		add edx,0xAE
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x28C
		push ecx
		jmp ProcessHienThiLvKmImageGameChoose

		HienThiKMChoose14:
		cmp ecx,13
		jnz HienThiKMChoose15
        mov edx,[esi+0x18]
		add edx,0xD8
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x29B
		push ecx
		jmp ProcessHienThiLvKmImageGameChoose

		HienThiKMChoose15:
		cmp ecx,14
		jnz HienThiKMChoose16
        mov edx,[esi+0x18]
		add edx,0x106
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x2AA
		push ecx
		jmp ProcessHienThiLvKmImageGameChoose

		HienThiKMChoose16:
		cmp ecx,15
		jnz HienThiKMChoose17
        mov edx,[esi+0x18]
		add edx,0x12D
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x2AA
		push ecx
		jmp ProcessHienThiLvKmImageGameChoose

		HienThiKMChoose17:
		cmp ecx,16
		jnz HienThiKMChoose18
        mov edx,[esi+0x18]
		add edx,0xD0
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x24E
		push ecx
		jmp ProcessHienThiLvKmImageGameChoose

		HienThiKMChoose18:
		cmp ecx,17
		jnz HienThiKMChoose19
        mov edx,[esi+0x18]
        add edx,0xF0
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x24E
		push ecx
		jmp ProcessHienThiLvKmImageGameChoose

		HienThiKMChoose19:
		cmp ecx,18
		jnz HienThiKMChoose20
        mov edx,[esi+0x18]
        add edx,0x10D
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x24E
		push ecx
		jmp ProcessHienThiLvKmImageGameChoose

		HienThiKMChoose20:
		cmp ecx,19
		jnz HienThiKMChoose21
        mov edx,[esi+0x18]
		add edx,0x100
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x22A
		push ecx
		jmp ProcessHienThiLvKmImageGameChoose

		HienThiKMChoose21:
		cmp ecx,20
		jnz HienThiKMChoose22
        mov edx,[esi+0x18]
		add edx,0x152
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x20D
		push ecx
		jmp ProcessHienThiLvKmImageGameChoose

		HienThiKMChoose22:
		cmp ecx,21
		jnz HienThiKMChoose23
        mov edx,[esi+0x18]
        add edx,0x12D
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x265
		push ecx
		jmp ProcessHienThiLvKmImageGameChoose

		HienThiKMChoose23:
		cmp ecx,22
		jnz HienThiKMChoose24
        mov edx,[esi+0x18]
		add edx,0x100
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x272
		push ecx
		jmp ProcessHienThiLvKmImageGameChoose

		HienThiKMChoose24:
		cmp ecx,23
		jnz HienThiKMChoose25
        mov edx,[esi+0x18]
		add edx,0x152
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x298
		push ecx
		jmp ProcessHienThiLvKmImageGameChoose

		HienThiKMChoose25:
		mov edx,[esi+0x18]
        add edx,0x130
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x23D
		push ecx
		ProcessHienThiLvKmImageGameChoose:
		//
		mov eax,[esp+0x14]
        add eax,0x130
		push eax
		call GetImageClass
		KiemTraGiaTriKhacChooseImageLoop:
		mov ecx,[esp]
		add ecx,1
		mov [esp],ecx
		cmp ecx,25
        jl BackLoopShowlvKMChoose
		add esp,0x4
        ret 0x8

		LoopHienThiChoosed:
		push 14
		mov ecx,[esp+0xC]
		cmp ecx,0
		jnz HienThiKMChoosed2
        mov edx,[esi+0x18]
		add edx,0x46
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x24F
		push ecx
        jmp ProcessHienThiLvKmImageGameChoosed
		HienThiKMChoosed2:
		cmp ecx,1
		jnz HienThiKMChoosed3
        mov edx,[esi+0x18]
		add edx,0x60
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x24F
		push ecx
		jmp ProcessHienThiLvKmImageGameChoosed

		HienThiKMChoosed3:
		cmp ecx,2
		jnz HienThiKMChoosed4
		mov edx,[esi+0x18]
		add edx,0x79
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x24F
		push ecx
		jmp ProcessHienThiLvKmImageGameChoosed

		HienThiKMChoosed4:
		cmp ecx,3
		jnz HienThiKMChoosed5
        mov edx,[esi+0x18]
		add edx,0xA6
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x24F
		push ecx
		jmp ProcessHienThiLvKmImageGameChoosed

		HienThiKMChoosed5:
		cmp ecx,4
		jnz HienThiKMChoosed6
		mov edx,[esi+0x18]
		add edx,0xB8
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x235
		push ecx
		jmp ProcessHienThiLvKmImageGameChoosed

		HienThiKMChoosed6:
		cmp ecx,5
		jnz HienThiKMChoosed7
        mov edx,[esi+0x18]
		add edx,0x9A
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x22B
		push ecx
		jmp ProcessHienThiLvKmImageGameChoosed

		HienThiKMChoosed7:
		cmp ecx,6
		jnz HienThiKMChoosed8
        mov edx,[esi+0x18]
		add edx,0xAF
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x213
		push ecx
		jmp ProcessHienThiLvKmImageGameChoosed

		HienThiKMChoosed8:
		cmp ecx,7
		jnz HienThiKMChoosed9
        mov edx,[esi+0x18]
		add edx,0xD9
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x204
		push ecx
		jmp ProcessHienThiLvKmImageGameChoosed

		HienThiKMChoosed9:
		cmp ecx,8
		jnz HienThiKMChoosed10
        mov edx,[esi+0x18]
		add edx,0x107
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x1EF
		push ecx
		jmp ProcessHienThiLvKmImageGameChoosed

		HienThiKMChoosed10:
		cmp ecx,9
		jnz HienThiKMChoosed11
        mov edx,[esi+0x18]
		add edx,0x131
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x1EC
		push ecx
		jmp ProcessHienThiLvKmImageGameChoosed

		HienThiKMChoosed11:
		cmp ecx,10
		jnz HienThiKMChoosed12
        mov edx,[esi+0x18]
		add edx,0xB8
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x26B
		push ecx
		jmp ProcessHienThiLvKmImageGameChoosed

		HienThiKMChoosed12:
		cmp ecx,11
		jnz HienThiKMChoosed13
        mov edx,[esi+0x18]
		add edx,0x9A
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x273
		push ecx
		jmp ProcessHienThiLvKmImageGameChoosed

		HienThiKMChoosed13:
		cmp ecx,12
		jnz HienThiKMChoosed14
        mov edx,[esi+0x18]
		add edx,0xAF
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x28D
		push ecx
		jmp ProcessHienThiLvKmImageGameChoosed

		HienThiKMChoosed14:
		cmp ecx,13
		jnz HienThiKMChoosed15
        mov edx,[esi+0x18]
		add edx,0xD9
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x29C
		push ecx
		jmp ProcessHienThiLvKmImageGameChoosed

		HienThiKMChoosed15:
		cmp ecx,14
		jnz HienThiKMChoosed16
        mov edx,[esi+0x18]
		add edx,0x107
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x2AB
		push ecx
		jmp ProcessHienThiLvKmImageGameChoosed

		HienThiKMChoosed16:
		cmp ecx,15
		jnz HienThiKMChoosed17
        mov edx,[esi+0x18]
		add edx,0x12E
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x2AB
		push ecx
		jmp ProcessHienThiLvKmImageGameChoosed

		HienThiKMChoosed17:
		cmp ecx,16
		jnz HienThiKMChoosed18
        mov edx,[esi+0x18]
		add edx,0xD1
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x24F
		push ecx
		jmp ProcessHienThiLvKmImageGameChoosed

		HienThiKMChoosed18:
		cmp ecx,17
		jnz HienThiKMChoosed19
        mov edx,[esi+0x18]
		add edx,0xF1
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x24F
		push ecx
		jmp ProcessHienThiLvKmImageGameChoosed

		HienThiKMChoosed19:
		cmp ecx,18
		jnz HienThiKMChoosed20
        mov edx,[esi+0x18]
		add edx,0x10E
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x24F
		push ecx
		jmp ProcessHienThiLvKmImageGameChoosed

		HienThiKMChoosed20:
		cmp ecx,19
		jnz HienThiKMChoosed21
        mov edx,[esi+0x18]
		add edx,0x101
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x22B
		push ecx
		jmp ProcessHienThiLvKmImageGameChoosed

		HienThiKMChoosed21:
		cmp ecx,20
		jnz HienThiKMChoosed22
        mov edx,[esi+0x18]
		add edx,0x153
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x20E
		push ecx
		jmp ProcessHienThiLvKmImageGameChoosed

		HienThiKMChoosed22:
		cmp ecx,21
		jnz HienThiKMChoosed23
        mov edx,[esi+0x18]
		add edx,0x12E
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x266
		push ecx
		jmp ProcessHienThiLvKmImageGameChoosed

		HienThiKMChoosed23:
		cmp ecx,22
		jnz HienThiKMChoosed24
        mov edx,[esi+0x18]
		add edx,0x101
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x273
		push ecx
		jmp ProcessHienThiLvKmImageGameChoosed

		HienThiKMChoosed24:
		cmp ecx,23
		jnz HienThiKMChoosed25
        mov edx,[esi+0x18]
		add edx,0x153
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x299
		push ecx
		jmp ProcessHienThiLvKmImageGameChoosed

		HienThiKMChoosed25:
		mov edx,[esi+0x18]
		add edx,0x131
        push edx
		mov ecx,[esi+0x14]
		add ecx,0x23E
		push ecx
		ProcessHienThiLvKmImageGameChoosed:
		//
		mov eax,[esp+0x10]
        add eax,0x130
		push eax
		call GetImageClass
		ret 0x8

		GetImageClass:
		mov eax,[esp+0x10]
		cmp eax,0
		jz HienThiPageMain
		cmp eax,1
		jz HienThilvKinhMachImgLv1
		cmp eax,2
		jz HienThilvKinhMachImgLv2
		cmp eax,3
		jz HienThilvKinhMachImgLv3
		cmp eax,4
		jz HienThilvKinhMachImgLv4
		cmp eax,5
		jz HienThilvKinhMachImgLv5
		cmp eax,11
		jz HienThiDuocPhepNangCap
        cmp eax,21
		jz HienThiDuocPhepNangCap3
		cmp eax,12
		jz HienThiDuocPhepNangCap2
		cmp eax,14
		jz HienThiKinhMachChon1
		ret 0x4

		HienThiKinhMachChon1:
        push 0
		push 85
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,[esp+0x4]
		mov  DWORD PTR SS : [ecx + 0x70] , eax
		mov  DWORD PTR SS : [ecx + 0x9C] , 284
		mov  DWORD PTR SS : [ecx + 0xA0] , 397
		mov  DWORD PTR SS : [ecx + 0x98] , 381
		mov  DWORD PTR SS : [ecx + 0xA4] , 300
		jmp ProcessHienThiImageKinhMach

		HienThiDuocPhepNangCap2:
        push 0
		push 85
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,[esp+0x4]
		mov  DWORD PTR SS : [ecx + 0x70] , eax
		mov  DWORD PTR SS : [ecx + 0x9C] , 121
		mov  DWORD PTR SS : [ecx + 0xA0] , 415
		mov  DWORD PTR SS : [ecx + 0x98] , 353
		mov  DWORD PTR SS : [ecx + 0xA4] , 143
		jmp ProcessHienThiImageKinhMach

		HienThiDuocPhepNangCap3:
        push 0
		push 85
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,[esp+0x4]
		mov  DWORD PTR SS : [ecx + 0x70] , eax
		mov  DWORD PTR SS : [ecx + 0x9C] , 244
		mov  DWORD PTR SS : [ecx + 0xA0] , 398
		mov  DWORD PTR SS : [ecx + 0x98] , 380
		mov  DWORD PTR SS : [ecx + 0xA4] , 261
		jmp ProcessHienThiImageKinhMach

		HienThiDuocPhepNangCap:
        push 0
		push 85
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,[esp+0x4]
		mov  DWORD PTR SS : [ecx + 0x70] , eax
		mov  DWORD PTR SS : [ecx + 0x9C] , 264
		mov  DWORD PTR SS : [ecx + 0xA0] , 398
		mov  DWORD PTR SS : [ecx + 0x98] , 380
		mov  DWORD PTR SS : [ecx + 0xA4] , 281
		jmp ProcessHienThiImageKinhMach

		HienThilvKinhMachImgLv1:
        push 0
		push 85
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,[esp+0x4]
		mov  DWORD PTR SS : [ecx + 0x70] , eax
		mov  DWORD PTR SS : [ecx + 0x9C] , 243
		mov  DWORD PTR SS : [ecx + 0xA0] , 371
		mov  DWORD PTR SS : [ecx + 0x98] , 354
		mov  DWORD PTR SS : [ecx + 0xA4] , 260
		jmp ProcessHienThiImageKinhMach

		HienThilvKinhMachImgLv2:
        push 0
		push 85
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,[esp+0x4]
		mov  DWORD PTR SS : [ecx + 0x70] , eax
		mov  DWORD PTR SS : [ecx + 0x9C] , 262
		mov  DWORD PTR SS : [ecx + 0xA0] , 371
		mov  DWORD PTR SS : [ecx + 0x98] , 354
		mov  DWORD PTR SS : [ecx + 0xA4] , 278
		jmp ProcessHienThiImageKinhMach

		HienThilvKinhMachImgLv3:
        push 0
		push 85
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,[esp+0x4]
		mov  DWORD PTR SS : [ecx + 0x70] , eax
		mov  DWORD PTR SS : [ecx + 0x9C] , 281
		mov  DWORD PTR SS : [ecx + 0xA0] , 371
		mov  DWORD PTR SS : [ecx + 0x98] , 354
		mov  DWORD PTR SS : [ecx + 0xA4] , 297
		jmp ProcessHienThiImageKinhMach

		HienThilvKinhMachImgLv4:
        push 0
		push 85
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,[esp+0x4]
		mov  DWORD PTR SS : [ecx + 0x70] , eax
		mov  DWORD PTR SS : [ecx + 0x9C] , 298
		mov  DWORD PTR SS : [ecx + 0xA0] , 371
		mov  DWORD PTR SS : [ecx + 0x98] , 354
		mov  DWORD PTR SS : [ecx + 0xA4] , 315
		jmp ProcessHienThiImageKinhMach

		HienThilvKinhMachImgLv5:
        push 0
		push 85
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,[esp+0x4]
		mov  DWORD PTR SS : [ecx + 0x70] , eax
		mov  DWORD PTR SS : [ecx + 0x9C] , 316
		mov  DWORD PTR SS : [ecx + 0xA0] , 371
		mov  DWORD PTR SS : [ecx + 0x98] , 354
		mov  DWORD PTR SS : [ecx + 0xA4] , 333
		jmp ProcessHienThiImageKinhMach

        HienThiPageMain:
		push 0
		push 85
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,[esp+0x4]
		mov  DWORD PTR SS : [ecx + 0x70] , eax
		mov  DWORD PTR SS : [ecx + 0x9C] , 40
		mov  DWORD PTR SS : [ecx + 0xA0] , 352
		mov  DWORD PTR SS : [ecx + 0x98] , 0
		mov  DWORD PTR SS : [ecx + 0xA4] , 520

        ProcessHienThiImageKinhMach:
		push 0xFF7F0000
		push 5188
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,[esp+0x14]
		mov edx,[esp+0x10]
		push ecx
		push edx
		mov ecx, [esp+0x14]
		mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
		call eax
		mov ecx,[esp+0x4]
		push 0x1732CC8
		mov eax, 0x7B9850
		call eax //Draw1
		ret 0x10

        AddOptionImage:
		sub esp,0x4
		xor ecx,ecx
		mov [esp],ecx
		BackGetOptionImage:
		mov ecx,[esp]
		mov eax, 0x010CC088
		mov edx,[eax+ecx]
		mov eax,[esp+0x8]
		mov [eax+ecx],edx
		add ecx,4
		mov [esp],ecx
		cmp ecx,0xB8
		jl BackGetOptionImage
		add esp,0x4
	    ret 0x4
	}
};
__declspec(naked)void GetPackageShopAD()  //006AB003
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
       push eax
	   mov al,[ebp+0x3]
	   cmp al,3
	   ja NewPackageShopAD
       pop eax
       xor eax,eax
       mov al,[ebp+0x3]
	   push 0x006AB008
       ret

	   NewPackageShopAD:
	   cmp al,5
	   jz CapNhatShopAD
       xor eax,eax
	   mov al,[ebp+0x4]
	   add eax,365
	   push 0xFFFF2323
	   push 0x1
	   push 0xC
	   push eax
	   push 83
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x0155EE60
	   mov eax,0x006A9800
	   call eax
       pop eax
	   push 0x006B21F7
	   ret

	   CapNhatShopAD:
       xor edx,edx
	   mov dl,[ebp+0x5]
	   mov eax,[esp]
	   push edx
	   push eax
	   call GetCountReward
       pop eax
	   push 0x006B21F7
	   ret




	   GetCountReward:
	   sub esp,0x4
	   xor ecx,ecx
	   mov [esp],ecx
	   BackLoopCheckReward:
	   mov edx,[esp+0x8]
	   mov ecx,[esp]
	   mov eax,[esp+0xC]
	   cmp ecx,eax
	   jz OutGetReward
	   mov byte ptr [edx+0x20+ecx],0x1
	   mov ecx,[esp]
	   add ecx,1
	   mov [esp],ecx
	   jmp BackLoopCheckReward
	   OutGetReward:
	   add esp,0x4
	   ret 0x8

	}
};
__declspec(naked)void GetPozFormShopAD()  //0054F183
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
       push eax
	   //
       mov ecx,DWORD PTR SS:[0x01733AD0]
	   mov eax,0x007D7FD0
	   call eax
       mov cl,[eax+0xC]
	   test cl,cl
       jz Default
	   //
	   mov ecx,[esp]
	   xor edx,edx
	   mov dl,[ecx+0x2]
	   test dl,dl
	   jnz ChuaChoPhepNhan
	   push eax
	   call CheckPozForm
	   ChuaChoPhepNhan:
       pop eax
	   pop edi
	   pop esi
	   pop ebp
	   pop ebx
       add esp,0x8
	   push 0x0054F18A
	   ret


       Default:
	   pop eax
       mov byte ptr [eax+0x2],0
	   pop edi
	   pop esi
	   pop ebp
	   pop ebx
       add esp,0x8
	   push 0x0054F18A
	   ret

	   CheckPozForm:
	   mov eax,[esp+0x4]
       mov eax,[eax+0x18]
	   mov ecx,[esi+0x18]
	   add ecx,217
	   cmp eax,ecx
	   jl DefaultNotChoose
	   add ecx,28
	   cmp eax,ecx
	   ja KiemTraHang2Item
	   mov eax,[esp+0x4]
       mov eax,[eax+0x10]
	   mov ecx,[esi+0x14]
	   add ecx,17
	   cmp eax,ecx
	   jl DefaultNotChoose
	   add ecx,28
	   cmp eax,ecx
	   ja KiemTraChonHang1VP2
	   mov eax,[esp+0x8]
	   mov byte ptr [eax+0x2],1
	   mov byte ptr [eax+0x1C],1
       ret 0x4

	   KiemTraChonHang1VP2:
	   mov eax,[esp+0x4]
	   mov eax,[eax+0x10]
	   mov ecx,[esi+0x14]
	   add ecx,73
	   cmp eax,ecx
	   jl DefaultNotChoose
	   add ecx,28
	   cmp eax,ecx
	   ja KiemTraChonHang1VP3
       mov eax,[esp+0x8]
	   mov byte ptr [eax+0x2],1
	   mov byte ptr [eax+0x1C],2
	   ret 0x4

	   KiemTraChonHang1VP3:
	   mov eax,[esp+0x4]
	   mov eax,[eax+0x10]
	   mov ecx,[esi+0x14]
	   add ecx,129
	   cmp eax,ecx
	   jl DefaultNotChoose
	   add ecx,28
	   cmp eax,ecx
	   ja KiemTraChonHang1VP4
       mov eax,[esp+0x8]
	   mov byte ptr [eax+0x2],1
	   mov byte ptr [eax+0x1C],3
	   ret 0x4

	   KiemTraChonHang1VP4:
	   mov eax,[esp+0x4]
	   mov eax,[eax+0x10]
	   mov ecx,[esi+0x14]
	   add ecx,185
	   cmp eax,ecx
	   jl DefaultNotChoose
	   add ecx,28
	   cmp eax,ecx
	   ja KiemTraChonHang1VP5
       mov eax,[esp+0x8]
	   mov byte ptr [eax+0x2],1
	   mov byte ptr [eax+0x1C],4
	   ret 0x4

	   KiemTraChonHang1VP5:
	   mov eax,[esp+0x4]
	   mov eax,[eax+0x10]
	   mov ecx,[esi+0x14]
	   add ecx,241
	   cmp eax,ecx
	   jl DefaultNotChoose
	   add ecx,28
	   cmp eax,ecx
	   ja KiemTraChonHang1VP6
       mov eax,[esp+0x8]
	   mov byte ptr [eax+0x2],1
	   mov byte ptr [eax+0x1C],5
	   ret 0x4

	   KiemTraChonHang1VP6:
	   mov eax,[esp+0x4]
       mov eax,[eax+0x10]
	   mov ecx,[esi+0x14]
	   add ecx,297
	   cmp eax,ecx
	   jl DefaultNotChoose
	   add ecx,28
	   cmp eax,ecx
	   ja DefaultNotChoose
       mov eax,[esp+0x8]
	   mov byte ptr [eax+0x2],1
	   mov byte ptr [eax+0x1C],6
	   ret 0x4
       //
	   KiemTraHang2Item:
	   mov eax,[esp+0x4]
	   mov eax,[eax+0x18]
	   mov ecx,[esi+0x18]
	   add ecx,261
	   cmp eax,ecx
	   jl DefaultNotChoose
	   add ecx,28
	   cmp eax,ecx
	   ja KiemTraHang3Item
	   mov eax,[esp+0x4]
       mov eax,[eax+0x10]
	   mov ecx,[esi+0x14]
	   add ecx,17
	   cmp eax,ecx
	   jl DefaultNotChoose
	   add ecx,28
	   cmp eax,ecx
	   ja KiemTraChonHang2VP2
       mov eax,[esp+0x8]
	   mov byte ptr [eax+0x2],1
	   mov byte ptr [eax+0x1C],7
	   ret 0x4

	   KiemTraChonHang2VP2:
	   mov eax,[esp+0x4]
	   mov eax,[eax+0x10]
	   mov ecx,[esi+0x14]
	   add ecx,73
	   cmp eax,ecx
	   jl DefaultNotChoose
	   add ecx,28
	   cmp eax,ecx
	   ja KiemTraChonHang2VP3
       mov eax,[esp+0x8]
	   mov byte ptr [eax+0x2],1
	   mov byte ptr [eax+0x1C],8
	   ret 0x4

	   KiemTraChonHang2VP3:
	   mov eax,[esp+0x4]
	   mov eax,[eax+0x10]
	   mov ecx,[esi+0x14]
	   add ecx,129
	   cmp eax,ecx
	   jl DefaultNotChoose
	   add ecx,28
	   cmp eax,ecx
	   ja KiemTraChonHang2VP4
       mov eax,[esp+0x8]
	   mov byte ptr [eax+0x2],1
	   mov byte ptr [eax+0x1C],9
	   ret 0x4

	   KiemTraChonHang2VP4:
	   mov eax,[esp+0x4]
	   mov eax,[eax+0x10]
	   mov ecx,[esi+0x14]
	   add ecx,185
	   cmp eax,ecx
	   jl DefaultNotChoose
	   add ecx,28
	   cmp eax,ecx
	   ja KiemTraChonHang2VP5
       mov eax,[esp+0x8]
	   mov byte ptr [eax+0x2],1
	   mov byte ptr [eax+0x1C],10
	   ret 0x4

	   KiemTraChonHang2VP5:
	   mov eax,[esp+0x4]
	   mov eax,[eax+0x10]
	   mov ecx,[esi+0x14]
	   add ecx,241
	   cmp eax,ecx
	   jl DefaultNotChoose
	   add ecx,28
	   cmp eax,ecx
	   ja KiemTraChonHang2VP6
       mov eax,[esp+0x8]
	   mov byte ptr [eax+0x2],1
	   mov byte ptr [eax+0x1C],11
	   ret 0x4

	   KiemTraChonHang2VP6:
	   mov eax,[esp+0x4]
	   mov eax,[eax+0x10]
	   mov ecx,[esi+0x14]
	   add ecx,297
	   cmp eax,ecx
	   jl DefaultNotChoose
	   add ecx,28
	   cmp eax,ecx
	   ja DefaultNotChoose
       mov eax,[esp+0x8]
	   mov byte ptr [eax+0x2],1
	   mov byte ptr [eax+0x1C],12
	   ret 0x4
       //
	   KiemTraHang3Item:
	   mov eax,[esp+0x4]
       mov eax,[eax+0x18]
	   mov ecx,[esi+0x18]
	   add ecx,305
	   cmp eax,ecx
	   jl DefaultNotChoose
	   add ecx,28
	   cmp eax,ecx
       ja KiemTraChooseNutBam
	   mov eax,[esp+0x4]
	   mov eax,[eax+0x10]
	   mov ecx,[esi+0x14]
	   add ecx,17
	   cmp eax,ecx
	   jl DefaultNotChoose
	   add ecx,28
	   cmp eax,ecx
	   ja KiemTraChonHang3VP2
       mov eax,[esp+0x8]
	   mov byte ptr [eax+0x2],1
	   mov byte ptr [eax+0x1C],13
	   ret 0x4

	   KiemTraChonHang3VP2:
	   mov eax,[esp+0x4]
	   mov eax,[eax+0x10]
	   mov ecx,[esi+0x14]
	   add ecx,73
	   cmp eax,ecx
	   jl DefaultNotChoose
	   add ecx,28
	   cmp eax,ecx
	   ja KiemTraChonHang3VP3
       mov eax,[esp+0x8]
	   mov byte ptr [eax+0x2],1
	   mov byte ptr [eax+0x1C],14
	   ret 0x4

	   KiemTraChonHang3VP3:
	   mov eax,[esp+0x4]
	   mov eax,[eax+0x10]
	   mov ecx,[esi+0x14]
	   add ecx,129
	   cmp eax,ecx
	   jl DefaultNotChoose
	   add ecx,28
	   cmp eax,ecx
	   ja KiemTraChonHang3VP4
       mov eax,[esp+0x8]
	   mov byte ptr [eax+0x2],1
	   mov byte ptr [eax+0x1C],15
	   ret 0x4

	   KiemTraChonHang3VP4:
	   mov eax,[esp+0x4]
	   mov eax,[eax+0x10]
	   mov ecx,[esi+0x14]
	   add ecx,185
	   cmp eax,ecx
	   jl DefaultNotChoose
	   add ecx,28
	   cmp eax,ecx
	   ja KiemTraChonHang3VP5
       mov eax,[esp+0x8]
	   mov byte ptr [eax+0x2],1
	   mov byte ptr [eax+0x1C],16
	   ret 0x4

	   KiemTraChonHang3VP5:
	   mov eax,[esp+0x4]
	   mov eax,[eax+0x10]
	   mov ecx,[esi+0x14]
	   add ecx,241
	   cmp eax,ecx
	   jl DefaultNotChoose
	   add ecx,28
	   cmp eax,ecx
	   ja KiemTraChonHang3VP6
       mov eax,[esp+0x8]
	   mov byte ptr [eax+0x2],1
	   mov byte ptr [eax+0x1C],17
	   ret 0x4

	   KiemTraChonHang3VP6:
	   mov eax,[esp+0x4]
	   mov eax,[eax+0x10]
	   mov ecx,[esi+0x14]
	   add ecx,297
	   cmp eax,ecx
	   jl DefaultNotChoose
	   add ecx,28
	   cmp eax,ecx
	   ja DefaultNotChoose
       mov eax,[esp+0x8]
	   mov byte ptr [eax+0x2],1
	   mov byte ptr [eax+0x1C],18
	   ret 0x4

	   KiemTraChooseNutBam:
	   mov eax,[esp+0x4]
	   mov eax,[eax+0x18]
	   mov ecx,[esi+0x18]
	   add ecx,340
	   cmp eax,ecx
	   jl DefaultNotChoose
	   add ecx,18
	   cmp eax,ecx
	   ja DefaultNotChoose
	   mov eax,[esp+0x4]
       mov eax,[eax+0x10]
	   mov ecx,[esi+0x14]
	   add ecx,270
	   cmp eax,ecx
	   jl DefaultNotChoose
	   add ecx,58
	   cmp eax,ecx
	   ja DefaultNotChoose
	   mov eax,[esp+0x8]
       mov byte ptr [eax+0x2],1
	   mov dword ptr [eax+0x14],0xBF7C0005
	   mov cl,[eax+0x1C]
	   mov [eax+0x18],cl
	   lea eax,[eax+0x14]
	   push eax
	   mov ecx,0x155EE60
	   mov eax,0x006B2F60
	   call eax
       DefaultNotChoose:
       ret 0x4
	}
};
__declspec(naked)void ShopAcDanh()  //0054DBE4
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
	   push eax
	   //
	   mov ecx,[eax+0x40]
	   test ecx,ecx
	   jnz DaCoHinhAnh
       add eax,0x40
	   push eax
	   call AddOptionImage
	   DaCoHinhAnh:
       push 0
       push 1
	   mov eax,[esp+0x8]
	   mov edx,[esi+0x14]
       add edx,0x4E
	   mov ecx,[esi+0x18]
       add ecx,199
	   push ecx
	   push edx
       add eax,0x40
	   push eax
	   call GetImageClass
	   //
	   mov eax,[esp]
	   xor ecx,ecx
	   mov cl,[eax+0x1C]
	   test cl,cl
	   jz ChuaChonVPShow
       mov ecx,DWORD PTR SS:[0x01733AC4]
	   push 0xFFFFFFFF
	   mov edx,[ecx]
	   call dword ptr [edx+0xC]
	   mov eax,[esp]
	   xor ecx,ecx
	   mov cl,[eax+0x1C]
	   add ecx,400
       push ecx
       push 83
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   push 00
       push 0x3F800000
	   mov eax,[esi+0x18]
	   add eax,0x48
	   push eax
	   mov eax,[esi+0x14]
	   add eax,0x18
	   push eax
	   mov ecx,DWORD PTR SS:[0x01733AC4]
       push ecx
	   mov edx,[ecx]
	   call dword ptr [edx+0x30]
       add esp,0x18
       ChuaChonVPShow:
       //
	   mov eax,[esp]
	   add eax,0x20
       push eax
       call LoopLoadShopCT
	   //
	   mov ecx,DWORD PTR SS:[0x01733AC4]
	   push 0xFFBABABA
	   mov edx,[ecx]
	   call dword ptr [edx+0xC]
	   mov edx,DWORD PTR SS:[0x1107258+0x82A4]
	   xor edx,0xAE1CDB23
       push edx
	   push 0x00893D50
	   push 01
       push 0x3F800000
	   mov eax,[esi+0x18]
	   add eax,0x95
	   push eax
	   mov eax,[esi+0x14]
	   add eax,0x93
	   push eax
	   mov ecx,DWORD PTR SS:[0x01733AC4]
       push ecx
	   mov edx,[ecx]
	   call dword ptr [edx+0x30]
       add esp,0x1C
	   //
	   pop eax
	   push 0x0054F178
	   ret

	   LoopLoadShopCT:
	   sub esp,0x4
	   xor ecx,ecx
	   mov [esp],ecx
	   LoopbackloadShopChienTruong:
	   mov ecx,[esp]
	   mov eax,[esp+0x8]
	   xor edx,edx
	   mov dx,[eax+ecx]
	   test edx,edx
	   jz DaHetDuLieuChienTruong
	   mov ecx,[esp]
	   push ecx
	   push 10
	   mov eax,[esp+0x10]
	   add eax,0x20
	   mov ecx,[esp+0x8]
	   cmp ecx,5
	   ja ShowUp
	   mov ecx,[esp+0x8]
	   imul ecx,0x38
	   mov edx,[esi+0x14]
	   add ecx,edx
	   add ecx,88
       mov edx,[esi+0x18]
	   add edx,233
	   jmp ProcessHienThiItemAgain

	   ShowUp:
	   cmp ecx,11
	   ja ShowUp1
	   mov ecx,[esp+0x8]
	   imul ecx,0x38
	   mov edx,[esi+0x14]
	   add ecx,edx
	   sub ecx,0xF9
       mov edx,[esi+0x18]
	   add edx,277
	   jmp ProcessHienThiItemAgain

	   ShowUp1:
	   mov ecx,[esp+0x8]
	   imul ecx,0x38
	   mov edx,[esi+0x14]
	   add ecx,edx
	   sub ecx,0x249
       mov edx,[esi+0x18]
	   add edx,321
	   jmp ProcessHienThiItemAgain

	   ProcessHienThiItemAgain:
	   push edx
	   push ecx
	   push eax
	   call GetImageClass
	   mov ecx,[esp]
	   add ecx,1
	   mov [esp],ecx
	   cmp ecx,20
	   jl LoopbackloadShopChienTruong
	   add esp,0x4
	   ret 0x4

	   DaHetDuLieuChienTruong:
	   add esp,0x4
	   ret 0x4

       AddOptionImage:
	   sub esp,0x4
	   xor ecx,ecx
	   mov [esp],ecx
	   BackGetOptionImage:
	   mov ecx,[esp]
	   mov eax, 0x010CC088
	   mov edx,[eax+ecx]
	   mov eax,[esp+0x8]
	   mov [eax+ecx],edx
	   add ecx,4
	   mov [esp],ecx
	   cmp ecx,0xB8
	   jl BackGetOptionImage
	   add esp,0x4
	   ret 0x4

	   GetImageClass:
	   mov ecx,[esp+0x10]
	   cmp ecx,1
	   jz KiemTraAddHinhAnh2
	   cmp ecx,2
	   jz ShowItemChoose
       cmp ecx,10
	   jz HienThiListQuaTangCT

       HienThiListQuaTangCT:
	   push 102
	   push 75
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
	   mov ecx,[esp+0x14]
	   push ebx
	   xor edx,edx
	   cmp ecx,8
	   jae HienThiHang2
	   add edx,0
	   jmp ProcessHienThiShopLD

	   HienThiHang2:
	   cmp ecx,16
	   jae HienThiHang3
	   sub ecx,8
	   add edx,1
	   jmp ProcessHienThiShopLD

	   HienThiHang3:
	   add edx,2
	   sub ecx,16
	   ProcessHienThiShopLD:
	   imul ecx,32
	   mov ebx,[esp+0x8]
	   mov  DWORD PTR SS : [ebx + 0x98] , ecx
	   add ecx,32
	   mov  DWORD PTR SS : [ebx + 0xA0] , ecx
	   imul edx,32
	   mov  DWORD PTR SS : [ebx + 0x9C] , edx
	   add edx,32
	   mov  DWORD PTR SS : [ebx + 0xA4] , edx
	   mov  DWORD PTR SS : [ebx + 0x70] , eax
	   pop ebx
	   jmp ProcessHienThiImage

	   ShowItemChoose:
       mov ecx,[esp+0x14]
	   push ecx
	   push 83
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
	   mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0
	   mov  DWORD PTR SS : [ecx + 0xA0] , 298
	   mov  DWORD PTR SS : [ecx + 0x98] , 0
	   mov  DWORD PTR SS : [ecx + 0xA4] , 70
	   jmp ProcessHienThiImage

	   KiemTraAddHinhAnh2:
	   push 400
	   push 83
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
	   mov ecx,[esp+0x4]
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 264
	   mov  DWORD PTR SS : [ecx + 0xA0] , 340
	   mov  DWORD PTR SS : [ecx + 0x98] , 8
	   mov  DWORD PTR SS : [ecx + 0xA4] , 451

       ProcessHienThiImage:
	   push 0xFF7F0000
	   push 5188
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,[esp+0x14]
	   mov edx,[esp+0x10]
	   push ecx
	   push edx
	   mov ecx, [esp+0x14]
	   mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
	   call eax
	   mov ecx,[esp+0x4]
	   push 0x1732CC8
	   mov eax, 0x7B9850
	   call eax //Draw1
	   ret 0x14
	}
};
__declspec(naked)void SendRequestToGSFirstTime()  //0054CC7E
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
	   mov cl,[eax+1]
	   test cl,cl
	   jz SendReQuesttoServer
	   mov ecx,esi
	   mov eax,0x0054D910
       call eax
	   push 0x0054CC85
	   ret

	   SendReQuesttoServer:
	   mov byte ptr [eax+0x1],1
	   mov dword ptr [eax+0x14],0xBE7C0004
	   lea eax,[eax+0x14]
	   push eax
	   mov ecx,0x155EE60
	   mov eax,0x006B2F60
	   call eax
       mov ecx,esi
	   mov eax,0x0054D910
       call eax
	   push 0x0054CC85
	   ret
	}
};
__declspec(naked)void DrawGuideQuyet()  //004DB5A4
{
__asm
	{
	   nop
	   nop
	   nop
	   nop
	   nop
	   push eax
	   //
	   mov ecx,[esi+0x10]
	   test ecx,ecx
       jz ChuaXuatHienGuide
	   mov ecx,[eax+0x40]
	   test ecx,ecx
	   jnz DaCoHinhAnh
       add eax,0x40
	   push eax
	   call AddOptionImage
	   DaCoHinhAnh:
	   //

	   mov ecx,[esi+0x51C]
	   mov eax,[esp]
	   xor edx,edx
	   mov dx,[eax]
	   cmp ecx,edx
	   jz KhongGetHinhAnhNua
       mov [eax],cx
	   push ecx
       push 0
	   push 84
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov eax,[esp+0x8]
	   add eax,4
	   push eax
	   mov eax,0x0085C564
	   call dword ptr [eax]
	   add esp,0xC
	   //
       KhongGetHinhAnhNua:
	   mov edx,0x4A
	   mov ecx,0x80
	   push ecx
	   push edx
       mov eax,[esp+0x8]
	   push eax
	   call GetImageClass
	   ChuaXuatHienGuide:
       pop eax
	   mov eax,[esi+0x10]
	   xor ebx,ebx
	   push 0x004DB5A9
       ret

       AddOptionImage:
	   sub esp,0x4
	   xor ecx,ecx
	   mov [esp],ecx
	   BackGetOptionImage:
	   mov ecx,[esp]
	   mov eax, 0x010CC088
	   mov edx,[eax+ecx]
	   mov eax,[esp+0x8]
	   mov [eax+ecx],edx
	   add ecx,4
	   mov [esp],ecx
	   cmp ecx,0xB8
	   jl BackGetOptionImage
	   add esp,0x4
	   ret 0x4

	   GetImageClass:
	   mov ecx,[esp+04]
       add ecx,0x4
	   push ecx
	   mov ecx,0x015720C8
	   mov eax,0x007B1EC0
	   call eax
	   mov ecx,[esp+0x4]
       add ecx,0x40
	   mov  DWORD PTR SS : [ecx + 0x70] , eax
	   mov  DWORD PTR SS : [ecx + 0x9C] , 0
	   mov  DWORD PTR SS : [ecx + 0xA0] , 424
	   mov  DWORD PTR SS : [ecx + 0x98] , 0
	   mov  DWORD PTR SS : [ecx + 0xA4] , 409
	   push 0xFF7F0000
	   push 5188
	   push 25
	   mov ecx,0x01733B30
	   mov eax,0x007C2CF0
	   call eax
	   push eax
	   mov ecx,[esp+0x14]
	   mov edx,[esp+0x10]
	   push ecx
	   push edx
	   mov ecx, [esp+0x14]
       add ecx,0x40
	   mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
	   call eax
	   mov ecx,[esp+0x4]
       add ecx,0x40
	   push 0x1732CC8
	   mov eax, 0x7B9850
	   call eax //Draw1
	   ret 0xC
	}
};
__declspec(naked)void AcceptItemQuest()  //0048C106
{
__asm
	{
		nop
		nop
		nop
		nop
		nop
        push eax
		push 10087
		mov ecx,0x017323A8
		mov eax,0x007D8550
		call eax
		test eax,eax
		jz Default
		mov cl,[eax+0x10]
		test cl,cl
		jz Default
        mov ecx,[eax+0x00000208]
		mov edx,[ecx+0x000007F4]
		cmp edx,10
		jnz Default
		mov eax,[esp]
		mov cl,[eax+0x28]
		cmp cl,1
		jz CheckItemAndAccept
		cmp cl,2
        jz CheckItemAndAccept
		jmp Default

		CheckItemAndAccept:
        mov eax,[esp]
		mov cl,[eax+0x2A]
		cmp cl,1
		jnz Default
        movsx eax,byte ptr [esi+0x1E]
		xor eax,0x1F
		cmp al,0
		jz AcceptTypeItem
        cmp al,1
		jz AcceptTypeItem
        cmp al,9
		jz AcceptTypeItem
        cmp al,7
		jz AcceptTypeItem
		cmp al,19
		jz AcceptTypeItem
        pop eax
        push 0xFFFAE6AA
		push 0x1
		push 0xC
		push 39
		push 74
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x0155EE60
		mov eax,0x006A9800
		call eax
		push 0x0048DCCB
		ret

		AcceptTypeItem:
		mov eax,[esp]
		mov ecx,[esi+0x98]
		mov [eax+0x20],cl
        pop eax
		push 0x0048DCCB
		ret

		Default:
        pop eax
		movsx eax,byte ptr [esi+0x1E]
        xor eax,0x1F
		push 0x0048C10D
        ret
	}
};
__declspec(naked)void DrawNhiemVuFast()  //0055D98C
{
__asm
	{
		nop
		nop
		nop
		nop
		nop
        push eax
		mov ecx,[eax+0x70]
		test ecx,ecx
		jnz DaCoHinhAnh
		add eax,0x70
		push eax
		call AddOptionImage
		DaCoHinhAnh:
        mov ecx,DWORD PTR SS:[0x01733AC4]
		push 0xFFFFFFFF
		mov edx,[ecx]
	    call dword ptr [edx+0xC]
		mov eax,[esp]
		mov cl,[eax+0x28]
		cmp cl,1
		jz HienThiDropVP
		cmp cl,2
		jz HienThiVPOpt
		cmp cl,3
		jz HienThiNVPk
		cmp cl,4
		jz HienThiGietBoss
		cmp cl,5
		jz HienThiEXP
		cmp cl,6
		jz HienThiAcDanh
		cmp cl,7
		jz HienThiGietQuai
		Default:
        pop eax
		mov eax,[esi+0x0000016C]
		push 0x0055D992
		ret

		HienThiNenShowInfo:
        mov eax,[esp]
		mov edx,[eax+0x54]
		push edx
		push 53
		push 74
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		//
		push 0x0
		push 0x3F800000
		mov eax,DWORD PTR [0x01733AC4]
		mov edi,[eax]
		mov edx,[esi+0x18]
		add edx,0x15
		mov ecx,[esi+0x310]
		test ecx,ecx
		jz TangThemMotNac
        sub edx,0x30
        TangThemMotNac:
		push edx
		mov edx,[esi+0x14]
		add edx,0x129
		push edx
		push eax
		mov ecx,DWORD PTR [0x01733AC4]
		call dword ptr [edi+0x30]
		add esp,0x1C
        //
        mov edx,[esi+0x18]
		add edx,0x1A
        mov ecx,[esi+0x310]
		test ecx,ecx
		jz TangThemMotNac1
        sub edx,0x30
		TangThemMotNac1:
		mov ecx,[esi+0x14]
		add ecx,0x4B
		push edx
		push ecx
		mov eax,[esp+0x8]
		push eax
		call GetImageClass
		jmp Default

		HienThiDropVP:
        mov eax,[esp]
		xor edx,edx
		mov dl,[eax+0x30]
		xor ecx,ecx
		mov cx,[eax+0x31]
		push ecx
		push edx
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov eax,[esp+0x4]
		xor edx,edx
		mov dl,[eax+0x33]
		push edx
		push 1
		push 74
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		//
		push 0x0
		push 0x3F800000
		mov eax,DWORD PTR [0x01733AC4]
		mov edi,[eax]
		mov edx,[esi+0x18]
		add edx,0x16
        mov ecx,[esi+0x310]
		test ecx,ecx
		jz TangThemMotNac2
		sub edx,0x30
		TangThemMotNac2:
		push edx
		mov edx,[esi+0x14]
		add edx,0xC
		push edx
		push eax
		mov ecx,DWORD PTR [0x01733AC4]
		call dword ptr [edi+0x30]
		add esp,0x20
		jmp HienThiNenShowInfo

		HienThiVPOpt:
        mov eax,[esp]
		xor edx,edx
		mov edx,[eax+0x37]
		push edx
		xor edx,edx
		mov dl,[eax+0x34]
		xor ecx,ecx
		mov cx,[eax+0x35]
		push ecx
		push edx
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		push 2
		push 74
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		//
		push 0x0
		push 0x3F800000
		mov eax,DWORD PTR [0x01733AC4]
		mov edi,[eax]
		mov edx,[esi+0x18]
		add edx,0x16
        mov ecx,[esi+0x310]
		test ecx,ecx
		jz TangThemMotNac3
		sub edx,0x30
		TangThemMotNac3:
		push edx
		mov edx,[esi+0x14]
		add edx,0xC
		push edx
		push eax
		mov ecx,DWORD PTR [0x01733AC4]
		call dword ptr [edi+0x30]
		add esp,0x20
		jmp HienThiNenShowInfo

		HienThiNVPk:
		mov eax,[esp]
		xor edx,edx
		mov dl,[eax+0x3F]
		push edx
		xor ecx,ecx
		mov cx,[eax+0x3D]
		xor edx,edx
		mov dl,[eax+0x3C]
		push ecx
		push edx
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		push 48
		push 74
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		//
		push 0x0
		push 0x3F800000
		mov eax,DWORD PTR [0x01733AC4]
		mov edi,[eax]
		mov edx,[esi+0x18]
		add edx,0x16
        mov ecx,[esi+0x310]
		test ecx,ecx
		jz TangThemMotNac4
		sub edx,0x30
		TangThemMotNac4:
		push edx
		mov edx,[esi+0x14]
		add edx,0xC
		push edx
		push eax
		mov ecx,DWORD PTR [0x01733AC4]
		call dword ptr [edi+0x30]
		add esp,0x20
		jmp HienThiNenShowInfo

		HienThiGietBoss:
		mov eax,[esp]
		xor edx,edx
		mov dl,[eax+0x40]
		xor ecx,ecx
		mov cx,[eax+0x41]
		push ecx
		push edx
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov eax,[esp+0x4]
		xor edx,edx
		mov dl,[eax+0x43]
		push edx
		push 49
		push 74
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		//
		push 0x0
		push 0x3F800000
		mov eax,DWORD PTR [0x01733AC4]
		mov edi,[eax]
		mov edx,[esi+0x18]
		add edx,0x16
        mov ecx,[esi+0x310]
		test ecx,ecx
		jz TangThemMotNac5
        sub edx,0x30
		TangThemMotNac5:
		push edx
		mov edx,[esi+0x14]
		add edx,0xC
		push edx
		push eax
		mov ecx,DWORD PTR [0x01733AC4]
		call dword ptr [edi+0x30]
		add esp,0x20
		jmp HienThiNenShowInfo

		HienThiEXP:
        mov eax,[esp]
		mov edx,[eax+0x48]
		push edx
		push 50
		push 74
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		//
		push 0x0
		push 0x3F800000
		mov eax,DWORD PTR [0x01733AC4]
		mov edi,[eax]
		mov edx,[esi+0x18]
		add edx,0x16
        mov ecx,[esi+0x310]
		test ecx,ecx
		jz TangThemMotNac10
        sub edx,0x30
		TangThemMotNac10:
		push edx
		mov edx,[esi+0x14]
		add edx,0xC
		push edx
		push eax
		mov ecx,DWORD PTR [0x01733AC4]
		call dword ptr [edi+0x30]
		add esp,0x1C
		jmp HienThiNenShowInfo

		HienThiAcDanh:
        mov eax,[esp]
		mov edx,[eax+0x4C]
		push edx
		push 51
		push 74
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		//
		push 0x0
		push 0x3F800000
		mov eax,DWORD PTR [0x01733AC4]
		mov edi,[eax]
		mov edx,[esi+0x18]
		add edx,0x16
        mov ecx,[esi+0x310]
		test ecx,ecx
		jz TangThemMotNac6
		sub edx,0x30
		TangThemMotNac6:
		push edx
		mov edx,[esi+0x14]
		add edx,0xC
		push edx
		push eax
		mov ecx,DWORD PTR [0x01733AC4]
		call dword ptr [edi+0x30]
		add esp,0x1C
		jmp HienThiNenShowInfo

		HienThiGietQuai:
        mov eax,[esp]
		xor edx,edx
		mov dl,[eax+0x44]
		xor ecx,ecx
		mov cx,[eax+0x45]
		push ecx
		push edx
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov eax,[esp+0x4]
		xor edx,edx
		mov dl,[eax+0x47]
		push edx
		push 52
		push 74
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		//
		push 0x0
		push 0x3F800000
		mov eax,DWORD PTR [0x01733AC4]
		mov edi,[eax]
		mov edx,[esi+0x18]
		add edx,0x16
        mov ecx,[esi+0x310]
		test ecx,ecx
		jz TangThemMotNac7
        sub edx,0x30
		TangThemMotNac7:
		push edx
		mov edx,[esi+0x14]
		add edx,0xC
		push edx
		push eax
		mov ecx,DWORD PTR [0x01733AC4]
		call dword ptr [edi+0x30]
		add esp,0x20
		jmp HienThiNenShowInfo

        GetImageClass:
		push 44
		push 74
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,0x015720C8
		mov eax,0x007B1EC0
		call eax
		mov ecx,[esp+0x4]
		add ecx,0x70
		mov  DWORD PTR SS : [ecx + 0x70] , eax
		mov  DWORD PTR SS : [ecx + 0x9C] , 133
		mov  DWORD PTR SS : [ecx + 0xA0] , 368
		mov  DWORD PTR SS : [ecx + 0x98] , 37
		mov  DWORD PTR SS : [ecx + 0xA4] , 173
		push 0xFF7F0000
		push 5188
		push 25
		mov ecx,0x01733B30
		mov eax,0x007C2CF0
		call eax
		push eax
		mov ecx,[esp+0x14]
		mov edx,[esp+0x10]
		push ecx
		push edx
		mov ecx, [esp+0x14]
		add ecx,0x70
		mov eax, 0x7BA280 // SetToolTipStringEx_Noresize1
		call eax
		mov ecx,[esp+0x4]
		add ecx,0x70
		push 0x1732CC8
		mov eax, 0x7B9850
		call eax //Draw1
		ret 0xC

        AddOptionImage:
		sub esp,0x4
		xor ecx,ecx
		mov [esp],ecx
		BackGetOptionImage:
		mov ecx,[esp]
		mov eax, 0x010CC088
		mov edx,[eax+ecx]
		mov eax,[esp+0x8]
		mov [eax+ecx],edx
		add ecx,4
		mov [esp],ecx
		cmp ecx,0xB8
		jl BackGetOptionImage
		add esp,0x4
	    ret 0x4
	}
};
//---------------------------------------------------------------------------
	 DWORD AddressHook1;
void Engine(Wirsd obj,DWORD ProIDNineDragons,int CountClientRunProcess)
{
	//KernelInterface Driver = KernelInterface("\\\\.\\guidedhacking");

	//ULONG address = Driver.GetClientAddress();
	//ULONG processid = Driver.GetProcessId();

	int hooklenght = 6;


	DWORD ShowResourceInfoAdr = 0x004D8082;
	DWORD NewIncClothItemAdr = 0x006B6161;
	DWORD ShowTextIncCloCuongDoAdr = 0x004F42DF;
	DWORD RemoveHuyetLongRequestAdr = 0x004F55F7;
	DWORD ShowHuyetLongRequestAdr =  0x004F43EA;
	DWORD ResizeShowIncClothAdr = 0x004CDF21;
	DWORD AcceptTiengVietAdr = 0x00422110;
	DWORD DatTenTiengVietAdr = 0x004224E6;
	DWORD AddOptionPhongAnTinVatAdr = 0x00613D8D;
	DWORD ResizeShowItemAdr = 0x004D322D;
	DWORD DrawMoreInforRelicAdr= 0x004D8DA0;
    DWORD ReceivePackagePhongAnAdr = 0x006ACB11;
	DWORD VietHoaText2Adr = 0x005BC364;
	DWORD VietHoaText1Adr = 0x007DA969;
	DWORD VietHoaTextAdr = 0x007DE7E3;
	DWORD ChangeInforPhongAn1910Adr = 0x0065F9A0;
	DWORD LoadInfoPhongAnAdr = 0x005EA2F6;
	DWORD InforQuyetErroAdr = 0x006AD688;
	DWORD GetInforBackDiQAdr = 0x006AB664;
	DWORD NhanPackageInforAdr = 0x006EA0D9;
	DWORD ChangeInforPhongAn3Adr = 0x004F40BC;
	DWORD ChangeInforPhongAn2Adr = 0x004F407D;
	DWORD ChangeInforPhongAn1Adr = 0x004F3FA5;
	DWORD ChangeInforPhongAnAdr = 0x004F3EF4;
	DWORD ShowAnotherRequestItemIncAdr = 0x004F4464;
	DWORD ChangeModeInchantAdr = 0x006B6154;
	DWORD RequestCorrectItemAdr = 0x004F43BF;
	DWORD ChangeColorAndTypeAdr = 0x004F3B1B;
	DWORD ShowCheckBoxTinhLuyenAdr = 0x004F3C1A;
	DWORD GetValueCheckBoxAdr = 0x00442BE2;
	DWORD RemoveValueCombineXAdr = 0x006B54F3;
	DWORD ShowTiLeTinhLuyenAdr = 0x005DE504;
	DWORD GotoProcessShopDiemHoatDongAdr = 0x004941F1;
	DWORD CapNhatGiaTienSauMuaAdr = 0x006ACA02;
	DWORD GetDiemHoatDongAdr = 0x006AB296;
	DWORD ShopDiemHoatDongAdr = 0x00494211;
	DWORD ShopDiemHoatDong2Adr = 0x004C6697;
	DWORD ShowDiemHoatDongAdr = 0x0049421D;
	DWORD GetUpRankLevelAdr = 0x006AB28B;
	DWORD UpRankLevelAdr = 0x006AB337;
	DWORD ChoPhepNghiNgoiAdr = 0x005C7BE8;
    DWORD BoQuaShiftAdr = 0x0064665D;
	DWORD NenTenMauDoAdr = 0x00660DCB;
	DWORD LayDiemTKSauPkAdr = 0x006D51D6;
	DWORD LineNguoiChoiTKAdr = 0x004729D7;
	DWORD ByPassTextureErrorAdr = 0x007BAA52;
	DWORD ByPassTextureError1Adr = 0x007BAC04;
	DWORD ByPassTextureError2Adr = 0x007BADF4;
	DWORD ByPassTextureError3Adr = 0x007BAFDE;
	DWORD ByPassTextureError4Adr = 0x007BB137;
    DWORD ByPassResetTargetAdr = 0x0062FDCA;
	DWORD ByPassResetTarget1Adr = 0x0583B31;
	DWORD ByPassResetTarget2Adr = 0x00630063;
	DWORD ShowPheAdr = 0x00472A62;
	DWORD ShowPhe1Adr = 0x00472A54;
	DWORD GetDuLieuTongKimAdr = 0x00472974;
	DWORD ThayDoiTen1Adr = 0x004728CF;
	DWORD ThayDoiTen2Adr = 0x00472909;
	DWORD ThayDoiTen3Adr = 0x00472945;
	DWORD ShowDiemTongAdr = 0x004726A2;
	DWORD ShowInforTongKimAdr = 0x005CCDD1;
	DWORD ShowDiemKimAdr = 0x004726D3;
	DWORD GetInfoTongKimAdr = 0x006AAC48;
	DWORD ShowDiemTK1Adr = 0x0065FC2B;
	DWORD GetDiemFromAnotherUserTKAdr = 0x006BA889;
	DWORD EvetTKAnotherUserAdr = 0x00660B69;
	DWORD ShowDiemTK2Adr = 0x004BA464;
	DWORD GetDiemTKAdr = 0x006B8E29;
	DWORD EvetTKAdr = 0x0065FC42;
	DWORD BypassErrorDriverAdr = 0x007620B4;
	DWORD ByPassGetIPAdr = 0x006A7B4D;
	//DWORD ThongBaoKhiNhanQuaAdr = 0x006AAC57;
	DWORD EncryptTwoByteAdr = 0x0040431E;
	DWORD EncryptTwoByte2Adr = 0x007B7C59;
	DWORD DrawExtSlotAdr = 0x0049411F;
	DWORD ChoDucSlotVkTinhLuyenAdr = 0x0051B56A;
	DWORD TestFuncOpenBox2Adr = 0x0048D24F;
	DWORD TestFuncOpenBoxAdr = 0x0048CA92;
	DWORD AddMoreSlot3Adr = 0x004BC46D;
	DWORD AllowLLanWeaponAdr = 0x00574C20;
	DWORD AddMoreSlot4Adr = 0x004BC544;
	DWORD AddMoreSlot1Adr = 0x004BC517;
	DWORD ShowInforHoverAdr = 0x004BC87C;
	DWORD ShowInforHover3Adr = 0x004BC8C2;
	DWORD ShowInforHover2Adr = 0x004BC8A4;
	DWORD EquipItemRelicAdr = 0x0048C71B;
	DWORD EquipItemRelic2Adr = 0x004BCA20;
	DWORD AddBonusNewSlotAdr = 0x006189B3;
	DWORD GetBaseBonusFromItemNewSlotAdr =0x006138CB;
	DWORD AddMoreSlotShowItemAdr = 0x004BB656;
	DWORD DisableViewPetAdr = 0x006205F5;
	DWORD DisableViewPet2Adr = 0x0064B1F9;
	DWORD DisableViewPet3Adr = 0x0064B249;
	DWORD DisableViewPet4Adr  = 0x00621A55;
	DWORD DisableViewPet5Adr = 0x0062B739;
	//DWORD CheckConditionNewSlotAdr = 0x006B464B;
	DWORD GetGradeNewColorAdr = 0x00675FF3;
	DWORD TestNewNguKhiAdr = 0x00601147;
	DWORD TestNewNguKhiTriTueAdr = 0x006011E5;
	DWORD TestNewNguKhiSinhLucAdr = 0x005FF49F;
	DWORD TestNewNguKhiChanKhiAdr = 0x00601243;
	DWORD TestAttactSpeedAdr = 0x0063E79B;
	DWORD GetAttackValueAdr = 0x0061358A;
	DWORD TestAttactSpeed2Adr = 0x006275B1;
	DWORD TestAttactSpeed3Adr = 0x00629F43;
	DWORD TestAttSpeedCastSkillAdr = 0x0062A874;
	DWORD TestAttSpeedCoolDownAdr = 0x006367E5;
	DWORD TestAttSpeedCastSkill2Adr = 0x0063DA08;
	DWORD PKMapsLoanChienAdr = 0x00646898;
	DWORD SetAttackSpeedAnotherUserAdr = 0x006ABB96;
	DWORD GetAttackSpeedAnotherUserAdr = 0x00656B8D;
	DWORD SetAttackSpeedSmashModAdr = 0x006C4A50;
	DWORD SetAttackSpeedAtivatePvpAdr = 0x006C56AD;
	DWORD SetpkActiveResultMobAdr = 0x006C52AD;
	DWORD SetAttackSpeedSmash2ModAdr = 0x006C4D3F;
	DWORD TestAttSpeedCoolDown2Adr = 0x0063DAC4;
	DWORD PKMapsLoanChien2Adr = 0x00646898;
	DWORD DisableStackRelicAdr = 0x0062C759;
	DWORD NdTangCuongDoClothAdr = 0x006B60B9;
	DWORD GiaHanCucDaiAdr = 0x00488BE2;
	DWORD ReloadLumpAdr = 0x00696BE3;
	DWORD TestLockChangeMapsAdr = 0x006959A5;
	DWORD HienThiSetAdr = 0x0068C953;
	DWORD AddOptionSetAdr = 0x0068C227;
	DWORD InforPhyAdr = 0x004B9E5A;
	DWORD InforPhy2Adr = 0x005FFDD7;
	DWORD InforPhy3Adr = 0x005FFDFB;
	DWORD InforPhy4Adr = 0x00628311;
	DWORD InforPhy5Adr = 0x0062831F;
	DWORD InforMagic1Adr = 0x004B9F87;
	DWORD InforMagic2Adr = 0x006007AB;
	DWORD InforMagic3Adr = 0x006007C9;
	DWORD InforMagic4Adr = 0x00628331;
	DWORD InforMagic5Adr = 0x0062833A;
	DWORD InforMagic6Adr = 0x00600799;
	DWORD InforMagic7Adr = 0x006007B7;
	DWORD ChangeRequestItemIncClothAdr = 0x004F50EA;
	DWORD ChangeRequestItemIncCloth1Adr = 0x004F3F4D;
	DWORD InforPhy6Adr = 0x00628303;
	DWORD RemoveOldSlotAdr = 0x006DD2A6;
	DWORD ByPassOverIndex3DxAdr = 0x0070D05F;
	DWORD ByPassOverIndex3Dx1Adr = 0x0070DAAE;
	DWORD ByPassOverIndex3Dx2Adr = 0x0070E51D;
	DWORD LoadFastMapAdr = 0x005A0E26;
	DWORD BoQuaThongBaoLienMinhAdr = 0x006B0D1B;
	DWORD GetAttackSpeedFromNickAdr = 0x005FECAD;
	DWORD FixHienThiDamgeAdr = 0x005FFC99;
	DWORD ChangeCodeTextAdr = 0x007C2317;
	DWORD ChangeCodeText2Adr = 0x007C2426;
	DWORD ChangeCodeText3Adr = 0x007C2648;
	DWORD AddInfoItemAdr = 0x006AAE25;
	DWORD GetPacketFromCombineAdr = 0x00704A58;
	DWORD LoadInforIConBangHoiAdr = 0x005E1F24;
	DWORD SetAttackSpeedNuker1PvPAdr = 0x006C6C2B;
	DWORD SetAttackSpeedNuker1MobAdr = 0x006C69FC;
	DWORD TestAttSpeedCastSkill3Adr = 0x0063667C;
	DWORD BypassMaxModelAdr = 0x0071E92D;
	DWORD SetAttackSpeedNukerMob3Adr = 0x006C5EAB;
	DWORD GetMaxSlotAdr = 0x005DAE35;


	//addLevel
	DWORD insertValueLevelAdr = 0x0062784B;
	DWORD insert16A098CAdr = 0x00437CF7;
	DWORD insert16A098C1Adr = 0x00438486;
	DWORD insert16A098C2Adr = 0x00464774;
	DWORD insert16A098C3Adr = 0x00467DE0;
	DWORD insert16A098C4Adr = 0x0047E09A;
	DWORD insert16A098C5Adr = 0x004C94D5;
	DWORD insert16A098C6Adr = 0x004ED856;
	DWORD insert16A098C61Adr = 0x004EDE77;
	DWORD insert16A098C62Adr = 0x004EEB42;
	DWORD insert16A098C7Adr = 0x0053C61D;
	DWORD insert16A098C8Adr = 0x00627C8F;
	DWORD insertValueLevel2Adr = 0x004F6F5A;
    DWORD insertValueLevel3Adr = 0x004B8324;
	DWORD insert16A098C9Adr = 0x006284BA;
	DWORD insert16A098C10Adr = 0x006F44B4;
	DWORD insert16A098C101Adr = 0x006F493C;
	DWORD insert16A098C11Adr = 0x006F44F6;
	DWORD insert16A098C111Adr = 0x006F497E;
	DWORD insert16A09ACAdr = 0x004BC05E;
	DWORD insert16A09AC1Adr = 0x004E3FBC;
	DWORD insert16A09AC2Adr = 0x005D1D22;
	DWORD insert16A09AC21Adr = 0x005D204F;
	DWORD insert16A09AC3Adr = 0x006B9230;
	DWORD insert16A09AC4Adr = 0x006B9986;
	DWORD insert16A09AC41Adr = 0x007052B2;
	DWORD insert16A09AC5Adr = 0x006C8013;
	DWORD insert16A09AC6Adr = 0x006C84FD;
	DWORD insert16A09AC7Adr = 0x006D3504;
	DWORD insert16A09AC8Adr = 0x0075ECE8;
	DWORD insert16A09C4Adr = 0x006B9222;
	DWORD insert16A09C41Adr = 0x006B9978;
	DWORD insert16A09C42Adr = 0x006D34F0;
	DWORD insert16A09C43Adr = 0x007052A2;
	DWORD AcceptUpradeOptAdr = 0x00488E93;
    DWORD MoRongBangHoiAdr = 0x0065FFC5;
	DWORD MoRongBangHoi2Adr = 0x00660F57;

	// AddSlot
	DWORD AddMoreSlotAdr = 0x004BC585;
    //DWORD AddMoreSlot1Adr = 0x004BC517;

	DWORD LoadLineAdr = 0x004CEC5E;
	DWORD GetDieOrLieTankerAdr = 0x006C557E;
	DWORD GetTargetAnotherNukerAdr = 0x006C6BA9;
    DWORD GetTargetAnotherNuker2Adr = 0x006C6066;
    DWORD GetTargetAnotherTankerAdr = 0x006C4CBC;
	DWORD DucSlotClothAdr = 0x0051B8F4;
    DWORD AcceptInchantClothAdr = 0x00488E13;
	DWORD ShowOptionClothAdr = 0x004D6936;
	DWORD LoadInforClassAdr = 0x005E1F29;
	DWORD LoadInforShowClassAdr = 0x005E1F1F;
	DWORD LoadInforClass2Adr = 0x0005E1FAA;
    DWORD PushAddressAdr = 0x0077E7FC;
	DWORD LoadInforShowClass2Adr = 0x005E1E31;
	DWORD GetDamageThucKyAdr = 0x006C52F6;
	DWORD GetEffectLoadGameAdr = 0x006DD510;
    DWORD AcceptInchantClothType8Adr = 0x004F5411;
    DWORD AddmoreNumberAdr = 0x0077E82A;
    DWORD AnotherEffectAdr = 0x006BB2D7;
	DWORD BlockUsedItemAdr = 0x006B46BF;
	DWORD ShowDamageSkillAdr = 0x0063EAD8;
	DWORD ShowDamageCk1Adr = 0x00636B04;
    DWORD insert1stringdtnameAdr = 0x004054E2;
    DWORD BypassvrAdr = 0x004044CE;
	DWORD ShowDamageCk2Adr = 0x00643BF0;
	DWORD ShowDamageCk3Adr = 0x006369F5;
	DWORD ShowDamageCk4Adr = 0x00643AE1;
    DWORD BlockShowResourceAdr = 0x004C42D2;
	DWORD TestModel2Adr = 0x0062EA6B;
	DWORD TestModel3Adr = 0x00657C3F;
    DWORD TestModel4Adr = 0x0065E64C;
    DWORD SeteffectAnotherUserAdr = 0x006BA6E1;
	DWORD BlockUsedItem2Adr = 0x006B46A1;
	DWORD GetPackSvRelicsAdr = 0x006DC358;
	DWORD LoadNickIconBangHoiAdr = 0x0065FFC5;

	DWORD GetInforIncAdr = 0x006ACB5F;

	DWORD ShowResetAdr = 0x006EA30A;

	DWORD GetInforSortAdr = 0x006ACB4D;


	DWORD AddOptionIncAdr = 0x00600C5A;

	DWORD AcceptItemAdr = 0x0004F5305;
	//TestShowDamage
	DWORD ShowDamageAdr = 0x0063ECCC;
	DWORD GetDamageAdr = 0x006C4AAC;

	DWORD GetDamageMaxAdr = 0x006C52FB;
	DWORD ShowDamage2Adr = 0x00631C7D;
	DWORD ShowDamage22Adr = 0x00631B92;
	DWORD AddOptionRelicsItemAdr = 0x00627E5D;
	//
    DWORD BlockSortAdr = 0x006EC0D0;
	DWORD LoadgNumericParticleIndexAdr = 0x0077E85B;
	DWORD TestDamage2Adr = 0x0077E93A;

    DWORD LoadDamageAdr = 0x0077C357;
	DWORD AddressGmCommand = 0x005A9BA5;
	DWORD AddEffectAdr1 = 0x006E1DB2;
	DWORD GetDamageCkAdr = 0x006C6A39;
	DWORD GetDamageCk2Adr = 0x006C5EFC;
	DWORD LoopLoadAdr = 0x0065F9A0;
	DWORD hookSendPacket = 0x006B3FF8;
    DWORD AddEffectAdr = 0x006E1D88;
	DWORD AdreGetPack = 0x006DC610;
	DWORD ShowOptionClot = 0x004CED12;    //disabled
	DWORD ShowOptionClot2 = 0x004C186C;  //disabled
	DWORD AdreGetPack2 = 0x006DC8A7;
    DWORD TestDamageADR = 0x00631C92;
	DWORD LoadInchantClot = 0x00679157;
    DWORD LoadShowClothIc = 0x004CD45B;   //disabled
	DWORD SKillWeaponAdr = 0x004C1991;
	DWORD AdresCloth1 = 0x004917AE;
    DWORD GetValuePickItemAdr = 0x004C733D;
	DWORD AdresCloth2 = 0x004917A9;
    DWORD DecreaseVD = 0x006C905D;  //Disable
    DWORD GetSpeeUser = 0x0051EFE7;
	DWORD LockChangeAdr = 0x006B3E5D;
    DWORD AntiInGameAdr = 0x0065FE25;
    DWORD ChangeCheckProc = 0x005A02BD;
	DWORD CheckAntiADre = 0x00404046;
    DWORD AddmoreNumber2Adr = 0x0077E942;
	DWORD CheckAntiADre2 = 0x0072AB35;
	DWORD LoadMapsFast = 0x5A0A9C;
	DWORD SkillIcon = 0x0055F23E;
	DWORD ShowClassinGame = 0x0065FDBE;
    DWORD ShowClassinGameAnother = 0x00660D16;
	DWORD HookLoadIcon = 0x0065FF78;
	DWORD LoadIconUser = 0x00660F1A;
	DWORD ChangeDisNameAdr = 0x007C41C6;
    DWORD ChangeDisNameAdr2 = 0x0079199A;
	DWORD AdrInchantEffect = 0x006762FB;
	DWORD AdrInchantEffect2 = 0x0067632A;
	DWORD AdrInchantEffect3 = 0x00676517;
	DWORD AdrInchantEffect4 = 0x006763D9;
	DWORD AdrInchantEffect5 = 0x00676478;
	DWORD AdrInchantEffect6 = 0x006765B6;
    DWORD LoadSkill = 0x0055F23E;
    DWORD LoadVnText = 0x007C250D;
	DWORD LoadTextVn22 = 0x007CF166;
	DWORD ChangePatch = 0x006A9383;
	DWORD AdrZoom = 0x0073647B;
	DWORD ChangeSizePackAdr = 0x006DC383;
	DWORD ChangeSizePack1Adr = 0x006DC4B1;

	DWORD oldProtect1;
    //Get Proc ID
    DWORD AddressInch = 0x004F543C;
    DWORD AddressInch2 = 0x004F55DE;
    DWORD EditText1 = 0x07EFDE8;
    DWORD EditText2 = 0x07EFE13;
	DWORD EditText3 = 0x07EFE3F;
	DWORD EditText4 = 0x07EFE41;
	DWORD ChangeHeader = 0x007B678A;
	DWORD AddressPassGGAdr = 0x00839B65;
	DWORD AddressPassGG1 = 0x007BBAFB;
    DWORD AddressPassGG2 = 0x00413B96;
    DWORD AddressPassGG3 = 0x004263AA;
	DWORD AddressPassGG4 = 0x005A5616;
	DWORD AddressPassGG5 = 0x006A98B3;
	DWORD AddressPassGG7 = 0x006A9C2D;
   /* DWORD ProcID = Proc::GetProcId(L"NINEDRAGONS.exe");
    if (!ProcID)
    {
        std::cout << "Not Found Game" << std::endl;
	}   */

    //Get Module Base
	//uintptr_t moduleBase = Proc::GetModuleBaseAddress(ProcID, L"NINEDRAGONS.exe");

	//Get Handle
	HANDLE handlGame = OpenProcess(PROCESS_ALL_ACCESS, FALSE, ProIDNineDragons);
   /*	if (!moduleBase)
	{
		std::cout << "Can't not get Module Base" << std::endl;
	}   */
			 BYTE AddressGG2[6] = { 0xEB,0x4C,0x90,0x90,0x90,0x90 };
			 BYTE AddressGG3[6] = { 0xE9,0xF0,0x01,0x00,0x00,0x90 };

			 PatchEx((BYTE*)AddressPassGGAdr, (BYTE*)AddressGG2, 6, handlGame);

			 PatchEx((BYTE*)AddressPassGG1, (BYTE*)AddressGG3, 6, handlGame);

			 PatchEx((BYTE*)AddressPassGG2, (BYTE*)"\xEB\x17", 2, handlGame);

			 PatchEx((BYTE*)AddressPassGG3, (BYTE*)"\xEB\x1C", 2, handlGame);

			 PatchEx((BYTE*)AddressPassGG4, (BYTE*)"\xEB\x16", 2, handlGame);

			 PatchEx((BYTE*)AddressPassGG5, (BYTE*)"\xEB\x16", 2, handlGame);

			 PatchEx((BYTE*)AddressPassGG7, (BYTE*)"\xEB\x0E", 2, handlGame);


	// InchantMemory
	   DWORD InchantMemory = 0x00674BD1;
	   DWORD InchantMemory2 = 0x00674EFB;


	 // goto TestEndl;

	 //Inchant
	 PatchEx((BYTE*)AddressInch, (BYTE*)"\x3C\x17", 2, handlGame);

	 PatchEx((BYTE*)AddressInch2, (BYTE*)"\x80\xFA\x17", 3, handlGame);
	 //End

	 //ChangeEncode
	 DWORD ChEncode = 0x00404324;
	 DWORD ChEncode2 = 0x007B7C5F;
	 DWORD StringCode =  0x00892480;
	 DWORD StringCode2 =  0x008924F5;
	 DWORD Passstring = 0x00404375;
	 DWORD Passstring2 = 0x004044DB;
	 //PatchEx((BYTE*)Passstring, (BYTE*)"\x84", 1, handlGame);
	 //PatchEx((BYTE*)Passstring2, (BYTE*)"\x84", 1, handlGame);
	 //PatchEx((BYTE*)StringCode, (BYTE*)"\x7A\x70\x6C\x61\x79", 5, handlGame);
	 //PatchEx((BYTE*)StringCode2, (BYTE*)"\x7A\x70\x6C\x61\x79", 5, handlGame);
	 //PatchEx((BYTE*)ChEncode, (BYTE*)"\xC8", 1, handlGame);
	 //PatchEx((BYTE*)ChEncode2, (BYTE*)"\xC8", 1, handlGame);
	 //End

	 //Jmp DrawIcon
	 DWORD ByDrawIcon = 0x004917D0;
	 PatchEx((BYTE*)ByDrawIcon, (BYTE*)"\xEB\x70", 2, handlGame);

	 DWORD DrawIconNew = 0x0049153B;
	 PatchEx((BYTE*)DrawIconNew, (BYTE*)"\x14", 1, handlGame);

     DWORD BlockThaoDoXuong8C = 0x004BD552;
	 PatchEx((BYTE*)BlockThaoDoXuong8C, (BYTE*)"\x8C", 1, handlGame);

	 //lOAD File Inchant
	 DWORD FileLoadInt3 = 0x00674BEA;
	 BYTE FileLoadInt[5] = { 0x68,0x4C,0x04,0x00,0x00 };
	 PatchEx((BYTE*)InchantMemory, (BYTE*)FileLoadInt, 5, handlGame);
	 PatchEx((BYTE*)FileLoadInt3, (BYTE*)"\x19", 1, handlGame);
     BYTE FileLoadInt2[6] = { 0x81,0xFE,0x4C,0x04,0x00,0x00 };
	 PatchEx((BYTE*)InchantMemory2, (BYTE*)FileLoadInt2, 6, handlGame);

	 //Bo Qua Yeu Cap Nhap 3 Ky Tu
	 DWORD ByPassRequestCharacter = 0x0042770A;
	 PatchEx((BYTE*)ByPassRequestCharacter, (BYTE*)"\xEB\x47", 2, handlGame);
	 DWORD ByPassRequestCharacter2 = 0x00410E6F;
	 PatchEx((BYTE*)ByPassRequestCharacter2, (BYTE*)"\xEB\x4D", 2, handlGame);

	 //Open Over Index
	 DWORD OverIndex = 0x0071D5AF;
	 BYTE OverIndex1[4] = { 0x4E,0x02,0x00,0x00 };
	 PatchEx((BYTE*)OverIndex, (BYTE*)OverIndex1, 4, handlGame);

	 DWORD OverIndex2 = 0x71D5D2;
	 BYTE OverIndex21[4] = { 0xB4,0xD0,0x60,0x01 };
	 PatchEx((BYTE*)OverIndex2, (BYTE*)OverIndex21, 4, handlGame);

	 //
	 LPVOID Niojwj = (LPVOID)VirtualAllocEx(handlGame, NULL, 300, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);

	 VirtualProtectEx(handlGame, (LPVOID)Niojwj, 300, PAGE_EXECUTE_READWRITE, &oldProtect1);

	 LPVOID Niojwj2 = (LPVOID)VirtualAllocEx(handlGame, NULL, 10010, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);

	VirtualProtectEx(handlGame, (LPVOID)Niojwj2, 10010, PAGE_EXECUTE_READWRITE, &oldProtect1);

	  BYTE Key[257] = { 100,101,102,103,104,105,106,107,108,109
						,110,111,112,113,114,115,116,117,118,119
						,220,221,222,223,224,225,226,227,228,229
						,130,131,132,133,134,135,136,137,138,139
						,80,81,82,83,84,85,86,87,88,89
						,20,21,22,23,24,25,26,27,28,29
						,90,91,92,93,94,95,96,97,98,99
						,180,181,182,183,184,185,186,187,188,189
						,190,191,192,193,194,195,196,197,198,199
						,200,201,202,203,204,205,206,207,208,209
						,230,231,232,233,234,235,236,237,238,239
						,210,211,212,213,214,215,216,217,218,219
						,140,141,142,143,144,145,146,147,148,149
						,70,71,72,73,74,75,76,77,78,79
						,150,151,152,153,154,155,156,157,158,159
						,160,161,162,163,164,165,166,167,168,169
						,170,171,172,173,174,175,176,177,178,179
						,0,1,2,3,4,5,6,7,8,9
						,10,11,12,13,14,15,16,17,18,19
						,30,31,32,33,34,35,36,37,38,39
						,60,61,62,63,64,65,66,67,68,69
						,120,121,122,123,124,125,126,127,128,129
						,40,41,42,43,44,45,46,47,48,49
						,50,51,52,53,54,55,56,57,58,59
						,240,241,242,243,244,245,246,247,248,249
						,250,251,252,253,254,255,256
						};
	 PatchEx((BYTE*)Niojwj, (BYTE*)Key, 256, handlGame);

	  BYTE Key2[10000] = {0xBD,0x9D,0x32,0x57,0x70,0x96,0x30,0x9E,0x17,0x7C,0x8,0x45,0x13,0x2E,0x8F,0x0B,0xF0,0x1F,0xA9,0x2B,0xE9,0x7D,0xE2,0x0F,0xDB,0xC4,0xF3,0x9F,0x84,0xBE,0xD0,0x77,0x1B,0x76,0x2,0xAE,0xCD,0x28,0xCF,0xC1,0x88,0xBC,0x17,0xFE,0x70,0xD5,0x29,0x27,0x6D,0xE8,0xAD,0xB0,0x45,0x7E,0x2,0x41,0x87
,0x13,0xA8,0xDE,0xE4,0xA9,0xB3,0x5C,0x2D,0x9A,0x95,0xA8,0x6B,0x93,0x18,0x52,0x97,0x64,0x25,0xFA,0x39,0xA7,0x5,0x20,0x47,0xA5,0xAC,0xDB,0xF5,0xAF,0xED,0x0D,0x0A,0x80,0x56,0xE3,0x6E,0xA3,0x88,0xA7,0x62,0xF8,0x3E,0x9C,0x82,0xCD,0x88,0x37,0xF5,0x9B,0xB3,0xBE,0xD2,0xE3,0x7C,0xDA,0x16,0x6A
,0xD7,0x57,0xDD,0xAB,0x50,0x20,0x3C,0x85,0x99,0xB5,0x5D,0xD9,0x47,0x23,0x58,0x4F,0x3C,0xC7,0x61,0xC1,0xDD,0xEA,0xB5,0xB2,0x8B,0x80,0x5,0x2F,0x56,0xEB,0x8A,0x86,0xAD,0x63,0xCD,0x56,0xCB,0x98,0x19,0x16,0x97,0x39,0x9E,0xEC,0xF5,0x2A,0x78,0xC0,0x12,0xD3,0x53,0x5F,0x94,0x79,0x9,0xC0,0x77
,0xFE,0xF9,0x24,0x5E,0xFB,0x6F,0x17,0xFD,0x91,0xAE,0x2E,0xB4,0xDF,0x45,0x7E,0xAE,0x8F,0x0C,0x87,0xD8,0x47,0x63,0xAB,0xEB,0x82,0x4E,0x3,0xCE,0xAD,0xC4,0x79,0xAB,0xE5,0x3,0x12,0xE1,0x5A,0x14,0x57,0x47,0xA4,0x6C,0xB4,0xC4,0x5,0xD2,0xD2,0xE6,0xDE,0x6D,0x9D,0x4E,0x8B,0x22,0x36,0x9A,0xA2
,0x31,0x53,0xDD,0xDA,0x31,0x4F,0x5,0xDC,0x58,0x90,0x5C,0xDB,0x39,0x54,0xAB,0x73,0xD3,0xB8,0xDF,0xA1,0x36,0xEB,0xEF,0x5E,0x6C,0x6C,0xE4,0x93,0x27,0x4B,0x99,0x4,0xBF,0x3D,0x37,0xDE,0xF4,0x82,0x6,0x9E,0x16,0x7E,0x6F,0xE1,0x2,0xDE,0xFB,0xCE,0xA6,0x47,0x11,0xD3,0x51,0x6C,0x22,0x40,0x9E
,0x75,0x52,0x80,0x49,0xA1,0x8,0x81,0xAB,0xF5,0x79,0x1D,0x27,0x1C,0xD6,0xE5,0x4A,0x8,0xDE,0x51,0xFC,0x8D,0xA9,0x98,0x82,0xB9,0x87,0x4A,0x69,0xBF,0x7B,0xCC,0x7D,0x86,0x72,0xFA,0xCB,0xB1,0xAE,0x3,0x8A,0xFB,0x6D,0x81,0x3F,0xE6,0x50,0x77,0xDE,0x96,0x9E,0x96,0x20,0xC4,0xD7,0xB8,0xF0,0xB5
,0xA1,0x2D,0x2C,0x1B,0xA2,0x48,0x6F,0xB3,0x49,0x3A,0x55,0xC5,0x3,0x6E,0xD6,0x17,0xFD,0x83,0x25,0x7E,0xEA,0x22,0xAF,0xE4,0xC7,0xA9,0xC4,0xA9,0x47,0x1F,0x66,0x23,0xE0,0x39,0xB3,0x74,0xE9,0x6,0xBF,0x56,0x4,0xF0,0xF8,0xE8,0x1B,0xB7,0xF9,0x52,0x46,0x1B,0x1D,0x3D,0xCC,0xB9,0x7C,0xF4,0x99
,0x9,0xB3,0x2F,0x69,0xBE,0x3A,0x32,0xEE,0xAD,0x7D,0x92,0x48,0x5F,0xA2,0x15,0xF3,0x68,0x2E,0xEE,0xBA,0xDE,0x40,0x4,0x7F,0xCE,0xE0,0x4C,0xBD,0x1C,0xED,0x0E,0x7B,0xB7,0x1A,0x0D,0x51,0x9A,0xB0,0x5E,0x9D,0x54,0x6F,0xFD,0x5C,0xB5,0x35,0xD8,0x9C,0x67,0xD6,0x75,0x49,0xE2,0xE0,0xCB,0x13,0xAB
,0x87,0x97,0x35,0x2F,0x91,0xBA,0x1,0x4B,0x89,0xC3,0xBB,0xBA,0xF2,0x69,0xE8,0x7B,0xDB,0x0B,0x6C,0x71,0x78,0xD8,0x9D,0x42,0x3D,0xDF,0xDA,0xD2,0xF9,0x8B,0x90,0x45,0x94,0xDA,0x4C,0xE0,0xE0,0xD8,0xDE,0xD2,0x1,0x9D,0x11,0x2C,0x14,0x5D,0xF3,0xFB,0x75,0xD2,0x6B,0x4,0x5E,0x8D,0xC4,0xCF,0x11
,0x5C,0x27,0xBD,0x90,0x76,0xAA,0xB5,0xF4,0x92,0xC7,0x24,0x3D,0x87,0xF8,0xEE,0xE5,0xAA,0x5C,0x9,0x0C,0x8A,0x9,0x38,0x60,0x3A,0xED,0xE6,0xB2,0xBC,0x4,0x76,0x69,0xDE,0x8F,0xC0,0x92,0xFE,0x45,0xA4,0xF8,0x4,0x12,0xF5,0xEB,0x2B,0x57,0xC9,0x5,0xC1,0x55,0x6B,0xBE,0x8C,0x9A,0x15,0x1F,0xE9
,0x34,0x9D,0x38,0x72,0x7C,0x1E,0xC9,0x26,0x1D,0xFC,0xD7,0xE3,0x63,0x3D,0x60,0x40,0x3F,0x60,0x20,0x76,0x2A,0x0C,0x92,0x88,0x57,0x7F,0xF4,0x45,0x42,0x5,0xA2,0x58,0x27,0xAD,0x91,0x1,0x6E,0x39,0x1E,0xB4,0x85,0xA2,0x1D,0x2A,0x35,0x33,0x49,0x1D,0x0B,0x6D,0xEF,0x60,0xC9,0xEE,0x2F,0x64,0x68
,0x73,0x61,0xDC,0xC0,0x1,0x44,0xBB,0x56,0xAA,0x47,0x7,0x4A,0xC2,0xB1,0xD7,0x1D,0xE2,0x9,0x21,0x0F,0xC2,0x40,0x39,0xD7,0x31,0x5B,0x29,0xB6,0x31,0xD8,0x85,0x38,0x7C,0x9E,0xC5,0x6,0x86,0xBC,0x19,0xF5,0x2D,0xD1,0x63,0xA1,0x3E,0x40,0xA6,0xE8,0xF7,0x29,0x5C,0x71,0xAF,0x37,0xFA,0xB5,0xCB
,0x4A,0x55,0x98,0x16,0x5,0xE5,0x1A,0xDB,0x30,0xBA,0x20,0x9F,0x3B,0x3B,0xE9,0xD5,0x89,0x46,0x33,0xB2,0xEA,0xF9,0x90,0x25,0xF1,0xB9,0x3,0x48,0x8C,0x92,0x51,0x60,0x8F,0xBA,0x40,0x6F,0x81,0x46,0x0D,0xDA,0x7B,0xBD,0x4B,0xDB,0x49,0xB4,0xB6,0x51,0xB6,0x22,0xE2,0xB3,0x3C,0x7A,0x67,0xB6,0xC3
,0x62,0x90,0x61,0x2,0xF5,0x0D,0x1D,0xDF,0x6D,0xA9,0x91,0x8F,0x30,0xB4,0xC4,0xD4,0x18,0xE9,0x56,0xDC,0xDF,0x8D,0x4D,0x81,0xB0,0xBB,0x5E,0x22,0x92,0x65,0xFD,0xE4,0xBF,0x13,0x53,0xBE,0xE1,0xE5,0x37,0xDA,0xCC,0xF1,0x5A,0xD4,0xF1,0x61,0xF1,0x77,0x59,0x86,0xAB,0x5B,0xE2,0x46,0x84,0x2,0xFA
,0xF2,0x52,0xF5,0x76,0x2D,0x5B,0x82,0x8C,0xA6,0x7,0x5D,0xE2,0x8B,0xE9,0x0D,0x81,0x60,0x33,0x5B,0xA8,0x6,0xC3,0x86,0x5C,0xD3,0x6,0x85,0xA4,0x5F,0xB7,0x30,0x48,0xE7,0xB9,0x7C,0x26,0x8,0x2C,0xB2,0xC1,0x93,0xE5,0xD1,0x43,0x51,0x7F,0xE0,0x7C,0x6A,0x7,0x9A,0x33,0x43,0x9F,0x9,0x45,0xAB
,0x17,0x8D,0xD6,0x1,0xB1,0xF0,0x2E,0x1B,0x48,0xD9,0x63,0xE4,0xDE,0x73,0xA8,0x48,0xE3,0x82,0x1A,0x32,0x42,0xB2,0xF1,0xA3,0x4E,0x6D,0x37,0x5A,0xF5,0xF1,0x7D,0x14,0x13,0x0B,0xF8,0xF8,0x43,0x13,0x86,0x3B,0x35,0xA3,0xBB,0x63,0xE4,0xAC,0xCC,0x5A,0x80,0x3A,0x46,0xD1,0x87,0xC0,0x66,0xCE,0x6
,0x1B,0x2B,0x3D,0x3D,0x1C,0xB4,0x32,0xBD,0xFA,0x4B,0xC0,0x43,0x49,0x76,0x1D,0x48,0xCE,0x86,0xBD,0xBC,0x29,0x5,0x8B,0xBC,0x2D,0x70,0x7B,0xAB,0x34,0x9F,0xD3,0xB2,0x4F,0x41,0x7C,0xF5,0x48,0xE3,0x5B,0x5F,0xC4,0xD7,0x78,0x94,0x2C,0x6C,0xBB,0xC6,0xC1,0xDC,0xE3,0xE7,0xA0,0x6E,0xBB,0x26,0xF1
,0x6,0x22,0x17,0x1B,0xAC,0xC6,0x68,0x1F,0x7F,0x5A,0xA4,0x24,0x53,0x0B,0xC5,0x3A,0x72,0xE5,0x22,0x45,0x18,0x3D,0x86,0x3F,0xA3,0x62,0xF0,0xB1,0x72,0x1,0xD1,0x92,0x3C,0x62,0x32,0x6F,0xE5,0xDB,0xB7,0x8,0xAD,0xBA,0xDA,0x3B,0x85,0xDE,0x4C,0x8D,0xB6,0x79,0xDB,0xFB,0x77,0xED,0xDE,0x7C,0x8B
,0x76,0x6A,0xDE,0xB8,0x8D,0x5A,0x74,0x17,0x80,0x77,0x11,0xEB,0x73,0xC2,0xED,0x5B,0x2C,0x30,0x0D,0x4E,0xA8,0xD0,0x63,0x8,0x4C,0xBA,0xA8,0xCD,0x42,0xB2,0x11,0x6,0x1,0xF2,0x9B,0x3B,0xBE,0xE4,0x6B,0x56,0x65,0x5F,0xC4,0xA6,0x1A,0x2E,0x20,0xE2,0xE0,0x44,0xF9,0xC8,0x58,0xBC,0xBD,0x8C,0x1C
,0xC0,0x83,0xA6,0xD3,0x6F,0xFC,0x52,0x8B,0x2B,0x3E,0x37,0x1F,0x1E,0xB5,0x8D,0xA6,0x73,0x40,0x44,0x7C,0x26,0x53,0x64,0xB9,0xBB,0x4B,0x58,0x7,0x2,0x0D,0x3B,0x4F,0xF4,0xB3,0xD6,0x6C,0x5,0xAC,0x72,0x45,0xBE,0xFB,0x33,0x5D,0x39,0xF2,0x13,0x81,0x41,0x18,0x3D,0x75,0x65,0xA1,0xC4,0x3B,0x4A
,0x36,0xA1,0xF4,0x16,0x2C,0xCE,0xF6,0x6F,0x44,0x79,0xF5,0xEB,0xEE,0x34,0x0B,0x61,0x6,0xF9,0x4C,0xF5,0x30,0x6,0xD4,0x5A,0xCB,0x51,0x5,0x26,0x94,0xBC,0x94,0xA0,0xCF,0x9B,0x93,0xF8,0x55,0xC9,0xCA,0x41,0x27,0xEF,0x85,0x2A,0xFC,0x2E,0x59,0xCF,0x62,0xA2,0xE8,0x93,0xDE,0x4A,0x31,0x5D,0xC5
,0x89,0x53,0x32,0x18,0xBF,0x97,0x84,0x1E,0x7D,0x6F,0x36,0x30,0x74,0x29,0x8E,0x3B,0xEA,0x56,0x47,0x77,0xBA,0x60,0xC8,0x0E,0x8C,0x61,0xE2,0xDB,0x91,0xC4,0xEF,0x55,0x34,0xAE,0xD5,0x7D,0x0F,0xC4,0xB9,0x0D,0x0A,0xC7,0x46,0xD9,0xCE,0xE3,0x1D,0x83,0x44,0x5D,0xCE,0x55,0x68,0xFE,0xEC,0x20,0xDD
,0x5C,0xFD,0x35,0x69,0x51,0x70,0xC1,0xB2,0xE8,0x95,0xE6,0x84,0xB4,0x41,0x12,0x64,0x49,0xF6,0x80,0xA6,0xF4,0x50,0x4E,0xEB,0x80,0x7A,0xEF,0x41,0xE8,0x7C,0x9E,0xA1,0x1,0x3A,0x67,0x33,0xC8,0xB4,0x85,0xFA,0x88,0xA2,0xC4,0x53,0x83,0xD9,0x61,0xE9,0x0F,0x90,0x49,0x94,0x45,0x1F,0x28,0xC7,0xD6
,0x0E,0x3C,0xD7,0x2E,0x2C,0x27,0xFE,0xAF,0xAE,0xDD,0x4A,0xFE,0xBD,0xF6,0x39,0x3C,0xA3,0x56,0x75,0x0E,0x4,0x8B,0x39,0x74,0x44,0xD9,0xE3,0x44,0x87,0x54,0x56,0x2F,0x64,0xDE,0x71,0x4B,0xC8,0x99,0x93,0xE3,0x28,0x86,0x2C,0xC2,0x60,0xDE,0x5E,0x70,0x83,0x0B,0xDF,0xBA,0xDD,0x73,0xDE,0x1A,0x6C
,0x64,0x42,0x24,0x32,0x1B,0xF6,0x9E,0x85,0x10,0xB5,0x81,0xC1,0xE2,0xD7,0x67,0x8D,0xD1,0xBA,0xAA,0x17,0x0D,0x0A,0x40,0xDE,0x60,0xD2,0xF0,0xB0,0x2E,0x0D,0x0A,0x4D,0xEC,0x8A,0xA2,0xC3,0xDB,0x6C,0xCC,0xF8,0x7D,0x9A,0x82,0xB4,0xE0,0x33,0xF5,0x34,0x44,0xFB,0xC1,0x40,0x15,0x4,0x4C,0x9E,0x88
,0x76,0x34,0x6A,0xDE,0x5F,0x47,0xDB,0x1C,0x49,0xD2,0xE8,0x33,0x31,0xC5,0x8F,0x71,0xF9,0x80,0xE7,0x3E,0xDB,0xCE,0xF7,0xD2,0xB0,0xD6,0x71,0x2A,0xF3,0x81,0x25,0xB2,0x30,0x30,0x7D,0x1,0x89,0x2B,0xCE,0x21,0x7C,0xBF,0x9A,0xB0,0x1C,0x65,0xD6,0x66,0x22,0xCF,0x30,0x35,0x27,0x6E,0x55,0xB0,0x13
,0x1D,0x68,0xD5,0x5D,0x92,0x5F,0xEC,0x1E,0x56,0xBF,0x96,0x6A,0xB9,0x51,0xBF,0x1D,0xB5,0x28,0xAA,0x77,0x14,0xD1,0x8F,0xB5,0xC2,0xD5,0x2B,0x27,0xE0,0x6E,0xC3,0xAC,0x2B,0xA7,0xD2,0x55,0x6A,0xC6,0x15,0xF5,0xBD,0x2A,0xE8,0x65,0x7,0x71,0x2,0x50,0x91,0x47,0x39,0x30,0x43,0x6E,0x68,0x80,0x37
,0x8D,0x4E,0x92,0x3B,0x47,0x37,0x39,0x1B,0x1D,0x9E,0xA5,0x2,0xBD,0x41,0x9D,0x5,0x22,0x8,0x8C,0x26,0x2C,0x37,0x5D,0xAF,0x16,0x41,0xE0,0x6E,0x81,0xB6,0x76,0x8A,0x6D,0x8E,0xCC,0x98,0xCD,0x84,0x95,0x92,0x17,0x7E,0xB5,0x50,0x89,0xDF,0x1C,0x50,0x78,0xCC,0x8F,0x38,0x63,0xF9,0xB9,0xFB,0x1D
,0x6C,0xC7,0x14,0xC2,0x83,0xB4,0xAA,0xF5,0xAF,0xDF,0x1A,0xD6,0x67,0xC8,0xBC,0x55,0x82,0x9C,0x5F,0x5A,0xA0,0x9D,0x51,0x5F,0xD7,0xCD,0x65,0xE1,0x2E,0xFE,0xE2,0x48,0x2F,0xCA,0xBE,0xD9,0x25,0x82,0x9,0x12,0x32,0x7E,0xEC,0x25,0xE6,0xFE,0x50,0xF5,0x7F,0x14,0x3B,0x4B,0x78,0x80,0x3B,0x74,0x93
,0x50,0xD8,0x58,0xFB,0xEE,0x5E,0xF2,0xC0,0x7C,0x2,0x52,0x34,0x4A,0x9E,0x11,0x63,0xFC,0x44,0x5B,0x4E,0x92,0x86,0x8A,0x19,0x7D,0xFA,0x59,0xA9,0x43,0xCC,0xBB,0x30,0xC0,0xD0,0x5E,0xD4,0x74,0xEF,0xDA,0x29,0x14,0x73,0x9F,0x98,0x9F,0xEE,0xAD,0x57,0x64,0x59,0x6,0x37,0xFE,0x25,0x1,0xB0,0xE7
,0xB7,0x6C,0xBC,0x8B,0x4F,0xA5,0xA4,0x74,0x87,0x7A,0x73,0xA1,0x9F,0x28,0x2C,0x70,0xB5,0x1E,0x7A,0x41,0x4,0x0D,0x0A,0xEB,0x59,0x72,0x9C,0x7C,0xEB,0x77,0xB5,0x76,0x7,0x99,0x57,0x7C,0x2D,0x8C,0x4,0xB3,0x6E,0x45,0x17,0xD8,0xB3,0xFB,0x65,0x63,0x16,0x73,0x13,0x4F,0x12,0x6F,0xAA,0xC6,0x2E
,0xD8,0x80,0x43,0x2B,0x55,0x6B,0x63,0x32,0xCE,0xCF,0x7,0x22,0xDC,0x15,0xE5,0x4E,0x59,0x82,0x4F,0x0D,0x0A,0x1F,0x8E,0x26,0x3A,0x5D,0xA6,0xD3,0x1F,0x4E,0x84,0x55,0xDA,0xE0,0xF1,0xFC,0xAC,0x16,0x4F,0x35,0x70,0x8A,0x76,0xB6,0x86,0x21,0x7D,0x8A,0x63,0x1D,0xF6,0x68,0x2F,0xA8,0x1,0x97,0xAE
,0x2A,0xF1,0x0B,0x9C,0x40,0xED,0xC8,0x6,0xE5,0x24,0x5E,0x93,0xA1,0xEF,0x72,0x6D,0x0C,0xD0,0x37,0xA3,0xBA,0x4C,0xBC,0xA3,0xEC,0x99,0xFD,0xD6,0xC0,0x83,0xA3,0xF6,0x9F,0xEB,0x41,0xE9,0x6F,0xAC,0x22,0xF1,0x4C,0x2A,0x63,0x24,0x63,0x4E,0x6B,0x7D,0x96,0x56,0x76,0xED,0x9C,0xF1,0x5B,0xAB,0x30
,0x73,0x32,0xDD,0x1A,0x44,0xFC,0x3A,0x83,0x7F,0x9,0x87,0x90,0xE3,0x23,0x97,0x7A,0x3,0x50,0xCE,0x4E,0xC9,0x32,0x97,0x79,0x57,0xAB,0xF8,0x3A,0x50,0x12,0xC1,0x59,0x75,0x6F,0x43,0xE7,0xDB,0x1D,0x47,0xA7,0x71,0x3D,0x23,0xD9,0x29,0x58,0x8C,0xE8,0x95,0xB7,0x2B,0xDF,0x2E,0xAA,0x65,0x7,0x18
,0x5A,0x8B,0x93,0xA8,0x4D,0xD5,0xDA,0x7A,0x67,0x34,0xEC,0x49,0x48,0x94,0xE6,0x7A,0x5,0x91,0x12,0x73,0x19,0x14,0x12,0xAD,0x6D,0xF3,0x1E,0xAC,0x7A,0x2D,0xA0,0xBE,0x45,0x88,0x2D,0xAC,0x4A,0x7A,0x3C,0x44,0x12,0x2,0x74,0xF2,0x88,0x45,0x24,0x33,0xC7,0xCF,0x80,0x23,0x7F,0x14,0x77,0x4,0x8E
,0x13,0x90,0xE4,0x10,0xE4,0xA7,0x5D,0x7F,0x3,0x17,0x6C,0x7,0xEC,0xF9,0x7C,0xB2,0x26,0x4D,0xA7,0xAF,0x1C,0x42,0x24,0x40,0x5,0xFA,0x3,0x74,0x24,0xA6,0x32,0x80,0x95,0x51,0xD4,0xA0,0x27,0x8B,0xE7,0x60,0x32,0xE4,0x69,0x4C,0x14,0xAB,0xB5,0xD1,0x44,0xCA,0x9F,0x5A,0x8A,0x3A,0xB4,0x62,0x79
,0xD6,0x44,0xA1,0x78,0x30,0xC4,0xF1,0xB1,0xF9,0xEB,0x2F,0x3A,0xC2,0x45,0x87,0x78,0xB9,0x84,0xAC,0x7E,0xE5,0x69,0x43,0x26,0xD3,0x78,0xE9,0xA9,0xFE,0x3B,0x76,0xA2,0xFA,0x7D,0x7A,0xF3,0xB0,0x25,0xD9,0xC7,0xAC,0xF8,0x7C,0x5,0xC6,0x36,0xDB,0x5D,0x37,0x0D,0x80,0x5E,0x47,0xFB,0x21,0xBF,0xCD
,0x3B,0x8B,0x39,0x95,0xF2,0x9,0x1F,0xCD,0xB3,0x40,0x20,0xCB,0xA9,0x73,0x5C,0x19,0x3B,0x1D,0x21,0x22,0x70,0x8E,0x91,0x8D,0xB7,0xE6,0x93,0x78,0xB4,0xC8,0x2A,0xA8,0x55,0x30,0x9D,0x8,0x4,0xE9,0xB0,0x45,0x4C,0xF1,0x31,0x2E,0x93,0x47,0x1F,0x72,0x53,0x63,0xC2,0x5E,0x88,0x18,0xEA,0x72,0xA2
,0xC9,0xA5,0x27,0xC6,0xE8,0xA9,0xDD,0x9C,0x91,0xE9,0x62,0x73,0x38,0x45,0xD7,0x18,0x62,0xFC,0x89,0x5,0x20,0xE4,0x73,0x4D,0x70,0xD4,0x11,0xFD,0x35,0x70,0x25,0x51,0xDB,0xBE,0x0B,0x4E,0x72,0xA8,0x6D,0x53,0x34,0xD3,0xC4,0x3C,0x57,0xF1,0x8C,0x55,0x23,0x8,0x97,0x10,0x16,0xAF,0x61,0x99,0x2C
,0xDF,0xD8,0x3D,0xED,0x46,0x6B,0xB1,0x92,0xB6,0xE3,0x48,0x9C,0xB7,0xDD,0x1E,0x63,0xBA,0x4C,0x34,0xEF,0xF2,0xE9,0x9D,0x90,0x7B,0x1F,0xA5,0x86,0xA4,0x0C,0x17,0x43,0x16,0x5A,0x91,0x97,0xBB,0x94,0x18,0x32,0x8,0x7B,0xA1,0xEA,0x93,0x44,0x0E,0x30,0xA6,0x23,0x25,0xFA,0xAC,0x5,0x2,0xD1,0x27
,0xE6,0xA6,0x18,0x10,0xC1,0x6,0x2D,0x52,0x42,0x38,0xC2,0x4C,0x75,0x43,0xBD,0xDB,0x9C,0x2E,0x2A,0x1E,0x34,0x98,0x75,0x46,0x7A,0xB6,0xB1,0xAC,0x73,0xEC,0xD0,0x85,0xC7,0xDA,0xB4,0x6A,0x63,0x13,0x28,0x1D,0x47,0x4A,0x54,0x97,0x6D,0x55,0x0D,0xFB,0x22,0xA5,0x66,0x60,0xCE,0x9C,0xD6,0xF2,0x8C
,0x7D,0x98,0xA4,0x5C,0x39,0x46,0xB7,0x99,0xEE,0x99,0x52,0x53,0x51,0x3C,0x9B,0x26,0xD5,0x72,0x66,0x61,0xDC,0xB4,0xE2,0xE8,0xA9,0xFC,0x90,0xBF,0x62,0xC1,0xAC,0x98,0xF7,0x79,0x76,0x68,0x2B,0xA8,0x87,0x3F,0x78,0x3D,0x8E,0x7C,0x3A,0x38,0xA6,0xA3,0xC6,0x8A,0xA6,0xC0,0xD0,0x19,0xA9,0xD8,0xC6
,0x8F,0x6,0x32,0x97,0x65,0x19,0xE9,0x89,0x6A,0x1F,0xC8,0x67,0x44,0x68,0xA4,0xF2,0x67,0x0C,0x58,0xB2,0xB0,0xB7,0x8D,0xF8,0x5A,0x75,0x83,0x8B,0x5E,0x1A,0xE1,0x6D,0x7,0x41,0xE0,0x55,0xBC,0x87,0xD0,0x7B,0xC5,0xD0,0x3A,0x2,0x21,0x70,0xBF,0xCA,0x27,0xE1,0xDC,0x5,0x8,0xEF,0xB9,0x2C,0xDA
,0x11,0x25,0xD3,0x77,0x9B,0xFC,0xF5,0x95,0xF1,0x0E,0x1A,0x8C,0xEE,0xA8,0x6,0x30,0xDF,0xFC,0x73,0x15,0x64,0x88,0x48,0xD2,0x53,0x93,0xE1,0x62,0x21,0x4,0x5,0x58,0xE1,0xAB,0xD4,0x1E,0x4B,0x26,0xA7,0xB4,0xE8,0x7F,0xCA,0x5D,0xF1,0xCE,0x42,0x93,0xC6,0xDB,0x9A,0xBC,0xAC,0x4,0xA4,0x8,0xBE
,0x84,0x6A,0xAE,0xB8,0x53,0x17,0x61,0x77,0xA6,0x28,0xD1,0xDE,0x66,0xA7,0x28,0x21,0x86,0xB6,0x83,0xD5,0xB2,0x36,0x26,0x2B,0x2A,0xC3,0x7E,0x58,0x3E,0xFC,0xA9,0xB9,0x45,0x1C,0xA4,0xD5,0x93,0xD6,0xCD,0x8C,0x2E,0xC3,0xDA,0xC2,0xCC,0x9,0xF5,0xBA,0xF8,0x98,0x1A,0x8D,0xBD,0xCB,0x64,0xDA,0xC1
,0x9D,0x85,0x25,0x47,0x58,0xE7,0xF3,0xF4,0xE3,0xC2,0x3B,0xB9,0xA7,0xBB,0x2,0xDC,0x11,0x4D,0x2,0x71,0xC7,0x73,0x2,0x3D,0x8B,0x2,0xAB,0x70,0xD8,0x0F,0xC6,0x4,0x43,0xC8,0x73,0x3E,0xA2,0x3A,0x54,0x35,0x15,0x50,0x51,0xC4,0xCF,0x96,0xDD,0xDB,0xDE,0xFD,0x4F,0x72,0xC3,0x38,0x69,0x36,0x1A
,0xE8,0x71,0x48,0x19,0x34,0x0E,0xDA,0x34,0x1,0x4A,0x43,0xB2,0x5D,0xDA,0x32,0x6B,0x5C,0x30,0xBC,0x7E,0x0C,0x52,0xD8,0x5E,0x8F,0x0D,0xF4,0xC7,0x29,0x8B,0x54,0x30,0x3E,0xC7,0xCC,0x2E,0x28,0xF4,0xBB,0x58,0xB5,0x5D,0x82,0x48,0x53,0xB8,0xA0,0x8,0xBB,0x92,0xA6,0xCF,0x15,0xB5,0x0C,0x2D,0x6B
,0x3C,0x2E,0x86,0x6A,0x2B,0x92,0x27,0x3F,0x3D,0x93,0xA9,0x84,0xE8,0x9C,0x5,0x35,0x8,0x30,0x6,0x6E,0x44,0xBD,0x77,0x0F,0xD9,0x9E,0xBF,0xED,0x8E,0x2F,0x52,0xC0,0x8E,0x51,0x99,0x72,0x31,0x6F,0xB9,0xEE,0x8,0x34,0xF8,0x2D,0x7B,0x4,0xED,0x91,0x47,0x87,0x7D,0x43,0xFA,0x4E,0xAA,0xBC,0x13
,0xC0,0x38,0x22,0x7E,0x8A,0x3A,0x8A,0x57,0x9E,0x83,0xF9,0xB1,0xF2,0x16,0x17,0x0C,0x51,0x7D,0x51,0x6D,0xF8,0x38,0xA7,0xC7,0xCC,0x24,0xAE,0x86,0x9B,0x2,0xF2,0xF1,0x31,0x9,0x81,0x59,0xED,0xB8,0x87,0x94,0x5C,0xAC,0x4,0xE8,0xB0,0xC4,0x4A,0xCB,0x91,0x77,0x5F,0xA0,0x11,0x6C,0x1D,0xD8,0x48
,0x56,0xD5,0xAF,0x7C,0x39,0xA9,0xD0,0x1E,0xE9,0x22,0x17,0xAD,0x0E,0x43,0xEA,0xDA,0x68,0xD7,0x36,0xBD,0xC1,0xE3,0x7B,0xA7,0x17,0x18,0x21,0x62,0x79,0x61,0x77,0x50,0x5B,0x2C,0x74,0x4C,0x7F,0x9F,0xB4,0xBB,0x7A,0x62,0xD7,0xAA,0xD8,0x0B,0xA9,0x72,0xF0,0x9,0x27,0xBA,0x69,0x8,0xED,0x4C,0x6C
,0x7C,0x26,0x92,0xB9,0xA3,0x43,0x3F,0x5F,0x5F,0xEB,0xF0,0x68,0x5B,0x47,0x49,0x44,0xEB,0xE4,0x49,0x2D,0xF7,0xC5,0x81,0x69,0x70,0x6A,0xCF,0x82,0x9E,0xA6,0x42,0x74,0xD8,0x9,0xC9,0xEC,0xE3,0x87,0x76,0x7B,0x73,0x62,0xD4,0xED,0x2B,0xDD,0x0D,0x0A,0xB4,0xB0,0xB0,0x77,0x7C,0xEE,0xDA,0x6E,0xD8
,0x31,0xDC,0xB0,0x3C,0x5B,0xCB,0x51,0x16,0xC2,0x51,0xBC,0x3F,0xE8,0x31,0x65,0xAC,0xAA,0x45,0xEC,0x74,0x26,0x75,0x4B,0x27,0xE5,0xCF,0xAB,0xA5,0x94,0x31,0xA8,0x33,0xB2,0x83,0x90,0x30,0xB8,0x2B,0x4B,0x1A,0x14,0xA7,0xA1,0x41,0x3C,0xDD,0x79,0xD6,0x93,0x27,0xB5,0xC3,0x29,0xAC,0x64,0xDA,0x0C
,0x6,0xE4,0xEB,0x5A,0xB5,0xA8,0x52,0xA8,0x83,0x34,0x59,0xFB,0x3F,0x0D,0x0A,0x35,0xF1,0xE5,0x42,0xE7,0x35,0xCD,0x34,0xCA,0x7,0xCC,0x35,0x13,0xDE,0xD2,0xAE,0xF4,0xEA,0x39,0xAA,0xFB,0x7A,0xFC,0xEB,0xF9,0x0D,0x36,0xDE,0x22,0x2F,0x26,0x6D,0x4,0xC5,0x5,0xDE,0x97,0xED,0xEC,0x15,0x3F,0x1C
,0x18,0xF1,0xF7,0xB3,0xDB,0x96,0x89,0x93,0x7C,0x0D,0x0A,0xED,0xF4,0x46,0xFC,0xD0,0x23,0x10,0x66,0x59,0x24,0xA7,0x60,0x0D,0x47,0x2B,0x54,0x19,0x4C,0xC7,0xA8,0xCE,0x40,0x18,0x8,0x7B,0xDE,0x63,0x81,0x8D,0x5A,0x9,0x97,0x3C,0x94,0x73,0x69,0x6B,0x6E,0xB3,0x1F,0x32,0x77,0x33,0xD2,0xB5,0x6D
,0xA3,0xF4,0x9C,0xFC,0x9D,0x80,0x3,0x1D,0x6,0x0D,0x6,0x5F,0xA8,0xE8,0xE3,0xE2,0x3B,0x74,0xCB,0xE6,0x16,0xC7,0x44,0xC8,0xEF,0xE9,0x52,0x86,0xDE,0xC0,0x58,0x80,0xE0,0xA6,0xBD,0x77,0x4C,0x3C,0x46,0xA7,0x3D,0x29,0x6B,0xFB,0x9B,0x4D,0x52,0x13,0x9E,0x45,0xEA,0x47,0x63,0xB6,0xB9,0x45,0xB5
,0x33,0xBA,0x82,0x6E,0x27,0x2F,0x0D,0x0A,0x85,0xD1,0x79,0xF4,0x5D,0x7C,0xF0,0x21,0x46,0x9,0xE2,0x43,0xCF,0x2D,0x88,0x1A,0xE2,0x38,0x50,0xD3,0x36,0xDF,0x1A,0x4B,0x1E,0xE3,0xDD,0x5B,0x44,0x14,0x5D,0xDD,0x52,0x6B,0x3C,0x7B,0x4,0xE9,0x44,0x0C,0xCE,0xDC,0x15,0x8B,0x7E,0x19,0x22,0x72,0xE0
,0x5,0x16,0x78,0x18,0xF0,0x92,0x7F,0x6D,0x7B,0x8F,0xCC,0x74,0x94,0xEE,0x17,0x33,0xE9,0xD4,0xD7,0x19,0x3B,0x5F,0x38,0xAF,0x66,0x0B,0xF4,0x8C,0xA4,0x9B,0xD8,0x99,0xE8,0xC0,0xE1,0x30,0xA0,0x44,0xD7,0x0E,0xF6,0x14,0x57,0xB2,0xC4,0xD9,0x1C,0x3D,0x54,0x7D,0xA1,0x1D,0x2B,0x53,0xBA,0xE1,0xE4
,0x35,0x64,0x84,0x70,0x5D,0x55,0x37,0xAA,0x3E,0x8C,0x5A,0xB2,0x2D,0x8D,0x8E,0xDD,0x10,0x4A,0x63,0xC4,0xF7,0x97,0xAE,0x33,0xD7,0x2F,0x3C,0x7D,0x19,0xF0,0x92,0x29,0x72,0x8B,0x9A,0x21,0xB9,0x3B,0x6,0x99,0xE5,0xB9,0x12,0xE8,0x35,0x21,0xB1,0x44,0x8F,0xB1,0x87,0xBF,0x10,0x7B,0xEA,0x95,0xEA
,0xAB,0x46,0xFC,0x89,0x82,0x0E,0x84,0x5,0xDF,0xAA,0x61,0xE6,0x1F,0x81,0x88,0x72,0x70,0x7D,0x15,0x33,0x5B,0x53,0xBB,0x0D,0x70,0xD3,0xE1,0xC8,0x6,0x7E,0x19,0x2C,0x2,0xB5,0x7B,0x6F,0x5C,0xC9,0xD4,0x96,0x9E,0x39,0xE6,0x6,0xDF,0x48,0xD7,0x0C,0x82,0x67,0x0F,0xDB,0x4F,0x7F,0x6B,0x65,0x24
,0x9F,0x6C,0xBC,0xB9,0x1E,0xE0,0x6D,0xE3,0xA8,0xD5,0x77,0xB2,0x63,0x7C,0x39,0xD1,0x71,0x71,0x1B,0xA9,0x27,0x70,0x39,0x85,0x48,0xB4,0xD5,0x57,0x69,0xF6,0xE2,0x38,0xE5,0x99,0x66,0x62,0xA4,0x94,0xF5,0xD0,0xEC,0xEF,0x36,0x7,0xA3,0x69,0x6B,0x44,0x24,0xC4,0x1C,0xE6,0x9,0xBD,0xF4,0xDD,0x3E
,0xEB,0xA9,0x15,0x6B,0x93,0x33,0xDE,0x54,0xB5,0x26,0x15,0x19,0x68,0x6D,0x10,0xF3,0xB5,0x2C,0x19,0x78,0x10,0x0D,0x8E,0xCF,0xAE,0xDE,0x55,0x0C,0xB6,0x9A,0xB5,0x0C,0xA8,0xC8,0x72,0x9,0xF3,0x6A,0x17,0x36,0x14,0x4A,0x2C,0xA6,0x16,0xE2,0xA9,0xD5,0x18,0xBB,0xFB,0xF8,0x6C,0x6B,0x12,0x95,0x5
,0x24,0xED,0x6A,0xD8,0xEF,0xF7,0x1F,0xDD,0x8E,0xA0,0xE8,0x5D,0x0C,0x9D,0x84,0x8,0x7,0x4D,0xA3,0xDE,0xD1,0x75,0x54,0x12,0x36,0x4,0x61,0x3,0x38,0xF0,0x44,0xA3,0x91,0xFD,0x92,0x2A,0x20,0x63,0x91,0x8E,0x3B,0x1B,0xE3,0x92,0xFA,0x2,0xDE,0xF8,0x79,0x62,0x8A,0x8D,0x1A,0x10,0xD5,0xA6,0xCE
,0xCE,0x1C,0xDE,0x8F,0x1E,0x4C,0x6F,0xB7,0x15,0x12,0x3B,0xC1,0x75,0x1C,0xBE,0xF8,0x9F,0xEE,0xE8,0x8A,0x94,0x8C,0x4E,0xA3,0x9E,0x1,0x76,0x3,0xDA,0x71,0xE4,0xA7,0x41,0xB1,0x94,0xF2,0x4E,0xCB,0x58,0x12,0x9,0xA1,0x23,0xD1,0x77,0x26,0x7F,0xDC,0x3C,0x31,0x38,0x6E,0x71,0x7F,0x77,0x72,0x7F
,0xD2,0x71,0x41,0x9,0xDF,0xDD,0xC2,0x8B,0xE0,0x42,0x50,0x2,0x84,0x52,0xFB,0xF8,0x23,0x7B,0xB2,0x7B,0xBC,0xE6,0xDB,0x40,0xF2,0xDC,0xC5,0x79,0x4B,0xEE,0xBB,0xC8,0xF4,0xE0,0xEB,0x89,0x7E,0xAE,0x12,0x22,0x80,0x8B,0xF6,0x7B,0xE3,0x59,0xBF,0x4E,0x9E,0x6E,0x37,0x59,0x96,0x17,0xDC,0x47,0xA4
,0xC3,0x1C,0x5B,0x32,0x38,0x38,0x86,0x84,0xB0,0x84,0x1C,0x59,0x77,0x67,0xC1,0x9D,0x9A,0xA4,0xCE,0xFA,0x74,0x8E,0xB7,0x43,0xA7,0x8D,0xB0,0x12,0x35,0xA7,0x32,0xE5,0x5B,0x5B,0x87,0x1A,0xD8,0x8D,0x0B,0xC4,0x53,0xF2,0x45,0x25,0x65,0x84,0x71,0x61,0x26,0x7B,0xCF,0x88,0xAF,0x7F,0x2F,0x6C,0x5F
,0x58,0xEC,0x31,0x6F,0xEF,0x2A,0x73,0x99,0xDB,0x36,0x92,0x63,0x4A,0xF3,0x26,0xC0,0x89,0x50,0x35,0xAA,0x0E,0x7E,0x25,0x6B,0x8,0x1F,0xEB,0x21,0x91,0xF0,0x97,0x54,0x99,0x3D,0xA2,0xFC,0x4D,0xA1,0x3D,0x4,0x5D,0x6F,0xD3,0x74,0xDB,0x25,0x37,0x7E,0x3,0x53,0x8E,0x83,0x91,0x7F,0x67,0x2A,0x39
,0x24,0x34,0xE5,0xAE,0x88,0x6D,0xCB,0xBF,0x9B,0xBF,0x21,0x45,0x54,0x50,0x9E,0x7,0xF8,0xBD,0xA8,0xA6,0xC6,0xB7,0x94,0x7A,0x2A,0xDA,0x32,0x83,0x52,0xCC,0xB2,0x6E,0x0D,0x0A,0x13,0x26,0xA5,0xC3,0xC2,0x94,0x9F,0xC6,0x82,0x21,0x3C,0x3F,0xEC,0xFA,0x68,0x69,0xD8,0xAB,0xE6,0x50,0x8C,0x95,0x80
,0x7D,0x6D,0x4,0x47,0x1B,0x28,0xD8,0x68,0xC9,0xE4,0x0B,0x2E,0xBA,0x8A,0x4,0x75,0x48,0x8E,0x49,0x89,0xB0,0x71,0x30,0x77,0x1A,0x54,0x2E,0xD0,0x7C,0xC1,0x9A,0x1,0xB2,0x3A,0x4C,0x1E,0x4A,0x69,0xF7,0x54,0x23,0xAC,0xC7,0xE8,0xCD,0xE8,0xF7,0xE7,0x73,0x37,0xF3,0x65,0x39,0x6A,0xDF,0x92,0x2D
,0x4,0xE9,0x71,0x50,0x8C,0x48,0x57,0x7,0xE9,0x63,0x37,0x91,0xB4,0xF4,0xC3,0x9B,0x17,0xA1,0x5E,0xA4,0x25,0xD8,0x2,0x5D,0x6D,0x80,0xF0,0xB3,0x8B,0x35,0x84,0x8F,0x6B,0xA0,0xC7,0x16,0x47,0xC7,0x42,0x71,0xBE,0xAE,0xA6,0xF2,0x51,0x3C,0xAF,0x83,0x76,0xD7,0xFE,0x2D,0xB1,0x96,0x3B,0xE9,0xD0
,0x57,0x38,0x40,0xAC,0xDB,0x78,0xF0,0xB1,0x1B,0xB6,0x60,0x79,0xCC,0xED,0xB8,0xB0,0x99,0x6F,0xB4,0xA8,0xBF,0x7E,0xEE,0xC7,0xBA,0x21,0xA2,0x24,0xA0,0x6C,0xBF,0xA5,0xE3,0x2C,0x47,0xD1,0x0E,0x6,0xCE,0xA6,0x2A,0x0D,0x0E,0xCB,0x8F,0xE9,0x6A,0x57,0x97,0x76,0x5F,0x54,0xFE,0xFA,0xBF,0xAC,0x9D
,0x8,0x81,0x3F,0xFB,0xDE,0x50,0xDB,0x9F,0xA5,0x7D,0x23,0x8B,0x2D,0x6A,0xC0,0xA6,0x7B,0x40,0x19,0xD4,0x2F,0xD9,0xF0,0x22,0x86,0xCC,0x12,0xFD,0x57,0x9A,0x72,0xDB,0xD5,0x92,0xE8,0x2D,0x40,0xD3,0x7,0x0C,0x69,0xDA,0xF5,0x9D,0x53,0xD0,0x1E,0x73,0x9F,0x64,0x57,0xE2,0x1F,0x23,0x6B,0xBE,0x57
,0x1C,0xC8,0x47,0x2F,0xEF,0x0B,0xDF,0xA1,0xE5,0x35,0x41,0xA0,0x4E,0x64,0xAB,0x21,0xA1,0xC5,0x13,0x4C,0xD2,0x8A,0x79,0xFE,0x2E,0xAD,0x90,0x82,0x2E,0x54,0xF6,0x87,0xAF,0x88,0xF0,0x84,0xF2,0x15,0x16,0x5D,0xD4,0x5C,0xCE,0x81,0x83,0xD9,0x12,0x5C,0x5D,0x33,0x46,0x4A,0x0C,0x70,0xAA,0x4,0x99
,0x6B,0x36,0x8A,0xA4,0xE8,0x61,0x9B,0x37,0x86,0x95,0xC2,0xA7,0xCF,0xED,0xED,0xFE,0xBA,0xF3,0xC6,0x9,0xF4,0xD4,0x94,0xDD,0x9,0x16,0xEC,0xDB,0xEB,0xFB,0x1,0xE9,0xFE,0xB4,0xCD,0xFB,0x0B,0x92,0x3,0xA7,0x22,0x59,0xBB,0xD1,0x2B,0xEC,0x18,0x49,0xDD,0x56,0xBD,0x35,0xED,0x91,0x32,0x3C,0x3A
,0xEA,0x3E,0x71,0xB8,0x75,0x34,0xAB,0x0B,0x79,0x53,0x73,0x41,0x36,0x16,0x3E,0xDD,0xEA,0xAE,0x1,0xB5,0x92,0x8E,0xE5,0x73,0x29,0x1B,0x29,0x9E,0xF3,0x77,0xDC,0xDF,0xB5,0xA8,0xBE,0x43,0x1D,0xC0,0xB0,0x52,0x75,0x7F,0x0F,0xBB,0xF1,0x0D,0x82,0x6E,0x7D,0x3A,0x8B,0xAE,0x6D,0xE6,0x4C,0x55,0x1C
,0xF9,0xCC,0x8C,0xA7,0x9B,0x68,0x3E,0xEC,0x7,0x7F,0x94,0x4,0xB5,0x19,0xBD,0x21,0x25,0x97,0x5B,0x7B,0x14,0x40,0xA5,0xCC,0x6C,0x90,0xF8,0x16,0xA1,0x3C,0x82,0x71,0xE1,0xD0,0xE9,0x66,0xB4,0xD0,0xBF,0x94,0x98,0x34,0x6B,0x42,0x4,0x43,0x67,0x7F,0x7B,0xA6,0x99,0x8D,0x34,0x90,0x86,0x1C,0xB4
,0xF6,0x20,0x25,0x29,0xBC,0x26,0xED,0xBD,0xB1,0x86,0xEC,0xC9,0x4E,0xF4,0x32,0x1,0x29,0x22,0xF9,0x86,0xDC,0x88,0x1F,0x24,0x97,0xA4,0xE9,0x66,0xCC,0x33,0x3B,0xF1,0x6D,0x58,0x41,0xCB,0x1F,0x8D,0xE0,0xE4,0xAB,0xE2,0x3,0xC1,0x64,0x9D,0xD5,0x53,0x6E,0xBF,0x56,0x5,0xDB,0x86,0x0D,0x2B,0x8F
,0x4B,0x5E,0x89,0x9E,0xF9,0x7A,0x65,0x6B,0x7A,0x1B,0xBF,0xF7,0x34,0x21,0x15,0xCA,0x26,0x78,0x6F,0xDC,0x95,0x1B,0x5,0xE1,0xF6,0x89,0x29,0x79,0xEC,0xE3,0xFA,0x79,0x0C,0xBD,0x5F,0xF2,0x57,0xB8,0xBA,0x2E,0x0F,0x63,0x2A,0x2D,0xB9,0x0D,0x0A,0x71,0xDC,0x1A,0x27,0x8C,0xC8,0xEB,0x1D,0xF1,0x27
,0x1F,0xC7,0x87,0x3C,0x72,0xC8,0x73,0x0D,0x3,0xE1,0x9A,0xFC,0xE3,0x5A,0x6,0xBD,0x3B,0xD8,0x0D,0xDF,0xE4,0x85,0x87,0x7E,0x34,0xE9,0xBC,0x82,0xCF,0x86,0x66,0xA5,0x38,0x57,0x9C,0xEB,0xF0,0x66,0xD3,0xC2,0xFA,0xAD,0xCF,0x3E,0x67,0x4B,0xBE,0xE8,0xD5,0x42,0x5C,0x83,0xA8,0xFD,0x4D,0x0E,0x96
,0xAA,0x85,0xAC,0xA1,0x89,0x0F,0x91,0xE5,0x7E,0xCB,0xA0,0x6F,0xEA,0xC4,0xE3,0x67,0x11,0x7B,0x7B,0xD3,0xFD,0xCA,0x46,0x5D,0x6C,0xEC,0xCF,0x1F,0x6F,0x1D,0xB3,0x4,0x5A,0x5E,0x2F,0xDC,0xDA,0x2,0xE6,0x7D,0x8F,0x63,0xB3,0x1A,0x14,0x56,0x7A,0x60,0xF8,0x7,0xBF,0x3C,0x71,0x74,0x34,0xEF,0x2C
,0x84,0xC1,0x83,0x51,0xBC,0x62,0xEA,0xEC,0x9E,0x3D,0x32,0xBF,0xBD,0x68,0xEF,0xE4,0x92,0xCB,0x45,0x23,0x3,0x5E,0xA7,0x64,0xBB,0x63,0xDE,0x27,0x71,0xD8,0x5E,0x5D,0xC6,0xA5,0x41,0xAF,0x5D,0xCF,0x5E,0x63,0x87,0x4F,0x6D,0xFC,0x2F,0x9D,0xE3,0xDC,0x7A,0xD0,0x6C,0xE1,0xA8,0x29,0xA8,0x57,0xD3
,0x6,0x25,0x2F,0xD6,0x26,0x18,0xE8,0x44,0x9,0xE9,0x16,0x8E,0x80,0x1E,0xC3,0x46,0x28,0x90,0xE1,0x9D,0xDD,0x9B,0xE3,0x1C,0xF5,0x35,0xA6,0x96,0x41,0x71,0xDA,0x6D,0x88,0x9C,0x1A,0x2D,0xCE,0x39,0xB8,0x76,0xC2,0x34,0x9A,0x50,0xBB,0x8E,0x20,0xE8,0xD0,0xB7,0x49,0xC4,0x42,0x8,0x6A,0x63,0xBC
,0x6A,0x45,0x77,0xD1,0xBE,0x4,0x89,0x1D,0xF8,0x7,0x5D,0x56,0x86,0xC2,0xB9,0xF4,0x4,0xDC,0x8,0x90,0xBF,0x8B,0x6B,0x9D,0x33,0x94,0xC3,0xAA,0xC0,0xE9,0x27,0xE4,0x4,0x24,0x67,0xD1,0xF0,0xEB,0x1D,0x38,0x1D,0x95,0xBB,0xFD,0x6D,0x8,0x5B,0x6,0x5D,0x3,0x80,0xDA,0x66,0x2A,0xB2,0x26,0x72
,0xA7,0x20,0xC6,0x9,0xE1,0x23,0x79,0x1A,0x2C,0xE6,0xFC,0x10,0xB7,0xF6,0x96,0x0D,0xF7,0x1,0xD8,0xFC,0x87,0x88,0xA3,0x72,0xB8,0xF0,0x3B,0xDC,0x20,0x84,0x4C,0x0E,0xF5,0xC7,0x8,0xC0,0xDF,0xF6,0xCF,0xF4,0xCF,0xDF,0xD8,0xD0,0x93,0xDB,0x3F,0xF5,0xE1,0x51,0xBD,0xF2,0x54,0x59,0xC9,0x9D,0x3A
,0xF5,0x16,0x2B,0x9C,0x93,0x3B,0xCC,0x77,0x15,0xA5,0x7D,0x71,0x34,0x84,0xFE,0x0D,0x0A,0xA2,0xB2,0x88,0xAE,0x6F,0x7E,0x33,0x8B,0x38,0x49,0xB4,0x80,0xCD,0xB6,0x5E,0x3F,0x95,0x9F,0x1,0xD7,0x7E,0x62,0x96,0xAC,0xC1,0xA6,0x76,0x30,0x4C,0x7A,0xCF,0x5D,0xE7,0x9C,0x3D,0x4A,0x3E,0xEB,0x3F,0xBB
,0xA9,0xE0,0x4A,0x29,0xCE,0xEF,0x5C,0x12,0x3A,0xD1,0xAD,0x12,0xBF,0x7D,0x7E,0x9B,0xFB,0xD3,0x88,0xBC,0x99,0xDC,0x21,0xD2,0xCF,0x76,0x95,0xA4,0xBF,0x66,0xC3,0xBE,0xFD,0xB6,0x6A,0x75,0x2C,0x47,0x69,0x7F,0xB8,0x6C,0x37,0x91,0xC7,0x8C,0xBF,0xD7,0x4E,0xC0,0x3D,0xC2,0x63,0x21,0xD6,0xFD,0xE7
,0xE2,0xE4,0x0C,0x50,0x0F,0x8A,0x6A,0xFB,0xC1,0x70,0x92,0x9C,0xD6,0x7D,0xDD,0x52,0xF6,0x3B,0xA3,0xE3,0xDB,0xBD,0x78,0xAF,0xC7,0xC0,0xF0,0xD3,0x1,0x1,0xF6,0x1B,0x50,0x26,0xD2,0x3A,0x58,0x8D,0x19,0xC9,0xBD,0x5C,0xB2,0xC2,0xF9,0xB9,0x0C,0xA8,0xC2,0x0C,0xA4,0x53,0xFA,0xFE,0x1D,0x80,0x0E
,0xEF,0x5,0x2,0x81,0xD0,0x64,0xC5,0xF1,0xF4,0x54,0xA6,0xF3,0xEC,0xAD,0xFD,0x37,0xDD,0x18,0x24,0x5A,0x64,0x6F,0xC9,0xEA,0x9D,0xED,0x34,0xC5,0x3B,0xEC,0x88,0x7A,0x48,0xBC,0xE4,0xED,0xA3,0x6C,0xAA,0xC4,0x9F,0xF0,0xAE,0xE4,0xEB,0x97,0x94,0x75,0x46,0x4,0x34,0xE9,0xF0,0xF7,0x2A,0x4D,0x8E
,0xEC,0x92,0x5D,0x49,0x9A,0xF3,0xBF,0xF0,0xE0,0x63,0xDB,0x1,0xC2,0xEE,0x91,0x17,0x1B,0x4F,0x6E,0xF8,0xC7,0xED,0x92,0x91,0xC5,0x45,0xDC,0xF5,0x1D,0xA8,0x92,0x24,0x0C,0x5E,0x2C,0x2E,0x5F,0x5E,0x5D,0xB7,0x44,0x4A,0x25,0x8F,0xA1,0x27,0xDD,0xF4,0x3F,0x6D,0x1D,0xAF,0xBE,0xD6,0x6F,0x62,0xB1
,0x9E,0xB5,0x36,0xD6,0x87,0x2F,0x4A,0xC4,0x73,0xDF,0x12,0xF7,0xC2,0x92,0x19,0xC0,0x4C,0xED,0x2A,0xCB,0x49,0x6,0x7A,0xDB,0xD9,0xC6,0xC7,0x7C,0x80,0xAE,0x8,0x26,0x61,0x3A,0x97,0xB2,0x75,0x57,0x97,0x95,0x94,0x77,0x49,0xB0,0x89,0x6A,0x2D,0x37,0x6,0xA3,0xC7,0x8C,0xB7,0x22,0x8E,0x74,0x48
,0x8C,0x2D,0x90,0x88,0xC3,0x71,0x87,0xA2,0x7C,0x2E,0xBC,0x88,0x0F,0x4B,0x8,0x69,0x32,0x4D,0x57,0x80,0xB7,0xC2,0x8F,0xFA,0xF6,0x91,0xB2,0x3E,0x17,0xC7,0x92,0x58,0xCF,0xE9,0x0F,0xEE,0xE0,0x3D,0x45,0x57,0xD1,0x2F,0x88,0x3C,0x1E,0x47,0xA7,0x84,0x9A,0xC0,0x42,0xE2,0x17,0x45,0xBB,0x99,0xE6
,0xD1,0x9B,0x8,0x91,0x5D,0xC9,0x8E,0x41,0x37,0x92,0x21,0x0B,0xAB,0xD0,0x63,0xDA,0xF9,0x38,0x75,0x15,0x1D,0x0F,0x62,0x81,0x70,0x55,0x4B,0xE8,0xCD,0xB7,0x32,0xB4,0xFC,0x2A,0xB4,0x0B,0x30,0xB7,0x5B,0xD5,0x74,0x40,0xF0,0x3,0xAC,0xA8,0x88,0x82,0x1C,0x6D,0x80,0x4C,0xFD,0xDB,0x62,0x5,0x4C
,0xF8,0xC1,0x5A,0x1B,0x80,0x5,0xED,0xAF,0xC5,0x3F,0xBB,0xC8,0xFC,0x13,0xCA,0x25,0xC2,0x9B,0x59,0xD1,0x54,0x7C,0xF1,0x44,0x5C,0x16,0xE4,0xCC,0xB4,0xCF,0x7F,0x71,0x1A,0xB6,0x5E,0x96,0x23,0x31,0x65,0xB0,0x63,0x15,0xA8,0x5D,0x47,0xF1,0xA8,0xFB,0x51,0xC1,0x65,0x56,0x60,0xD6,0xA7,0x48,0xB7
,0x50,0xC9,0x0C,0x4B,0xDB,0xA1,0x1E,0x36,0x1,0xAA,0x4D,0xAC,0xC4,0x3A,0xE9,0x7B,0x5,0x9F,0xC2,0x48,0x22,0x3A,0xCC,0xA7,0x6F,0x46,0x1D,0x61,0x15,0x60,0x2B,0xBC,0xB4,0xA9,0xE7,0x55,0xA3,0x57,0xC1,0x47,0xDE,0xC7,0xF5,0x3C,0xB5,0xC9,0x70,0x11,0x49,0x36,0x7C,0xBA,0xAE,0x94,0x96,0x9,0x17
,0xE0,0xB2,0xF4,0x9F,0x24,0x15,0x36,0x31,0xFC,0x38,0x91,0x24,0xDE,0xEA,0xDA,0xF5,0xFE,0xF4,0xEB,0xDE,0xC3,0x80,0xAF,0x82,0xC7,0xB1,0x63,0x8F,0x1A,0x7F,0x41,0x93,0xE7,0x4B,0xC0,0xC6,0x44,0x54,0x6D,0x19,0x8,0x7B,0xC8,0x4A,0xB8,0x56,0xFD,0x59,0x61,0x4E,0xEC,0x6,0x1E,0x80,0x67,0xB9,0x7A
,0x39,0x0F,0xA0,0x6C,0xD5,0xA7,0x2A,0xCF,0xC0,0x70,0xC3,0x53,0x65,0x3C,0x2D,0xCD,0xD2,0xC9,0xE7,0xAF,0xE6,0x4A,0x7C,0xCC,0xB1,0x6B,0xD2,0x0F,0xFA,0xD3,0x60,0x3B,0x87,0x8B,0xAA,0x7A,0x14,0x14,0x83,0xD4,0x99,0xB9,0xB8,0x39,0xE6,0xFD,0x8C,0x23,0x12,0x6C,0xB8,0xD3,0xA7,0xE0,0x41,0xE2,0x78
,0xA1,0xDC,0x20,0xA6,0x18,0x4E,0xBA,0xC1,0xB8,0x5A,0x78,0xD2,0xED,0xB3,0x5,0xFA,0x5C,0xA7,0x17,0xA3,0x9C,0xC8,0xA0,0xA7,0x8E,0x5C,0x7D,0xC6,0x69,0xE9,0x0C,0x9E,0xCF,0x9D,0x19,0x5E,0xD9,0xC3,0x7B,0xAD,0x7A,0x42,0xE6,0xDA,0x20,0x34,0x26,0xC1,0x1D,0x84,0x5F,0x87,0x84,0xD4,0xA4,0xB6,0x18
,0x5E,0x53,0xA4,0x14,0x2C,0x7C,0xCF,0x42,0x7E,0x10,0x27,0x54,0x70,0xBF,0xC0,0xB7,0xE7,0x8C,0x1D,0x1F,0xEA,0xD4,0x63,0xC5,0x28,0xC9,0xAE,0xAA,0x10,0x5C,0x5,0xF7,0x2E,0x3B,0xC0,0x98,0x1B,0x31,0x59,0x49,0xC4,0x5F,0x2C,0x38,0x5C,0x94,0x12,0x68,0xAA,0x75,0xAD,0xE7,0x21,0x6E,0x3,0x2F,0x52
,0x57,0x5A,0x90,0x3D,0xB2,0xFA,0x28,0x28,0x68,0xC5,0x38,0x37,0xE9,0x34,0x3D,0xA9,0xAA,0xC4,0xCD,0x7,0xCE,0x64,0x87,0xDD,0xF5,0xCA,0xFE,0x89,0x1A,0x6E,0x36,0xA6,0x4D,0xEE,0x38,0x8A,0x68,0xB2,0xA4,0x90,0x54,0x86,0xB9,0x65,0x34,0xFB,0x7F,0x45,0xDD,0x6C,0xDD,0x4C,0x0B,0x20,0x15,0xB3,0xAE
,0xDD,0x71,0x42,0xC6,0x1A,0xBD,0xBA,0x3E,0x2,0x33,0x8D,0xF4,0xE5,0x76,0x8C,0xC1,0xFB,0x6F,0xF3,0x60,0xFE,0x79,0x9D,0x30,0xC5,0xBA,0x7A,0xAD,0x58,0x1D,0x4A,0x82,0x72,0xD1,0xC8,0x2A,0x1C,0xB5,0x6,0xFE,0x47,0x97,0x43,0xA8,0xFE,0xAC,0x30,0xB7,0x4E,0x31,0x9F,0x89,0x29,0x9C,0xA0,0x1A,0xA0
,0x3C,0x40,0xE4,0xC3,0xB4,0xAB,0xA1,0x41,0x3D,0x0F,0xC4,0x40,0x13,0xE2,0xB0,0xA1,0x3,0x0F,0x91,0x9,0x5D,0x76,0x8C,0xC1,0x5D,0x82,0x95,0x0F,0x63,0x20,0x5F,0xEE,0xCA,0xB4,0xA4,0xC7,0xF5,0xC1,0x7F,0x27,0x56,0x61,0xDB,0xEA,0xD3,0xA1,0xBD,0x1A,0x9C,0xBD,0x86,0xB8,0xA7,0x42,0xD5,0xC9,0xDE
,0x25,0x2D,0xF4,0x4D,0xD6,0x0C,0xCC,0x4A,0x5C,0xAA,0x6C,0x7,0x62,0xDC,0x2C,0x4B,0x7F,0x7D,0x35,0xF8,0x6C,0xCF,0xE1,0x11,0x88,0x2B,0x6E,0xB5,0x5A,0x77,0x6,0x26,0x77,0xBF,0xBF,0xE3,0x6B,0x74,0x82,0x31,0x1F,0x78,0x63,0x0F,0x4E,0xBD,0x7C,0xCF,0x8A,0x83,0xD5,0x94,0x5D,0xE4,0x50,0x97,0x6
,0xE7,0x2D,0xB5,0x73,0x9A,0x34,0x28,0xCC,0x8E,0x1,0xB8,0x69,0x36,0x7A,0x76,0x4C,0x5F,0x5,0x43,0x2C,0x70,0x72,0x22,0x0F,0x89,0x34,0xBA,0x74,0x3A,0xE5,0xEB,0x42,0xEC,0xA1,0xDC,0x28,0xB1,0x40,0x67,0xE8,0x97,0xED,0x65,0x43,0x31,0x48,0x9F,0x9F,0x70,0x53,0xDE,0x86,0x89,0x88,0x3,0xFA,0xF8
,0x58,0x88,0x9A,0x57,0x4B,0x5A,0xA5,0x34,0x23,0x6D,0xF6,0x76,0x3B,0xED,0xF1,0xA6,0x67,0x8C,0x58,0x93,0xA7,0xB6,0x39,0x8B,0xF7,0x24,0xD4,0xE8,0x67,0xC1,0xB1,0xFE,0xF8,0x21,0x9C,0x0E,0x50,0xAE,0x7,0x7B,0xAF,0xAC,0x4D,0xE9,0x61,0x4A,0x75,0x51,0xF3,0xD4,0xE8,0xD1,0x80,0x4B,0x9F,0x52,0x45
,0x61,0x76,0xB3,0xDD,0x31,0xEF,0x91,0x6F,0xB6,0x36,0x73,0xEE,0x3C,0xA1,0x4F,0xEB,0xEA,0x7B,0x56,0x16,0x93,0x6A,0xEF,0xC7,0xF2,0x24,0xA4,0xDD,0x78,0xC7,0x36,0x35,0xE6,0xB1,0x58,0xE2,0xAC,0xE1,0x74,0xC1,0x79,0x7,0xE5,0x48,0xE3,0x1C,0xFC,0x26,0x7F,0xBB,0x4D,0xE1,0x6C,0x32,0xA3,0xB4,0x9B
,0x1B,0x14,0xF2,0xE2,0x0D,0x0A,0x66,0x67,0x12,0xB1,0x89,0x93,0x1B,0x1E,0x29,0x98,0xA9,0x94,0x14,0xA1,0x0C,0x82,0x9E,0x54,0xC9,0x32,0xAA,0x78,0xFA,0x8F,0x5B,0x3B,0x94,0xCB,0x6A,0x21,0xB2,0x25,0xE2,0x26,0x43,0x8F,0x48,0x36,0xE5,0x9B,0xFD,0x4A,0x8C,0x52,0xE5,0x6F,0xA0,0x4D,0x18,0x12,0x2F
,0xE7,0x8C,0xB3,0xF0,0xB3,0xC6,0x85,0xA4,0x1A,0x3A,0xE3,0x9C,0x44,0x71,0x64,0xE7,0x48,0xD7,0x3B,0x5,0xC0,0x0E,0xD0,0x6D,0x95,0x98,0x48,0x1A,0x55,0x10,0xA4,0x21,0xCB,0x5F,0x98,0x85,0x39,0x64,0x60,0x9C,0xD1,0x5E,0xEF,0xD7,0xF5,0x9D,0xB9,0x75,0xBF,0xC9,0x37,0xF1,0x53,0x37,0xCE,0xA4,0x9D
,0xA9,0xEB,0x77,0xE0,0xF4,0xFC,0x17,0xBC,0xD4,0x4E,0x7A,0x1A,0x71,0x45,0x57,0xA7,0xFD,0x1A,0x29,0x37,0xBA,0x69,0x63,0xC6,0xF0,0xE9,0xB0,0x8B,0x1C,0x92,0x8C,0x97,0xE1,0x44,0x3F,0x9C,0x2,0xAD,0x8D,0x7A,0xE4,0x28,0x18,0xBF,0xFB,0x54,0xB6,0x37,0x83,0x57,0xD8,0x65,0xE6,0x5B,0x36,0x15,0x6C
,0x3B,0xCE,0x5,0x31,0x0F,0x8C,0x8E,0x50,0x63,0x7D,0xA1,0x38,0xF5,0x10,0xAC,0xD3,0xA2,0x2E,0xF8,0xD6,0x51,0xA1,0x3,0xA1,0xD1,0xBA,0x4C,0x9,0x23,0x7B,0x44,0x9F,0x37,0x61,0xBB,0xA8,0xDA,0x10,0x7B,0x4D,0x7E,0xC7,0x65,0x5E,0xBA,0x2A,0xE9,0x2B,0x5E,0x13,0xFB,0x9C,0xAF,0x0D,0x79,0x53,0xD5
,0x27,0x1B,0xC9,0xF5,0xC1,0xDB,0x3D,0x17,0x4,0x24,0x83,0x41,0x8C,0x40,0x78,0xF6,0x41,0xD4,0x8,0x87,0x74,0xA9,0xB8,0x26,0xA9,0x6B,0xAF,0x86,0xED,0xED,0xE0,0xD6,0x4,0x6A,0xA0,0xBC,0xA9,0x4C,0x36,0x35,0xD8,0x0D,0x0A,0x89,0x28,0x83,0xA3,0xB8,0x59,0x8A,0x38,0x8B,0x95,0x90,0x4E,0x9A,0xED
,0x5B,0x49,0x3B,0x92,0x48,0x9D,0xD0,0x73,0xB7,0x3D,0xC8,0xF9,0xD0,0xE9,0xC8,0x1C,0x91,0xAA,0x4A,0x24,0x75,0x56,0x3F,0x51,0xD5,0x45,0x0C,0xC0,0x23,0x23,0x34,0xCE,0x16,0x7,0x33,0x41,0x25,0xA9,0xFB,0x6C,0x37,0xFB,0x4C,0xE2,0xE7,0xF0,0x7E,0x77,0x5C,0xAB,0x17,0x73,0xEF,0xED,0x83,0xB7,0xD6
,0x1B,0x6F,0x8E,0xDA,0x5A,0x2A,0x0D,0x51,0x7C,0x4F,0x9A,0x93,0x21,0x79,0xB1,0xFB,0x79,0xEE,0x51,0xA0,0x8B,0x24,0x22,0xF7,0x15,0x14,0xF5,0x8A,0xEE,0x45,0x8E,0xCD,0x3B,0x69,0x2D,0x70,0x9,0x6F,0x10,0x0F,0xE5,0x16,0x5A,0xAF,0xF3,0xB0,0x58,0x7,0xE9,0x4E,0xC3,0xB4,0xC3,0xCA,0x15,0xA9,0x59
,0x26,0x3C,0xE1,0xBF,0x8C,0x2,0x81,0x96,0x72,0x71,0xA4,0x38,0x41,0x6D,0xD5,0xED,0xCF,0xDF,0x9B,0x3,0x4B,0x98,0xE5,0xF2,0xC0,0x68,0xE7,0x91,0xD4,0x7C,0x3E,0x58,0xF9,0x75,0x9B,0xAC,0xA8,0x5B,0x40,0x7F,0xC8,0xD7,0x3B,0xCC,0x1F,0xDE,0xBA,0xA2,0x8E,0x33,0x7E,0x11,0x3D,0xD8,0xA7,0x9B,0x6E
,0x0C,0x9,0xD2,0xE8,0xA0,0x7,0x4F,0x0D,0x7D,0x63,0xF3,0x30,0x18,0xDB,0xB2,0x79,0x88,0x8,0x9C,0xD1,0x48,0x52,0x78,0x31,0x3,0x88,0xC5,0xC4,0xA8,0xE7,0x56,0x42,0x2B,0xE4,0x4E,0xF0,0xFC,0xE1,0xEC,0x97,0xD8,0xEE,0xAF,0x6,0xD5,0xB8,0x59,0x52,0x4E,0xDD,0x5E,0x6D,0xB0,0xBA,0x52,0x57,0xA5
,0xF5,0xBB,0x63,0xB8,0xC8,0xF8,0xF2,0xE6,0x5C,0xB1,0x26,0x2E,0x35,0x43,0xA1,0xB4,0xFD,0xED,0x4F,0x60,0xB9,0xFB,0xE9,0xA1,0x9D,0xB7,0x4A,0x4C,0xA0,0x73,0x6A,0x1D,0x8,0x6A,0xE2,0xE8,0xF3,0xC8,0xFD,0x8,0x50,0x92,0x4,0xFC,0xE8,0xCB,0xFA,0xE1,0x54,0x98,0x7D,0xA4,0x4D,0x91,0xA5,0x9C,0x31
,0x30,0x0D,0x0A,0x76,0x32,0x8E,0x9F,0x10,0x4,0x39,0x5B,0x3B,0xA0,0x6C,0xA5,0x1,0xAB,0x6E,0x50,0x54,0x76,0x6D,0x3C,0xDC,0xBC,0x8C,0x48,0xBF,0x6D,0x75,0xAA,0x9,0x84,0x39,0x98,0xB1,0x29,0xB7,0xF2,0xCC,0x3F,0x72,0x28,0xDC,0x80,0xF2,0xF6,0xE9,0x64,0xAB,0x1B,0x4D,0xD6,0x6F,0xC2,0xC9,0x0F
,0x87,0xAC,0xED,0x91,0x70,0xED,0x52,0x8F,0x2F,0x25,0xA9,0xC2,0x6F,0x26,0x4D,0x13,0x4A,0xE9,0x24,0xDB,0xDB,0xC7,0x86,0x73,0x98,0xB7,0x27,0x8C,0x86,0xB2,0x74,0x2B,0x32,0xF4,0x9B,0xC5,0xAB,0x26,0x8C,0x51,0x52,0x2B,0x2E,0xCB,0x9C,0xC1,0x2E,0xDB,0xDA,0x8E,0x8A,0x7B,0x2,0xB4,0x3F,0xDB,0x6C
,0xC6,0x46,0xAA,0xCD,0xFE,0x50,0xF0,0x1C,0xB2,0x55,0x96,0xBE,0xD1,0x75,0xD3,0xCD,0x6A,0x39,0x90,0x8F,0x1B,0xB9,0x0B,0x2C,0x4A,0xB5,0xB2,0xB0,0x25,0x25,0xAB,0x45,0x2C,0x39,0xBD,0xC8,0x5C,0x76,0x50,0xBE,0xBA,0xD6,0x1A,0xA6,0x3E,0x77,0x25,0xB1,0xEE,0xF0,0xEA,0xFB,0x4C,0xDE,0x0D,0x0A,0x27
,0x97,0x74,0x5A,0x9A,0x40,0xF0,0xF0,0x26,0x15,0xB5,0xE8,0x60,0x4A,0xAE,0x40,0x78,0x2F,0xFE,0xEC,0xC6,0x77,0x99,0x5A,0xFA,0x0B,0x9E,0x3D,0x4,0x39,0x34,0x57,0xA1,0x3A,0xB8,0xD4,0xD4,0xFE,0x8,0xCD,0xFE,0xF5,0xA0,0xC8,0xEA,0x0F,0x60,0xB9,0x90,0x75,0xD5,0x3B,0xEC,0x5B,0x94,0x92,0x8B,0x55
,0xB3,0x6C,0x2F,0x88,0xF6,0x71,0x57,0x40,0xA0,0x0E,0xE2,0x1D,0x6F,0x5F,0xA7,0x92,0xF6,0x92,0x20,0xB9,0xA1,0xC6,0x3C,0x3E,0x8E,0xAA,0x4F,0x86,0xC5,0xF9,0x2B,0xB2,0xCB,0xE7,0x68,0xB2,0x16,0xE3,0xE8,0xF9,0x6E,0x77,0xAF,0x20,0xDA,0xD5,0xDA,0xEB,0xEE,0xF2,0x25,0x21,0x2F,0x73,0x8C,0x82,0x7F
,0x78,0x8A,0x62,0x33,0xBA,0x8C,0x4B,0xA9,0xAE,0x0C,0xEE,0x1A,0x3E,0xE8,0x7,0x92,0x0D,0x0A,0x8A,0x53,0xA5,0x61,0x42,0x52,0xDC,0x2C,0x83,0xE1,0x68,0xD1,0x84,0x7F,0x2A,0x60,0xA1,0x22,0x89,0x10,0x4A,0x92,0x35,0x3B,0xD2,0x42,0x3D,0x1B,0xC6,0x49,0x9E,0x47,0x29,0xCB,0xCE,0x3E,0x69,0x59,0x3E
,0xFB,0x31,0x68,0x5E,0x5,0x10,0xBF,0x36,0xA9,0x4,0xBA,0x20,0x37,0xE6,0x41,0x85,0x94,0xEA,0x73,0x5D,0x1A,0xDF,0xEA,0x4F,0x3E,0xB1,0x67,0x2,0xB1,0xC3,0xDD,0xBA,0xB5,0x86,0xDC,0xBE,0x2C,0xF8,0x12,0x75,0x21,0x84,0xF2,0xEF,0x77,0xCB,0x58,0xD0,0x50,0xDF,0x1A,0x6,0xE4,0x79,0x62,0x88,0x7C
,0xAB,0xC9,0x8B,0x3,0xB5,0x8,0x1F,0x29,0x48,0x3B,0xE7,0x77,0xFA,0x8F,0xDD,0x1F,0x62,0x4E,0xA3,0x1F,0x4C,0x23,0x7C,0x82,0xA6,0x90,0x62,0x2F,0xBB,0x6C,0x59,0x20,0x7,0x63,0x6A,0x87,0x82,0x46,0x64,0xB4,0x9E,0x40,0xDD,0x1D,0xB5,0x94,0x93,0x80,0x43,0x1F,0x88,0x87,0xA0,0x30,0x13,0xCE,0xA1
,0xF4,0x4E,0xAF,0xBD,0x0D,0x0A,0xF4,0xC6,0x1E,0x64,0x41,0x9A,0x57,0x4D,0xA6,0x3C,0x20,0x73,0x4C,0x59,0xB0,0xCB,0xDC,0xA9,0x2F,0x7D,0x90,0x10,0xE9,0x5D,0x44,0x5B,0x99,0x38,0x44,0x29,0x7E,0x86,0xB9,0xA0,0xB1,0xC8,0x54,0xA1,0x4B,0x1A,0x2E,0x29,0xC5,0x21,0x86,0x71,0x5C,0x24,0x2C,0x8D,0xA1
,0x4C,0x5B,0x1E,0x37,0xCA,0xEC,0xD7,0xB7,0x9,0x70,0x64,0xDB,0x76,0x29,0x5B,0xE8,0x5A,0x96,0x5,0x5A,0xF3,0x69,0x74,0xF2,0x62,0x86,0xB2,0x0F,0xD5,0x17,0x9D,0x74,0x33,0x2E,0x23,0x75,0xE4,0x11,0x80,0x95,0xE1,0x9E,0x32,0xA4,0xB8,0xEF,0x33,0x57,0xA2,0xA5,0x37,0x6E,0x67,0xEE,0x97,0x74,0x17
,0xF1,0x73,0x0B,0x60,0x61,0xDC,0xEC,0xA2,0xF6,0x92,0x7E,0x59,0xD7,0x11,0x35,0x0D,0x0A,0x4A,0x6B,0x8C,0x6E,0xE6,0xE7,0xF3,0xF7,0xBC,0xB7,0x52,0x4C,0x7E,0x99,0x79,0xE0,0x16,0x0F,0x77,0x89,0xF0,0xCE,0xB8,0xD3,0x4B,0xF0,0x1A,0x24,0x96,0xD3,0xF8,0x86,0x8F,0xF2,0x32,0x2,0x5,0xC8,0x23,0x75
,0xCB,0x6,0xBB,0xBB,0xF8,0x3,0xA1,0x35,0xDE,0xEB,0x64,0x66,0xD6,0x82,0xEA,0xC8,0x69,0xC3,0xEA,0x84,0xC4,0x98,0xB3,0x2F,0x38,0xB1,0x16,0x2A,0x71,0xA3,0xAA,0x2,0x62,0xAD,0x4B,0x21,0x74,0xE7,0xEC,0x48,0xF0,0x78,0xCB,0x49,0x4F,0x8C,0x5,0x49,0x34,0x97,0x89,0x9,0x0D,0x0A,0xB7,0x9B,0x99
,0xB0,0x97,0xA6,0xE1,0x79,0xD5,0xBD,0x48,0xB6,0x45,0x85,0x29,0x24,0xE9,0xC6,0x17,0x89,0x29,0x88,0xD5,0xB3,0x0E,0xE5,0xE2,0x3B,0x9,0x6B,0x7F,0x2B,0x14,0x4F,0x2E,0x15,0xA0,0x36,0x6B,0x90,0x40,0xF2,0xBE,0xAD,0x65,0xD8,0xC4,0x65,0x29,0x5,0x6B,0x98,0x7A,0x69,0xF0,0x94,0xA9,0xDF,0xF3,0xB4
,0xB1,0xF5,0x5,0x1F,0x13,0xD3,0x14,0x23,0xCA,0x2,0x55,0x55,0x4D,0x4F,0xA2,0xCF,0xB0,0x9C,0x38,0xBF,0x51,0xDC,0xD0,0xAE,0xF0,0x1A,0xCC,0x9C,0x92,0xA6,0x99,0x7D,0x3C,0x72,0xF5,0xFC,0xA1,0x99,0x40,0x3F,0x23,0x2E,0x72,0x88,0xEC,0x37,0xF5,0x4F,0xD5,0x0C,0x6,0xE2,0x98,0xF6,0x9F,0x7,0x1D
,0x33,0xDF,0xA6,0x7A,0x56,0xBE,0x1B,0x57,0x10,0x2,0x9,0x40,0x7A,0x6C,0x7F,0xB7,0xC4,0xDB,0x19,0x9F,0x7F,0x88,0x6,0x86,0x4E,0xFC,0xA5,0xBC,0x5E,0xF8,0x87,0x91,0x36,0xE9,0xB3,0xA4,0x74,0x14,0xB7,0xB9,0xEA,0x18,0xAE,0xE8,0xB1,0x1B,0x93,0xA3,0xBC,0xF7,0x1E,0x61,0x5D,0xEB,0x72,0x7C,0x73
,0x31,0x3,0xFE,0x80,0xC0,0xBB,0xEB,0x8B,0xF3,0xEB,0xD2,0xEB,0x11,0x31,0x23,0x6,0x72,0x7F,0x29,0xE8,0x96,0xE0,0x8,0xEE,0x72,0xCC,0xBF,0x76,0x82,0xC1,0x7C,0x6E,0x3,0x26,0x2C,0x3E,0xA5,0xD5,0xD2,0x7E,0x4C,0x9E,0x54,0x18,0xF5,0xFB,0x5B,0x4B,0x94,0x37,0x0C,0x2E,0xF4,0x6E,0x0E,0x25,0x41
,0x90,0xCA,0xCF,0x69,0xC5,0x4F,0x21,0x15,0x59,0x9A,0xD7,0x21,0xAF,0xF1,0x4D,0x8C,0x45,0x2,0xAD,0xCC,0x44,0x32,0x8A,0x46,0xB5,0x2B,0xF6,0x0C,0xE8,0xE2,0x6,0x99,0xF2,0x21,0xDC,0x94,0xF4,0xCC,0x4D,0x57,0x17,0x25,0xF8,0x6F,0xD0,0x1,0x15,0x92,0x82,0x37,0xD6,0x66,0xD2,0x7C,0x7F,0x98,0x0D
,0x0A,0xA7,0x26,0x82,0xAA,0xC8,0x26,0x6,0xAA,0xDE,0x78,0xB4,0x71,0xCC,0xA5,0x2,0xF9,0x30,0xB4,0x99,0x62,0xBA,0xDD,0x88,0x1B,0xDA,0x22,0x5B,0x21,0x1C,0xCB,0xE4,0x5F,0x2C,0xFD,0xC1,0xB0,0xF8,0x3,0x4F,0x92,0xB3,0xDE,0x48,0x9,0x34,0xB9,0x8E,0xCD,0xA7,0x88,0x6A,0x39,0xE4,0x98,0xDA,0x1
,0x5C,0x7E,0x0E,0x4B,0xF4,0xFA,0xD1,0x19,0xE5,0x32,0xFC,0xA5,0xC1,0xFE,0x8A,0xAD,0xCF,0xBA,0x92,0x26,0xED,0x0F,0xC2,0x7A,0x2,0x52,0x7C,0xCE,0x51,0x1C,0x44,0x4E,0xB2,0x4E,0xA5,0x15,0xF9,0x7D,0x45,0xB1,0x8D,0xD5,0x2F,0xD5,0x72,0x69,0x11,0x2C,0xEC,0x21,0xA1,0xE8,0xEC,0x7,0xB0,0x1E,0x38
,0x60,0x2E,0x48,0xCC,0x29,0xC2,0x42,0x58,0x55,0x11,0xEE,0x24,0xAD,0x71,0xDA,0x63,0x6A,0x19,0x3C,0x63,0x75,0x89,0x60,0x4F,0x83,0x4B,0x0F,0x2D,0xED,0xA9,0xEF,0xCF,0x67,0xA4,0x71,0x3B,0x68,0x9E,0x46,0x58,0xC0,0x0D,0xEA,0x6C,0xCF,0xD0,0x61,0x32,0xD6,0x48,0x75,0xF7,0x3B,0xDE,0xC6,0xBF,0xC9
,0x2A,0x4,0xB1,0x1,0x4F,0x5A,0xD6,0x7E,0xD0,0xBD,0x7E,0x68,0x68,0xE8,0x3D,0x25,0x19,0xCB,0xDE,0x9,0x24,0x44,0x46,0x6A,0x0E,0xC9,0x96,0xC3,0x43,0x5,0x8F,0x3A,0xA2,0xD7,0x85,0x59,0x84,0xEB,0xE0,0x29,0x69,0x48,0x87,0xA2,0xF7,0xE3,0x21,0x7D,0x7B,0xF1,0x88,0x6F,0x77,0xA3,0x7C,0xDB,0x85
,0x2A,0xB4,0xF6,0x34,0xE6,0x9A,0x86,0xE3,0x46,0xBA,0xF9,0x78,0x5C,0x8,0x57,0xE8,0xD2,0x49,0x76,0x6D,0x1B,0x9D,0x33,0x48,0x6F,0x83,0xFA,0x1A,0xCA,0x30,0x47,0x92,0x2E,0xC8,0xAC,0x76,0x62,0x46,0xC6,0xE1,0xAD,0x71,0xD7,0x9F,0x86,0xF1,0x56,0x9B,0xCC,0xBE,0x2C,0x2D,0x90,0xDC,0x11,0x57,0xF5
,0xEA,0x8F,0xA6,0x2A,0x4B,0x39,0xDD,0x13,0x55,0xA0,0x13,0x90,0x76,0x7E,0x59,0x1A,0xC6,0xC7,0xBA,0x73,0xCC,0xE3,0x8F,0x47,0xEF,0xF4,0xEA,0x79,0x8B,0x4A,0x48,0xE3,0xE8,0xF5,0xFD,0x61,0x41,0x9C,0xDB,0xC1,0xE0,0x73,0x61,0xB8,0x9E,0x93,0xCD,0x3C,0xEA,0x81,0xCB,0x53,0x4C,0x23,0x98,0xFD,0xEC
,0xE4,0x9E,0x2E,0xDF,0x7F,0x84,0x42,0xAE,0xE0,0x4E,0x2D,0x9,0xCA,0xC7,0xC7,0xFE,0xB3,0xF8,0x48,0xBE,0x58,0x8E,0x6E,0x0D,0xB1,0x23,0x77,0xA9,0x9E,0x55,0x56,0xC6,0x2,0x85,0x2D,0x97,0xB2,0x3F,0xB7,0x6F,0xE9,0x5,0x7B,0x20,0x80,0xA3,0x62,0x4B,0xD3,0xC0,0xD2,0x53,0x87,0xAF,0xB1,0x6C,0xE4
,0x56,0x63,0xAC,0x49,0x30,0x57,0x9C,0x30,0x2A,0x21,0xFC,0x53,0x6D,0xA0,0x6C,0x93,0xDA,0x5E,0x8F,0xE6,0x39,0x6A,0x63,0x34,0xE2,0x13,0x6A,0x3F,0x0E,0xAF,0x49,0x8F,0x43,0xBA,0xA0,0x7F,0x56,0xB8,0x91,0x40,0x58,0xD8,0xD8,0x35,0xD0,0xF7,0xEA,0x48,0xD5,0x10,0xE9,0x8B,0x1D,0x6D,0xF1,0x14,0xD3
,0xEE,0x92,0x0B,0x4B,0xB8,0xEF,0x13,0x0E,0x50,0x58,0x3,0xBC,0xD5,0xD4,0xE8,0x2B,0x4E,0x86,0x95,0xF4,0x64,0x3E,0x56,0x3E,0xF1,0x48,0x68,0xA7,0x95,0xA7,0x9F,0x51,0x75,0xE8,0xD7,0xD7,0xC7,0xB3,0xAE,0x27,0x15,0x33,0xFB,0x26,0xB1,0x9C,0xCD,0x2,0x9E,0xDF,0x1A,0x29,0x30,0xBC,0xFC,0xA3,0x90
,0x47,0xD7,0xFD,0xBD,0x40,0xEC,0x5D,0xD6,0x12,0x6,0xE7,0x7E,0xF0,0x96,0x43,0x2A,0x12,0x5,0x15,0xF6,0x24,0x76,0x83,0x17,0x4E,0xCF,0x84,0x54,0xC1,0x5D,0xE2,0x9F,0x13,0xA4,0x0B,0x64,0x79,0xF9,0x41,0x71,0x30,0x4F,0x77,0x27,0x0B,0xE0,0x5E,0xD5,0x62,0x12,0xDB,0xF7,0xB2,0x50,0xA0,0x27,0xBC
,0x2A,0xE9,0x6B,0xB8,0x80,0x1D,0xF4,0x57,0xFA,0x80,0xB0,0x1F,0xA6,0x95,0xCB,0xFD,0xE0,0x4C,0xAF,0x6C,0x89,0xBF,0x88,0x1A,0x89,0x8F,0xB4,0x93,0xB3,0x91,0x64,0xA6,0x7,0x1,0xBC,0x10,0x57,0xB8,0x99,0x50,0x77,0xD8,0x73,0x3,0xC1,0x33,0x8F,0xB1,0x4C,0xF2,0xB6,0x86,0x75,0xF4,0xD4,0xB3,0x36
,0x0F,0xCB,0x1E,0xDF,0xD4,0x94,0x7,0xAB,0x3B,0x39,0x3E,0xBC,0x6E,0xB1,0xBB,0x13,0x59,0x25,0xF9,0xFD,0x3D,0x92,0x0F,0x87,0xBD,0x79,0xD5,0x75,0xD4,0x7E,0x35,0x4A,0xFE,0x8D,0xAE,0x3,0x33,0x9B,0x63,0xC5,0xCF,0x70,0xC1,0x73,0x31,0x91,0xE3,0x36,0x9,0xE1,0xEA,0xF6,0x23,0xCF,0x5E,0xF4,0xCD
,0xE4,0xE0,0x3C,0x7D,0x66,0x29,0x62,0xD3,0xE8,0xA8,0x26,0xBB,0x89,0xC9,0x69,0xC1,0xA1,0x24,0x24,0x47,0xB7,0x99,0xB1,0xBC,0x73,0xBC,0x33,0x94,0x6F,0x73,0x5E,0x6,0x87,0x2F,0x6C,0x53,0xA0,0xA4,0x7E,0xBF,0x7C,0x7D,0x45,0xC6,0x9C,0xD3,0x16,0xD9,0xB4,0xF3,0x63,0x38,0xC1,0x32,0xBB,0x10,0x49
,0x60,0x1D,0x90,0xBB,0xA9,0xF3,0x12,0x9D,0x55,0x88,0x4,0x60,0x43,0x0F,0xC1,0x8A,0x9E,0x3E,0xF1,0x30,0x9F,0xAB,0xA7,0x36,0xC7,0xA8,0xD6,0x7D,0x90,0xF2,0x65,0x7A,0xCE,0x9,0x58,0x2A,0xE2,0x50,0x67,0x8,0xED,0x1,0x86,0x4,0x2B,0xE0,0xA3,0xFE,0x8A,0xD9,0x2B,0xCD,0xCE,0x7C,0x84,0x5A,0x40
,0x57,0x3C,0xDA,0x1C,0x60,0xE5,0xC7,0x0B,0x31,0x79,0x55,0x87,0x71,0x44,0x4E,0x9F,0x29,0x18,0x13,0x7,0x33,0xF0,0x6E,0xC8,0xC8,0x9A,0x29,0x95,0x3B,0x90,0xFD,0x3,0xB8,0xC9,0xF7,0xC5,0x6F,0x87,0x96,0x1E,0xBB,0xC7,0x2,0x8A,0xC3,0xA9,0xA2,0x12,0x41,0x3E,0x3C,0x0C,0xA7,0x4,0x13,0xE4,0xA1
,0xBC,0x15,0xA3,0x5,0xB4,0xAB,0xC0,0xFE,0x2D,0x14,0x6,0xF9,0x3,0xF7,0x19,0xB5,0x5E,0x1F,0x67,0x17,0x69,0xE0,0xF6,0x6E,0xC5,0x57,0xF4,0x48,0xF6,0xCF,0x73,0xE6,0x51,0x96,0x3F,0x60,0xA4,0x8A,0x2E,0x48,0x51,0x9B,0xD8,0x40,0xD9,0xA4,0x13,0x0F,0xA1,0xC0,0x1F,0xA3,0x17,0x88,0x10,0xBC,0xC7
,0x60,0x8,0x89,0xB4,0x31,0x12,0xFE,0x5D,0xD4,0x29,0x36,0xD3,0x75,0x10,0x8F,0x75,0x20,0xCC,0xE4,0x59,0xF9,0x2E,0xA7,0x3B,0x22,0x3F,0x0C,0x0B,0xC3,0x1A,0x27,0x9F,0x7D,0x11,0x47,0xE9,0x6B,0x66,0x3A,0x33,0x21,0xAF,0xDF,0x89,0xE5,0x28,0xC1,0x1B,0x5D,0xEF,0xF9,0x91,0xFE,0x97,0x44,0x22,0xA6
,0xD2,0x57,0x6F,0x64,0xE3,0x88,0xF1,0x1,0x64,0xC2,0x10,0x59,0x1E,0xD1,0x6A,0xF2,0xAB,0x1C,0xC9,0x7,0x49,0xB2,0x9,0x33,0xD9,0xF7,0x61,0x67,0x7C,0x8D,0x91,0xDC,0x7D,0xF8,0x2F,0xE3,0x40,0xA6,0xAF,0x5D,0xDC,0xA7,0x61,0x7E,0xEE,0xE1,0xE0,0xEB,0x7A,0x9,0x65,0x9D,0x47,0x1B,0x53,0xAD,0xAB
,0xBA,0x67,0x84,0x18,0x1B,0x0C,0x7A,0x5A,0xC6,0xFD,0x64,0x0D,0x0A,0x32,0x0F,0x35,0xDE,0x0D,0x0A,0xE7,0x8,0x95,0x79,0xC0,0xD4,0x2,0x39,0xF6,0x27,0x6,0x9D,0x53,0x3,0x0D,0x8A,0x12,0x5D,0xA8,0x64,0x5B,0x5A,0x17,0x6,0x5A,0xAF,0x24,0xBD,0x88,0x4B,0x5B,0x64,0x72,0xC6,0xD5,0x80,0x78,0x9A
,0xAF,0x9F,0xDE,0xBD,0x67,0xC1,0xAA,0x87,0x2F,0x17,0x92,0x92,0x7B,0xD0,0x98,0x7F,0xE3,0x5C,0x88,0x34,0x7C,0xC9,0xE6,0x8F,0xBF,0x98,0x95,0x38,0x7F,0xD4,0xC0,0x5D,0x7B,0x9A,0x46,0x27,0x5E,0xFE,0x44,0xC0,0xC6,0x76,0xE0,0x78,0xE0,0xAA,0x1D,0x1A,0x7E,0xDB,0x95,0x0D,0x3,0xBA,0x36,0x1A,0x0F
,0xF3,0xB2,0x7E,0x65,0x35,0x98,0x55,0xE3,0xEC,0x1E,0xD1,0xE1,0xA8,0x4E,0x5C,0x19,0x2A,0xC4,0x2,0x33,0x29,0x8A,0x7C,0x27,0xFE,0x55,0xFC,0xB3,0xDF,0xCD,0x28,0xC5,0x27,0xEE,0x65,0x68,0x48,0x48,0xED,0xED,0xC5,0x1D,0xD3,0xF2,0x7,0x47,0x27,0xEC,0x16,0xC5,0xD2,0xCD,0x66,0xCD,0x22,0xA7,0xA5
,0x64,0x70,0x93,0x6F,0x49,0x1F,0xF6,0x4E,0x3C,0x61,0x69,0x9E,0x5F,0xBB,0x28,0xBB,0xC6,0xE8,0x96,0x40,0xED,0x1E,0x91,0x88,0x39,0x32,0x22,0x66,0x1E,0xB1,0x51,0x18,0x2A,0x72,0xAB,0x86,0x8E,0x90,0x36,0xEC,0x4D,0x8E,0x59,0xAF,0xB5,0x72,0xAA,0xC6,0x62,0x77,0xD9,0x66,0x4E,0x65,0xDD,0x3C,0x39
,0x0D,0x9B,0x15,0xF2,0xF8,0x2,0x8,0xCF,0xBF,0x12,0x2D,0xCC,0x2E,0x9C,0xED,0xA0,0xAF,0x2D,0xDE,0x6B,0xF4,0x12,0x52,0x2,0x8C,0xD8,0x75,0xB8,0x45,0x38,0x4F,0xA5,0xFD,0xB6,0x45,0x13,0xE8,0x1A,0x8C,0x4D,0xB9,0xDF,0x4D,0x79,0xDB,0xCF,0xA3,0x81,0x30,0xDF,0x70,0xE6,0x4B,0x83,0x24,0x7C,0xDD
,0xAF,0x4D,0xC7,0x30,0x81,0x46,0x2C,0x42,0xF0,0xB3,0x86,0xA0,0x82,0x2A,0x5E,0x69,0x3A,0xC0,0x52,0x9D,0xFD,0xC9,0xFB,0x23,0x78,0x98,0xD8,0xA4,0xAE,0x77,0x73,0xC9,0x87,0xBB,0x5C,0xC2,0x2E,0x14,0x40,0xC1,0xD8,0x8,0xA6,0x62,0xAE,0xC9,0x87,0x83,0x4C,0x45,0x5C,0xA1,0xD7,0x82,0xE6,0x45,0x4
,0x6A,0x3D,0x5B,0xCA,0xE6,0x51,0x56,0x8D,0x6F,0x9F,0xBE,0x37,0x0D,0x1A,0x10,0xFE,0xC8,0x0C,0x9E,0x98,0xBA,0x16,0x5D,0x45,0x7E,0xE5,0x41,0x9D,0x5B,0xE0,0xF6,0x97,0xE6,0x4B,0xEE,0x94,0x77,0x44,0x30,0xFA,0x3,0x5,0x10,0x19,0xED,0xBC,0x5D,0xF6,0x6E,0x99,0xE4,0xC3,0xB6,0x1D,0xF8,0x64,0xFC
,0x84,0xF5,0x10,0x44,0x50,0x49,0x50,0xF9,0x92,0x0D,0x0A,0x53,0x97,0x48,0xAA,0x0F,0xF7,0x46,0xC4,0xDF,0xE4,0xF4,0x8D,0x69,0x51,0x7B,0xF5,0x3C,0xDD,0x7A,0x4,0xED,0x36,0x19,0x6B,0x7E,0x97,0x67,0xEA,0x54,0x70,0xDD,0x79,0xD5,0x1A,0x1B,0xC6,0x0F,0xBA,0x63,0x1D,0x1B,0x7A,0x56,0x2A,0xF9,0xB7
,0x29,0xB4,0x8E,0xB9,0xD5,0xCB,0x2B,0x86,0xC4,0x6C,0xBA,0x1D,0x18,0x3B,0xCE,0x4,0x48,0x3B,0x71,0x3D,0x47,0x2A,0x4B,0x9D,0xA8,0x77,0xDF,0xA9,0x38,0x5D,0x5F,0xCC,0x58,0x2D,0xD8,0x3D,0x96,0x4B,0x6D,0x37,0xF5,0xF2,0x25,0xFB,0x24,0x3B,0xF7,0x51,0x30,0x69,0x6,0xA5,0x1C,0x1F,0x1D,0xD6,0xA6
,0x60,0xD2,0xCF,0xBE,0x4,0x4C,0xA7,0x10,0x94,0xBE,0xBE,0xF5,0x25,0x14,0x72,0x66,0x1B,0x9A,0xCA,0x11,0x96,0x0D,0xE4,0x3D,0x50,0xF5,0x60,0xB2,0x9D,0xE0,0x8A,0x39,0x89,0x1C,0xB2,0xD6,0x99,0x87,0x41,0x9E,0x49,0x66,0x1,0xED,0xA0,0x81,0x51,0x12,0x2B,0x8E,0x80,0x2F,0xA1,0x50,0x2E,0x60,0x60
,0x33,0xE3,0xEE,0x43,0x1,0xC4,0x7C,0xCC,0x68,0x84,0x31,0x49,0xD7,0x7D,0x92,0xCB,0x85,0x2C,0x46,0xB0,0x20,0xD0,0x3B,0x94,0xF3,0x82,0x93,0x58,0x12,0x81,0xCD,0x31,0x33,0x0C,0x76,0x55,0xE9,0x74,0xDF,0x2E,0xF1,0xD8,0x49,0xDE,0x0F,0x2A,0xCC,0xCB,0x55,0xD2,0x89,0xED,0x62,0xD7,0x74,0xE9,0x44
,0x9B,0x1F,0x5D,0xA4,0x23,0x0C,0x85,0xF2,0x1E,0xB9,0xBF,0x15,0x75,0x15,0xD6,0x7A,0xB1,0x60,0xD4,0x8,0xF8,0x6F,0x1E,0x97,0xEA,0x0E,0x9D,0xC3,0x33,0x90,0xEB,0x85,0xFD,0x76,0xFB,0x68,0x37,0xDC,0x44,0xFA,0xC4,0xF4,0x1A,0xFE,0x87,0x12,0x1F,0x4A,0x74,0x84,0x4A,0x9F,0x87,0xE3,0xBB,0x98,0xD8
,0xEC,0xA3,0xC9,0x98,0xAF,0x83,0x44,0x45,0x0B,0x28,0xC2,0xD0,0x53,0x7C,0x58,0x1A,0x25,0xA0,0x31,0x59,0x1C,0x77,0x2F,0xF1,0x85,0x7,0xC4,0x5A,0xDF,0xCB,0x29,0x64,0x12,0x94,0xFB,0xA8,0x35,0xB9,0x94,0x73,0x11,0x7E,0x1E,0xE6,0xC2,0x69,0xA0,0x97,0x16,0x3A,0x3C,0x78,0xB7,0x8B,0x80,0x5E,0xFD
,0x78,0x64,0xDC,0x5F,0x9D,0xA1,0xBD,0x22,0xAA,0xF2,0xE5,0xD0,0xC9,0x14,0xF5,0x85,0x42,0xF1,0x5C,0xD1,0x69,0xF3,0x24,0x54,0x74,0xB4,0x60,0xBF,0x20,0x23,0x5C,0x54,0xB7,0x7C,0x63,0xA4,0xA0,0xE8,0x7E,0x97,0xC5,0x45,0xC0,0x78,0x10,0xE2,0x9E,0x35,0x5E,0xB9,0xF3,0x63,0x8,0xF7,0x0B,0x3E,0x84
,0x3B,0x74,0x46,0x2A,0x7B,0xEE,0xB1,0x82,0x9,0x2A,0x3E,0x73,0x65,0xA8,0xAB,0x71,0x99,0x8F,0x68,0x16,0xB0,0xAA,0xAA,0x64,0xFD,0x61,0xA8,0xF0,0xDA,0x3,0xEE,0x47,0x75,0xFB,0xAE,0xC1,0x7C,0x86,0x6,0x45,0x16,0x54,0xFD,0xDA,0x0C,0xA3,0x66,0xDC,0x98,0x8E,0x27,0x85,0xB1,0xB7,0x40,0x93,0x49
,0x3B,0x1C,0x2,0x52,0x26,0x55,0x43,0x15,0x2D,0xA6,0x2E,0x9D,0xFD,0x10,0x0D,0x0A,0xB2,0xED,0x1,0xC3,0x55,0x43,0x93,0xE1,0xF4,0xE5,0x81,0x38,0xA2,0xD5,0x0F,0xCC,0x32,0x4,0x78,0x37,0x9C,0xFB,0x1F,0xA4,0xD0,0x1E,0x1C,0xD5,0xDD,0x90,0x50,0x8A,0xFC,0xEC,0xA8,0x42,0x43,0xBC,0xC4,0x5,0x6E
,0xA1,0x8F,0x2A,0xC5,0x75,0x3,0x9D,0x55,0x20,0xC5,0xBD,0x82,0x73,0xC2,0x41,0x68,0xD1,0x4A,0x4E,0xC8,0xE3,0x12,0x29,0x14,0x2C,0xA3,0x92,0x61,0xB4,0x5D,0x6C,0xC4,0xB9,0xAD,0x85,0xE7,0x72,0xC6,0x38,0x57,0xE0,0x59,0xE2,0x4E,0xDC,0x86,0x98,0x9F,0x33,0xB0,0x50,0x6B,0x0B,0x68,0xE7,0x1F,0x6D
,0xE3,0x1A,0xC0,0x31,0x7C,0xEC,0xC3,0x0C,0x81,0x96,0x60,0x11,0xD4,0x79,0xE5,0x7F,0xC7,0x1F,0xD8,0xF9,0x6D,0xCD,0x4A,0x17,0x1E,0xBE,0x5E,0x7B,0x2E,0x7A,0x50,0x62,0xA6,0x66,0xFD,0xA7,0x11,0xFA,0x40,0x5C,0xF9,0xD4,0x8,0xFA,0x6B,0xE4,0xB8,0x1D,0xEF,0x16,0x81,0xED,0x4B,0xAF,0x3F,0x32,0x9E
,0xA3,0xC2,0x13,0x6,0x37,0xE0,0x98,0x6F,0x28,0x3A,0xEA,0xCF,0xBE,0x12,0x59,0x4B,0xDC,0x45,0x43,0x8F,0xA1,0x8B,0xBD,0xF8,0x8B,0x2B,0x44,0xB8,0xB4,0x5B,0x28,0x90,0x33,0x41,0x1C,0x5B,0x1D,0x16,0x8F,0x0D,0x0A,0x40,0x1F,0x40,0x36,0xFA,0x20,0x9A,0xF4,0x78,0x2,0x65,0x12,0x8A,0x22,0x53,0x56
,0x75,0x46,0xF2,0x19,0xF7,0x84,0x83,0x92,0xC4,0x0D,0x0A,0x41,0x5F,0xD4,0x33,0xAB,0x87,0xAF,0xDD,0x50,0x85,0x27,0x56,0x9E,0xBC,0x93,0xB3,0x43,0x87,0x16,0x4A,0xB8,0xBC,0xE6,0xCA,0x59,0x90,0x42,0xB0,0xB8,0x91,0xDE,0xD4,0x9A,0x0D,0xAC,0x8C,0x39,0x46,0xA4,0x36,0x2D,0xD0,0x59,0xA3,0xCA,0xAC
,0x47,0x57,0x2B,0x50,0x6A,0xDC,0xA9,0x2F,0x26,0x34,0x37,0x13,0xFB,0xCE,0x1E,0xBB,0x29,0xE2,0xAA,0x29,0x9F,0x7C,0x6A,0xE9,0x76,0x63,0x4C,0xE6,0x53,0x7,0x6A,0x21,0xCC,0x72,0xCA,0x93,0x4F,0xB1,0xD2,0xF1,0x96,0x88,0xBE,0x56,0x41,0xE5,0xF7,0x8E,0x78,0xFB,0x55,0x3E,0x49,0x62,0x5B,0x5E,0x9C
,0x33,0x91,0x69,0x81,0x82,0xB8,0xB1,0x91,0x0F,0x43,0x3E,0x3D,0xB2,0xBE,0x95,0xCC,0x59,0x84,0xDD,0xCA,0xF9,0x70,0xC8,0xC5,0x6E,0xEA,0x9E,0xEF,0xA6,0x12,0xD8,0xBD,0xF7,0x46,0xB7,0xF1,0x21,0xCE,0x4A,0x20,0xBF,0x14,0x9,0x4C,0xC8,0xE9,0xF1,0x7D,0xB9,0x83,0xF0,0x1,0x18,0x98,0x77,0x34,0x18
,0x22,0x64,0x86,0xBD,0x7A,0xD1,0xA8,0x8C,0x18,0x6,0x60,0xF5,0xB6,0x12,0x31,0xA5,0x28,0x70,0x41,0xEC,0xB2,0x2A,0x8D,0x49,0x21,0xA1,0xEE,0x5B,0x69,0xE7,0x0D,0x53,0x19,0x72,0xA4,0x20,0x66,0x10,0x4E,0x52,0x24,0x43,0x2C,0x1E,0x5C,0x83,0x9F,0x62,0xD4,0xBF,0x87,0x1D,0x62,0xA0,0x2,0x30,0x2C
,0xC9,0x4D,0xE0,0xC6,0xB8,0xC3,0x0C,0x58,0x73,0x89,0x4E,0x92,0x9C,0xCC,0x32,0xE9,0x2C,0x61,0xBA,0x95,0x59,0x76,0x21,0xD0,0x1,0x35,0x5A,0x25,0x9,0x0D,0x19,0xD6,0x7,0x75,0xCE,0x7C,0xC7,0xF4,0xB0,0xCB,0xD9,0x1C,0xD0,0xA5,0xCD,0x6A,0xA0,0x53,0x48,0xAE,0xF6,0x20,0x9C,0xE0,0x99,0x45,0x0E
,0x1,0xB5,0x18,0x59,0x6,0x3B,0xC1,0xC3,0x70,0x58,0x39,0x41,0x60,0x3A,0xCF,0xE3,0xEB,0x39,0x27,0x3F,0x92,0x98,0xAE,0xE2,0x73,0x9,0xA4,0x99,0x38,0x6,0xB7,0x84,0x51,0x43,0x38,0xD2,0x6F,0x55,0xEE,0x32,0xEA,0xB1,0x96,0x96,0xF0,0x29,0x21,0x8F,0x30,0x22,0x8F,0xD1,0xD6,0x99,0xB8,0x12,0xAA
,0x2B,0xAD,0xE4,0xF8,0x29,0x21,0xC9,0x31,0x21,0x6F,0xFA,0xEF,0xB0,0xCC,0x4A,0x3B,0x1C,0x19,0x81,0xBB,0x84,0xE3,0xAB,0xC8,0x2D,0x39,0xB4,0xF7,0xB0,0x8F,0xB0,0xFE,0x9F,0xB4,0x5F,0xC9,0x50,0xD4,0x0F,0x53,0x72,0x8C,0xA5,0x5A,0x18,0x30,0xC9,0x5A,0xDD,0x2B,0x4,0xF7,0xDE,0xAC,0xC7,0x3D,0x1
,0x68,0x5A,0xD8,0x6E,0xBD,0x66,0xC4,0xAF,0x15,0x2C,0x7B,0x53,0x9C,0x4A,0x16,0x65,0x48,0xE6,0xA4,0xE0,0x56,0x3F,0xF2,0x45,0x1D
						};
	 PatchEx((BYTE*)Niojwj2, (BYTE*)Key2, 10000, handlGame);

	 DWORD FileLoadWeight = 0x004C66AD;
	 BYTE FileLoadWeight1[4] = { 0x02,0x01,0x00,0x00 };
	 PatchEx((BYTE*)FileLoadWeight, (BYTE*)FileLoadWeight1, 4, handlGame);

	 DWORD FileLoadHeight = 0x004C66B7;
	 BYTE FileLoadHeight1[4] = { 0x14,0x00,0x00,0x00 };
	 PatchEx((BYTE*)FileLoadHeight, (BYTE*)FileLoadHeight1, 4, handlGame);

	 //End
	 BYTE ColorGroup[5] = { 0x68,0x85,0x00,0xFF,0xFF };
	 DWORD PasssCodelor = 0x00660114;
	 DWORD PasssCodelor1  = 0x0066017A;
	 DWORD PasssCodelor2 = 0x00660329;
	 DWORD PasssCodelor3  = 0x00660373;
	 DWORD PasssCodelor4 = 0x0066006D;
	 DWORD PasssCodelor5 = 0x00660276;
	 DWORD PasssCodelor6 = 0x0066127B;
	 DWORD PasssCodelor7 = 0x006613E9;
	 DWORD PasssCodelor8 = 0x006610A5;
	 DWORD PasssCodelor9  = 0x00661506;
	 DWORD PasssCodelor10 = 0x006615DC;

	 // Lock Sort
		 /*DWORD LockSort = 0x006EC0D0;
	  PatchEx((BYTE*)LockSort,  (BYTE*)"\xC3", 1, handlGame);  */

	 //GM Client


	 //end
	 //Zoom
	 DWORD ZoomChange = 0x004256A0;
	 PatchEx((BYTE*)ZoomChange,  (BYTE*)"\xD0", 1, handlGame);
	 DWORD ZoomChange1 = 0x005A0EBB;
	 PatchEx((BYTE*)ZoomChange1,  (BYTE*)"\xD0", 1, handlGame);

	 PatchEx((BYTE*)PasssCodelor,  (BYTE*)ColorGroup, 5, handlGame);
	 PatchEx((BYTE*)PasssCodelor1, (BYTE*)ColorGroup, 5, handlGame);
	 PatchEx((BYTE*)PasssCodelor2, (BYTE*)ColorGroup, 5, handlGame);
	 PatchEx((BYTE*)PasssCodelor3, (BYTE*)ColorGroup, 5, handlGame);
	 PatchEx((BYTE*)PasssCodelor4, (BYTE*)ColorGroup, 5, handlGame);

	 PatchEx((BYTE*)PasssCodelor5, (BYTE*)ColorGroup, 5, handlGame);
	 PatchEx((BYTE*)PasssCodelor6, (BYTE*)ColorGroup, 5, handlGame);
	 PatchEx((BYTE*)PasssCodelor7, (BYTE*)ColorGroup, 5, handlGame);
	 PatchEx((BYTE*)PasssCodelor8, (BYTE*)ColorGroup, 5, handlGame);
	 PatchEx((BYTE*)PasssCodelor9, (BYTE*)ColorGroup, 5, handlGame);
	 PatchEx((BYTE*)PasssCodelor10, (BYTE*)ColorGroup, 5, handlGame);

	 //OpenDamage
	 DWORD Change5to6 = 0x00783C99;
	 DWORD ChangeValue1 = 0x00783C4F;
	 DWORD ChangeValue2 = 0x00783C5F;
	 DWORD ChangeValue3 = 0x00783C68;
	 DWORD ChangeValue4 = 0x00783C08;
	 //Load Effect Weapon
	 extHook Effect1(handlGame, (DWORD)FunAddressEffect01, (DWORD)AdrInchantEffect, 8);
	 extHook Effect2(handlGame, (DWORD)FunAddressEffect02, (DWORD)AdrInchantEffect2, 8);
	 extHook Effect3(handlGame, (DWORD)FunAddressEffect03, (DWORD)AdrInchantEffect3, 8);
	 extHook Effect4(handlGame, (DWORD)FunAddressEffect04, (DWORD)AdrInchantEffect4, 8);
	 extHook Effect5(handlGame, (DWORD)FunAddressEffect05, (DWORD)AdrInchantEffect5, 8);
	 extHook Effect6(handlGame, (DWORD)FunAddressEffect06, (DWORD)AdrInchantEffect6, 8);

	 //LockSort



	 //LoadMapsFast
	 extHook hook(handlGame, (DWORD)ourFunction1, (DWORD)LoadMapsFast, 6);
	 //ChangePatch
	 extHook CPatchGame(handlGame, (DWORD)FunChangePatch, (DWORD)ChangePatch, 6);
	//Load LoadVntext
	 extHook LoadNDtextVn(handlGame, (DWORD)LoadTextVn, (DWORD)LoadVnText, 7);
	// //Load LoadVntext2
	extHook LoadNDtextVn2(handlGame, (DWORD)PrintOutText, (DWORD)LoadTextVn22, 5);

	//Load NickIconLocal
	LPVOID NickIcon = (LPVOID)VirtualAllocEx(handlGame, NULL, 736, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);

	VirtualProtectEx(handlGame, (LPVOID)NickIcon, 736, PAGE_EXECUTE_READWRITE, &oldProtect1);

    //Load AnotherUser
	LPVOID NickIconAnotherUser = (LPVOID)VirtualAllocEx(handlGame, NULL, 736, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);

	VirtualProtectEx(handlGame, (LPVOID)NickIconAnotherUser, 736, PAGE_EXECUTE_READWRITE, &oldProtect1);

	//Load TGA
	LPVOID TGAFileA = (LPVOID)VirtualAllocEx(handlGame, NULL, 25, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);

	VirtualProtectEx(handlGame, (LPVOID)TGAFileA, 25, PAGE_EXECUTE_READWRITE, &oldProtect1);

	LPVOID TGAFileB = (LPVOID)VirtualAllocEx(handlGame, NULL, 25, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);

	VirtualProtectEx(handlGame, (LPVOID)TGAFileB, 25, PAGE_EXECUTE_READWRITE, &oldProtect1);

	LPVOID TGAFileC = (LPVOID)VirtualAllocEx(handlGame, NULL, 25, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);

	VirtualProtectEx(handlGame, (LPVOID)TGAFileC, 25, PAGE_EXECUTE_READWRITE, &oldProtect1);

	LPVOID TGAFileD = (LPVOID)VirtualAllocEx(handlGame, NULL, 25, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);

	VirtualProtectEx(handlGame, (LPVOID)TGAFileD, 25, PAGE_EXECUTE_READWRITE, &oldProtect1);

	BYTE NameFileA[18] = { 0x49,0x74,0x65,0x6D,0x5F,0x43,0x6C,0x6F,0x5F,0x30,0x30,0x61,0x5F,0x31,0x2E,0x74,0x67,0x61};
	BYTE NameFileB[18] = { 0x49,0x74,0x65,0x6D,0x5F,0x43,0x6C,0x6F,0x5F,0x30,0x30,0x62,0x5F,0x31,0x2E,0x74,0x67,0x61};
	BYTE NameFileC[18] = { 0x49,0x74,0x65,0x6D,0x5F,0x43,0x6C,0x6F,0x5F,0x30,0x30,0x63,0x5F,0x31,0x2E,0x74,0x67,0x61};
	BYTE NameFileD[18] = { 0x49,0x74,0x65,0x6D,0x5F,0x43,0x6C,0x6F,0x5F,0x30,0x30,0x64,0x5F,0x31,0x2E,0x74,0x67,0x61};

	/*PatchEx((BYTE*)TGAFileA, (BYTE*)NameFileA, 18, handlGame);
	PatchEx((BYTE*)TGAFileB, (BYTE*)NameFileB, 18, handlGame);
	PatchEx((BYTE*)TGAFileC, (BYTE*)NameFileC, 18, handlGame);
	PatchEx((BYTE*)TGAFileD, (BYTE*)NameFileD, 18, handlGame);   */

	//

	LPVOID TiLeTinhLuyen = (LPVOID)VirtualAllocEx(handlGame, NULL, 800, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);

	VirtualProtectEx(handlGame, (LPVOID)TiLeTinhLuyen, 800, PAGE_EXECUTE_READWRITE, &oldProtect1);

	//HienThiInchant
		LPVOID ShowAnotherRequestInc = (LPVOID)VirtualAllocEx(handlGame, NULL, 300, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);

		VirtualProtectEx(handlGame, (LPVOID)ShowAnotherRequestInc, 300, PAGE_EXECUTE_READWRITE, &oldProtect1);

		BYTE AddressItemInc[292] = { 0x0,0x0,0x0,0x0,0xE8,0x16,0x86,0x0,0xF1,0xBE,0xF1,0xBE,0x43,0xCE,0x43,0xCE,0x43,0xCE,0x43,0xCE,0xC5,0xC5,0xC5,0xC5,0x43,
0xCE,0xE0,0x1F,0x1F,0xC5,0xC5,0xC5,0xC5,0xC5,0xC5,0xC5,0xC5,0x0,0x43,0xCE,0x43,0xCE,0x43,0xCE,0x0,0x0,0x43,0xCE,0x43,0xCE,
0xC5,0xC5,0x43,0xCE,0x43,0xCE,0xC5,0xC5,0x43,0xCE,0x43,0xCE,0xC5,0xC5,0x43,0xCE,0x43,0xCE,0xC5,0xC5,0x43,0xCE,0x43,0xCE,
0xC5,0xC5,0x43,0xCE,0x43,0xCE,0xC5,0xC5,0x43,0xCE,0x43,0xCE,0xC5,0xC5,0x43,0xCE,0x43,0xCE,0xC5,0xC5,0x43,0xCE,0x43,0xCE,
0xC5,0xC5,0x43,0xCE,0x43,0xCE,0xC5,0xC5,0x43,0xCE,0x43,0xCE,0xC5,0xC5,0x43,0xCE,0x43,0xCE,0xC5,0xC5,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xE8,0x16,0x86,0x0,
0xF1,0xBE,0xF1,0xBE,0x43,0xCE,0x43,0xCE,0x43,0xCE,0x43,0xCE,0xC5,0xC5,0xC5,0xC5,0x43,0xCE,0xE0,0x1F,0x1F,0xC5,0xC5,0xC5,
0xC5,0xC5,0xC5,0xC5,0xC5,0x0,0x43,0xCE,0x43,0xCE,0x43,0xCE,0x0,0x0,0x43,0xCE,0x43,0xCE,0xC5,0xC5,0x43,0xCE,0x43,0xCE,0xC5,
0xC5,0x43,0xCE,0x43,0xCE,0xC5,0xC5,0x43,0xCE,0x43,0xCE,0xC5,0xC5,0x43,0xCE,0x43,0xCE,0xC5,0xC5,0x43,0xCE,0x43,0xCE,0xC5,
0xC5,0x43,0xCE,0x43,0xCE,0xC5,0xC5,0x43,0xCE,0x43,0xCE,0xC5,0xC5,0x43,0xCE,0x43,0xCE,0xC5,0xC5,0x43,0xCE,0x43,0xCE,0xC5,
0xC5,0x43,0xCE,0x43,0xCE,0xC5,0xC5,0x43,0xCE,0x43,0xCE,0xC5,0xC5,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};

	 PatchEx((BYTE*)ShowAnotherRequestInc, (BYTE*)AddressItemInc, 292, handlGame);

	//  Hien Thi Icon Bang Hoi
	LPVOID NickIconBangHoi = (LPVOID)VirtualAllocEx(handlGame, NULL, 736, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);

	VirtualProtectEx(handlGame, (LPVOID)NickIconBangHoi, 736, PAGE_EXECUTE_READWRITE, &oldProtect1);

	//AddDamage
	 LPVOID LoadDamage24 = (LPVOID)VirtualAllocEx(handlGame, NULL, 96, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);

	VirtualProtectEx(handlGame, (LPVOID)LoadDamage24, 96, PAGE_EXECUTE_READWRITE, &oldProtect1);
	BYTE LoadDamage24Va[96] = { 0x00,0x00,0x20,0x40,0x00,0x00,0x00,0xBF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x3F,
									0x00,0x00,0x20,0x40,0x00,0x00,0x00,0xBF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
									0x00,0x00,0x60,0x40,0x00,0x00,0x00,0xBF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x3F,0x00,0x00,0x80,0x3F,
									0x00,0x00,0x60,0x40,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x3F,0x00,0x00,0x00,0x00
	 };
	 PatchEx((BYTE*)LoadDamage24, (BYTE*)LoadDamage24Va, 96, handlGame);


	 LPVOID LoadDamage241 = (LPVOID)VirtualAllocEx(handlGame, NULL, 80, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);

	VirtualProtectEx(handlGame, (LPVOID)LoadDamage241, 80, PAGE_EXECUTE_READWRITE, &oldProtect1);
	BYTE LoadDamage241Va[80] = {0x00,0x00,0x01,0x00,0x03,0x00,0x00,0x00,0x03,0x00,0x02,0x00,0x04,0x00,0x05,0x00,
								0x07,0x00,0x04,0x00,0x07,0x00,0x06,0x00,0x08,0x00,0x09,0x00,0x0B,0x00,0x08,0x00,
								0x0B,0x00,0x0A,0x00,0x0C,0x00,0x0D,0x00,0x0F,0x00,0x0C,0x00,0x0F,0x00,0x0E,0x00,
								0x10,0x00,0x11,0x00,0x13,0x00,0x10,0x00,0x13,0x00,0x12,0x00,0x14,0x00,0x15,0x00,
								0x17,0x00,0x14,0x00,0x17,0x00,0x16,0x00 };
	 PatchEx((BYTE*)LoadDamage241, (BYTE*)LoadDamage241Va, 80, handlGame);

	 LPVOID LoadDamage2412 = (LPVOID)VirtualAllocEx(handlGame, NULL, 1000, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);

     //Skill Weapon

	 LPVOID ListInforWeaponSkill = (LPVOID)VirtualAllocEx(handlGame, NULL, 100, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);

	 VirtualProtectEx(handlGame, (LPVOID)ListInforWeaponSkill, 100, PAGE_EXECUTE_READWRITE, &oldProtect1);

	VirtualProtectEx(handlGame, (LPVOID)LoadDamage2412, 1000, PAGE_EXECUTE_READWRITE, &oldProtect1);
	BYTE LoadDamage2412Va[576] = {0x00,0x00,0x20,0xC0,
0x00,0x00,0x00,0xBF,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x00,0x00,0x80,0x3F,
0x00,0x00,0x20,0xC0,
0x00,0x00,0x00,0x3F,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x00,0x00,0xC0,0xBF,
0x00,0x00,0x00,0xBF,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x00,0x00,0x80,0x3F,
0x00,0x00,0x80,0x3F,
0x00,0x00,0xC0,0xBF,
0x00,0x00,0x00,0x3F,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x00,0x00,0x80,0x3F,
0x00,0x00,0x00,0x00,
0x00,0x00,0xC0,0xBF,
0x00,0x00,0x00,0xBF,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x00,0x00,0x80,0x3F,
0x00,0x00,0xC0,0xBF,
0x00,0x00,0x00,0x3F,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0xBF,
0x00,0x00,0x00,0xBF,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x00,0x00,0x80,0x3F,
0x00,0x00,0x80,0x3F,
0x00,0x00,0x00,0xBF,
0x00,0x00,0x00,0x3F,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x00,0x00,0x80,0x3F,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0xBF,
0x00,0x00,0x00,0xBF,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x00,0x00,0x80,0x3F,
0x00,0x00,0x00,0xBF,
0x00,0x00,0x00,0x3F,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x3F,
0x00,0x00,0x00,0xBF,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x00,0x00,0x80,0x3F,
0x00,0x00,0x80,0x3F,
0x00,0x00,0x00,0x3F,
0x00,0x00,0x00,0x3F,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x00,0x00,0x80,0x3F,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x3F,
0x00,0x00,0x00,0xBF,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x00,0x00,0x80,0x3F,
0x00,0x00,0x00,0x3F,
0x00,0x00,0x00,0x3F,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x00,0x00,0xC0,0x3F,
0x00,0x00,0x00,0xBF,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x00,0x00,0x80,0x3F,
0x00,0x00,0x80,0x3F,
0x00,0x00,0xC0,0x3F,
0x00,0x00,0x00,0x3F,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x00,0x00,0x80,0x3F,
0x00,0x00,0x00,0x00,
0x00,0x00,0xC0,0x3F,
0x00,0x00,0x00,0xBF,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x00,0x00,0x80,0x3F,
0x00,0x00,0xC0,0x3F,
0x00,0x00,0x00,0x3F,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x00,0x00,0x20,0x40,
0x00,0x00,0x00,0xBF,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x00,0x00,0x80,0x3F,
0x00,0x00,0x80,0x3F,
0x00,0x00,0x20,0x40,
0x00,0x00,0x00,0x3F,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x00,0x00,0x80,0x3F,
0x00,0x00,0x00,0x00,

0x00,0x00,0x20,0x40,
0x00,0x00,0x00,0xBF,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x00,0x00,0x80,0x3F,

0x00,0x00,0x20,0x40,
0x00,0x00,0x00,0x3F,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,

0x00,0x00,0x60,0x40,
0x00,0x00,0x00,0xBF,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x00,0x00,0x80,0x3F,
0x00,0x00,0x80,0x3F,

0x00,0x00,0x60,0x40,
0x00,0x00,0x00,0x3F,
0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,
0x00,0x00,0x80,0x3F,
0x00,0x00,0x00,0x00};
	 //PatchEx((BYTE*)LoadDamage2412, (BYTE*)LoadDamage2412Va, 576, handlGame);

     DWORD ChangeLoadDamage = 0x0077E7FD;
	 //LPVOID GetAdressNewArray = &LoadDamage2412 + 14;
	// PatchEx((BYTE*)ChangeLoadDamage, (BYTE*)&LoadDamage2412, 4, handlGame);


    //ListEffect
	LPVOID ListEffect = (LPVOID)VirtualAllocEx(handlGame, NULL, 220, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);

	VirtualProtectEx(handlGame, (LPVOID)ListEffect, 220, PAGE_EXECUTE_READWRITE, &oldProtect1);
	BYTE IdEffect[220] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xEA,0x03,0x00,0x00,0xE9,0x03,0x00,0x00,0xF3,0x03,0x00,0x00,0xFD,0x03,0x00,0x00,0x07,0x04,0x00,0x00,0x11,0x04,0x00,0x00,0x1B,0x04,0x00,0x00,0x25,0x04,0x00,0x00,0x2F,0x04,0x00,0x00,
						 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x17,0x05,0x00,0x00,0x15,0x05,0x00,0x00,0x1F,0x05,0x00,0x00,0x29,0x05,0x00,0x00,0x33,0x05,0x00,0x00,0x3D,0x05,0x00,0x00,0x47,0x05,0x00,0x00,0x51,0x05,0x00,0x00,0x5B,0x05,0x00,0x00,
						 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x05,0x00,0x00,0x16,0x05,0x00,0x00,0x20,0x05,0x00,0x00,0x2A,0x05,0x00,0x00,0x34,0x05,0x00,0x00,0x3E,0x05,0x00,0x00,0x48,0x05,0x00,0x00,0x52,0x05,0x00,0x00,0x5C,0x05,0x00,0x00,
						 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7B,0x05,0x00,0x00,0x79,0x05,0x00,0x00,0x83,0x05,0x00,0x00,0x8D,0x05,0x00,0x00,0x97,0x05,0x00,0x00,0xA1,0x05,0x00,0x00,0xAB,0x05,0x00,0x00,0xB5,0x05,0x00,0x00,0xBF,0x05,0x00,0x00,
						 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7C,0x05,0x00,0x00,0x7A,0x05,0x00,0x00,0x84,0x05,0x00,0x00,0x8E,0x05,0x00,0x00,0x98,0x05,0x00,0x00,0xA2,0x05,0x00,0x00,0xAC,0x05,0x00,0x00,0xB6,0x05,0x00,0x00,0xC0,0x05,0x00,0x00,
	 };
	PatchEx((BYTE*)ListEffect, (BYTE*)IdEffect, 220, handlGame);
	//Addlost
	LPVOID SlotDefine = (LPVOID)VirtualAllocEx(handlGame, NULL, 72, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
	//TestNewSlot
	//
	LPVOID UniCodeVN = (LPVOID)VirtualAllocEx(handlGame, NULL, 880, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);

	VirtualProtectEx(handlGame, (LPVOID)UniCodeVN, 880, PAGE_EXECUTE_READWRITE, &oldProtect1);
	BYTE ByteUniCodeCheck[866] = {0x00,0x00,0x41,0x00,0x61,0x00,0x41,0xec,0x61,0xec,0x41,0xcc,0x61,0xcc,0x41,0xd2,0x61,0xd2,0x41,0xde,0x61,0xde,0x41,0xf2,0x61,0xf2,0xc2,0x00,0xe2,0x00,0xc2,0xec,
0xe2,0xec,0xc2,0xcc,0xe2,0xcc,0xc2,0xd2,0xe2,0xd2,0xc2,0xde,0xe2,0xde,0xc2,0xf2,0xe2,0xf2,0xc3,0x00,0xe3,0x00,0xc3,0xec,0xe3,0xec,0xc3,0xcc,0xe3,0xcc,
0xc3,0xd2,0xe3,0xd2,0xc3,0xde,0xe3,0xde,0xc3,0xf2,0xe3,0xf2,0x42,0x00,0x62,0x00,0x43,0x00,0x63,0x00,0x44,0x00,0x64,0x00,0xd0,0x00,0xf0,0x00,0x45,0x00,
0x65,0x00,0x45,0xec,0x65,0xec,0x45,0xcc,0x65,0xcc,0x45,0xd2,0x65,0xd2,0x45,0xde,0x65,0xde,0x45,0xf2,0x65,0xf2,0xca,0x00,0xea,0x00,0xca,0xec,0xea,0xec,
0xca,0xcc,0xea,0xcc,0xca,0xd2,0xea,0xd2,0xca,0xde,0xea,0xde,0xca,0xf2,0xea,0xf2,0x46,0x00,0x66,0x00,0x47,0x00,0x67,0x00,0x48,0x00,0x68,0x00,0x49,0x00,
0x69,0x00,0x49,0xec,0x69,0xec,0x49,0xcc,0x69,0xcc,0x49,0xd2,0x69,0xd2,0x49,0xde,0x69,0xde,0x49,0xf2,0x69,0xf2,0x4a,0x00,0x6a,0x00,0x4b,0x00,0x6b,0x00,
0x4c,0x00,0x6c,0x00,0x4d,0x00,0x6d,0x00,0x4e,0x00,0x6e,0x00,0x4f,0x00,0x6f,0x00,0x4f,0xec,0x6f,0xec,0x4f,0xcc,0x6f,0xcc,0x4f,0xd2,0x6f,0xd2,0x4f,0xde,
0x6f,0xde,0x4f,0xf2,0x6f,0xf2,0xd4,0x00,0xf4,0x00,0xd4,0xec,0xf4,0xec,0xd4,0xcc,0xf4,0xcc,0xd4,0xd2,0xf4,0xd2,0xd4,0xde,0xf4,0xde,0xd4,0xf2,0xf4,0xf2,
0xd5,0x00,0xf5,0x00,0xd5,0xec,0xf5,0xec,0xd5,0xcc,0xf5,0xcc,0xd5,0xd2,0xf5,0xd2,0xd5,0xde,0xf5,0xde,0xd5,0xf2,0xf5,0xf2,0x50,0x00,0x70,0x00,0x51,0x00,
0x71,0x00,0x52,0x00,0x72,0x00,0x53,0x00,0x73,0x00,0x54,0x00,0x74,0x00,0x55,0x00,0x75,0x00,0x55,0xec,0x75,0xec,0x55,0xcc,0x75,0xcc,0x55,0xd2,0x75,0xd2,
0x55,0xde,0x75,0xde,0x55,0xf2,0x75,0xf2,0xdd,0x00,0xfd,0x00,0xdd,0xec,0xfd,0xec,0xdd,0xcc,0xfd,0xcc,0xdd,0xd2,0xfd,0xd2,0xdd,0xde,0xfd,0xde,0xdd,0xf2,
0xfd,0xf2,0x56,0x00,0x76,0x00,0x57,0x00,0x77,0x00,0x58,0x00,0x78,0x00,0x59,0x00,0x79,0x00,0x59,0xec,0x79,0xec,0x59,0xcc,0x79,0xcc,0x59,0xd2,0x79,0xd2,
0x59,0xde,0x79,0xde,0x59,0xf2,0x79,0xf2,0x5a,0x00,0x7a,0x00,0x80,0x00,0x82,0x00,0x83,0x00,0x84,0x00,0x85,0x00,0x86,0x00,0x87,0x00,0x88,0x00,0x89,0x00,
0x8A,0x00,0x8B,0x00,0x8C,0x00,0x8E,0x00,0x91,0x00,0x92,0x00,0x93,0x00,0x94,0x00,0x95,0x00,0x96,0x00,0x97,0x00,0x98,0x00,0x99,0x00,0x9A,0x00,0x9B,0x00,
0x9C,0x00,0x9E,0x00,0x9F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x41,0x00,0x61,0x00,0xc1,0x00,0xe1,0x00,0xc0,0x00,0xe0,0x00,0xa2,0x1e,0xa3,0x1e,0xc3,0x00,
0xe3,0x00,0xa0,0x1e,0xa1,0x1e,0xc2,0x00,0xe2,0x00,0xa4,0x1e,0xa5,0x1e,0xa6,0x1e,0xa7,0x1e,0xa8,0x1e,0xa9,0x1e,0xaa,0x1e,0xab,0x1e,0xac,0x1e,0xad,0x1e,
0x02,0x01,0x03,0x01,0xae,0x1e,0xaf,0x1e,0xb0,0x1e,0xb1,0x1e,0xb2,0x1e,0xb3,0x1e,0xb4,0x1e,0xb5,0x1e,0xb6,0x1e,0xb7,0x1e,0x42,0x00,0x62,0x00,0x43,0x00,
0x63,0x00,0x44,0x00,0x64,0x00,0x10,0x01,0x11,0x01,0x45,0x00,0x65,0x00,0xc9,0x00,0xe9,0x00,0xc8,0x00,0xe8,0x00,0xba,0x1e,0xbb,0x1e,0xbc,0x1e,0xbd,0x1e,
0xb8,0x1e,0xb9,0x1e,0xca,0x00,0xea,0x00,0xbe,0x1e,0xbf,0x1e,0xc0,0x1e,0xc1,0x1e,0xc2,0x1e,0xc3,0x1e,0xc4,0x1e,0xc5,0x1e,0xc6,0x1e,0xc7,0x1e,0x46,0x00,
0x66,0x00,0x47,0x00,0x67,0x00,0x48,0x00,0x68,0x00,0x49,0x00,0x69,0x00,0xcd,0x00,0xed,0x00,0xcc,0x00,0xec,0x00,0xc8,0x1e,0xc9,0x1e,0x28,0x01,0x29,0x01,
0xca,0x1e,0xcb,0x1e,0x4a,0x00,0x6a,0x00,0x4b,0x00,0x6b,0x00,0x4c,0x00,0x6c,0x00,0x4d,0x00,0x6d,0x00,0x4e,0x00,0x6e,0x00,0x4f,0x00,0x6f,0x00,0xd3,0x00,
0xf3,0x00,0xd2,0x00,0xf2,0x00,0xce,0x1e,0xcf,0x1e,0xd5,0x00,0xf5,0x00,0xcc,0x1e,0xcd,0x1e,0xd4,0x00,0xf4,0x00,0xd0,0x1e,0xd1,0x1e,0xd2,0x1e,0xd3,0x1e,
0xd4,0x1e,0xd5,0x1e,0xd6,0x1e,0xd7,0x1e,0xd8,0x1e,0xd9,0x1e,0xa0,0x01,0xa1,0x01,0xda,0x1e,0xdb,0x1e,0xdc,0x1e,0xdd,0x1e,0xde,0x1e,0xdf,0x1e,0xe0,0x1e,
0xe1,0x1e,0xe2,0x1e,0xe3,0x1e,0x50,0x00,0x70,0x00,0x51,0x00,0x71,0x00,0x52,0x00,0x72,0x00,0x53,0x00,0x73,0x00,0x54,0x00,0x74,0x00,0x55,0x00,0x75,0x00,
0xda,0x00,0xfa,0x00,0xd9,0x00,0xf9,0x00,0xe6,0x1e,0xe7,0x1e,0x68,0x01,0x69,0x01,0xe4,0x1e,0xe5,0x1e,0xaf,0x01,0xb0,0x01,0xe8,0x1e,0xe9,0x1e,0xea,0x1e,
0xeb,0x1e,0xec,0x1e,0xed,0x1e,0xee,0x1e,0xef,0x1e,0xf0,0x1e,0xf1,0x1e,0x56,0x00,0x76,0x00,0x57,0x00,0x77,0x00,0x58,0x00,0x78,0x00,0x59,0x00,0x79,0x00,
0x00,0x00,0xfd,0x00,0xf2,0x1e,0xf3,0x1e,0xf6,0x1e,0xf7,0x1e,0xf8,0x1e,0xf9,0x1e,0xf4,0x1e,0xf5,0x1e,0x5a,0x00,0x7a,0x00,0xAC,0x20,0xA1,0x20,0x92,0x01,
0x1E,0x20,0x26,0x20,0x20,0x20,0x21,0x20,0xC6,0x02,0x30,0x20,0x60,0x01,0x39,0x20,0x52,0x01,0x7D,0x01,0x18,0x20,0x19,0x20,0x1C,0x20,0x1D,0x20,0x22,0x20,
0x13,0x20,0x14,0x20,0xDC,0x02,0x22,0x21,0x61,0x01,0x3A,0x20,0x53,0x01,0x7E,0x01,0x78,0x01,0x00,0x00,0x00,0x00,0x00,0x00};


	PatchEx((BYTE*)UniCodeVN, (BYTE*)ByteUniCodeCheck, 866, handlGame);

	VirtualProtectEx(handlGame, (LPVOID)SlotDefine, 72, PAGE_EXECUTE_READWRITE, &oldProtect1);
	BYTE SlotDefineValue[72] = {0x12,0x01,0x00,0x00,
								0xD2,0x00,0x00,0x00,
								0x34,0x01,0x00,0x00,
								0xD2,0x00,0x00,0x00,
								0x12,0x01,0x00,0x00,
								0xF4,0x00,0x00,0x00,
								0x34,0x01,0x00,0x00,
								0xF4,0x00,0x00,0x00,
								0x12,0x01,0x00,0x00,
								0x16,0x01,0x00,0x00,
								0x34,0x01,0x00,0x00,
								0x16,0x01,0x00,0x00,
								0x12,0x01,0x00,0x00,
								0x38,0x01,0x00,0x00,
								0x34,0x01,0x00,0x00,
								0x38,0x01,0x00,0x00,
								0xC3,0x00,0x00,0x00,
								0x6D,0x00,0x00,0x00,};
	PatchEx((BYTE*)SlotDefine, (BYTE*)SlotDefineValue, 72, handlGame);
	//End
	//Load NickIcon
	LPVOID NickIcon3 = (LPVOID)VirtualAllocEx(handlGame, NULL, 736, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);

	VirtualProtectEx(handlGame, (LPVOID)NickIcon3, 736, PAGE_EXECUTE_READWRITE, &oldProtect1);
	//End
	LPVOID ShowSlotLock = (LPVOID)VirtualAllocEx(handlGame, NULL, 736, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);

	VirtualProtectEx(handlGame, (LPVOID)ShowSlotLock, 736, PAGE_EXECUTE_READWRITE, &oldProtect1);
    //Load NickIcon
	LPVOID LoadSpeed = (LPVOID)VirtualAllocEx(handlGame, NULL, 20, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);

	VirtualProtectEx(handlGame, (LPVOID)LoadSpeed, 20, PAGE_EXECUTE_READWRITE, &oldProtect1);
	// Huyet Long
	LPVOID nHuyetLong = (LPVOID)VirtualAllocEx(handlGame, NULL, 4, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);

	VirtualProtectEx(handlGame, (LPVOID)nHuyetLong, 4, PAGE_EXECUTE_READWRITE, &oldProtect1);


	//Level Up
		LPVOID LevelUp = (LPVOID)VirtualAllocEx(handlGame, NULL, 6624, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);

		VirtualProtectEx(handlGame, (LPVOID)LevelUp, 6624, PAGE_EXECUTE_READWRITE, &oldProtect1);
		DWORD *LevelUp2 =(DWORD*)(&LevelUp);
		//DWORD *LevelUp3 =(DWORD*)(&LevelUp)+4;
		//DWORD *LevelUp4 = (DWORD*)(&LevelUp)+18;
		PatchEx((BYTE*)0x006278B4, (BYTE*)"\x15\x01\x00\x00", 4, handlGame);
		PatchEx((BYTE*)0x00627732, (BYTE*)"\xC0\x0B\x00\x00", 4, handlGame);
		PatchEx((BYTE*)0x0062777F, (BYTE*)"\xC0\x0B\x00\x00", 4, handlGame);
        PatchEx((BYTE*)0x004A3110, (BYTE*)"\x31\xC0\x90\x90", 4, handlGame);

		PatchEx((BYTE*)0x0062783E, (BYTE*)LevelUp2, 4, handlGame);
		PatchEx((BYTE*)0x00437D00, (BYTE*)LevelUp2, 4, handlGame);
		PatchEx((BYTE*)0x0043848F, (BYTE*)LevelUp2, 4, handlGame);
		PatchEx((BYTE*)0x0046476F, (BYTE*)LevelUp2, 4, handlGame);
		PatchEx((BYTE*)0x00467DDB, (BYTE*)LevelUp2, 4, handlGame);
		PatchEx((BYTE*)0x0047E096, (BYTE*)LevelUp2, 4, handlGame);
		PatchEx((BYTE*)0x004C947C, (BYTE*)LevelUp2, 4, handlGame);
		PatchEx((BYTE*)0x004ED852, (BYTE*)LevelUp2, 4, handlGame);
		PatchEx((BYTE*)0x004EDE73, (BYTE*)LevelUp2, 4, handlGame);
		PatchEx((BYTE*)0x004EEB3E, (BYTE*)LevelUp2, 4, handlGame);
		PatchEx((BYTE*)0x0053C5E5, (BYTE*)LevelUp2, 4, handlGame);
		PatchEx((BYTE*)0x00627C71, (BYTE*)LevelUp2, 4, handlGame);
		PatchEx((BYTE*)0x006284B0, (BYTE*)LevelUp2, 4, handlGame);
		PatchEx((BYTE*)0x006F44B0, (BYTE*)LevelUp2, 4, handlGame);
		PatchEx((BYTE*)0x006F44FF, (BYTE*)LevelUp2, 4, handlGame);
		PatchEx((BYTE*)0x006F4938, (BYTE*)LevelUp2, 4, handlGame);
		PatchEx((BYTE*)0x006F4987, (BYTE*)LevelUp2, 4, handlGame);
		PatchEx((BYTE*)0x006F5482, (BYTE*)LevelUp2, 4, handlGame);
		PatchEx((BYTE*)0x006284B0, (BYTE*)LevelUp2, 4, handlGame);
		PatchEx((BYTE*)0x006F5496, (BYTE*)LevelUp2, 4, handlGame);
		PatchEx((BYTE*)0x006F5D15, (BYTE*)LevelUp2, 4, handlGame);
		PatchEx((BYTE*)0x006F5D1F, (BYTE*)LevelUp2, 4, handlGame);
		PatchEx((BYTE*)0x006F5E91, (BYTE*)LevelUp2, 4, handlGame);
		PatchEx((BYTE*)0x006F5E9F, (BYTE*)LevelUp2, 4, handlGame);
		PatchEx((BYTE*)0x006F5F8C, (BYTE*)LevelUp2, 4, handlGame);
		PatchEx((BYTE*)0x006F5F9A, (BYTE*)LevelUp2, 4, handlGame);

	   /*	LevelUp2--;
		PatchEx((BYTE*)0x0062784C, (BYTE*)(LevelUp2), 4, handlGame);
		//
		PatchEx((BYTE*)0x00437CF9, (BYTE*)LevelUp3, 4, handlGame);
		PatchEx((BYTE*)0x00438488, (BYTE*)LevelUp3, 4, handlGame);
		PatchEx((BYTE*)0x00464776, (BYTE*)LevelUp3, 4, handlGame);
		PatchEx((BYTE*)0x00467DE2, (BYTE*)LevelUp3, 4, handlGame);
		PatchEx((BYTE*)0x0047E09C, (BYTE*)LevelUp3, 4, handlGame);
		PatchEx((BYTE*)0x004C94D5, (BYTE*)LevelUp3, 4, handlGame);
		PatchEx((BYTE*)0x004ED858, (BYTE*)LevelUp3, 4, handlGame);
		PatchEx((BYTE*)0x0053C620, (BYTE*)LevelUp3, 4, handlGame);
		PatchEx((BYTE*)0x00627C92, (BYTE*)LevelUp3, 4, handlGame);
		PatchEx((BYTE*)0x006284BC, (BYTE*)LevelUp3, 4, handlGame);
		PatchEx((BYTE*)0x006F44B6, (BYTE*)LevelUp3, 4, handlGame);
		PatchEx((BYTE*)0x006F44F8, (BYTE*)LevelUp3, 4, handlGame);
		PatchEx((BYTE*)0x006F493E, (BYTE*)LevelUp3, 4, handlGame);
		PatchEx((BYTE*)0x006F4980, (BYTE*)LevelUp3, 4, handlGame);

		PatchEx((BYTE*)0x00627837, (BYTE*)"\x30\x06\x00\x00", 4, handlGame);
		PatchEx((BYTE*)0x006278B4, (BYTE*)"\x08\x01\x00\x00", 4, handlGame);*/

	//**Check Anti
	 //const char Name[12] = "PSGG.64.exe";
	 LPVOID CheckAntiName = (LPVOID)VirtualAllocEx(handlGame, NULL, 12, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
	 VirtualProtectEx(handlGame, (LPVOID)CheckAntiName, 12, PAGE_EXECUTE_READWRITE, &oldProtect1);
	 BYTE FileLoadAnti[11] = { 0x50,0x53,0x47,0x47,0x2E,0x33,0x32,0x2E,0x65,0x78,0x65 };
	 //BYTE FileLoadAnti[11] = { 0x50,0x53,0x47,0x47,0x2E,0x33,0x32,0x2E,0x65,0x78,0x65 };
	 PatchEx((BYTE*)CheckAntiName, (BYTE*)FileLoadAnti, 11, handlGame);

	 //ShowDamage
	 LPVOID ShwDamage = (LPVOID)VirtualAllocEx(handlGame, NULL, 12, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
	 VirtualProtectEx(handlGame, (LPVOID)CheckAntiName, 12, PAGE_EXECUTE_READWRITE, &oldProtect1);

	 LPVOID ShowInforPhy = (LPVOID)VirtualAllocEx(handlGame, NULL, 16, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
	 VirtualProtectEx(handlGame, (LPVOID)CheckAntiName, 16, PAGE_EXECUTE_READWRITE, &oldProtect1);

	 LPVOID ShowInforMagic = (LPVOID)VirtualAllocEx(handlGame, NULL, 16, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
	 VirtualProtectEx(handlGame, (LPVOID)CheckAntiName, 16, PAGE_EXECUTE_READWRITE, &oldProtect1);

	 LPVOID TocDoDanh = (LPVOID)VirtualAllocEx(handlGame, NULL, 4, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
	 VirtualProtectEx(handlGame, (LPVOID)TocDoDanh, 4, PAGE_EXECUTE_READWRITE, &oldProtect1);

	 LPVOID TimeCoolDown = (LPVOID)VirtualAllocEx(handlGame, NULL, 12, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
	 VirtualProtectEx(handlGame, (LPVOID)TimeCoolDown, 12, PAGE_EXECUTE_READWRITE, &oldProtect1);

	 //  ShowMash
	 LPVOID ShowMash = (LPVOID)VirtualAllocEx(handlGame, NULL, 40, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
	 VirtualProtectEx(handlGame, (LPVOID)ShowMash, 40, PAGE_EXECUTE_READWRITE, &oldProtect1);
	 DWORD *ShowMash2 =(DWORD*)(&ShowMash);
	 PatchEx((BYTE*)0x0071D70C, (BYTE*)ShowMash2, 4, handlGame);
	 PatchEx((BYTE*)0x005BEA01, (BYTE*)ShowMash2, 4, handlGame);
	 PatchEx((BYTE*)0x00657DFA, (BYTE*)ShowMash2, 4, handlGame);

	 //String Deo trung
	 LPVOID Deotrung = (LPVOID)VirtualAllocEx(handlGame, NULL, 17, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
	 VirtualProtectEx(handlGame, (LPVOID)Deotrung, 17, PAGE_EXECUTE_READWRITE, &oldProtect1);
	 BYTE StringDeotrung[17] = { 0x44,0x65,0x6f,0x20,0x54,0x72,0x75,0x6E,0x67,0x20,0x54,0x69,0x6E,0x20,0x56,0x61,0x74 };
	 PatchEx((BYTE*)Deotrung, (BYTE*)StringDeotrung, 17, handlGame);
	 //ShowOption
	 LPVOID LoadOption = (LPVOID)VirtualAllocEx(handlGame, NULL, 512, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
	 VirtualProtectEx(handlGame, (LPVOID)LoadOption, 512, PAGE_EXECUTE_READWRITE, &oldProtect1);

	 //CheckBoxOpt
	 LPVOID CheckBoxOptTinhLuyen = (LPVOID)VirtualAllocEx(handlGame, NULL, 8, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
	 VirtualProtectEx(handlGame, (LPVOID)CheckBoxOptTinhLuyen, 8, PAGE_EXECUTE_READWRITE, &oldProtect1);

     //

	 //**Check Environment  VR_ENVIRONMENT.XP
	 LPVOID CheckEvnName = (LPVOID)VirtualAllocEx(handlGame, NULL, 17, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
	 VirtualProtectEx(handlGame, (LPVOID)CheckEvnName, 17, PAGE_EXECUTE_READWRITE, &oldProtect1);
	 BYTE FileLoadVR[17] = { 0x56,0x52,0x5F,0x45,0x4E,0x56,0x49,0x52,0x4F,0x4E,0x4D,0x45,0x4E,0x54,0x2E,0x58,0x50 };
	 PatchEx((BYTE*)CheckEvnName, (BYTE*)FileLoadVR, 17, handlGame);
     //Load Ps.dll
	  LPVOID PsGameGuard = (LPVOID)VirtualAllocEx(handlGame, NULL, 6 ,MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
	 VirtualProtectEx(handlGame, (LPVOID)PsGameGuard, 6,PAGE_EXECUTE_READWRITE, &oldProtect1);
	 BYTE PsGameGuardValue[6]= { 0x50,0x53,0x2E,0x64,0x6C,0x6C};
	 PatchEx((BYTE*)PsGameGuard, (BYTE*)PsGameGuardValue, 6, handlGame);

	 // ChangeNameShow
	 //

	//Load ShowClass
	LPVOID ShowClass = (LPVOID)VirtualAllocEx(handlGame, NULL, 736, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);

	VirtualProtectEx(handlGame, (LPVOID)ShowClass, 736, PAGE_EXECUTE_READWRITE, &oldProtect1);

    //Pha bo phong An
	LPVOID nPhongAnn = (LPVOID)VirtualAllocEx(handlGame, NULL, 740, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);

	VirtualProtectEx(handlGame, (LPVOID)nPhongAnn, 740, PAGE_EXECUTE_READWRITE, &oldProtect1);

	LPVOID nTinhNangMoiVk = (LPVOID)VirtualAllocEx(handlGame, NULL, 840, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);

	VirtualProtectEx(handlGame, (LPVOID)nTinhNangMoiVk, 840, PAGE_EXECUTE_READWRITE, &oldProtect1);

	LPVOID NewRankLevel = (LPVOID)VirtualAllocEx(handlGame, NULL, 1, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);

	VirtualProtectEx(handlGame, (LPVOID)NewRankLevel, 1, PAGE_EXECUTE_READWRITE, &oldProtect1);

    LPVOID nThongBaoNhanQua = (LPVOID)VirtualAllocEx(handlGame, NULL, 100, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);

	VirtualProtectEx(handlGame, (LPVOID)nThongBaoNhanQua, 100, PAGE_EXECUTE_READWRITE, &oldProtect1);
	//End
	LPVOID ShowOptionString = (LPVOID)VirtualAllocEx(handlGame, NULL, 200, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);

	VirtualProtectEx(handlGame, (LPVOID)ShowOptionString, 200, PAGE_EXECUTE_READWRITE, &oldProtect1);

	//Load ShowClass2
	LPVOID ShowClass3 = (LPVOID)VirtualAllocEx(handlGame, NULL, 736, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);

   	VirtualProtectEx(handlGame, (LPVOID)ShowClass3, 736, PAGE_EXECUTE_READWRITE, &oldProtect1);
	//End
	//ShowSlotItem
	LPVOID ShowSlotLock23 = (LPVOID)VirtualAllocEx(handlGame, NULL, 736, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);

	VirtualProtectEx(handlGame, (LPVOID)ShowSlotLock23, 736, PAGE_EXECUTE_READWRITE, &oldProtect1);

	// Diem Tong KIm
	LPVOID DiemTongKim = (LPVOID)VirtualAllocEx(handlGame, NULL, 390, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);

	VirtualProtectEx(handlGame, (LPVOID)DiemTongKim, 390, PAGE_EXECUTE_READWRITE, &oldProtect1);

	//Diem Hoat Dong
	LPVOID nDiemHoatDong = (LPVOID)VirtualAllocEx(handlGame, NULL, 4, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);

	VirtualProtectEx(handlGame, (LPVOID)nDiemHoatDong, 4, PAGE_EXECUTE_READWRITE, &oldProtect1);
    //

	////Load NickCon
	extHook LoadIconGame(handlGame, (DWORD)LoadNickIcon, (DWORD)HookLoadIcon, 6);

	extHook LoadIcon(handlGame, (DWORD)LNickIconUser, (DWORD)LoadIconUser, 6);


	extHook LoadWeaponSkill(handlGame, (DWORD)WeaponSkill, (DWORD)SKillWeaponAdr, 9);


	extHook LoadIncClotherShow(handlGame, (DWORD)ShowInforCloth, (DWORD)LoadShowClothIc, 6);

	extHook GetValuePick(handlGame, (DWORD)GetValuePickItem, (DWORD)GetValuePickItemAdr, 5);

	////Load ShowClass
	extHook ShowClassGame(handlGame, (DWORD)LoadClass, (DWORD)ShowClassinGame, 5);

	extHook CheckLoadAnti(handlGame, (DWORD)CheckAnti, (DWORD)CheckAntiADre, 5);

	extHook ShowClassGame2(handlGame, (DWORD)LoadClassAnotherUser, (DWORD)ShowClassinGameAnother, 6);

	extHook ShowIconSkill(handlGame, (DWORD)ShowIconSkillFunc, (DWORD)SkillIcon, 8);

	extHook CheckHeader(handlGame, (DWORD)ChangePackedHeader, (DWORD)ChangeHeader, 7);

	extHook hookGMCommand(handlGame, (DWORD)GMCommand, (DWORD)AddressGmCommand, 5);

	extHook VoDich(handlGame, (DWORD)DecVoDich, (DWORD)DecreaseVD, 8);

	extHook hookSendPacketSV(handlGame, (DWORD)SendPackedNetWord, (DWORD)hookSendPacket, 9);

	extHook LoadNumber(handlGame, (DWORD)LoadgNumericParticleIndex, (DWORD)LoadgNumericParticleIndexAdr, 5);

	//extHook AddMoreSlot1Fun(handlGame, (DWORD)AddMoreSlot1, (DWORD)AddMoreSlot1Adr, 6);

	extHook AnotherEffectFunc(handlGame, (DWORD)AnotherEffect, (DWORD)AnotherEffectAdr, 10);

	DWORD TestModelAdr = 0x00716636;
	extHook TestModelFun(handlGame, (DWORD)TestModel, (DWORD)TestModelAdr, 10);

	extHook TestModel3Fun(handlGame, (DWORD)TestModel3, (DWORD)TestModel3Adr, 10);


	extHook CheckLoadAnti2(handlGame, (DWORD)CheckAntiLoad, (DWORD)CheckAntiADre2, 5);

    extHook TestDamagwe3(handlGame, (DWORD)TestDamage2, (DWORD)TestDamage2Adr, 7);

	extHook LoadShowIncCl(handlGame, (DWORD)LoadInctClt, (DWORD)LoadInchantClot, 6);

	extHook ShowDamageSkillFun(handlGame, (DWORD)ShowDamageSkill, (DWORD)ShowDamageSkillAdr, 7);

	extHook LockChangeWP(handlGame, (DWORD)LockChange, (DWORD)LockChangeAdr, 5);

	extHook LoadOpionClothRe(handlGame, (DWORD)SortRefine, (DWORD)ShowOptionClot, 5);

	extHook ShowResetFunc(handlGame, (DWORD)ShowReset, (DWORD)ShowResetAdr, 5);

	extHook LoadOpionClothRe2(handlGame, (DWORD)OptionRefine2, (DWORD)ShowOptionClot2, 6);

	extHook TestModel2Fun(handlGame, (DWORD)TestModel2, (DWORD)TestModel2Adr, 10);

	extHook TestModel4Fun(handlGame, (DWORD)TestModel4, (DWORD)TestModel4Adr, 10);

	extHook InchtClt(handlGame, (DWORD)IncCloth, (DWORD)AdresCloth1, 5);

	extHook EffectCloth(handlGame, (DWORD)AddEffect, (DWORD)AddEffectAdr, 8);

    extHook EffectCloth1(handlGame, (DWORD)AddEffect1, (DWORD)AddEffectAdr1, 7);

	//extHook InchtClt2(handlGame, (DWORD)IncCloth2, (DWORD)AdresCloth2, 5);

	extHook ChangeProcessFun(handlGame, (DWORD)CheckProcessName, (DWORD)ChangeCheckProc, 5);

	extHook BlockUsedItemFun(handlGame, (DWORD)BlockUsedItem, (DWORD)BlockUsedItemAdr, 6);

	extHook SeteffectAnotherUserFun(handlGame, (DWORD)SeteffectAnotherUser, (DWORD)SeteffectAnotherUserAdr, 6);

   //	extHook BypassvrFun(handlGame, (DWORD)Bypassvr, (DWORD)BypassvrAdr, 6);

	extHook BlockUsedItemFun2(handlGame, (DWORD)BlockUsedItem2, (DWORD)BlockUsedItem2Adr, 5);

	extHook AddmoreNumber2Fun(handlGame, (DWORD)AddmoreNumber2, (DWORD)AddmoreNumber2Adr, 10);

	extHook LoadInfor1(handlGame, (DWORD)LoadInforClass, (DWORD)LoadInforClassAdr, 5);

	extHook LoadInfor2(handlGame, (DWORD)LoadInforShowClass, (DWORD)LoadInforShowClassAdr, 5);

	extHook AddmoreNumberFunc(handlGame, (DWORD)AddmoreNumber, (DWORD)AddmoreNumberAdr, 5);

	extHook AllowLLanWeaponFun(handlGame, (DWORD)AllowLLanWeapon, (DWORD)AllowLLanWeaponAdr, 5);

	extHook LoadInfor3(handlGame, (DWORD)LoadInforClass2, (DWORD)LoadInforClass2Adr, 5);

	extHook LoadInfor4(handlGame, (DWORD)LoadInforShowClass2, (DWORD)LoadInforShowClass2Adr, 5);

	extHook GetPackSvRelicsFun(handlGame, (DWORD)GetPackSvRelics, (DWORD)GetPackSvRelicsAdr, 6);

	extHook AntiInGame(handlGame, (DWORD)CheckAntiInGame, (DWORD)AntiInGameAdr, 5);

	extHook ErrorShow(handlGame, (DWORD)ChangenNameDis, (DWORD)ChangeDisNameAdr, 6);

	extHook ErrorShow2(handlGame, (DWORD)ChangenNameDis2, (DWORD)ChangeDisNameAdr2, 7);

	extHook AcceptInchantClothType8Fun(handlGame, (DWORD)AcceptInchantClothType8, (DWORD)AcceptInchantClothType8Adr, 5);

	extHook combineCloth(handlGame, (DWORD)DucSlotCloth, (DWORD)DucSlotClothAdr, 8);

	extHook GetInchaSv(handlGame, (DWORD)GetPackSv, (DWORD)AdreGetPack, 5);

	extHook GetInchaSv2(handlGame, (DWORD)GetPackSv2, (DWORD)AdreGetPack2, 5);

	extHook ShowOptionClothFunc(handlGame, (DWORD)ShowOptionCloth, (DWORD)ShowOptionClothAdr, 5);

	extHook AddMoreSlotFun(handlGame, (DWORD)AddMoreSlot, (DWORD)AddMoreSlotAdr, 10);

	extHook addDamage(handlGame, (DWORD)TestDamage, (DWORD)TestDamageADR, 6);

	extHook CheckLoopItem(handlGame, (DWORD)LoopLoad, (DWORD)LoopLoadAdr, 6);

	extHook ShowSpeedUser(handlGame, (DWORD)ShowSpeed, (DWORD)GetSpeeUser, 6);

	extHook LoadDamage6(handlGame, (DWORD)LoadDamage, (DWORD)LoadDamageAdr, 8);

	extHook ShowDamageFunc(handlGame, (DWORD)ShowDamage, (DWORD)ShowDamageAdr, 7);

	extHook PushAddressFun(handlGame, (DWORD)PushAddress, (DWORD)PushAddressAdr, 5);

	extHook GetDamageFun(handlGame, (DWORD)GetDamage, (DWORD)GetDamageAdr, 7);

	extHook GetDieOrLieTankerFun(handlGame, (DWORD)GetDieOrLieTanker, (DWORD)GetDieOrLieTankerAdr, 9);
	extHook GetTargetAnotherNukerFun(handlGame, (DWORD)GetTargetAnotherNuker, (DWORD)GetTargetAnotherNukerAdr, 9);
	extHook GetTargetAnotherNuker2Fun(handlGame, (DWORD)GetTargetAnotherNuker2, (DWORD)GetTargetAnotherNuker2Adr, 9);
	extHook GetTargetAnotherTankerFun(handlGame, (DWORD)GetTargetAnotherTanker, (DWORD)GetTargetAnotherTankerAdr, 9);

	extHook ShowDamageFunc2(handlGame, (DWORD)GetDamageMax, (DWORD)GetDamageMaxAdr, 11);

	extHook AcceptItemnewFun(handlGame, (DWORD)AcceptItem, (DWORD)AcceptItemAdr, 5);

   extHook GetDamageCk2Fun(handlGame, (DWORD)GetDamageCk2, (DWORD)GetDamageCk2Adr, 7);

	extHook GetInforIncFun(handlGame, (DWORD)GetInforInc, (DWORD)GetInforIncAdr, 5);

	extHook GetDamageFun2(handlGame, (DWORD)ShowDamage2, (DWORD)ShowDamage2Adr, 8);

	extHook GetDamageFun22(handlGame, (DWORD)ShowDamage22, (DWORD)ShowDamage22Adr, 8);

	extHook BlockSortFun(handlGame, (DWORD)BlockSort, (DWORD)BlockSortAdr, 5);

	extHook AddOptionIncFun(handlGame, (DWORD)AddOptionInc, (DWORD)AddOptionIncAdr, 6);

	extHook GetInforSortFun(handlGame, (DWORD)GetInforSort, (DWORD)GetInforSortAdr, 5);

	extHook LoadLineFun(handlGame, (DWORD)LoadLine, (DWORD)LoadLineAdr, 7);

	extHook AcceptInchantClothFun(handlGame, (DWORD)AcceptInchantCloth, (DWORD)AcceptInchantClothAdr, 6);

	extHook GetEffectLoadGameFun(handlGame, (DWORD)GetEffectLoadGame, (DWORD)GetEffectLoadGameAdr, 7);

	extHook GetDamageThucKyFun(handlGame, (DWORD)GetDamageThucKy, (DWORD)GetDamageThucKyAdr, 9);

	extHook GetDamageCkFun(handlGame, (DWORD)GetDamageCk, (DWORD)GetDamageCkAdr, 7);

	extHook ShowDamageCk1Fun(handlGame, (DWORD)ShowDamageCk1, (DWORD)ShowDamageCk1Adr, 7);

	extHook ShowDamageCk2Fun(handlGame, (DWORD)ShowDamageCk2, (DWORD)ShowDamageCk2Adr, 7);

	extHook BlockShowResourceFun(handlGame, (DWORD)BlockShowResource, (DWORD)BlockShowResourceAdr, 10);

	extHook ShowDamageCk3Fun(handlGame, (DWORD)ShowDamageCk3, (DWORD)ShowDamageCk3Adr, 7);

	extHook ShowDamageCk4Fun(handlGame, (DWORD)ShowDamageCk4, (DWORD)ShowDamageCk4Adr, 7);

	extHook RundllFun(handlGame, (DWORD)AddressPassGG, (DWORD)AddressPassGGAdr, 5);

	extHook DrawExtSlotFun(handlGame, (DWORD)DrawExtSlot, (DWORD)DrawExtSlotAdr, 8);

	//Level
	extHook insertValueLevelFun(handlGame, (DWORD)insertValueLevel, (DWORD)insertValueLevelAdr, 5);
	extHook insert16A098CFun(handlGame, (DWORD)insert16A098C01, (DWORD)insert16A098CAdr, 6);
	extHook insert16A098C1Fun(handlGame, (DWORD)insert16A098C02, (DWORD)insert16A098C1Adr, 6);
	extHook insert1stringdtnameFun(handlGame, (DWORD)insert1stringdtname, (DWORD)insert1stringdtnameAdr, 5);
	extHook insertValueLevel2Fun(handlGame, (DWORD)insertValueLevel2, (DWORD)insertValueLevel2Adr, 7);
	extHook insertValueLevel3Fun(handlGame, (DWORD)insertValueLevel3, (DWORD)insertValueLevel3Adr, 7);
	extHook insert16A098C2Fun(handlGame, (DWORD)insert16A098C2, (DWORD)insert16A098C2Adr, 6);
	extHook insert16A098C3Fun(handlGame, (DWORD)insert16A098C3, (DWORD)insert16A098C3Adr, 6);
	extHook insert16A098C4Fun(handlGame, (DWORD)insert16A098C4, (DWORD)insert16A098C4Adr, 6);
	extHook insert16A098C5Fun(handlGame, (DWORD)insert16A098C5, (DWORD)insert16A098C5Adr, 7); //
	extHook insert16A098C6Fun(handlGame, (DWORD)insert16A098C601, (DWORD)insert16A098C6Adr, 6);
	extHook insert16A098C61Fun(handlGame, (DWORD)insert16A098C602, (DWORD)insert16A098C61Adr, 6);
	extHook insert16A098C62Fun(handlGame, (DWORD)insert16A098C603, (DWORD)insert16A098C62Adr, 6);
	extHook insert16A098C7Fun(handlGame, (DWORD)insert16A098C7, (DWORD)insert16A098C7Adr, 7);  //
	extHook insert16A098C8Fun(handlGame, (DWORD)insert16A098C8, (DWORD)insert16A098C8Adr, 7); //
	extHook insert16A098C9Fun(handlGame, (DWORD)insert16A098C9, (DWORD)insert16A098C9Adr, 6);
	extHook insert16A098C10Fun(handlGame, (DWORD)insert16A098C1001, (DWORD)insert16A098C10Adr, 6);
	extHook insert16A098C101Fun(handlGame, (DWORD)insert16A098C1002, (DWORD)insert16A098C101Adr, 6);
	extHook insert16A098C11Fun(handlGame, (DWORD)insert16A098C1101, (DWORD)insert16A098C11Adr, 6);
	extHook insert16A098C111Fun(handlGame, (DWORD)insert16A098C1102, (DWORD)insert16A098C111Adr, 6);
	extHook insert16A09ACFun(handlGame, (DWORD)insert16A09AC01, (DWORD)insert16A09ACAdr, 7);  //
	extHook insert16A09AC1Fun(handlGame, (DWORD)insert16A09AC02, (DWORD)insert16A09AC1Adr, 7);  //
	extHook insert16A09AC2Fun(handlGame, (DWORD)insert16A09AC201, (DWORD)insert16A09AC2Adr, 7);   //
	extHook insert16A09AC21Fun(handlGame, (DWORD)insert16A09AC202, (DWORD)insert16A09AC21Adr, 6);
	extHook insert16A09AC3Fun(handlGame, (DWORD)insert16A09AC3, (DWORD)insert16A09AC3Adr, 6);
	extHook insert16A09AC4Fun(handlGame, (DWORD)insert16A09AC401, (DWORD)insert16A09AC4Adr, 6);
	extHook insert16A09AC41Fun(handlGame, (DWORD)insert16A09AC402, (DWORD)insert16A09AC41Adr, 6);
	extHook insert16A09AC5Fun(handlGame, (DWORD)insert16A09AC5, (DWORD)insert16A09AC5Adr, 7);    //
	extHook insert16A09AC6Fun(handlGame, (DWORD)insert16A09AC6, (DWORD)insert16A09AC6Adr, 7);   //
	extHook insert16A09AC7Fun(handlGame, (DWORD)insert16A09AC7, (DWORD)insert16A09AC7Adr, 6);
	extHook insert16A09AC8Fun(handlGame, (DWORD)insert16A09AC8, (DWORD)insert16A09AC8Adr, 7);    //
	extHook insert16A09C4Fun(handlGame,  (DWORD)insert16A09C4, (DWORD)insert16A09C4Adr, 6);
	extHook insert16A09C41Fun(handlGame, (DWORD)insert16A09C41, (DWORD)insert16A09C41Adr, 6);
	extHook insert16A09C42Fun(handlGame, (DWORD)insert16A09C42, (DWORD)insert16A09C42Adr, 6);
	extHook insert16A09C43Fun(handlGame, (DWORD)insert16A09C43, (DWORD)insert16A09C43Adr, 6);
	extHook ChangeSizePackFun(handlGame, (DWORD)ChangeSizePack, (DWORD)ChangeSizePackAdr, 6);
	extHook ChangeSizePack1Fun(handlGame, (DWORD)ChangeSizePack1, (DWORD)ChangeSizePack1Adr, 6);
	extHook AcceptUpradeOptFun(handlGame, (DWORD)AcceptUpradeOpt, (DWORD)AcceptUpradeOptAdr, 6);
	extHook AddOptionRelicsItemFun(handlGame, (DWORD)AddOptionRelicsItem, (DWORD)AddOptionRelicsItemAdr, 5);
	extHook AddMoreSlot101Fun(handlGame, (DWORD)AddMoreSlot1, (DWORD)AddMoreSlot1Adr, 6);
	//AddSlot
	extHook AddMoreSlot3Fun(handlGame, (DWORD)AddMoreSlot3, (DWORD)AddMoreSlot3Adr, 8);
	extHook AddMoreSlot4Fun(handlGame, (DWORD)AddMoreSlot4, (DWORD)AddMoreSlot4Adr, 6);
	extHook ShowInforHoverFun(handlGame, (DWORD)ShowInforHover, (DWORD)ShowInforHoverAdr, 6);
	extHook ShowInforHover3Fun(handlGame, (DWORD)ShowInforHover3, (DWORD)ShowInforHover3Adr, 7);
	extHook ShowInforHover2Fun(handlGame, (DWORD)ShowInforHover2, (DWORD)ShowInforHover2Adr, 10);
	extHook EquipItemRelicFun(handlGame, (DWORD)EquipItemRelic, (DWORD)EquipItemRelicAdr, 7);
	extHook EquipItemRelic2Fun(handlGame, (DWORD)EquipItemRelic2, (DWORD)EquipItemRelic2Adr, 9);
	extHook AddBonusNewSlotFun(handlGame, (DWORD)AddBonusNewSlot, (DWORD)AddBonusNewSlotAdr, 7);
	extHook GetBaseBonusFromItemNewSlotFun(handlGame, (DWORD)GetBaseBonusFromItemNewSlot, (DWORD)GetBaseBonusFromItemNewSlotAdr, 7);
	extHook AddMoreSlotShowItemFun(handlGame, (DWORD)AddMoreSlotShowItem, (DWORD)AddMoreSlotShowItemAdr, 10);
	extHook DisableViewPetFun(handlGame, (DWORD)DisableViewPet, (DWORD)DisableViewPetAdr, 6);
	extHook DisableViewPet2Fun(handlGame, (DWORD)DisableViewPet2, (DWORD)DisableViewPet2Adr, 5);
	extHook DisableViewPet3Fun(handlGame, (DWORD)DisableViewPet3, (DWORD)DisableViewPet3Adr, 5);
	extHook DisableViewPet4Fun(handlGame, (DWORD)DisableViewPet4, (DWORD)DisableViewPet4Adr, 7);
	extHook DisableViewPet5Fun(handlGame, (DWORD)DisableViewPet5, (DWORD)DisableViewPet5Adr, 6);
	//extHook CheckConditionNewSlotFun(handlGame, (DWORD)CheckConditionNewSlot, (DWORD)CheckConditionNewSlotAdr, 7);
	extHook GetGradeNewColorFun(handlGame, (DWORD)GetGradeNewColor, (DWORD)GetGradeNewColorAdr, 7);
	extHook TestNewNguKhiFun(handlGame, (DWORD)TestNewNguKhi, (DWORD)TestNewNguKhiAdr, 6);
	extHook TestNewNguKhiTriTueFun(handlGame, (DWORD)TestNewNguKhiTriTue, (DWORD)TestNewNguKhiTriTueAdr, 5);
	extHook TestNewNguKhiSinhLucFun(handlGame, (DWORD)TestNewNguKhiSinhLuc, (DWORD)TestNewNguKhiSinhLucAdr, 6);
	extHook TestNewNguKhiChanKhiFun(handlGame, (DWORD)TestNewNguKhiChanKhi, (DWORD)TestNewNguKhiChanKhiAdr, 6);
	extHook TestAttactSpeedFun(handlGame, (DWORD)TestAttactSpeed, (DWORD)TestAttactSpeedAdr, 6);
	extHook GetAttackValueFun(handlGame, (DWORD)GetAttackValue, (DWORD)GetAttackValueAdr, 5);
	extHook TestAttactSpeed2Fun(handlGame, (DWORD)TestAttactSpeed2, (DWORD)TestAttactSpeed2Adr, 6);
	extHook TestAttactSpeed3Fun(handlGame, (DWORD)TestAttactSpeed3, (DWORD)TestAttactSpeed3Adr, 6);
	//extHook PKMapsLoanChienFun(handlGame, (DWORD)PKMapsLoanChien, (DWORD)PKMapsLoanChienAdr, 6);
	extHook GetAttackSpeedAnotherUserFun(handlGame, (DWORD)GetAttackSpeedAnotherUser, (DWORD)GetAttackSpeedAnotherUserAdr, 5);
	extHook SetAttackSpeedSmashModFun(handlGame, (DWORD)SetAttackSpeedSmashMod, (DWORD)SetAttackSpeedSmashModAdr, 11);
	extHook SetAttackSpeedAtivatePvpFun(handlGame, (DWORD)SetAttackSpeedAtivatePvp, (DWORD)SetAttackSpeedAtivatePvpAdr, 11);
	extHook SetpkActiveResultMobFun(handlGame, (DWORD)SetpkActiveResultMob, (DWORD)SetpkActiveResultMobAdr, 11);
	extHook SetAttackSpeedSmash2ModFun(handlGame, (DWORD)SetAttackSpeedSmash2Mod, (DWORD)SetAttackSpeedSmash2ModAdr, 11);

	extHook PKMapsLoanChien2Fun(handlGame, (DWORD)PKMapsLoanChien2, (DWORD)PKMapsLoanChien2Adr, 6);
	extHook DisableStackRelicFun(handlGame, (DWORD)DisableStackRelic, (DWORD)DisableStackRelicAdr, 5);
	extHook NdTangCuongDoClothFun(handlGame, (DWORD)NdTangCuongDoCloth, (DWORD)NdTangCuongDoClothAdr, 6);
	extHook GiaHanCucDaiFun(handlGame, (DWORD)GiaHanCucDai, (DWORD)GiaHanCucDaiAdr, 6);
	extHook ReloadLumpFun(handlGame, (DWORD)ReloadLump, (DWORD)ReloadLumpAdr, 5);
	extHook TestLockChangeMapsFun(handlGame, (DWORD)TestLockChangeMaps, (DWORD)TestLockChangeMapsAdr, 6);
	extHook HienThiSetFun(handlGame, (DWORD)HienThiSet, (DWORD)HienThiSetAdr, 6);
	extHook AddOptionSetFun(handlGame, (DWORD)AddOptionSet, (DWORD)AddOptionSetAdr, 6);
    extHook InforPhyFun(handlGame, (DWORD)InforPhy, (DWORD)InforPhyAdr, 7);
	extHook InforPhy2Fun(handlGame, (DWORD)InforPhy2, (DWORD)InforPhy2Adr, 6);
	extHook InforPhy3Fun(handlGame, (DWORD)InforPhy3, (DWORD)InforPhy3Adr, 6);
	extHook InforPhy4Fun(handlGame, (DWORD)InforPhy4, (DWORD)InforPhy4Adr, 7);
	extHook InforPhy5Fun(handlGame, (DWORD)InforPhy5, (DWORD)InforPhy5Adr, 7);
	extHook InforMagic1Fun(handlGame, (DWORD)InforMagic1, (DWORD)InforMagic1Adr, 7);
	extHook InforMagic2Fun(handlGame, (DWORD)InforMagic2, (DWORD)InforMagic2Adr, 7);
	extHook InforMagic3Fun(handlGame, (DWORD)InforMagic3, (DWORD)InforMagic3Adr, 7);
	extHook InforMagic4Fun(handlGame, (DWORD)InforMagic4, (DWORD)InforMagic4Adr, 7);
	extHook InforMagic5Fun(handlGame, (DWORD)InforMagic5, (DWORD)InforMagic5Adr, 7);
	extHook InforMagic6Fun(handlGame, (DWORD)InforMagic6, (DWORD)InforMagic6Adr, 7);
	extHook InforMagic7Fun(handlGame, (DWORD)InforMagic7, (DWORD)InforMagic7Adr, 7);
	extHook ChangeRequestItemIncClothFun(handlGame, (DWORD)ChangeRequestItemIncCloth, (DWORD)ChangeRequestItemIncClothAdr, 5);
	extHook ChangeRequestItemIncCloth1Fun(handlGame, (DWORD)ChangeRequestItemIncCloth1, (DWORD)ChangeRequestItemIncCloth1Adr, 9);
	extHook InforPhy6Fun(handlGame, (DWORD)InforPhy6, (DWORD)InforPhy6Adr, 7);
	extHook RemoveOldSlotFun(handlGame, (DWORD)RemoveOldSlot, (DWORD)RemoveOldSlotAdr, 10);
	extHook ByPassOverIndex3DxFun(handlGame, (DWORD)ByPassOverIndex3Dx, (DWORD)ByPassOverIndex3DxAdr, 8);
	extHook ByPassOverIndex3Dx1Fun(handlGame, (DWORD)ByPassOverIndex3Dx1, (DWORD)ByPassOverIndex3Dx1Adr, 8);
	extHook ByPassOverIndex3Dx2Fun(handlGame, (DWORD)ByPassOverIndex3Dx2, (DWORD)ByPassOverIndex3Dx2Adr, 8);
	extHook LoadFastMapFun(handlGame, (DWORD)LoadFastMap, (DWORD)LoadFastMapAdr, 7);
	extHook BoQuaThongBaoLienMinhFun(handlGame, (DWORD)BoQuaThongBaoLienMinh, (DWORD)BoQuaThongBaoLienMinhAdr, 8);
	extHook GetAttackSpeedFromNickFun(handlGame, (DWORD)GetAttackSpeedFromNick, (DWORD)GetAttackSpeedFromNickAdr, 6);
	extHook FixHienThiDamgeFun(handlGame, (DWORD)FixHienThiDamge, (DWORD)FixHienThiDamgeAdr, 7);
	extHook ChangeCodeTextFun(handlGame, (DWORD)ChangeCodeText, (DWORD)ChangeCodeTextAdr, 7);
	extHook ChangeCodeText2Fun(handlGame, (DWORD)ChangeCodeText2, (DWORD)ChangeCodeText2Adr, 7);
	extHook ChangeCodeText3Fun(handlGame, (DWORD)ChangeCodeText3, (DWORD)ChangeCodeText3Adr, 8);
	extHook AddInfoItemFun(handlGame, (DWORD)AddInfoItem, (DWORD)AddInfoItemAdr, 5);
	extHook GetPacketFromCombineFun(handlGame, (DWORD)GetPacketFromCombine, (DWORD)GetPacketFromCombineAdr, 8);
	extHook TestFuncOpenBoxFun(handlGame, (DWORD)TestFuncOpenBox, (DWORD)TestFuncOpenBoxAdr, 10);
	extHook TestFuncOpenBoxFun2(handlGame, (DWORD)TestFuncOpenBox2, (DWORD)TestFuncOpenBox2Adr, 9);
	extHook LoadInforIConBangHoiFun(handlGame, (DWORD)LoadInforIConBangHoi, (DWORD)LoadInforIConBangHoiAdr, 5);
	extHook LoadNickIconBangHoiFun(handlGame, (DWORD)LoadNickIconBangHoi, (DWORD)LoadNickIconBangHoiAdr, 6);
	extHook ChoDucSlotVkTinhLuyenFun(handlGame, (DWORD)ChoDucSlotVkTinhLuyen, (DWORD)ChoDucSlotVkTinhLuyenAdr, 7);
	extHook SetAttackSpeedNuker1PvPFun(handlGame, (DWORD)SetAttackSpeedNuker1PvP, (DWORD)SetAttackSpeedNuker1PvPAdr, 11);
	extHook SetAttackSpeedNuker1MobFun(handlGame, (DWORD)SetAttackSpeedNuker1Mob, (DWORD)SetAttackSpeedNuker1MobAdr, 11);
	extHook BypassMaxModelFun(handlGame, (DWORD)BypassMaxModel, (DWORD)BypassMaxModelAdr, 6);
	extHook SetAttackSpeedNukerMob3Fun(handlGame, (DWORD)SetAttackSpeedNukerMob3, (DWORD)SetAttackSpeedNukerMob3Adr, 11);
	extHook GetMaxSlotFun(handlGame, (DWORD)GetMaxSlot, (DWORD)GetMaxSlotAdr, 6);
    extHook MoRongBangHoiFun(handlGame, (DWORD)MoRongBangHoi, (DWORD)MoRongBangHoiAdr, 6);
	extHook MoRongBangHoi2Fun(handlGame, (DWORD)MoRongBangHoi2, (DWORD)MoRongBangHoi2Adr, 6);
	extHook EncryptTwoByteFun(handlGame, (DWORD)EncryptTwoByte, (DWORD)EncryptTwoByteAdr, 7);
	extHook EncryptTwoByte2Fun(handlGame, (DWORD)EncryptTwoByte2, (DWORD)EncryptTwoByte2Adr, 7);
	//extHook ThongBaoKhiNhanQuaFun(handlGame, (DWORD)ThongBaoKhiNhanQua, (DWORD)ThongBaoKhiNhanQuaAdr, 8);
	extHook ByPassGetIPFun(handlGame, (DWORD)ByPassGetIP, (DWORD)ByPassGetIPAdr, 5);
	extHook BypassErrorDriverFun(handlGame, (DWORD)BypassErrorDriver, (DWORD)BypassErrorDriverAdr, 7);
	extHook EvetTKFun(handlGame, (DWORD)EvetTK, (DWORD)EvetTKAdr, 7);
	extHook GetDiemTKFun(handlGame, (DWORD)GetDiemTK, (DWORD)GetDiemTKAdr, 6);
	extHook ShowDiemTK1Fun(handlGame, (DWORD)ShowDiemTK1, (DWORD)ShowDiemTK1Adr, 6);
	extHook ShowDiemTK2Fun(handlGame, (DWORD)ShowDiemTK2, (DWORD)ShowDiemTK2Adr, 6);
	extHook EvetTKAnotherUserFun(handlGame, (DWORD)EvetTKAnotherUser, (DWORD)EvetTKAnotherUserAdr, 6);
	extHook GetDiemFromAnotherUserTKFun(handlGame, (DWORD)GetDiemFromAnotherUserTK, (DWORD)GetDiemFromAnotherUserTKAdr, 6);
	extHook GetInfoTongKimFun(handlGame, (DWORD)GetInfoTongKim, (DWORD)GetInfoTongKimAdr, 5);
	extHook ShowDiemTongFun(handlGame, (DWORD)ShowDiemTong, (DWORD)ShowDiemTongAdr, 5);
	extHook ShowDiemKimFun(handlGame, (DWORD)ShowDiemKim, (DWORD)ShowDiemKimAdr, 6);
	extHook ShowInforTongKimFun(handlGame, (DWORD)ShowInforTongKim, (DWORD)ShowInforTongKimAdr, 5);
	extHook ThayDoiTen1Fun(handlGame, (DWORD)ThayDoiTen1, (DWORD)ThayDoiTen1Adr, 5);
	extHook ThayDoiTen2Fun(handlGame, (DWORD)ThayDoiTen2, (DWORD)ThayDoiTen2Adr, 5);
	extHook ThayDoiTen3Fun(handlGame, (DWORD)ThayDoiTen3, (DWORD)ThayDoiTen3Adr, 5);
	extHook GetDuLieuTongKimFun(handlGame, (DWORD)GetDuLieuTongKim, (DWORD)GetDuLieuTongKimAdr, 6);
	extHook ShowPheFun(handlGame, (DWORD)ShowPhe, (DWORD)ShowPheAdr, 5);
	extHook ShowPhe1Fun(handlGame, (DWORD)ShowPhe1, (DWORD)ShowPhe1Adr, 8);
    extHook ByPassResetTargetFun(handlGame, (DWORD)ByPassResetTarget, (DWORD)ByPassResetTargetAdr,7);
	extHook ByPassResetTarget1Fun(handlGame, (DWORD)ByPassResetTarget1, (DWORD)ByPassResetTarget1Adr, 5);
	extHook ByPassResetTarget2Fun(handlGame, (DWORD)ByPassResetTarget2, (DWORD)ByPassResetTarget2Adr, 7);
    extHook ByPassTextureErrorFun(handlGame, (DWORD)ByPassTextureError, (DWORD)ByPassTextureErrorAdr, 6);
	extHook ByPassTextureError1Fun(handlGame, (DWORD)ByPassTextureError1, (DWORD)ByPassTextureError1Adr, 6);
	extHook ByPassTextureError2Fun(handlGame, (DWORD)ByPassTextureError2, (DWORD)ByPassTextureError2Adr, 6);
	extHook ByPassTextureError3Fun(handlGame, (DWORD)ByPassTextureError3, (DWORD)ByPassTextureError3Adr, 6);
	extHook ByPassTextureError4Fun(handlGame, (DWORD)ByPassTextureError4, (DWORD)ByPassTextureError4Adr, 6);
	extHook LineNguoiChoiTKFun(handlGame, (DWORD)LineNguoiChoiTK, (DWORD)LineNguoiChoiTKAdr, 7);
	extHook LayDiemTKSauPkFun(handlGame, (DWORD)LayDiemTKSauPk, (DWORD)LayDiemTKSauPkAdr, 9);
	extHook NenTenMauDoFun(handlGame, (DWORD)NenTenMauDo, (DWORD)NenTenMauDoAdr, 6);
	extHook BoQuaShiftFun(handlGame, (DWORD)BoQuaShift, (DWORD)BoQuaShiftAdr, 8);
	extHook ChoPhepNghiNgoiFun(handlGame, (DWORD)ChoPhepNghiNgoi, (DWORD)ChoPhepNghiNgoiAdr, 7);
	extHook UpRankLevelFun(handlGame, (DWORD)UpRankLevel, (DWORD)UpRankLevelAdr, 5);
	extHook GetUpRankLevelFun(handlGame, (DWORD)GetUpRankLevel, (DWORD)GetUpRankLevelAdr, 5);
	extHook GetDiemHoatDongFun(handlGame, (DWORD)GetDiemHoatDong, (DWORD)GetDiemHoatDongAdr, 5);
	extHook ShopDiemHoatDongFun(handlGame, (DWORD)ShopDiemHoatDong, (DWORD)ShopDiemHoatDongAdr, 6);
	extHook ShopDiemHoatDong2Fun(handlGame, (DWORD)ShopDiemHoatDong2, (DWORD)ShopDiemHoatDong2Adr, 6);
	extHook ShowDiemHoatDongFun(handlGame, (DWORD)ShowDiemHoatDong, (DWORD)ShowDiemHoatDongAdr, 5);
	extHook CapNhatGiaTienSauMuaFun(handlGame, (DWORD)CapNhatGiaTienSauMua, (DWORD)CapNhatGiaTienSauMuaAdr, 5);
	extHook GotoProcessShopDiemHoatDongFun(handlGame, (DWORD)GotoProcessShopDiemHoatDong, (DWORD)GotoProcessShopDiemHoatDongAdr, 5);
	extHook ShowTiLeTinhLuyenFun(handlGame, (DWORD)ShowTiLeTinhLuyen, (DWORD)ShowTiLeTinhLuyenAdr, 6);
	extHook RemoveValueCombineXFun(handlGame, (DWORD)RemoveValueCombineX, (DWORD)RemoveValueCombineXAdr, 7);
	extHook GetValueCheckBoxFun(handlGame, (DWORD)GetValueCheckBox, (DWORD)GetValueCheckBoxAdr, 5);
	extHook ChangeColorAndTypeFun(handlGame, (DWORD)ChangeColorAndType, (DWORD)ChangeColorAndTypeAdr, 10);
	extHook ShowCheckBoxTinhLuyenFun(handlGame, (DWORD)ShowCheckBoxTinhLuyen, (DWORD)ShowCheckBoxTinhLuyenAdr, 6);
	extHook RequestCorrectItemFun(handlGame, (DWORD)RequestCorrectItem, (DWORD)RequestCorrectItemAdr, 6);
	extHook ChangeModeInchantFun(handlGame, (DWORD)ChangeModeInchant, (DWORD)ChangeModeInchantAdr, 5);
	extHook ShowAnotherRequestItemIncFun(handlGame, (DWORD)ShowAnotherRequestItemInc, (DWORD)ShowAnotherRequestItemIncAdr, 5);
	extHook ChangeInforPhongAn2Fun(handlGame, (DWORD)ChangeInforPhongAn2, (DWORD)ChangeInforPhongAn2Adr, 6);
	extHook ChangeInforPhongAn1Fun(handlGame, (DWORD)ChangeInforPhongAn1, (DWORD)ChangeInforPhongAn1Adr, 6);
	extHook ChangeInforPhongAnFun(handlGame, (DWORD)ChangeInforPhongAn, (DWORD)ChangeInforPhongAnAdr, 5);
	extHook ChangeInforPhongAn3Fun(handlGame, (DWORD)ChangeInforPhongAn3, (DWORD)ChangeInforPhongAn3Adr, 6);
	extHook NhanPackageInforFun(handlGame, (DWORD)NhanPackageInfor, (DWORD)NhanPackageInforAdr, 7);
	extHook GetInforBackDiQFun(handlGame, (DWORD)GetInforBackDiQ, (DWORD)GetInforBackDiQAdr, 8);
	extHook InforQuyetErroFun(handlGame, (DWORD)InforQuyetErro, (DWORD)InforQuyetErroAdr, 8);
	extHook LoadInfoPhongAnFun(handlGame, (DWORD)LoadInfoPhongAn, (DWORD)LoadInfoPhongAnAdr, 5);
	extHook ChangeInforPhongAn1910Fun(handlGame, (DWORD)ChangeInforPhongAn1910, (DWORD)ChangeInforPhongAn1910Adr, 6);
	extHook VietHoaTextFun(handlGame, (DWORD)VietHoaText, (DWORD)VietHoaTextAdr, 6);
	extHook VietHoaText2Fun(handlGame, (DWORD)VietHoaText2, (DWORD)VietHoaText2Adr, 6);
	extHook VietHoaText1Fun(handlGame, (DWORD)VietHoaText1, (DWORD)VietHoaText1Adr, 6);


	//Phong An
	DWORD ChangePhongAnRequestAdr = 0x0065F919;
	DWORD DisableClickPhongAnAdr = 0x00629C0C;
	DWORD MoPhongAnTinVatAdr = 0x0048C33A;
	DWORD AcceptItemVPrequestAdr = 0x0048CA9C;
	DWORD MoFormPhongAnAdr = 0x007C078C;
	extHook ChangePhongAnRequestFun(handlGame, (DWORD)ChangePhongAnRequest, (DWORD)ChangePhongAnRequestAdr, 5);
	extHook DisableClickPhongAnFun(handlGame, (DWORD)DisableClickPhongAn, (DWORD)DisableClickPhongAnAdr, 6);
	extHook MoPhongAnTinVatFun(handlGame, (DWORD)MoPhongAnTinVat, (DWORD)MoPhongAnTinVatAdr, 6);
	extHook AcceptItemVPrequestFun(handlGame, (DWORD)AcceptItemVPrequest, (DWORD)AcceptItemVPrequestAdr, 5);
	extHook MoFormPhongAnFun(handlGame, (DWORD)MoFormPhongAn, (DWORD)MoFormPhongAnAdr, 6);
	extHook ReceivePackagePhongAnFun(handlGame, (DWORD)ReceivePackagePhongAn, (DWORD)ReceivePackagePhongAnAdr, 8);
	extHook DrawMoreInforRelicFun(handlGame, (DWORD)DrawMoreInforRelic, (DWORD)DrawMoreInforRelicAdr, 7);
	extHook ResizeShowItemFun(handlGame, (DWORD)ResizeShowItem, (DWORD)ResizeShowItemAdr, 6);
	extHook AddOptionPhongAnTinVatFun(handlGame, (DWORD)AddOptionPhongAnTinVat, (DWORD)AddOptionPhongAnTinVatAdr, 8);
	//Fix Loi Load TGA
	DWORD LoadImageTgaSetItemAAdr = 0x0049074A;
	DWORD LoadImageTgaSetItemBAdr = 0x004907A4;
	DWORD LoadImageTgaSetItemCAdr = 0x0049086A;
	DWORD LoadImageTgaSetItemDAdr = 0x004908C4;
	extHook LoadImageTgaSetItemAFun(handlGame, (DWORD)LoadImageTgaSetItemA, (DWORD)LoadImageTgaSetItemAAdr, 7);
	extHook LoadImageTgaSetItemBFun(handlGame, (DWORD)LoadImageTgaSetItemB, (DWORD)LoadImageTgaSetItemBAdr, 7);
	extHook LoadImageTgaSetItemCFun(handlGame, (DWORD)LoadImageTgaSetItemC, (DWORD)LoadImageTgaSetItemCAdr, 7);
	extHook LoadImageTgaSetItemDFun(handlGame, (DWORD)LoadImageTgaSetItemD, (DWORD)LoadImageTgaSetItemDAdr, 7);

	//LoadImageTgaSetItemAFun.ToggleHook2(TGAFileA);
	//LoadImageTgaSetItemBFun.ToggleHook2(TGAFileB);
	//LoadImageTgaSetItemCFun.ToggleHook2(TGAFileC);
	//LoadImageTgaSetItemDFun.ToggleHook2(TGAFileD);
	//
	//Dat ten tieng viet

	extHook AcceptTiengVietFun(handlGame, (DWORD)AcceptTiengViet, (DWORD)AcceptTiengVietAdr, 9);
	extHook DatTenTiengVietFun(handlGame, (DWORD)DatTenTiengViet, (DWORD)DatTenTiengVietAdr, 5);
	DatTenTiengVietFun.ToggleHook();
	AcceptTiengVietFun.ToggleHook();

	//
	extHook ResizeShowIncClothFun(handlGame, (DWORD)ResizeShowIncCloth, (DWORD)ResizeShowIncClothAdr, 6);
	extHook ShowHuyetLongRequestFun(handlGame, (DWORD)ShowHuyetLongRequest, (DWORD)ShowHuyetLongRequestAdr, 6);
	extHook RemoveHuyetLongRequestFun(handlGame, (DWORD)RemoveHuyetLongRequest, (DWORD)RemoveHuyetLongRequestAdr, 5);
	extHook ShowTextIncCloCuongDoFun(handlGame, (DWORD)ShowTextIncCloCuongDo, (DWORD)ShowTextIncCloCuongDoAdr, 6);
	extHook NewIncClothItemFun(handlGame, (DWORD)NewIncClothItem, (DWORD)NewIncClothItemAdr, 7);

	// Skill Weapon
	DWORD ResizeShowWeaponSkillAdr = 0x004CC245;
	extHook ResizeShowWeaponSkillFun(handlGame, (DWORD)ResizeShowWeaponSkill, (DWORD)ResizeShowWeaponSkillAdr, 5);
	ResizeShowWeaponSkillFun.ToggleHook2(ListInforWeaponSkill);
	DWORD DrawWeaponSkillAdr = 0x004D5FBC;
	extHook DrawWeaponSkillFun(handlGame, (DWORD)DrawWeaponSkill, (DWORD)DrawWeaponSkillAdr, 5);
	DrawWeaponSkillFun.ToggleHook2(ListInforWeaponSkill);

	//Show Info
	DWORD ShowWeapon1Adr = 0x004D52B0;
	DWORD ShowCloth1Adr = 0x004D6143;
	DWORD ShowBook1Adr = 0x004D759E;
	DWORD ShowPotion1Adr = 0x004D7610;
	DWORD ShowConsuming1Adr = 0x004D7BD7;
	DWORD ShowElixir1Adr = 0x004D7EE3;
	DWORD ShowAccessory1Adr = 0x004D8454;
	DWORD ShowLife1Adr = 0x004D8DC5;
	DWORD ShowSocket1Adr = 0x004D8EA0;
	LPVOID ShowInforItem = (LPVOID)VirtualAllocEx(handlGame, NULL, 200, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
	VirtualProtectEx(handlGame, (LPVOID)ShowInforItem, 200, PAGE_EXECUTE_READWRITE, &oldProtect1);
	extHook ShowResourceInfoFun(handlGame, (DWORD)ShowResourceInfo, (DWORD)ShowResourceInfoAdr, 7);
	extHook ShowCloth1Fun(handlGame, (DWORD)ShowCloth1, (DWORD)ShowCloth1Adr, 6);
	extHook ShowWeapon1Fun(handlGame, (DWORD)ShowWeapon1, (DWORD)ShowWeapon1Adr, 6);
	extHook ShowBook1Fun(handlGame, (DWORD)ShowBook1, (DWORD)ShowBook1Adr, 6);
	extHook ShowPotion1Fun(handlGame, (DWORD)ShowPotion1, (DWORD)ShowPotion1Adr, 6);
	extHook ShowConsuming1Fun(handlGame, (DWORD)ShowConsuming1, (DWORD)ShowConsuming1Adr, 6);
	extHook ShowElixir1Fun(handlGame, (DWORD)ShowElixir1, (DWORD)ShowElixir1Adr, 6);
	extHook ShowAccessory1Fun(handlGame, (DWORD)ShowAccessory1, (DWORD)ShowAccessory1Adr, 6);
	extHook ShowSocket1Fun(handlGame, (DWORD)ShowSocket1, (DWORD)ShowSocket1Adr, 6);
	extHook ShowLife1Fun(handlGame, (DWORD)ShowLife1, (DWORD)ShowLife1Adr, 6);
	ShowResourceInfoFun.ToggleHook2(ShowInforItem);
	ShowWeapon1Fun.ToggleHook2(ShowInforItem);
	ShowBook1Fun.ToggleHook2(ShowInforItem);
	ShowPotion1Fun.ToggleHook2(ShowInforItem);
	ShowConsuming1Fun.ToggleHook2(ShowInforItem);
	ShowElixir1Fun.ToggleHook2(ShowInforItem);
	ShowAccessory1Fun.ToggleHook2(ShowInforItem);
	ShowSocket1Fun.ToggleHook2(ShowInforItem);
	ShowLife1Fun.ToggleHook2(ShowInforItem);
	ShowCloth1Fun.ToggleHook2(ShowInforItem);
	//Show Resource
	DWORD DrawResourceAdr = 0x004FCFFA;
	DWORD KhoiPhucNutGiaoDichAdr = 0x005D9CF3;
	DWORD TatBangResourceAdr = 0x0053045F;
    DWORD TatBangCombineAdr = 0x005DE1A3;
	extHook DrawResourceFun(handlGame, (DWORD)DrawResource, (DWORD)DrawResourceAdr, 7);
	extHook KhoiPhucNutGiaoDichFun(handlGame, (DWORD)KhoiPhucNutGiaoDich, (DWORD)KhoiPhucNutGiaoDichAdr, 5);
	extHook TatBangResourceFun(handlGame, (DWORD)TatBangResource, (DWORD)TatBangResourceAdr, 6);
	extHook TatBangCombineFun(handlGame, (DWORD)TatBangCombine, (DWORD)TatBangCombineAdr, 6);
	DrawResourceFun.ToggleHook();
	KhoiPhucNutGiaoDichFun.ToggleHook();
	TatBangResourceFun.ToggleHook();
	TatBangCombineFun.ToggleHook();

	//Ep Opt Moi Vu Khi
	DWORD OptRiengCuaVuKhiClassAdr = 0x004D5482;
	extHook OptRiengCuaVuKhiClassFun(handlGame, (DWORD)OptRiengCuaVuKhiClass, (DWORD)OptRiengCuaVuKhiClassAdr, 6);
	//OptRiengCuaVuKhiClassFun.ToggleHook2(ShowOptionString);
	//LoadTiengViet
	DWORD LoadLanguageVNTestAdr = 0x007C2517;
	DWORD LoadLanguageVNTestPrintAdr = 0x007CF166;
	DWORD LoadLanguageVNTest2Adr = 0x007C254B;
    DWORD FixKhoangCachTextAdr = 0x007CDD0A;
	extHook LoadLanguageVNTestFun(handlGame, (DWORD)LoadLanguageVNTest, (DWORD)LoadLanguageVNTestAdr, 8);
    extHook LoadLanguageVNTestPrintFun(handlGame, (DWORD)LoadLanguageVNTestPrint, (DWORD)LoadLanguageVNTestPrintAdr, 5);
	extHook LoadLanguageVNTest2Fun(handlGame, (DWORD)LoadLanguageVNTest2, (DWORD)LoadLanguageVNTest2Adr, 11);
    extHook FixKhoangCachTextFun(handlGame, (DWORD)FixKhoangCachText, (DWORD)FixKhoangCachTextAdr, 8);
	LoadLanguageVNTestFun.ToggleHook2(UniCodeVN);
	LoadLanguageVNTestPrintFun.ToggleHook2(UniCodeVN);
	FixKhoangCachTextFun.ToggleHook();

	//Show Tinh Nang Moi
	DWORD FormResetOptionVuKhiAdr = 0x004AE084;
	DWORD LoadInfoTinhNangMoiAdr = 0x005EA2E7;
    DWORD FormReset3Adr = 0x004AE463;
	DWORD FormReset2Adr = 0x004AE40C;
	DWORD FormReset1Adr = 0x004AE3D8;
	DWORD DrawTinhNangOptionMoiAdr = 0x004AE25E;
	DWORD CheckVatPhamTinhCheAdr = 0x0048BCEF;
	DWORD GetPozAndProcessAdr = 0x004AE20B;
	DWORD ProcessTinhNangMoiAdr = 0x006B54DC;
	DWORD ByPassMaxTinhCheAdr = 0x0048BD58;
	DWORD ByPassHienFormHoiAdr = 0x005DCC08;
	DWORD ByPassCheckQuanAoAdr = 0x0048BD7D;
    DWORD HienThiThoiGianPetDaoAdr = 0x00660673;
	extHook FormReset1Fun(handlGame, (DWORD)FormReset1, (DWORD)FormReset1Adr, 5);
	extHook FormReset2Fun(handlGame, (DWORD)FormReset2, (DWORD)FormReset2Adr, 6);
	extHook FormReset3Fun(handlGame, (DWORD)FormReset3, (DWORD)FormReset3Adr, 6);
	extHook FormResetOptionVuKhiFun(handlGame, (DWORD)FormResetOptionVuKhi, (DWORD)FormResetOptionVuKhiAdr, 5);
	extHook LoadInfoTinhNangMoiFun(handlGame, (DWORD)LoadInfoTinhNangMoi, (DWORD)LoadInfoTinhNangMoiAdr, 6);
	extHook DrawTinhNangOptionMoiFun(handlGame, (DWORD)DrawTinhNangOptionMoi, (DWORD)DrawTinhNangOptionMoiAdr, 5);
    extHook CheckVatPhamTinhCheFun(handlGame, (DWORD)CheckVatPhamTinhChe, (DWORD)CheckVatPhamTinhCheAdr, 6);
	extHook GetPozAndProcessFun(handlGame, (DWORD)GetPozAndProcess, (DWORD)GetPozAndProcessAdr, 6);
	extHook ProcessTinhNangMoiFun(handlGame, (DWORD)ProcessTinhNangMoi, (DWORD)ProcessTinhNangMoiAdr, 7);
	extHook ByPassMaxTinhCheFun(handlGame, (DWORD)ByPassMaxTinhChe, (DWORD)ByPassMaxTinhCheAdr, 7);
	extHook ByPassHienFormHoiFun(handlGame, (DWORD)ByPassHienFormHoi, (DWORD)ByPassHienFormHoiAdr, 6);
	extHook ByPassCheckQuanAoFun(handlGame, (DWORD)ByPassCheckQuanAo, (DWORD)ByPassCheckQuanAoAdr, 7);
	extHook HienThiThoiGianPetDaoFun(handlGame, (DWORD)HienThiThoiGianPetDao, (DWORD)HienThiThoiGianPetDaoAdr, 10);
	LoadInfoTinhNangMoiFun.ToggleHook2(nTinhNangMoiVk);
	FormResetOptionVuKhiFun.ToggleHook2(nTinhNangMoiVk);
	FormReset1Fun.ToggleHook2(nTinhNangMoiVk);
	FormReset2Fun.ToggleHook2(nTinhNangMoiVk);
	FormReset3Fun.ToggleHook2(nTinhNangMoiVk);
	DrawTinhNangOptionMoiFun.ToggleHook2(nTinhNangMoiVk);
	CheckVatPhamTinhCheFun.ToggleHook2(nTinhNangMoiVk);
	GetPozAndProcessFun.ToggleHook2(nTinhNangMoiVk);
	ProcessTinhNangMoiFun.ToggleHook2(nTinhNangMoiVk);
    ByPassMaxTinhCheFun.ToggleHook2(nTinhNangMoiVk);
	ByPassHienFormHoiFun.ToggleHook();
	ByPassCheckQuanAoFun.ToggleHook2(nTinhNangMoiVk);
	//HienThiThoiGianPetDaoFun.ToggleHook2(nTinhNangMoiVk);
	//Khoa Sap Xep Kho
	DWORD BlockSortWareHouseAdr = 0x005CD77B;
    DWORD DisableLoDiemNutQuickAdr = 0x007C06F1;
    DWORD KhongChoNhanESCKhiLoDiemAdr = 0x005AD715;
	extHook BlockSortWareHouseFun(handlGame, (DWORD)BlockSortWareHouse, (DWORD)BlockSortWareHouseAdr, 5);
    extHook DisableLoDiemNutQuickFun(handlGame, (DWORD)DisableLoDiemNutQuick, (DWORD)DisableLoDiemNutQuickAdr, 7);
	extHook KhongChoNhanESCKhiLoDiemFun(handlGame, (DWORD)KhongChoNhanESCKhiLoDiem, (DWORD)KhongChoNhanESCKhiLoDiemAdr, 5);
	BlockSortWareHouseFun.ToggleHook();
    DisableLoDiemNutQuickFun.ToggleHook();
	KhongChoNhanESCKhiLoDiemFun.ToggleHook();
	//Bypass Error Disss
	DWORD ByPassErrorDissAdr = 0x006A5584;
	extHook ByPassErrorDissFun(handlGame, (DWORD)ByPassErrorDiss, (DWORD)ByPassErrorDissAdr, 6);
    ByPassErrorDissFun.ToggleHook();
	// Fix Loi sap xep mat opt
	DWORD FixLoiMatOptPhongAnSlotMoiAdr = 0x006EC4CF;
    extHook FixLoiMatOptPhongAnSlotMoiFun(handlGame, (DWORD)FixLoiMatOptPhongAnSlotMoi, (DWORD)FixLoiMatOptPhongAnSlotMoiAdr, 6);
    FixLoiMatOptPhongAnSlotMoiFun.ToggleHook();
	// Nghi ngoi
	LPVOID nTimeAway = (LPVOID)VirtualAllocEx(handlGame, NULL, 8, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
	VirtualProtectEx(handlGame, (LPVOID)nTimeAway, 8, PAGE_EXECUTE_READWRITE, &oldProtect1);
    DWORD CheckTimeActivate2Adr = 0x0065FC52;
	DWORD CheckTimeActivateAdr = 0x0065FC76;
	DWORD GetTimeLastTimeActivateAdr = 0x00623886;
	DWORD CheckNghiNgoiANotherUserAdr = 0x00660D16;
    DWORD UpdateTimeNghiNgoiKhiSuDungSkillAdr = 0x006ABB96;
	extHook CheckTimeActivate2Fun(handlGame, (DWORD)CheckTimeActivate2, (DWORD)CheckTimeActivate2Adr, 5);
	extHook CheckTimeActivateFun(handlGame, (DWORD)CheckTimeActivate, (DWORD)CheckTimeActivateAdr, 6);
	extHook GetTimeLastTimeActivateFun(handlGame, (DWORD)GetTimeLastTimeActivate, (DWORD)GetTimeLastTimeActivateAdr, 6);
    extHook CheckNghiNgoiANotherUserFun(handlGame, (DWORD)CheckNghiNgoiANotherUser, (DWORD)CheckNghiNgoiANotherUserAdr, 6);
	extHook UpdateTimeNghiNgoiKhiSuDungSkillFun(handlGame, (DWORD)UpdateTimeNghiNgoiKhiSuDungSkill, (DWORD)UpdateTimeNghiNgoiKhiSuDungSkillAdr, 5);
	/*CheckTimeActivate2Fun.ToggleHook2(nTimeAway);
	CheckTimeActivateFun.ToggleHook2(nTimeAway);
	GetTimeLastTimeActivateFun.ToggleHook2(nTimeAway);
	CheckNghiNgoiANotherUserFun.ToggleHook();
	UpdateTimeNghiNgoiKhiSuDungSkillFun.ToggleHook2(nTimeAway);  */
	// Form Pet
	LPVOID nPetTinhNang = (LPVOID)VirtualAllocEx(handlGame, NULL, 1000, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
	VirtualProtectEx(handlGame, (LPVOID)nPetTinhNang, 1000, PAGE_EXECUTE_READWRITE, &oldProtect1);
	DWORD HeThongPetReceivePackageAdr = 0x006AAC57;
	DWORD AcceptTab4Adr = 0x004FEDDE;
	DWORD TablePetAdr = 0x004FC44D;
	DWORD LoadInfoPetAdr = 0x005EA2ED;
	DWORD DrawInforPetAdr = 0x004FD022;
	DWORD GetPozPetAdr = 0x004FDDD4;
	DWORD DrawAutoInGameAdr = 0x0065F9BD;
	DWORD GetViTriVatPhamTimeDaoAdr = 0x0048CAA1;
	DWORD GetViTriThucAnPetAdr = 0x0048C953;
	DWORD GetViTriPetDaoAdr = 0x0048C340;
	extHook GetViTriVatPhamTimeDaoFun(handlGame, (DWORD)GetViTriVatPhamTimeDao, (DWORD)GetViTriVatPhamTimeDaoAdr, 5);
	extHook GetViTriThucAnPetFun(handlGame, (DWORD)GetViTriThucAnPet, (DWORD)GetViTriThucAnPetAdr, 6);
	extHook GetViTriPetDaoFun(handlGame, (DWORD)GetViTriPetDao, (DWORD)GetViTriPetDaoAdr, 6);
	extHook AcceptTab4Fun(handlGame, (DWORD)AcceptTab4, (DWORD)AcceptTab4Adr, 7);
	extHook DrawAutoInGameFun(handlGame, (DWORD)DrawAutoInGame, (DWORD)DrawAutoInGameAdr, 6);
	extHook TablePetFun(handlGame, (DWORD)TablePet, (DWORD)TablePetAdr, 6);
	extHook LoadInfoPetFun(handlGame, (DWORD)LoadInfoPet, (DWORD)LoadInfoPetAdr, 7);
	extHook DrawInforPetFun(handlGame, (DWORD)DrawInforPet, (DWORD)DrawInforPetAdr, 6);
	extHook GetPozPetFun(handlGame, (DWORD)GetPozPet, (DWORD)GetPozPetAdr, 8);
	extHook HeThongPetReceivePackageFun(handlGame, (DWORD)HeThongPetReceivePackage, (DWORD)HeThongPetReceivePackageAdr, 8);
	//AcceptTab4Fun.ToggleHook();
	//TablePetFun.ToggleHook();
	//LoadInfoPetFun.ToggleHook2(nPetTinhNang);
	//DrawInforPetFun.ToggleHook2(nPetTinhNang);
	//GetPozPetFun.ToggleHook2(nPetTinhNang);
	//HeThongPetReceivePackageFun.ToggleHook2(nPetTinhNang);
	//GetViTriVatPhamTimeDaoFun.ToggleHook2(nPetTinhNang);
	//GetViTriThucAnPetFun.ToggleHook2(nPetTinhNang);
	//GetViTriPetDaoFun.ToggleHook2(nPetTinhNang);
	//GetViTriThucAnPetFun.ToggleHook2(nPetTinhNang);
	//--------
	LoadInfoPetFun.ToggleHook2(nPetTinhNang);
	GetViTriVatPhamTimeDaoFun.ToggleHook2(nPetTinhNang);
	GetViTriPetDaoFun.ToggleHook2(nPetTinhNang);
	AcceptTab4Fun.ToggleHook();
	TablePetFun.ToggleHook();

	DrawInforPetFun.ToggleHook2(nPetTinhNang);
	GetPozPetFun.ToggleHook2(nPetTinhNang);
	HeThongPetReceivePackageFun.ToggleHook2(nPetTinhNang);
	DrawAutoInGameFun.ToggleHook2(ShowClass);

	// Su dung VP
	LPVOID NewSlotItem = (LPVOID)VirtualAllocEx(handlGame, NULL, 3200, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
	VirtualProtectEx(handlGame, (LPVOID)NewSlotItem, 3200, PAGE_EXECUTE_READWRITE, &oldProtect1);
	DWORD GetPackageUsedItemAdr = 0x006AC885;
	extHook GetPackageUsedItemFun(handlGame, (DWORD)GetPackageUsedItem, (DWORD)GetPackageUsedItemAdr, 5);
	GetPackageUsedItemFun.ToggleHook2(NewSlotItem);

    // Open Slot
	LPVOID InforSlotNumber = (LPVOID)VirtualAllocEx(handlGame, NULL, 700, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
	VirtualProtectEx(handlGame, (LPVOID)InforSlotNumber, 700, PAGE_EXECUTE_READWRITE, &oldProtect1);
	DWORD CheckConditionNewSlotAdr = 0x006B464B;
	DWORD ReceivePackageSlotAdr = 0x006ABA08;
	extHook CheckConditionNewSlotFun(handlGame, (DWORD)CheckConditionNewSlot, (DWORD)CheckConditionNewSlotAdr, 7);
	extHook ReceivePackageSlotFun(handlGame, (DWORD)ReceivePackageSlot, (DWORD)ReceivePackageSlotAdr, 8);
	CheckConditionNewSlotFun.ToggleHook2(InforSlotNumber);
	ReceivePackageSlotFun.ToggleHook2(InforSlotNumber);
	AddMoreSlotShowItemFun.ToggleHook2(InforSlotNumber);

	DWORD DisableMoveArroundAdr = 0x00623077;
	extHook DisableMoveArroundFun(handlGame, (DWORD)DisableMoveArround, (DWORD)DisableMoveArroundAdr, 5);
	LPVOID nAuto = (LPVOID)VirtualAllocEx(handlGame, NULL, 2000, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
	VirtualProtectEx(handlGame, (LPVOID)nAuto, 2000, PAGE_EXECUTE_READWRITE, &oldProtect1);
	// Auto
	DWORD AttackMonsterAdr = 0x0051D2DF;
	DWORD PickItemDropAdr = 0x0067893F;
	DWORD FixNotReleaseModDieAutoAdr = 0x0062BA4A;
	DWORD TestBanDoAdr = 0x007E278C;
	DWORD SetFlagPickItemAdr = 0x00678128;
	DWORD SetFlagPickItem2Adr = 0x006780BB;
	DWORD CheckAutoDelayAdr = 0x00661C0F;
	DWORD UsePotionAutoAdr = 0x005904A6;
	DWORD HienThiThongTinDangAutoAdr = 0x0065F9E7;
	DWORD AutoTheoSauNhomTruongAdr = 0x00456897;
	DWORD TestAttackModAdr = 0x00493FA9;
	DWORD SetTargetModAdr = 0x0064B5B3;
	DWORD LoadInfoAutoAdr = 0x005E1DC3;
	DWORD DrawAutoFormIngameAdr = 0x00503B57;
	DWORD GetPozAutoIngameAdr = 0x00503BE0;
	DWORD NotMoveWhenAutoPickAdr = 0x0061FC08;
	DWORD LuyenSkillAdr = 0x0051D309;
	DWORD AutoHoiSinhAdr = 0x00562B88;
	DWORD AutoMoRuongAdr = 0x0056E3A6;
	extHook AttackMonsterFun(handlGame, (DWORD)AttackMonster, (DWORD)AttackMonsterAdr, 7);
	extHook LuyenSkillFun(handlGame, (DWORD)LuyenSkill, (DWORD)LuyenSkillAdr, 7);
	extHook NotMoveWhenAutoPickFun(handlGame, (DWORD)NotMoveWhenAutoPick, (DWORD)NotMoveWhenAutoPickAdr, 7);
	extHook PickItemDropFun(handlGame, (DWORD)PickItemDrop, (DWORD)PickItemDropAdr, 5);
	extHook FixNotReleaseModDieAutoFun(handlGame, (DWORD)FixNotReleaseModDieAuto, (DWORD)FixNotReleaseModDieAutoAdr, 6);
	extHook SetFlagPickItemFun(handlGame, (DWORD)SetFlagPickItem, (DWORD)SetFlagPickItemAdr, 5);
	extHook SetFlagPickItem2Fun(handlGame, (DWORD)SetFlagPickItem2, (DWORD)SetFlagPickItem2Adr, 6);
	extHook CheckAutoDelayFun(handlGame, (DWORD)CheckAutoDelay, (DWORD)CheckAutoDelayAdr, 5);
	extHook UsePotionAutoFun(handlGame, (DWORD)UsePotionAuto, (DWORD)UsePotionAutoAdr, 5);
	extHook HienThiThongTinDangAutoFun(handlGame, (DWORD)HienThiThongTinDangAuto, (DWORD)HienThiThongTinDangAutoAdr, 6);
	extHook AutoTheoSauNhomTruongFun(handlGame, (DWORD)AutoTheoSauNhomTruong, (DWORD)AutoTheoSauNhomTruongAdr, 5);
	extHook TestAttackModFun(handlGame, (DWORD)TestAttackMod, (DWORD)TestAttackModAdr, 5);
	extHook SetTargetModFun(handlGame, (DWORD)SetTargetMod, (DWORD)SetTargetModAdr, 7);
	extHook LoadInfoAutoFun(handlGame, (DWORD)LoadInfoAuto, (DWORD)LoadInfoAutoAdr, 7);
	extHook DrawAutoFormIngameFun(handlGame, (DWORD)DrawAutoFormIngame, (DWORD)DrawAutoFormIngameAdr, 7);
	extHook GetPozAutoIngameFun(handlGame, (DWORD)GetPozAutoIngame, (DWORD)GetPozAutoIngameAdr, 5);
	extHook AutoHoiSinhFun(handlGame, (DWORD)AutoHoiSinh, (DWORD)AutoHoiSinhAdr, 6);
	extHook AutoMoRuongFun(handlGame, (DWORD)AutoMoRuongFunc, (DWORD)AutoMoRuongAdr, 10);
	SetTargetModFun.ToggleHook2(nAuto);
	LoadInfoAutoFun.ToggleHook2(nAuto);
	DrawAutoFormIngameFun.ToggleHook2(nAuto);
	GetPozAutoIngameFun.ToggleHook2(nAuto);
	AttackMonsterFun.ToggleHook2(nAuto);
	PickItemDropFun.ToggleHook2(nAuto);
	SetFlagPickItemFun.ToggleHook2(nAuto);
	SetFlagPickItem2Fun.ToggleHook2(nAuto);
	CheckAutoDelayFun.ToggleHook2(nAuto);
	NotMoveWhenAutoPickFun.ToggleHook2(nAuto);
	LuyenSkillFun.ToggleHook2(nAuto);
	//UsePotionAutoFun.ToggleHook2(nAuto);
	HienThiThongTinDangAutoFun.ToggleHook2(nAuto);
	//AutoHoiSinhFun.ToggleHook2(nAuto);
	AutoMoRuongFun.ToggleHook2(nAuto);
	DisableMoveArroundFun.ToggleHook2(nAuto);

	DWORD TestDrawImageNewGradeAdr = 0x00491676;
	DWORD ThayDoiGiaTriLoopShowGradeAdr = 0x00491631;
	DWORD ThayDoiGiaTriLoopShowGrade2Adr = 0x00491622;
	extHook TestDrawImageNewGradeFun(handlGame, (DWORD)TestDrawImageNewGrade, (DWORD)TestDrawImageNewGradeAdr, 6);
	extHook ThayDoiGiaTriLoopShowGradeFun(handlGame, (DWORD)ThayDoiGiaTriLoopShowGrade, (DWORD)ThayDoiGiaTriLoopShowGradeAdr, 6);
	extHook ThayDoiGiaTriLoopShowGrade2Fun(handlGame, (DWORD)ThayDoiGiaTriLoopShowGrade2, (DWORD)ThayDoiGiaTriLoopShowGrade2Adr, 6);
	DWORD ThayDoiHinhRankAdr = 0x0049162A;


	//AutoTheoSauNhomTruongFun.ToggleHook2(nAuto);
	//TestBanDoFun.ToggleHook2(nAuto);  // Bug Ket Map
	//FixNotReleaseModDieAutoFun.ToggleHook();
	//New Anti

	LPVOID StringAntiNew = (LPVOID)VirtualAllocEx(handlGame, NULL, 1000, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
	VirtualProtectEx(handlGame, (LPVOID)StringAntiNew, 1000, PAGE_EXECUTE_READWRITE, &oldProtect1);
    BYTE FileCheck[10]= {0x65,0x72,0x72,0x6f,0x72,0x66,0x6f,0x75,0x6e,0x64};
	PatchEx((BYTE*)StringAntiNew, (BYTE*)FileCheck, 10, handlGame);
	DWORD CheckSumFileAdr = 0x007CF241;
	extHook CheckSumFileFun(handlGame, (DWORD)CheckSumFile, (DWORD)CheckSumFileAdr, 6);

	//
	DWORD HienThiThanhGMToolsAdr = 0x0065F9F9;
	extHook HienThiThanhGMToolsFun(handlGame, (DWORD)HienThiThanhGMTools, (DWORD)HienThiThanhGMToolsAdr, 6);
	HienThiThanhGMToolsFun.ToggleHook();
	hookGMCommand.ToggleHook();
	hookSendPacketSV.ToggleHook();
	//Check IP
	LPVOID IpCheckConnect = (LPVOID)VirtualAllocEx(handlGame, NULL, 24 ,MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
	VirtualProtectEx(handlGame, (LPVOID)IpCheckConnect, 24,PAGE_EXECUTE_READWRITE, &oldProtect1);
	BYTE IpCheckConnectValue[20]= {0x64,0x61,0x6e,0x67,0x6e,0x68,0x61,0x70,0x2e,0x7a,0x70,0x6c,0x61,0x79,0x39,0x64,0x2e,0x6e,0x65,0x74};
	PatchEx((BYTE*)IpCheckConnect, (BYTE*)IpCheckConnectValue, 20, handlGame);
	DWORD CheckIPConnectAdr = 0x006B317C;
	extHook CheckIPConnectFun(handlGame, (DWORD)CheckIPConnect, (DWORD)CheckIPConnectAdr, 5);

	//
	DWORD CheckCorrectSkillOnQuickAdr = 0x0051D383;
	LPVOID StringAntiNew2 = (LPVOID)VirtualAllocEx(handlGame, NULL, 40, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
	VirtualProtectEx(handlGame, (LPVOID)StringAntiNew2, 40, PAGE_EXECUTE_READWRITE, &oldProtect1);
	extHook CheckCorrectSkillOnQuickFun(handlGame, (DWORD)CheckCorrectSkillOnQuick, (DWORD)CheckCorrectSkillOnQuickAdr, 5);

	DWORD GetPackAllyAdr = 0x006AD712;
	extHook GetPackAllyFun(handlGame, (DWORD)GetPackAlly, (DWORD)GetPackAllyAdr, 5);

    //
    LPVOID DistanChange = (LPVOID)VirtualAllocEx(handlGame, NULL, 4, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
	VirtualProtectEx(handlGame, (LPVOID)DistanChange, 4, PAGE_EXECUTE_READWRITE, &oldProtect1);
	BYTE DisChangeValiue[4]= {0x00,0x00,0x70,0x42};
	PatchEx((BYTE*)DistanChange, (BYTE*)DisChangeValiue, 4, handlGame);
	DWORD ChangeSizeDistanceAdr = 0x00623769;
	extHook ChangeSizeDistanceFun(handlGame, (DWORD)ChangeSizeDistance, (DWORD)ChangeSizeDistanceAdr, 6);
	ChangeSizeDistanceFun.ToggleHook2(DistanChange);

	DWORD HeThongAntiGetPackage2Adr = 0x006AD712;
	DWORD ChangePackedHeader1Adr = 0x007B679E;
	extHook ChangePackedHeader1Fun(handlGame, (DWORD)ChangePackedHeader1, (DWORD)ChangePackedHeader1Adr, 7);
	//ChangePackedHeader1Fun.ToggleHook();


	//Nhan Package List Combine
	DWORD SendRequestListItemCombineIDAdr = 0x00661C48;
	DWORD NhanPackageListIDCombineAdr = 0x006AD88F;
	DWORD NhanPackageListWeaponSkillAdr = 0x006AD8A9;
	extHook SendRequestListItemCombineIDFun(handlGame, (DWORD)SendRequestListItemCombineID, (DWORD)SendRequestListItemCombineIDAdr, 7);
	extHook NhanPackageListIDCombineFun(handlGame, (DWORD)NhanPackageListIDCombine, (DWORD)NhanPackageListIDCombineAdr, 8);
	extHook NhanPackageListWeaponSkillFun(handlGame, (DWORD)NhanPackageListWeaponSkill, (DWORD)NhanPackageListWeaponSkillAdr, 8);
	SendRequestListItemCombineIDFun.ToggleHook2(TiLeTinhLuyen);
	NhanPackageListIDCombineFun.ToggleHook2(TiLeTinhLuyen);
	NhanPackageListWeaponSkillFun.ToggleHook2(ListInforWeaponSkill);

	//Chuc Nang Bang hoi
	LPVOID ListInfoBH = (LPVOID)VirtualAllocEx(handlGame, NULL, 1000, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
	VirtualProtectEx(handlGame, (LPVOID)ListInfoBH, 1000, PAGE_EXECUTE_READWRITE, &oldProtect1);
	LPVOID ListInfoMaps = (LPVOID)VirtualAllocEx(handlGame, NULL, 200, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
	VirtualProtectEx(handlGame, (LPVOID)ListInfoMaps, 200, PAGE_EXECUTE_READWRITE, &oldProtect1);
	LPVOID ThongTinCTCMaps = (LPVOID)VirtualAllocEx(handlGame, NULL, 3000, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
	VirtualProtectEx(handlGame, (LPVOID)ThongTinCTCMaps, 3000, PAGE_EXECUTE_READWRITE, &oldProtect1);
	DWORD DrawNewGroupAllyAdr = 0x004EBE62;
	DWORD LoadInfoAllyGroupAdr = 0x005EA32F;
	DWORD DrawInfoCTCAdr = 0x00590666;
	DWORD GetPozGroupAllyAdr = 0x004ED14E;
	DWORD HienThiBuffBangHoiAdr = 0x0065FB9A;
	DWORD HienThiInfoCTCMapsAdr = 0x00660673;
	DWORD ReceivePackageEventCTCAdr = 0x006AC175;
	DWORD DrawInfoSuKienCTCAdr = 0x0059484E;
	DWORD DisableSpeedCTCAdr = 0x00624B94;
	DWORD CongThanhChienThongTinAdr = 0x00652194;
	DWORD DrawFormCTC = 0x004F275B;
	DWORD HienThiThongTinCTCFormAdr = 0x004F2C3E;
	DWORD ThamGiaCTCAdr = 0x004F2E0A;
	DWORD ChangeDeccoCTC1Adr = 0x006BB3E5;
	DWORD ChangeDeccoCTCAdr = 0x006BA7F2;
	DWORD HideNameUser2Adr = 0x00660B05;
	DWORD HideNameUserAdr = 0x00660AE5;
	DWORD HideNameUser3Adr = 0x00660B21;
	DWORD KhoaEKhiVoMapDaiChienAdr = 0x006B4A35;
	DWORD HideNameUser4Adr = 0x0051FAF3;
	DWORD BypassMonPhaiPkOnAdr = 0x00646898;
	DWORD ShiftPKOnAdr = 0x00646702;
	PatchEx((BYTE*)DrawFormCTC, (BYTE*)"\xE9\x1D\x01\x00\x00", 5, handlGame);
    extHook CongThanhChienThongTinFun(handlGame, (DWORD)CongThanhChienThongTin, (DWORD)CongThanhChienThongTinAdr, 6);
	extHook DrawNewGroupAllyFun(handlGame, (DWORD)DrawNewGroupAlly, (DWORD)DrawNewGroupAllyAdr, 6);
    extHook DisableSpeedCTCFun(handlGame, (DWORD)DisableSpeedCTC, (DWORD)DisableSpeedCTCAdr, 6);
	extHook LoadInfoAllyGroupFun(handlGame, (DWORD)LoadInfoAllyGroup, (DWORD)LoadInfoAllyGroupAdr, 15);
	extHook DrawInfoCTCFun(handlGame, (DWORD)DrawInfoCTC, (DWORD)DrawInfoCTCAdr, 9);
	extHook GetPozGroupAllyFun(handlGame, (DWORD)GetPozGroupAlly, (DWORD)GetPozGroupAllyAdr, 7);
	extHook HienThiBuffBangHoiFun(handlGame, (DWORD)HienThiBuffBangHoi, (DWORD)HienThiBuffBangHoiAdr, 6);
	extHook HienThiInfoCTCMapsFun(handlGame, (DWORD)HienThiInfoCTCMaps, (DWORD)HienThiInfoCTCMapsAdr, 10);
	extHook ReceivePackageEventCTCFun(handlGame, (DWORD)ReceivePackageEventCTC, (DWORD)ReceivePackageEventCTCAdr, 8);
	extHook DrawInfoSuKienCTCFun(handlGame, (DWORD)DrawInfoSuKienCTC, (DWORD)DrawInfoSuKienCTCAdr, 9);
    extHook HienThiThongTinCTCFormFun(handlGame, (DWORD)HienThiThongTinCTCForm, (DWORD)HienThiThongTinCTCFormAdr, 6);
	extHook ThamGiaCTCFun(handlGame, (DWORD)ThamGiaCTC, (DWORD)ThamGiaCTCAdr, 5);
	extHook ChangeDeccoCTC1Fun(handlGame, (DWORD)ChangeDeccoCTC1, (DWORD)ChangeDeccoCTC1Adr, 6);
	extHook ChangeDeccoCTCFun(handlGame, (DWORD)ChangeDeccoCTC, (DWORD)ChangeDeccoCTCAdr, 6);
	extHook HideNameUser2Fun(handlGame, (DWORD)HideNameUser2, (DWORD)HideNameUser2Adr, 6);
	extHook HideNameUserFun(handlGame, (DWORD)HideNameUser, (DWORD)HideNameUserAdr, 5);
    extHook HideNameUser3Fun(handlGame, (DWORD)HideNameUser3, (DWORD)HideNameUser3Adr, 5);
    extHook KhoaEKhiVoMapDaiChienFun(handlGame, (DWORD)KhoaEKhiVoMapDaiChien, (DWORD)KhoaEKhiVoMapDaiChienAdr, 6);
    extHook HideNameUser4Fun(handlGame, (DWORD)HideNameUser4, (DWORD)HideNameUser4Adr, 6);
	extHook BypassMonPhaiPkOnFun(handlGame, (DWORD)BypassMonPhaiPkOn, (DWORD)BypassMonPhaiPkOnAdr, 6);
	extHook ShiftPKOnFun(handlGame, (DWORD)ShiftPKOn, (DWORD)ShiftPKOnAdr, 6);
	//DrawNewGroupAllyFun.ToggleHook2(ListInfoBH);
	//LoadInfoAllyGroupFun.ToggleHook2(ListInfoBH);
	//DrawInfoCTCFun.ToggleHook2(ListInfoMaps);
	//GetPozGroupAllyFun.ToggleHook2(ListInfoBH);
	//GetPackAllyFun.ToggleHook2(ListInfoBH);
	//HienThiBuffBangHoiFun.ToggleHook2(ListInfoBH);
	//HienThiInfoCTCMapsFun.ToggleHook2(ThongTinCTCMaps);
	ReceivePackageEventCTCFun.ToggleHook2(ThongTinCTCMaps);
	//DrawInfoSuKienCTCFun.ToggleHook2(ThongTinCTCMaps);
	//DisableSpeedCTCFun.ToggleHook2(ThongTinCTCMaps);
	//**CongThanhChienThongTinFun.ToggleHook2(ThongTinCTCMaps);
	//HienThiThongTinCTCFormFun.ToggleHook2(ThongTinCTCMaps);
	//ThamGiaCTCFun.ToggleHook2(ThongTinCTCMaps);
	//**ChangeDeccoCTCFun.ToggleHook();
	//**ChangeDeccoCTC1Fun.ToggleHook();
	//HideNameUserFun.ToggleHook();
	//HideNameUser2Fun.ToggleHook();
	//HideNameUser3Fun.ToggleHook();
	//KhoaEKhiVoMapDaiChienFun.ToggleHook();
	//HideNameUser4Fun.ToggleHook();
	//BypassMonPhaiPkOnFun.ToggleHook();
	//ShiftPKOnFun.ToggleHook();
	DisableViewPet5Fun.ToggleHook();

	//ChangeCode:
	DWORD ChangeEncodeClientAdr = 0x007B62A2;
	extHook ChangeEncodeClientFun(handlGame, (DWORD)ChangeEncodeClient, (DWORD)ChangeEncodeClientAdr, 7);
	//ChangeEncodeClientFun.ToggleHook();


	//Fix Hien Thi Opt
	DWORD FixHienThiOptMoiAdr = 0x0068C309;
	DWORD FixHienThiOptMoi2Adr = 0x004CDE81;
	extHook FixHienThiOptMoiFun(handlGame, (DWORD)FixHienThiOptMoi, (DWORD)FixHienThiOptMoiAdr, 7);
	extHook FixHienThiOptMoi2Fun(handlGame, (DWORD)FixHienThiOptMoi2, (DWORD)FixHienThiOptMoi2Adr, 10);
	FixHienThiOptMoiFun.ToggleHook();
	FixHienThiOptMoi2Fun.ToggleHook();

	// Hien Thi Opt Moi
	DWORD HienThiOptAnAdr = 0x004B803A;
	DWORD HienThiOptionMoi2Adr = 0x004B9588;
	DWORD GetPozInfoCAdr = 0x004BA4B2;
    DWORD GetPackageInforNewOptionAdr = 0x006AD70A;
	LPVOID InfoOptionMoi = (LPVOID)VirtualAllocEx(handlGame, NULL, 600, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
	VirtualProtectEx(handlGame, (LPVOID)InfoOptionMoi, 600, PAGE_EXECUTE_READWRITE, &oldProtect1);
	extHook HienThiOptAnFun(handlGame, (DWORD)HienThiOptAn, (DWORD)HienThiOptAnAdr, 5);
	extHook HienThiOptionMoi2Fun(handlGame, (DWORD)HienThiOptionMoi2, (DWORD)HienThiOptionMoi2Adr, 6);
	extHook GetPozInfoCFun(handlGame, (DWORD)GetPozInfoC, (DWORD)GetPozInfoCAdr, 5);
	extHook GetPackageInforNewOptionFun(handlGame, (DWORD)GetPackageInforNewOption, (DWORD)GetPackageInforNewOptionAdr, 8);
	HienThiOptAnFun.ToggleHook2(InfoOptionMoi);
	HienThiOptionMoi2Fun.ToggleHook2(InfoOptionMoi);
	GetPozInfoCFun.ToggleHook2(InfoOptionMoi);
	GetPackageInforNewOptionFun.ToggleHook2(InfoOptionMoi);

	//New Mod Form
	DWORD AddNewUIModAdr = 0x0051D156;
	DWORD DrawNewFormAdr = 0x0051D2D4;
	DWORD BoQuaHienThiLevelAdr = 0x0051EC02;
	DWORD BoQuaHienThiLevel2Adr = 0x0051ED4F;
	DWORD HienThiTenModAdr = 0x0051FEAE;
	DWORD DoiHienThiMauBossMoiAdr = 0x007EC4C4;
	DWORD HienThiIconBossAdr = 0x0051ECAB;
	LPVOID FormModHealth = (LPVOID)VirtualAllocEx(handlGame, NULL, 300, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
	VirtualProtectEx(handlGame, (LPVOID)FormModHealth, 300, PAGE_EXECUTE_READWRITE, &oldProtect1);
	extHook AddNewUIModFun(handlGame, (DWORD)AddNewUIMod, (DWORD)AddNewUIModAdr, 7);
	extHook DrawNewFormFun(handlGame, (DWORD)DrawNewForm, (DWORD)DrawNewFormAdr, 6);
	extHook BoQuaHienThiLevelFun(handlGame, (DWORD)BoQuaHienThiLevel, (DWORD)BoQuaHienThiLevelAdr, 6);
	extHook BoQuaHienThiLevel2Fun(handlGame, (DWORD)BoQuaHienThiLevel2, (DWORD)BoQuaHienThiLevel2Adr, 6);
	extHook HienThiTenModFun(handlGame, (DWORD)HienThiTenMod, (DWORD)HienThiTenModAdr, 6);
	extHook DoiHienThiMauBossMoiFun(handlGame, (DWORD)DoiHienThiMauBossMoi, (DWORD)DoiHienThiMauBossMoiAdr, 6);
	extHook HienThiIconBossFun(handlGame, (DWORD)HienThiIconBoss, (DWORD)HienThiIconBossAdr, 6);


	//Hien Thi Thong Tin Nhan Vat
	DWORD ChangeUIInforAdr = 0x004B5F0C;
	DWORD ChangeSizeScrollBarAdr = 0x004B74BC;
	DWORD ThayDoiViTriThongTinNV1 = 0x004B95A8;
	PatchEx((BYTE*)ThayDoiViTriThongTinNV1, (BYTE*)"\xF7\x00\x00\x00", 4, handlGame);
	DWORD ThayDoiViTriThongTinNV2 = 0x004B95BF;
	PatchEx((BYTE*)ThayDoiViTriThongTinNV2, (BYTE*)"\x83\xC0\x4A\x90\x90", 5, handlGame);
	DWORD ThayDoiViTriThongTinNV3 = 0x004B9624;
	PatchEx((BYTE*)ThayDoiViTriThongTinNV3, (BYTE*)"\x83\xC1\x4A\x90\x90\x90", 6, handlGame);
	DWORD ThayDoiViTriThongTinNV4 = 0x004B965D;
	PatchEx((BYTE*)ThayDoiViTriThongTinNV4, (BYTE*)"\x83\xC1\x5A\x90\x90\x90", 6, handlGame);
	DWORD ThayDoiViTriThongTinNV5 = 0x004B9693;
	PatchEx((BYTE*)ThayDoiViTriThongTinNV5, (BYTE*)"\x83\xC1\x6A\x90\x90\x90", 6, handlGame);
	DWORD ThayDoiViTriThongTinNV6 = 0x004B96CF;
	PatchEx((BYTE*)ThayDoiViTriThongTinNV6, (BYTE*)"\x83\xC1\x7A\x90\x90\x90", 6, handlGame);
	DWORD ThayDoiViTriThongTinNV7 = 0x004B970D;
	PatchEx((BYTE*)ThayDoiViTriThongTinNV7, (BYTE*)"\x8A\x00\x00\x00", 4, handlGame);
	DWORD ThayDoiViTriThongTinNV8 = 0x004B9749;
	PatchEx((BYTE*)ThayDoiViTriThongTinNV8, (BYTE*)"\x9A\x00\x00\x00", 4, handlGame);
	DWORD ThayDoiViTriThongTinNV9 = 0x004B9785;
	PatchEx((BYTE*)ThayDoiViTriThongTinNV9, (BYTE*)"\xAA\x00\x00\x00", 4, handlGame);
	DWORD ThayDoiViTriThongTinNV10 = 0x004B97C1;
	PatchEx((BYTE*)ThayDoiViTriThongTinNV10, (BYTE*)"\xBA\x00\x00\x00", 4, handlGame);
	DWORD ThayDoiViTriThongTinNV11 = 0x004B97FD;
	PatchEx((BYTE*)ThayDoiViTriThongTinNV11, (BYTE*)"\xCA\x00\x00\x00", 4, handlGame);
	DWORD ThayDoiViTriThongTinNV12 = 0x004B9839;
	PatchEx((BYTE*)ThayDoiViTriThongTinNV12, (BYTE*)"\xDA\x00\x00\x00", 4, handlGame);
	DWORD ThayDoiViTriThongTinNV13 = 0x004B98E5;
	PatchEx((BYTE*)ThayDoiViTriThongTinNV13, (BYTE*)"\xEA\x00\x00\x00", 4, handlGame);
	DWORD ThayDoiViTriThongTinNV14 = 0x004B9928;
	PatchEx((BYTE*)ThayDoiViTriThongTinNV14, (BYTE*)"\xFA\x00\x00\x00", 4, handlGame);
	DWORD ThayDoiViTriThongTinNV15 = 0x004B9965;
	PatchEx((BYTE*)ThayDoiViTriThongTinNV15, (BYTE*)"\x0A\x01\x00\x00", 4, handlGame);
	DWORD ThayDoiViTriThongTinNV16 = 0x004B99A2;
	PatchEx((BYTE*)ThayDoiViTriThongTinNV16, (BYTE*)"\x1A\x01\x00\x00", 4, handlGame);
	DWORD ThayDoiViTriThongTinNV17 = 0x004B99E8;
	PatchEx((BYTE*)ThayDoiViTriThongTinNV17, (BYTE*)"\x2A\x01\x00\x00", 4, handlGame);
	DWORD ThayDoiViTriThongTinNV18 = 0x004B9A2C;
	PatchEx((BYTE*)ThayDoiViTriThongTinNV18, (BYTE*)"\x3A\x01\x00\x00", 4, handlGame);
	DWORD ThayDoiViTriThongTinNV19 = 0x004B9A6F;
	PatchEx((BYTE*)ThayDoiViTriThongTinNV19, (BYTE*)"\x4A\x01\x00\x00", 4, handlGame);
	DWORD ThayDoiViTriThongTinNV20 = 0x004B9AB1;
	PatchEx((BYTE*)ThayDoiViTriThongTinNV20, (BYTE*)"\x5A\x01\x00\x00", 4, handlGame);
	DWORD ThayDoiViTriThongTinNV21 = 0x004B9B1E;
	PatchEx((BYTE*)ThayDoiViTriThongTinNV21, (BYTE*)"\x2A\x01\x00\x00", 4, handlGame);
	DWORD ThayDoiViTriThongTinNV22 = 0x004B9B86;
	PatchEx((BYTE*)ThayDoiViTriThongTinNV22, (BYTE*)"\x3A\x01\x00\x00", 4, handlGame);
	DWORD ThayDoiViTriThongTinNV23 = 0x004B9BEE;
	PatchEx((BYTE*)ThayDoiViTriThongTinNV23, (BYTE*)"\x4A\x01\x00\x00", 4, handlGame);
	DWORD ThayDoiViTriThongTinNV24 = 0x004B9C56;
	PatchEx((BYTE*)ThayDoiViTriThongTinNV24, (BYTE*)"\x5A\x01\x00\x00", 4, handlGame);
	DWORD ThayDoiViTriThongTinNV25 = 0x004B9CCC;
	PatchEx((BYTE*)ThayDoiViTriThongTinNV25, (BYTE*)"\x6A\x01\x00\x00", 4, handlGame);
	DWORD ThayDoiViTriThongTinNV26 = 0x004B9D12;
	PatchEx((BYTE*)ThayDoiViTriThongTinNV26, (BYTE*)"\x6A\x01\x00\x00", 4, handlGame);
	DWORD ThayDoiViTriValueOption1 = 0x004B9D95;
	PatchEx((BYTE*)ThayDoiViTriValueOption1, (BYTE*)"\x83\xC2\x4A\x90\x90\x90", 6, handlGame);
	DWORD ThayDoiViTriValueOption2 = 0x004B9E78;
	PatchEx((BYTE*)ThayDoiViTriValueOption2, (BYTE*)"\x83\xC1\x6A\x90\x90\x90", 6, handlGame);
	DWORD ThayDoiViTriValueOption3 = 0x004B9F10;
	PatchEx((BYTE*)ThayDoiViTriValueOption3, (BYTE*)"\x8A\x00\x00\x00", 4, handlGame);  // Chinh Xac
	DWORD ThayDoiViTriValueOption4 = 0x004B9FA7;
	PatchEx((BYTE*)ThayDoiViTriValueOption4, (BYTE*)"\xAA\x00\x00\x00", 4, handlGame);   // St kc
	DWORD ThayDoiViTriValueOption5 = 0x004BA03D;
	PatchEx((BYTE*)ThayDoiViTriValueOption5, (BYTE*)"\xCA\x00\x00\x00", 4, handlGame);  // Tranh ne VL
	DWORD ThayDoiViTriValueOption6 = 0x004BA09D;
	PatchEx((BYTE*)ThayDoiViTriValueOption6, (BYTE*)"\xEA\x00\x00\x00", 4, handlGame);
	DWORD ThayDoiViTriValueOption7 = 0x004BA0DD;
	PatchEx((BYTE*)ThayDoiViTriValueOption7, (BYTE*)"\x0A\x01\x00\x00", 4, handlGame);
	DWORD ThayDoiViTriValueOption8 = 0x004BA150;
	PatchEx((BYTE*)ThayDoiViTriValueOption8, (BYTE*)"\x83\xC2\x5A\x90\x90\x90", 6, handlGame);
	DWORD ThayDoiViTriValueOption9 = 0x004BA230;
	PatchEx((BYTE*)ThayDoiViTriValueOption9, (BYTE*)"\x83\xC2\x7A\x90\x90\x90", 6, handlGame);   //Phong thu vl
	DWORD ThayDoiViTriValueOption10 = 0x004BA2C6;
	PatchEx((BYTE*)ThayDoiViTriValueOption10, (BYTE*)"\x9A\x00\x00\x00", 4, handlGame);  //Cx Khi Cong
	DWORD ThayDoiViTriValueOption11 = 0x004BA35A;
	PatchEx((BYTE*)ThayDoiViTriValueOption11, (BYTE*)"\xBA\x00\x00\x00", 4, handlGame);  // Phong thu kc
	DWORD ThayDoiViTriValueOption12 = 0x004BA3EE;
	PatchEx((BYTE*)ThayDoiViTriValueOption12, (BYTE*)"\xDA\x00\x00\x00", 4, handlGame);  // Tranh ne kc
	DWORD ThayDoiViTriValueOption13 = 0x004BA441;
	PatchEx((BYTE*)ThayDoiViTriValueOption13, (BYTE*)"\xFA\x00\x00\x00", 4, handlGame);
	DWORD ThayDoiViTriValueOption14 = 0x004BA481;
	PatchEx((BYTE*)ThayDoiViTriValueOption14, (BYTE*)"\x1A\x01\x00\x00", 4, handlGame);
    DWORD ThayDoiViTriNguKhi01 = 0x004BA4DF;
	PatchEx((BYTE*)ThayDoiViTriNguKhi01, (BYTE*)"\x0D\x00\x00\x00", 4, handlGame);
	DWORD ThayDoiViTriNguKhi = 0x004BA526;
	PatchEx((BYTE*)ThayDoiViTriNguKhi, (BYTE*)"\x14\x01\x00\x00", 4, handlGame);
	DWORD ThayDoiViTriNguKhi1 = 0x004BA55D;
	PatchEx((BYTE*)ThayDoiViTriNguKhi1, (BYTE*)"\x24\x01\x00\x00", 4, handlGame);
	DWORD ThayDoiViTriNguKhi2 = 0x004BA594;
	PatchEx((BYTE*)ThayDoiViTriNguKhi2, (BYTE*)"\x34\x01\x00\x00", 4, handlGame);
	DWORD ThayDoiViTriNguKhi3 = 0x004BA5CB;
	PatchEx((BYTE*)ThayDoiViTriNguKhi3, (BYTE*)"\x44\x01\x00\x00", 4, handlGame);
	DWORD ThayDoiViTriNguKhi4 = 0x004BA605;
	PatchEx((BYTE*)ThayDoiViTriNguKhi4, (BYTE*)"\x54\x01\x00\x00", 4, handlGame);
	DWORD ThayDoiViTriNguKhi5 = 0x004BA65A;
	PatchEx((BYTE*)ThayDoiViTriNguKhi5, (BYTE*)"\x83\xC2\x39\x90\x90\x90", 6, handlGame);
	DWORD ThayDoiViTriNguKhi6 = 0x004BA64D;
	PatchEx((BYTE*)ThayDoiViTriNguKhi6, (BYTE*)"\x14\x01\x00\x00", 4, handlGame);
	DWORD ThayDoiViTriNguKhi7 = 0x004BA692;
	PatchEx((BYTE*)ThayDoiViTriNguKhi7, (BYTE*)"\x24\x01\x00\x00", 4, handlGame);
	DWORD ThayDoiViTriNguKhi8 = 0x004BA69F;
	PatchEx((BYTE*)ThayDoiViTriNguKhi8, (BYTE*)"\x83\xC2\x39\x90\x90\x90", 6, handlGame);
	DWORD ThayDoiViTriNguKhi9 = 0x004BA6D7;
	PatchEx((BYTE*)ThayDoiViTriNguKhi9, (BYTE*)"\x34\x01\x00\x00", 4, handlGame);
	DWORD ThayDoiViTriNguKhi10 = 0x004BA6E4;
	PatchEx((BYTE*)ThayDoiViTriNguKhi10, (BYTE*)"\x83\xC2\x39\x90\x90\x90", 6, handlGame);
	DWORD ThayDoiViTriNguKhi11 = 0x004BA724;
	PatchEx((BYTE*)ThayDoiViTriNguKhi11, (BYTE*)"\x44\x01\x00\x00", 4, handlGame);
	DWORD ThayDoiViTriNguKhi12 = 0x004BA72C;
	PatchEx((BYTE*)ThayDoiViTriNguKhi12, (BYTE*)"\x83\xC2\x39\x90\x90\x90", 6, handlGame);
	DWORD ThayDoiViTriNguKhi13 = 0x004BA764;
	PatchEx((BYTE*)ThayDoiViTriNguKhi13, (BYTE*)"\x54\x01\x00\x00", 4, handlGame);
	DWORD ThayDoiViTriNguKhi14 = 0x004BA771;
	PatchEx((BYTE*)ThayDoiViTriNguKhi14, (BYTE*)"\x83\xC2\x39\x90\x90\x90", 6, handlGame);
	DWORD ThayDoiViTriNguKhi15 = 0x004BA8BC;
	PatchEx((BYTE*)ThayDoiViTriNguKhi15, (BYTE*)"\x14\x01\x00\x00", 4, handlGame);
	DWORD ThayDoiViTriNguKhi16 = 0x004BA8CB;
	PatchEx((BYTE*)ThayDoiViTriNguKhi16, (BYTE*)"\x56\x00\x00\x00", 4, handlGame);
	DWORD ThayDoiViTriNguKhi19 = 0x004BAA68;
	PatchEx((BYTE*)ThayDoiViTriNguKhi19, (BYTE*)"\x24\x01\x00\x00", 4, handlGame);
	DWORD ThayDoiViTriNguKhi20 = 0x004BAA77;
	PatchEx((BYTE*)ThayDoiViTriNguKhi20, (BYTE*)"\x56\x00\x00\x00", 4, handlGame);
	DWORD ThayDoiViTriNguKhi21 = 0x004BAC14;
	PatchEx((BYTE*)ThayDoiViTriNguKhi21, (BYTE*)"\x34\x01\x00\x00", 4, handlGame);
	DWORD ThayDoiViTriNguKhi22 = 0x004BAC23;
	PatchEx((BYTE*)ThayDoiViTriNguKhi22, (BYTE*)"\x56\x00\x00\x00", 4, handlGame);
	DWORD ThayDoiViTriNguKhi23 = 0x004BADC0;
	PatchEx((BYTE*)ThayDoiViTriNguKhi23, (BYTE*)"\x44\x01\x00\x00", 4, handlGame);
	DWORD ThayDoiViTriNguKhi24 = 0x004BADCF;
	PatchEx((BYTE*)ThayDoiViTriNguKhi24, (BYTE*)"\x56\x00\x00\x00", 4, handlGame);
	DWORD ThayDoiViTriNguKhi25 = 0x004BAF6C;
	PatchEx((BYTE*)ThayDoiViTriNguKhi25, (BYTE*)"\x54\x01\x00\x00", 4, handlGame);
	DWORD ThayDoiViTriNguKhi26 = 0x004BAF7B;
	PatchEx((BYTE*)ThayDoiViTriNguKhi26, (BYTE*)"\x56\x00\x00\x00", 4, handlGame);
	DWORD ThayDoiScroll = 0x004BD973;
	PatchEx((BYTE*)ThayDoiScroll, (BYTE*)"\x8D\x90\xF7\x00\x00\x00", 6, handlGame);
	DWORD ThayDoiScroll2 = 0x004BD979;
	PatchEx((BYTE*)ThayDoiScroll2, (BYTE*)"\x83\xC0\x4A\x90\x90", 5, handlGame);
	DWORD ThayDoiViTriNk01 = 0x004B8690;
	PatchEx((BYTE*)ThayDoiViTriNk01, (BYTE*)"\x66\x01\x00\x00", 4, handlGame);
	DWORD ThayDoiViTriNk02 = 0x004B86A2;
	PatchEx((BYTE*)ThayDoiViTriNk02, (BYTE*)"\x83\xC0\x1D\x90\x90", 5, handlGame);
	DWORD ThayDoiViTriNk03 = 0x004B86F8;
	PatchEx((BYTE*)ThayDoiViTriNk03, (BYTE*)"\x6C\x01\x00\x00", 4, handlGame);
	DWORD ThayDoiViTriNk04 = 0x004B8705;
	PatchEx((BYTE*)ThayDoiViTriNk04, (BYTE*)"\x83\xC2\x59\x90\x90\x90", 6, handlGame);
	DWORD ThayDoiViTriPhano03 = 0x004B8453;
	DWORD ThayDoiViTriNick = 0x004B83D8;
	PatchEx((BYTE*)ThayDoiViTriNick, (BYTE*)"\x83\xC2\x20\x90\x90\x90", 6, handlGame);
	DWORD ThayDoiViTriNick1 = 0x004B8427;
	PatchEx((BYTE*)ThayDoiViTriNick1, (BYTE*)"\x83\xC2\x20\x90\x90\x90", 6, handlGame);
	DWORD ThayDoiViTriNick2 = 0x004B83D5;
	PatchEx((BYTE*)ThayDoiViTriNick2, (BYTE*)"\x20", 1, handlGame);
	DWORD ThayDoiViTriNick3 = 0x004B841D;
	PatchEx((BYTE*)ThayDoiViTriNick3, (BYTE*)"\x2A", 1, handlGame);
    DWORD ThayDoiViTriName = 0x004B8334;
	PatchEx((BYTE*)ThayDoiViTriName, (BYTE*)"\x83\xC1\x1A", 3, handlGame);
	DWORD ThayDoiViTriName1 = 0x004B8278;
	PatchEx((BYTE*)ThayDoiViTriName1, (BYTE*)"\x83\xC2\x1A", 3, handlGame);
	DWORD ThayDoiViTriName2 = 0x004B827F;
	PatchEx((BYTE*)ThayDoiViTriName2, (BYTE*)"\x83\xC2\x2D", 3, handlGame);
	DWORD ThayDoiViTriName3 = 0x004B8236;
	PatchEx((BYTE*)ThayDoiViTriName3, (BYTE*)"\x83\xC0\x2D", 3, handlGame);
    DWORD BoQuaDoDe = 0x004B6C61;
	PatchEx((BYTE*)BoQuaDoDe, (BYTE*)"\x00", 1, handlGame);
    DWORD ChangePozNen1 = 0x004B7AFB;
	PatchEx((BYTE*)ChangePozNen1, (BYTE*)"\x56\x01\x00\x00", 4, handlGame);
    DWORD ChangePozNen2 = 0x004B7B4C;
	PatchEx((BYTE*)ChangePozNen2, (BYTE*)"\x56\x01\x00\x00", 4, handlGame);
	DWORD ChangePozNen3 = 0x004B7BA1;
	PatchEx((BYTE*)ChangePozNen3, (BYTE*)"\x56\x01\x00\x00", 4, handlGame);
	DWORD ChangePozNen4 = 0x004B7BF5;
	PatchEx((BYTE*)ChangePozNen4, (BYTE*)"\x56\x01\x00\x00", 4, handlGame);
	DWORD ChangePozNen5 = 0x004B7BDD;
	DWORD ChangePozNen6 = 0x004B7CA5;
	PatchEx((BYTE*)ChangePozNen6, (BYTE*)"\xC8\x00\x00\x00", 4, handlGame);
	DWORD ChangePozNen7 = 0x004B7C8A;
	PatchEx((BYTE*)ChangePozNen7, (BYTE*)"\x85\x01\x00\x00", 4, handlGame);
	DWORD ChangePozNen8 = 0x004B7CE3;
	PatchEx((BYTE*)ChangePozNen8, (BYTE*)"\x5A\x01\x00\x00", 4, handlGame);
	DWORD ChangePozNen9 = 0x004B7D3D;
	PatchEx((BYTE*)ChangePozNen9, (BYTE*)"\x85\x01\x00\x00", 4, handlGame);
	DWORD ChangePozNen10 = 0x004B7DB0;
	PatchEx((BYTE*)ChangePozNen10, (BYTE*)"\xCA\x00\x00\x00", 4, handlGame);
	DWORD ChangePozNen11 = 0x004B7E07;
	PatchEx((BYTE*)ChangePozNen11, (BYTE*)"\xC9\x00\x00\x00", 4, handlGame);
	DWORD ChangePozNen13 = 0x004B7D99;
	PatchEx((BYTE*)ChangePozNen13, (BYTE*)"\x0F\x01\x00\x00", 4, handlGame);
	DWORD ChangePozNen14 = 0x004B7DEE;
	PatchEx((BYTE*)ChangePozNen14, (BYTE*)"\x0F\x01\x00\x00", 4, handlGame);
	DWORD ChangePozNen15 = 0x004B7D66;
	PatchEx((BYTE*)ChangePozNen15, (BYTE*)"\x83\xC0\x46\x90\x90", 5, handlGame);
	DWORD ChangePozNen16 = 0x004B7CE7;
	PatchEx((BYTE*)ChangePozNen16, (BYTE*)"\x83\xC0\x46\x90\x90", 5, handlGame);
	DWORD DoiNenNguKhi = 0x004B7F02;
	PatchEx((BYTE*)DoiNenNguKhi, (BYTE*)"\x8D\x90\x21\x01\x00\x00", 6, handlGame);
    DWORD DoiNenNguKhi1 = 0x004B7F08;
	PatchEx((BYTE*)DoiNenNguKhi1, (BYTE*)"\x05\x13\x01\x00\x00", 5, handlGame);
	DWORD DoiNenNguKhi2 = 0x004B7F11;
	PatchEx((BYTE*)DoiNenNguKhi2, (BYTE*)"\x8D\x51\x30\x90\x90\x90", 6, handlGame);
	DWORD DoiNenNguKhi3 = 0x004B7F33;
	PatchEx((BYTE*)DoiNenNguKhi3, (BYTE*)"\x83\xC1\x3A\x90\x90\x90", 6, handlGame);
	DWORD DoiNenNguKhi4 = 0x004B7F58;
	PatchEx((BYTE*)DoiNenNguKhi4, (BYTE*)"\x8D\x90\x21\x01\x00\x00", 6, handlGame);
	DWORD DoiNenNguKhi5 = 0x004B7F6C;
	PatchEx((BYTE*)DoiNenNguKhi5, (BYTE*)"\x8D\x51\x3B\x90\x90\x90", 6, handlGame);
	DWORD DoiNenNguKhi6 = 0x004B7F72;
	PatchEx((BYTE*)DoiNenNguKhi6, (BYTE*)"\x05\x13\x01\x00\x00", 5, handlGame);
	DWORD DoiNenNguKhi7 = 0x004B7F8F;
	PatchEx((BYTE*)DoiNenNguKhi7, (BYTE*)"\x83\xC1\x57\x90\x90\x90", 6, handlGame);
	DWORD DoiNenNguKhi8 = 0x004B7FB4;
	PatchEx((BYTE*)DoiNenNguKhi8, (BYTE*)"\x8D\x90\x21\x01\x00\x00", 6, handlGame);
	DWORD DoiNenNguKhi9 = 0x004B7FC8;
	PatchEx((BYTE*)DoiNenNguKhi9, (BYTE*)"\x8D\x51\x58\x90\x90\x90", 6, handlGame);
	DWORD DoiNenNguKhi10 = 0x004B7FCE;
	PatchEx((BYTE*)DoiNenNguKhi10, (BYTE*)"\x05\x13\x01\x00\x00", 5, handlGame);
	DWORD DoiNenNguKhi11 = 0x004B7FEB;
	PatchEx((BYTE*)DoiNenNguKhi11, (BYTE*)"\x83\xC1\x6F\x90\x90\x90", 6, handlGame);
	DWORD BoQuaLoadBorderNo = 0x004B684A;
    DWORD BoqualoadNut = 0x004B6DD2;
	PatchEx((BYTE*)BoqualoadNut, (BYTE*)"\xE9\xEB\x02\x00\x00", 5, handlGame);
    DWORD DoiViTriNKThem = 0x004BA83B;
	PatchEx((BYTE*)DoiViTriNKThem, (BYTE*)"\x14\x01\x00\x00", 4, handlGame);
	DWORD DoiViTriNKThem1 = 0x004BA849;
	PatchEx((BYTE*)DoiViTriNKThem1, (BYTE*)"\x6D\x00\x00\x00", 4, handlGame);
	DWORD DoiViTriNKThem2 = 0x004BA9E7;
	PatchEx((BYTE*)DoiViTriNKThem2, (BYTE*)"\x24\x01\x00\x00", 4, handlGame);
	DWORD DoiViTriNKThem3 = 0x004BA9F5;
	PatchEx((BYTE*)DoiViTriNKThem3, (BYTE*)"\x6D\x00\x00\x00", 4, handlGame);
	DWORD DoiViTriNKThem4 = 0x004BAB93;
	PatchEx((BYTE*)DoiViTriNKThem4, (BYTE*)"\x34\x01\x00\x00", 4, handlGame);
	DWORD DoiViTriNKThem5 = 0x004BABA1;
	PatchEx((BYTE*)DoiViTriNKThem5, (BYTE*)"\x6D\x00\x00\x00", 4, handlGame);
	DWORD DoiViTriNKThem6 = 0x004BAD3F;
	PatchEx((BYTE*)DoiViTriNKThem6, (BYTE*)"\x44\x01\x00\x00", 4, handlGame);
	DWORD DoiViTriNKThem7 = 0x004BAD4D;
	PatchEx((BYTE*)DoiViTriNKThem7, (BYTE*)"\x6D\x00\x00\x00", 4, handlGame);
	DWORD DoiViTriNKThem8 = 0x004BAEEB;
	PatchEx((BYTE*)DoiViTriNKThem8, (BYTE*)"\x54\x01\x00\x00", 4, handlGame);
	DWORD DoiViTriNKThem9 = 0x004BAEF9;
	PatchEx((BYTE*)DoiViTriNKThem9, (BYTE*)"\x6D\x00\x00\x00", 4, handlGame);
    DWORD MiniToolHoverItem = 0x004BB02C;
	PatchEx((BYTE*)MiniToolHoverItem, (BYTE*)"\x58\x01\x00\x00", 4, handlGame);
    DWORD MiniToolHoverItem2 = 0x004BB7FC;
	PatchEx((BYTE*)MiniToolHoverItem2, (BYTE*)"\x58\x01\x00\x00", 4, handlGame);
    DWORD MiniToolHoverNguKhi = 0x004BB100;
	PatchEx((BYTE*)MiniToolHoverNguKhi, (BYTE*)"\x0D\x01\x00\x00", 4, handlGame);
	DWORD MiniToolHoverNguKhi1 = 0x004BB10A;
	PatchEx((BYTE*)MiniToolHoverNguKhi1, (BYTE*)"\x5D\x01\x00\x00", 4, handlGame);
	DWORD MiniToolHoverNguKhi2 = 0x004BB11F;
	PatchEx((BYTE*)MiniToolHoverNguKhi2, (BYTE*)"\x0D\x01\x00\x00", 4, handlGame);
	DWORD MiniToolHoverNguKhi3 = 0x004BB16A;
	PatchEx((BYTE*)MiniToolHoverNguKhi3, (BYTE*)"\x8D\x50\x56\x90\x90\x90", 6, handlGame);
	DWORD MiniToolHoverNguKhi4 = 0x004BB178;
	PatchEx((BYTE*)MiniToolHoverNguKhi4, (BYTE*)"\x83\xC0\x70\x90\x90", 5, handlGame);
	DWORD MiniToolHoverNguKhi5 = 0x004BB18D;
	PatchEx((BYTE*)MiniToolHoverNguKhi5, (BYTE*)"\x0D\x01\x00\x00", 4, handlGame);
	DWORD MiniToolHoverNguKhi6 = 0x004BB197;
	PatchEx((BYTE*)MiniToolHoverNguKhi6, (BYTE*)"\x5D\x01\x00\x00", 4, handlGame);
	DWORD MiniToolHoverNguKhi7 = 0x004BB1AC;
	PatchEx((BYTE*)MiniToolHoverNguKhi7, (BYTE*)"\x0D\x01\x00\x00", 4, handlGame);
	DWORD MiniToolHoverNguKhi8 = 0x004BB591;
	PatchEx((BYTE*)MiniToolHoverNguKhi8, (BYTE*)"\x0D\x01\x00\x00", 4, handlGame);
	DWORD HoverMiniLevel = 0x004BB5E1;
	PatchEx((BYTE*)HoverMiniLevel, (BYTE*)"\x40\x01\x00\x00", 4, handlGame);
	DWORD HoverMiniLeve2 = 0x004BB5F1;
	PatchEx((BYTE*)HoverMiniLeve2, (BYTE*)"\x05", 1, handlGame);
	DWORD HoverMiniLeve3 = 0x004BB5F8;
	PatchEx((BYTE*)HoverMiniLeve3, (BYTE*)"\x20", 1, handlGame);
	DWORD HoverMiniLeve4 = 0x004BB63D;
	PatchEx((BYTE*)HoverMiniLeve4, (BYTE*)"\x05", 1, handlGame);


	DWORD ChangeSizeButtonNKAdr = 0x004B6CC5;
	DWORD ChangeSizeButtonNK2Adr = 0x004B6101;
	DWORD ChangeSizePhanNoAdr = 0x004B85B0;
	DWORD ChangeSizeKhiAdr = 0x004B8618;
	DWORD ChangeSizeNutDropNickAdr = 0x004B6945;
	DWORD ChangeSizeImagePhanNoAdr = 0x004B65C2;
	DWORD ChangeSizeImagePhanNo2Adr = 0x004B664C;
	DWORD BoQuaLoadKhungNickAdr = 0x004B60C8;
	DWORD ChangeSPozLevelAdr = 0x004B833D;   //Can Thay Doi
	DWORD ChangeSPozNgoaiHieuAdr = 0x004B6C29;  //Can Thay Doi
	DWORD XoaBorderLineNoAdr = 0x004B6800;
	DWORD XoaBorderLineNo1Adr = 0x004B6885;
	DWORD DoiHinhAnhNgoaiHieuInfoAdr = 0x004BB48B;
	DWORD HoverMiniToolsItemEquidAdr = 0x004BB006;
	DWORD HoverMiniToolsItemEquid2Adr = 0x004BB7DE;
	DWORD ShowLevelAdr = 0x004BB5D8;
	DWORD ShowLevel2Adr = 0x004BB647;
	DWORD HienThiInfoNguKhiAdr = 0x0050D980;
    extHook HienThiInfoNguKhiFun(handlGame, (DWORD)HienThiInfoNguKhi, (DWORD)HienThiInfoNguKhiAdr, 5);
	extHook ShowLevel2Fun(handlGame, (DWORD)ShowLevel2, (DWORD)ShowLevel2Adr, 5);
	extHook ShowLevelFun(handlGame, (DWORD)ShowLevel, (DWORD)ShowLevelAdr, 5);
	extHook DoiHinhAnhNgoaiHieuInfoFun(handlGame, (DWORD)DoiHinhAnhNgoaiHieuInfo, (DWORD)DoiHinhAnhNgoaiHieuInfoAdr, 6);
	extHook ChangeSPozNgoaiHieuFun(handlGame, (DWORD)ChangeSPozNgoaiHieu, (DWORD)ChangeSPozNgoaiHieuAdr, 7);
	extHook ChangeUIInforFun(handlGame, (DWORD)ChangeUIInfor, (DWORD)ChangeUIInforAdr, 5);
    extHook ChangeSPozLevelFun(handlGame, (DWORD)ChangeSPozLevel, (DWORD)ChangeSPozLevelAdr, 6);
    extHook BoQuaLoadKhungNickFun(handlGame, (DWORD)BoQuaLoadKhungNick, (DWORD)BoQuaLoadKhungNickAdr, 9);
	extHook ChangeSizeButtonNK2Fun(handlGame, (DWORD)ChangeSizeButtonNK2, (DWORD)ChangeSizeButtonNK2Adr, 5);
	extHook ChangeSizeScrollBarFun(handlGame, (DWORD)ChangeSizeScrollBar, (DWORD)ChangeSizeScrollBarAdr, 11);
	extHook ChangeSizeButtonNKFun(handlGame, (DWORD)ChangeSizeButtonNK, (DWORD)ChangeSizeButtonNKAdr, 11);
	extHook ChangeSizePhanNoFun(handlGame, (DWORD)ChangeSizePhanNo, (DWORD)ChangeSizePhanNoAdr, 5);
	extHook ChangeSizeKhiFun(handlGame, (DWORD)ChangeSizeKhi, (DWORD)ChangeSizeKhiAdr, 5);
	extHook ChangeSizeImagePhanNoFun(handlGame, (DWORD)ChangeSizeImagePhanNo, (DWORD)ChangeSizeImagePhanNoAdr, 9);
	extHook ChangeSizeNutDropNickFun(handlGame, (DWORD)ChangeSizeNutDropNick, (DWORD)ChangeSizeNutDropNickAdr,11);
	extHook ChangeSizeImagePhanNo2Fun(handlGame, (DWORD)ChangeSizeImagePhanNo2, (DWORD)ChangeSizeImagePhanNo2Adr,9);
	extHook XoaBorderLineNoFun(handlGame, (DWORD)XoaBorderLineNo, (DWORD)XoaBorderLineNoAdr,7);
	extHook XoaBorderLineNo1Fun(handlGame, (DWORD)XoaBorderLineNo1, (DWORD)XoaBorderLineNo1Adr,7);
	extHook HoverMiniToolsItemEquidFun(handlGame, (DWORD)HoverMiniToolsItemEquid, (DWORD)HoverMiniToolsItemEquidAdr,5);
	extHook HoverMiniToolsItemEquid2Fun(handlGame, (DWORD)HoverMiniToolsItemEquid2, (DWORD)HoverMiniToolsItemEquid2Adr,5);
	ChangeUIInforFun.ToggleHook();
	ChangeSizeScrollBarFun.ToggleHook();
	ChangeSizeButtonNKFun.ToggleHook();
	ChangeSizeButtonNK2Fun.ToggleHook();
	ChangeSizeNutDropNickFun.ToggleHook();
	ChangeSPozLevelFun.ToggleHook();
	ChangeSPozNgoaiHieuFun.ToggleHook();
	DoiHinhAnhNgoaiHieuInfoFun.ToggleHook2(NickIcon);
	HoverMiniToolsItemEquidFun.ToggleHook();
	HoverMiniToolsItemEquid2Fun.ToggleHook();
	ShowLevelFun.ToggleHook();
	ShowLevel2Fun.ToggleHook();
	HienThiInfoNguKhiFun.ToggleHook();

	//ChangeEncodeSkill
	DWORD EncodeSkillAdr = 0x007B7C69;
	DWORD CheckNameAdr = 0x0069933F;
	DWORD ChangeND2Adr = 0x007B7577;
	DWORD ChangeCodeErroAdr = 0x007C4190;
    DWORD ReloadCountEncodeAdr = 0x007B7C19;
	extHook EncodeSkillFun(handlGame, (DWORD)EncodeSkill, (DWORD)EncodeSkillAdr, 7);
	extHook CheckNameFun(handlGame, (DWORD)CheckName, (DWORD)CheckNameAdr, 7);
	extHook ChangeCodeErroFun(handlGame, (DWORD)ChangeCodeErro, (DWORD)ChangeCodeErroAdr, 10);
	extHook ChangeND2Fun(handlGame, (DWORD)ChangeND2, (DWORD)ChangeND2Adr, 9);
    extHook ReloadCountEncodeFun(handlGame, (DWORD)ReloadCountEncode, (DWORD)ReloadCountEncodeAdr, 7);
	//EncodeSkillFun.ToggleHook6(Niojwj2);
	//ReloadCountEncodeFun.ToggleHook2(Niojwj2);
	/*ReloadCountEncodeFun.ToggleHook2(Niojwj2);
	**ChangeND2Fun.ToggleHook();
	ChangeCodeErroFun.ToggleHook();
	CheckNameFun.ToggleHook();  */

	//Hien Thi GradeCode New
	DWORD ShowGradeItemAdr = 0x0049153E;
    LPVOID ShowGradeIconImage = (LPVOID)VirtualAllocEx(handlGame, NULL, 300, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
	VirtualProtectEx(handlGame, (LPVOID)ShowGradeIconImage, 300, PAGE_EXECUTE_READWRITE, &oldProtect1);
	extHook ShowGradeItemFun(handlGame, (DWORD)ShowGradeItem, (DWORD)ShowGradeItemAdr, 5);
	ShowGradeItemFun.ToggleHook6(ShowGradeIconImage);

	//Hien Thi Nen NPC
    DWORD NenBackGroundNPC = 0x0052BE2A;
	PatchEx((BYTE*)NenBackGroundNPC, (BYTE*)"\xEB\x3A\x90\x90\x90\x90", 6, handlGame);
	DWORD DoiIDNenBackGroundNPCAdr = 0x0052BECB;
	extHook DoiIDNenBackGroundNPCFun(handlGame, (DWORD)DoiIDNenBackGroundNPC, (DWORD)DoiIDNenBackGroundNPCAdr, 6);
	DoiIDNenBackGroundNPCFun.ToggleHook();

	//HienThi Mod
	DWORD SpawModClientAdr = 0x006275A6;
    DWORD HorseMoveAdr = 0x00623876;
	LPVOID ShowHorse = (LPVOID)VirtualAllocEx(handlGame, NULL, 100, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
	VirtualProtectEx(handlGame, (LPVOID)ShowHorse, 100, PAGE_EXECUTE_READWRITE, &oldProtect1);
	extHook SpawModClientFun(handlGame, (DWORD)SpawModClient, (DWORD)SpawModClientAdr, 8);
	extHook HorseMoveFun(handlGame, (DWORD)HorseMove, (DWORD)HorseMoveAdr, 8);
	//SpawModClientFun.ToggleHook2(ShowHorse);
	//HorseMoveFun.ToggleHook2(ShowHorse);

	//Change Package Size Zone Character

	//Khoa Mo I
	DWORD KhoaMoIAdr = 0x00485F29;
	DWORD CheckAnimationOpenIAdr = 0x00493FA9;
	DWORD KhoaEAdr = 0x00521604;
    DWORD KhoaEKhiPkAdr = 0x006B4A1E;
	extHook KhoaMoIFun(handlGame, (DWORD)KhoaMoI, (DWORD)KhoaMoIAdr, 5);
	extHook KhoaEKhiPkFun(handlGame, (DWORD)KhoaEKhiPk, (DWORD)KhoaEKhiPkAdr, 5);
    extHook KhoaEFun(handlGame, (DWORD)KhoaE, (DWORD)KhoaEAdr, 5);
    extHook CheckAnimationOpenIFun(handlGame, (DWORD)CheckAnimationOpenI, (DWORD)CheckAnimationOpenIAdr, 5);
	//KhoaMoIFun.ToggleHook();
	//CheckAnimationOpenIFun.ToggleHook();
	//KhoaEFun.ToggleHook();
	//KhoaEKhiPkFun.ToggleHook();

	//Thanh Mau HBDC
	LPVOID ShowHealthEventHBDC = (LPVOID)VirtualAllocEx(handlGame, NULL, 500, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
	VirtualProtectEx(handlGame, (LPVOID)ShowHealthEventHBDC, 500, PAGE_EXECUTE_READWRITE, &oldProtect1);
	DWORD ShowHealthEventAdr = 0x0065F904;
    DWORD GetPackageHealthBossHBDCAdr = 0x006ADE4C;
	extHook ShowHealthEventFun(handlGame, (DWORD)ShowHealthEvent, (DWORD)ShowHealthEventAdr, 5);
	extHook GetPackageHealthBossHBDCFun(handlGame, (DWORD)GetPackageHealthBossHBDC, (DWORD)GetPackageHealthBossHBDCAdr, 6);
	ShowHealthEventFun.ToggleHook2(ShowHealthEventHBDC);
	GetPackageHealthBossHBDCFun.ToggleHook2(ShowHealthEventHBDC);

	/*DWORD CreateFromHBDCAdr = 0x005E22BF;
	DWORD InitializeHBDCAdr = 0x0051C690;
	extHook CreateFromHBDCFun(handlGame, (DWORD)CreateFromHBDC, (DWORD)CreateFromHBDCAdr, 5);
    extHook InitializeHBDCFun(handlGame, (DWORD)InitializeHBDC, (DWORD)InitializeHBDCAdr, 6);
	CreateFromHBDCFun.ToggleHook();
	InitializeHBDCFun.ToggleHook(); */

	//Hien Thi New Icon Item
	DWORD ChangeIconClothAdr = 0x00490729;
	extHook ChangeIconClothFun(handlGame, (DWORD)ChangeIconCloth, (DWORD)ChangeIconClothAdr, 7);
	//ChangeIconClothFun.ToggleHook();
	//

	//Ngu Khi Moi
  /*	DWORD BoTangSatThuongChanKhiAdr = 0x0060124F;
    extHook BoTangSatThuongChanKhiFun(handlGame, (DWORD)BoTangSatThuongChanKhi, (DWORD)BoTangSatThuongChanKhiAdr, 6);
	BoTangSatThuongChanKhiFun.ToggleHook();*/

	//  Icon Dong
	DWORD TangGiaTriHinhAnhIconNickAdr = 0x00661C3B;
    extHook TangGiaTriHinhAnhIconNickFun(handlGame, (DWORD)TangGiaTriHinhAnhIconNick, (DWORD)TangGiaTriHinhAnhIconNickAdr, 5);
	TangGiaTriHinhAnhIconNickFun.ToggleHook2(NickIcon);

	//Fix Hien Thi Dmg
	LPVOID ShowDamageInfo = (LPVOID)VirtualAllocEx(handlGame, NULL, 16, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
	VirtualProtectEx(handlGame, (LPVOID)ShowDamageInfo, 16, PAGE_EXECUTE_READWRITE, &oldProtect1);
	DWORD ShowHienThiDamageAdr = 0x00600799;
	DWORD ShowHienThiDamage2Adr = 0x004B9F87;
	DWORD ShowHienThiDamage3Adr = 0x00628331;
    DWORD ShowHienThiDamage4Adr = 0x004B9E5A;
	DWORD ShowHienThiDamage5Adr = 0x00628311;
	DWORD ShowHienThiDamage6Adr = 0x005FFDDF;
	DWORD ShowHienThiDamage7Adr = 0x005FFE01;
    DWORD ShowHienThiDamage8Adr = 0x0061E8A1;
	DWORD FixAmChinhXacVL = 0x00600F9B;
	DWORD FixHienThiDMGAdr = 0x0069E28F;
	DWORD FixHienThiDMG2Adr = 0x0069E286;
	DWORD FixHienThiDMG4Adr = 0x0069E356;
	DWORD FixHienThiDMG3Adr = 0x0069E35F;
	PatchEx((BYTE*)FixAmChinhXacVL, (BYTE*)"\x8B\xC8\x90", 3, handlGame);
    DWORD FixAmChinhXacKC = 0x00601190;
	PatchEx((BYTE*)FixAmChinhXacKC, (BYTE*)"\x8B\xD0\x90", 3, handlGame);
	extHook ShowHienThiDamageFun(handlGame, (DWORD)ShowHienThiDamage, (DWORD)ShowHienThiDamageAdr, 7);
	extHook ShowHienThiDamage2Fun(handlGame, (DWORD)ShowHienThiDamage2, (DWORD)ShowHienThiDamage2Adr, 7);
	extHook ShowHienThiDamage3Fun(handlGame, (DWORD)ShowHienThiDamage3, (DWORD)ShowHienThiDamage3Adr, 7);
    extHook ShowHienThiDamage4Fun(handlGame, (DWORD)ShowHienThiDamage4, (DWORD)ShowHienThiDamage4Adr, 7);
	extHook ShowHienThiDamage5Fun(handlGame, (DWORD)ShowHienThiDamage5, (DWORD)ShowHienThiDamage5Adr, 7);
	extHook ShowHienThiDamage6Fun(handlGame, (DWORD)ShowHienThiDamage6, (DWORD)ShowHienThiDamage6Adr, 7);
	extHook ShowHienThiDamage7Fun(handlGame, (DWORD)ShowHienThiDamage7, (DWORD)ShowHienThiDamage7Adr, 7);
	extHook ShowHienThiDamage8Fun(handlGame, (DWORD)ShowHienThiDamage8, (DWORD)ShowHienThiDamage8Adr, 6);
	extHook FixHienThiDMGFun(handlGame, (DWORD)FixHienThiDMG, (DWORD)FixHienThiDMGAdr, 5);
	extHook FixHienThiDMG2Fun(handlGame, (DWORD)FixHienThiDMG2, (DWORD)FixHienThiDMG2Adr, 8);
	extHook FixHienThiDMG3Fun(handlGame, (DWORD)FixHienThiDMG3, (DWORD)FixHienThiDMG3Adr, 5);
	extHook FixHienThiDMG4Fun(handlGame, (DWORD)FixHienThiDMG4, (DWORD)FixHienThiDMG4Adr, 8);
	ShowHienThiDamageFun.ToggleHook2(ShowDamageInfo);
	ShowHienThiDamage2Fun.ToggleHook2(ShowDamageInfo);
	ShowHienThiDamage3Fun.ToggleHook6(ShowDamageInfo);
	ShowHienThiDamage4Fun.ToggleHook2(ShowDamageInfo);
	ShowHienThiDamage5Fun.ToggleHook6(ShowDamageInfo);
	ShowHienThiDamage6Fun.ToggleHook6(ShowDamageInfo);
	ShowHienThiDamage7Fun.ToggleHook6(ShowDamageInfo);
	ShowHienThiDamage8Fun.ToggleHook2(ShowDamageInfo);
	FixHienThiDMGFun.ToggleHook();
	FixHienThiDMG2Fun.ToggleHook();
	FixHienThiDMG3Fun.ToggleHook();
	FixHienThiDMG4Fun.ToggleHook();

	//Fix Hien Thi Level
	DWORD ChangNameLevel1Adr = 0x0042869A;
	DWORD ChangNameLevel12Adr = 0x00428C0D;
	DWORD ChangNameLevel13Adr = 0x00425209;
    DWORD ChangNameLevel14Adr = 0x00424E0C;
	extHook ChangNameLevel1Fun(handlGame, (DWORD)ChangNameLevel1, (DWORD)ChangNameLevel1Adr, 7);
	extHook ChangNameLevel12Fun(handlGame, (DWORD)ChangNameLevel12, (DWORD)ChangNameLevel12Adr, 7);
	extHook ChangNameLevel13Fun(handlGame, (DWORD)ChangNameLevel13, (DWORD)ChangNameLevel13Adr, 7);
    extHook ChangNameLevel14Fun(handlGame, (DWORD)ChangNameLevel14, (DWORD)ChangNameLevel14Adr, 7);
	ChangNameLevel1Fun.ToggleHook();
	ChangNameLevel12Fun.ToggleHook();
	ChangNameLevel13Fun.ToggleHook();
	ChangNameLevel14Fun.ToggleHook();

	//Hien Thi Form Dang Ky Event HP
    DWORD HaThapForm = 0x00459CCC;
	PatchEx((BYTE*)HaThapForm, (BYTE*)"\x77", 1, handlGame);
    DWORD HaThapForm2 = 0x00459CC6;
	PatchEx((BYTE*)HaThapForm2, (BYTE*)"\xD2", 1, handlGame);
	DWORD HaThapForm3 = 0x00459D15;
	PatchEx((BYTE*)HaThapForm3, (BYTE*)"\xD2", 1, handlGame);
    DWORD HaThapForm4 = 0x00459D35;
	PatchEx((BYTE*)HaThapForm4, (BYTE*)"\x77", 1, handlGame);
	DWORD DrawEventHopPhiAdr = 0x00459E39;
	DWORD GetPozEventHpAdr = 0x00459E8E;
	DWORD GetPackageEventHPAdr = 0x006ADF51;
	DWORD OpenPKEventHpAdr = 0x0064654C;
	LPVOID ShowInfoEventHP = (LPVOID)VirtualAllocEx(handlGame, NULL, 3200, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
	VirtualProtectEx(handlGame, (LPVOID)ShowInfoEventHP, 3200, PAGE_EXECUTE_READWRITE, &oldProtect1);
	extHook DrawEventHopPhiFun(handlGame, (DWORD)DrawEventHopPhi, (DWORD)DrawEventHopPhiAdr, 5);
	extHook GetPozEventHpFun(handlGame, (DWORD)GetPozEventHp, (DWORD)GetPozEventHpAdr, 6);
	extHook GetPackageEventHPFun(handlGame, (DWORD)GetPackageEventHP, (DWORD)GetPackageEventHPAdr, 8);
	extHook OpenPKEventHpFun(handlGame, (DWORD)OpenPKEventHp, (DWORD)OpenPKEventHpAdr, 6);
   /*	DrawEventHopPhiFun.ToggleHook2(ShowInfoEventHP);
	GetPozEventHpFun.ToggleHook2(ShowInfoEventHP);
	GetPackageEventHPFun.ToggleHook2(ShowInfoEventHP);
	OpenPKEventHpFun.ToggleHook6(ShowInfoEventHP);        */

	//Event HP
	DWORD KhoaEKhiVoMapDaiChienEventHPAdr = 0x006B4A35;
	DWORD HideNameUserEventHP4Adr = 0x0051FAF3;
	DWORD HideNameUserEventHP3Adr = 0x00660B21;
	DWORD DisableSpeedEventHPAdr = 0x00624B94;
	DWORD HideNameUserEventHPAdr = 0x00660AE5;
	DWORD HideNameUserEventHP2Adr = 0x00660B05;
	DWORD BypassMonPhaiPkOnEventHPAdr = 0x00646898;
	DWORD ShiftPKOnEventHPAdr = 0x00646702;
	DWORD GetPackageResultCheckTImeHPUserAdr = 0x006B0BAB;
    DWORD GetUniqueIDEventHPAdr = 0x0065D64B;
	LPVOID ShowInfoEventHP2 = (LPVOID)VirtualAllocEx(handlGame, NULL, 4, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
	VirtualProtectEx(handlGame, (LPVOID)ShowInfoEventHP2, 4, PAGE_EXECUTE_READWRITE, &oldProtect1);
	extHook KhoaEKhiVoMapDaiChienEventHPFun(handlGame, (DWORD)KhoaEKhiVoMapDaiChienEventHP, (DWORD)KhoaEKhiVoMapDaiChienEventHPAdr, 6);
	extHook HideNameUserEventHP4Fun(handlGame, (DWORD)HideNameUserEventHP4, (DWORD)HideNameUserEventHP4Adr, 6);
	extHook HideNameUserEventHP3Fun(handlGame, (DWORD)HideNameUserEventHP3, (DWORD)HideNameUserEventHP3Adr, 5);
	extHook DisableSpeedEventHPFun(handlGame, (DWORD)DisableSpeedEventHP, (DWORD)DisableSpeedEventHPAdr, 6);
	extHook HideNameUserEventHPFun(handlGame, (DWORD)HideNameUserEventHP, (DWORD)HideNameUserEventHPAdr, 5);
	extHook HideNameUserEventHP2Fun(handlGame, (DWORD)HideNameUserEventHP2, (DWORD)HideNameUserEventHP2Adr, 6);
	extHook BypassMonPhaiPkOnEventHPFun(handlGame, (DWORD)BypassMonPhaiPkOnEventHP, (DWORD)BypassMonPhaiPkOnEventHPAdr, 6);
	extHook ShiftPKOnEventHPFun(handlGame, (DWORD)ShiftPKOnEventHP, (DWORD)ShiftPKOnEventHPAdr, 6);
	extHook GetPackageResultCheckTImeHPUserFun(handlGame, (DWORD)GetPackageResultCheckTImeHPUser, (DWORD)GetPackageResultCheckTImeHPUserAdr, 5);
    extHook GetUniqueIDEventHPFun(handlGame, (DWORD)GetUniqueIDEventHP, (DWORD)GetUniqueIDEventHPAdr, 7);
	//KhoaEKhiVoMapDaiChienEventHPFun.ToggleHook6(ShowInfoEventHP2);
	//HideNameUserEventHP4Fun.ToggleHook();
	//HideNameUserEventHP3Fun.ToggleHook();
	//HideNameUserEventHPFun.ToggleHook();
	//HideNameUserEventHP2Fun.ToggleHook();
	//BypassMonPhaiPkOnEventHPFun.ToggleHook2(ShowInfoEventHP2);
	//ShiftPKOnEventHPFun.ToggleHook2(ShowInfoEventHP2);
	//GetUniqueIDEventHPFun.ToggleHook();
	/*DisableSpeedEventHPFun.ToggleHook2(ShowInfoEventHP2);
	GetPackageResultCheckTImeHPUserFun.ToggleHook2(ShowInfoEventHP2); */

	//Thay Doi Form Dieu Che
	DWORD ThayDoiFormDieuCheAdr = 0x005DE128;
	DWORD SendPackageDieuCheAdr = 0x006D9D32;
	DWORD GetPackageCheTaoAdr = 0x006ABFCA;
	LPVOID ShowVPDieuChe = (LPVOID)VirtualAllocEx(handlGame, NULL, 400, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
	VirtualProtectEx(handlGame, (LPVOID)ShowVPDieuChe, 400, PAGE_EXECUTE_READWRITE, &oldProtect1);
	extHook ThayDoiFormDieuCheFun(handlGame, (DWORD)ThayDoiFormDieuChe, (DWORD)ThayDoiFormDieuCheAdr, 6);
    extHook SendPackageDieuCheFun(handlGame, (DWORD)SendPackageDieuChe, (DWORD)SendPackageDieuCheAdr, 10);
	extHook GetPackageCheTaoFun(handlGame, (DWORD)GetPackageCheTao, (DWORD)GetPackageCheTaoAdr, 6);
	/*ThayDoiFormDieuCheFun.ToggleHook2(ShowVPDieuChe);
	SendPackageDieuCheFun.ToggleHook2(ShowVPDieuChe);
	GetPackageCheTaoFun.ToggleHook();*/

	//Nhiem vu An Cu
	DWORD DrawNhiemVuAnCuAdr = 0x0052810E;
	DWORD PozNhiemvuancuAdr = 0x00527EF1;
    DWORD GetPackageNhiemVuAnCuAdr = 0x006AB57E;
	LPVOID NhiemVuAnCuCaoThu = (LPVOID)VirtualAllocEx(handlGame, NULL, 500, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
	VirtualProtectEx(handlGame, (LPVOID)NhiemVuAnCuCaoThu, 500, PAGE_EXECUTE_READWRITE, &oldProtect1);
	extHook DrawNhiemVuAnCuFun(handlGame, (DWORD)DrawNhiemVuAnCu, (DWORD)DrawNhiemVuAnCuAdr, 8);
	extHook PozNhiemvuancuFun(handlGame, (DWORD)PozNhiemvuancu, (DWORD)PozNhiemvuancuAdr, 5);
	extHook GetPackageNhiemVuAnCuFun(handlGame, (DWORD)GetPackageNhiemVuAnCu, (DWORD)GetPackageNhiemVuAnCuAdr, 5);
	/*DrawNhiemVuAnCuFun.ToggleHook2(NhiemVuAnCuCaoThu);
	PozNhiemvuancuFun.ToggleHook2(NhiemVuAnCuCaoThu);   */
	//GetPackageNhiemVuAnCuFun.ToggleHook2(NhiemVuAnCuCaoThu);

	//Sua Hien Thi Thong Tin NV
    DWORD HienThiThongTinNVNewAdr = 0x004B82E9;
	extHook HienThiThongTinNVNewFun(handlGame, (DWORD)HienThiThongTinNVNew, (DWORD)HienThiThongTinNVNewAdr, 6);
	HienThiThongTinNVNewFun.ToggleHook();
    DWORD BorderAmDuong = 0x004B7E43;
	PatchEx((BYTE*)BorderAmDuong, (BYTE*)"\x8D\x90\x5B\x01\x00\x00", 6, handlGame);
    DWORD BorderAmDuong2 = 0x004B7E49;
	PatchEx((BYTE*)BorderAmDuong2, (BYTE*)"\x05\x11\x01\x00\x00", 5, handlGame);
	DWORD BorderAmDuong3 = 0x004B7E5C;
	PatchEx((BYTE*)BorderAmDuong3, (BYTE*)"\x8D\x91\xCA\x00\x00\x00", 6, handlGame);
	DWORD BorderAmDuong4 = 0x004B7E7A;
	PatchEx((BYTE*)BorderAmDuong4, (BYTE*)"\x83\xC1\x7F", 3, handlGame);
	DWORD BorderNenAmDuong = 0x004B7E9A;
	PatchEx((BYTE*)BorderNenAmDuong, (BYTE*)"\x8D\x90\x5A\x01\x00\x00", 6, handlGame);
	DWORD BorderNenAmDuong2 = 0x004B7EB6;
	PatchEx((BYTE*)BorderNenAmDuong2, (BYTE*)"\x05\x11\x01\x00\x00", 5, handlGame);
	DWORD BorderNenAmDuong3 = 0x004B7E5C;
	PatchEx((BYTE*)BorderNenAmDuong3, (BYTE*)"\x8D\x91\xC9\x00\x00\x00", 6, handlGame);
	DWORD BorderNenAmDuong4 = 0x004B7ED3;
	PatchEx((BYTE*)BorderNenAmDuong4, (BYTE*)"\x83\xC1\x7F", 3, handlGame);
	DWORD BorderNenAmDuong5 = 0x004B7EB0;
	PatchEx((BYTE*)BorderNenAmDuong5, (BYTE*)"\x8D\x91\xC9\x00\x00\x00", 6, handlGame);
	//
    DWORD BorderTinVat = 0x004B7D3B;
	PatchEx((BYTE*)BorderTinVat, (BYTE*)"\x8D\x90\x5A\x01\x00\x00", 6, handlGame);
    // Border NK
    DWORD BorderNKRieng = 0x004B7C97;
	PatchEx((BYTE*)BorderNKRieng, (BYTE*)"\x68\xCC\xFF\xFF\xFF", 5, handlGame);
	DWORD BorderNKRieng2 = 0x004B7C88;
	PatchEx((BYTE*)BorderNKRieng2, (BYTE*)"\x8D\x90\x83\x01\x00\x00", 6, handlGame);
	DWORD BorderNKRieng3 = 0x004B7C8E;
	PatchEx((BYTE*)BorderNKRieng3, (BYTE*)"\x05\x12\x01\x00\x00", 5, handlGame);
	DWORD BorderNKRieng4 = 0x004B7CA3;
	PatchEx((BYTE*)BorderNKRieng4, (BYTE*)"\x8D\x51\x7C\x90\x90\x90", 6, handlGame);
	// NOi Rong
    DWORD BorderThongTinRong = 0x004B7DCC;
	PatchEx((BYTE*)BorderThongTinRong, (BYTE*)"\x83\xC1\x04", 3, handlGame);
	DWORD BorderThongTinRong1 = 0x004B7E23;
	PatchEx((BYTE*)BorderThongTinRong1, (BYTE*)"\x83\xC1\x03", 3, handlGame);
    //nO kHI
	DWORD BorderNoKhi = 0x004B7C31;
	PatchEx((BYTE*)BorderNoKhi, (BYTE*)"\x8D\x90\x84\x01\x00\x00", 6, handlGame);
	DWORD BorderNoKhi1 = 0x004B7C45;
	PatchEx((BYTE*)BorderNoKhi1, (BYTE*)"\x8D\x91\x57\x01\x00\x00", 6, handlGame);
	DWORD BorderNoKhi2 = 0x004B7C57;
	PatchEx((BYTE*)BorderNoKhi2, (BYTE*)"\x05\x5D\x01\x00\x00", 5, handlGame);
	DWORD BorderNoKhi3 = 0x004B7C68;
	PatchEx((BYTE*)BorderNoKhi3, (BYTE*)"\x83\xC1\x7F", 3, handlGame);
	DWORD BorderNoKhiInjectAdr = 0x004B7BDD;
	extHook BorderNoKhiInjectFun(handlGame, (DWORD)BorderNoKhiInject, (DWORD)BorderNoKhiInjectAdr, 6);
	BorderNoKhiInjectFun.ToggleHook();
	DWORD BorderNoKhi4 = 0x004B7C11;
	PatchEx((BYTE*)BorderNoKhi4, (BYTE*)"\x83\xC1\x7F", 3, handlGame);
	//Border Name
    DWORD BorderName = 0x004B7B8B;
	PatchEx((BYTE*)BorderName, (BYTE*)"\x8D\x50\x45", 3, handlGame);
	DWORD BorderName2 = 0x004B7BBD;
	PatchEx((BYTE*)BorderName2, (BYTE*)"\x83\xC1\x04", 3, handlGame);
	DWORD BorderName3 = 0x004B7B8E;
	PatchEx((BYTE*)BorderName3, (BYTE*)"\x83\xC0\x2D", 3, handlGame);
	DWORD BorderName4 = 0x004B7B17;
	PatchEx((BYTE*)BorderName4, (BYTE*)"\x83\xC1\x04", 3, handlGame);
	DWORD BorderName5 = 0x004B7AE5;
	PatchEx((BYTE*)BorderName5, (BYTE*)"\x8D\x50\x2B", 3, handlGame);
	DWORD BorderName6 = 0x004B7AE8;
	PatchEx((BYTE*)BorderName6, (BYTE*)"\x83\xC0\x18", 3, handlGame);
	DWORD BorderName7 = 0x004B7B37;
	PatchEx((BYTE*)BorderName7, (BYTE*)"\x8D\x50\x2B", 3, handlGame);
    DWORD BorderName9 = 0x004B7B50;
	PatchEx((BYTE*)BorderName9, (BYTE*)"\x83\xC0\x18", 3, handlGame);
	DWORD BorderName10 = 0x004B822E;
	PatchEx((BYTE*)BorderName10, (BYTE*)"\x83\xC2\x05", 3, handlGame);
	DWORD BorderName11 = 0x004B82D6;
	PatchEx((BYTE*)BorderName11, (BYTE*)"\x05\xA5\x00\x00\x00", 5, handlGame);
	DWORD BorderName12 = 0x004B82DF;
	PatchEx((BYTE*)BorderName12, (BYTE*)"\x83\xC2\x04", 3, handlGame);
	DWORD BorderName13 = 0x004B841B;
	PatchEx((BYTE*)BorderName13, (BYTE*)"\x83\xC2\x35", 3, handlGame);
	DWORD BorderName14 = 0x004B868F;
	PatchEx((BYTE*)BorderName14, (BYTE*)"\x05\x6B\x01\x00\x00", 5, handlGame);
	DWORD BorderName15 = 0x004B7A94;
	PatchEx((BYTE*)BorderName15, (BYTE*)"\x83\xC0\x2D", 3, handlGame);
	DWORD BorderName16 = 0x004B7AC5;
	PatchEx((BYTE*)BorderName16, (BYTE*)"\x83\xC1\x03", 3, handlGame);
	DWORD BorderName17 = 0x004B7AA7;
	PatchEx((BYTE*)BorderName17, (BYTE*)"\x8D\x91\x56\x01\x00\x00", 6, handlGame);
	DWORD BorderName18 = 0x004B7A71;
	PatchEx((BYTE*)BorderName18, (BYTE*)"\x83\xC1\x03", 3, handlGame);
	DWORD BorderName19 = 0x004B7A48;
	PatchEx((BYTE*)BorderName19, (BYTE*)"\x83\xC1\x2E", 3, handlGame);
	DWORD BorderName20 = 0x004B7A4F;
	PatchEx((BYTE*)BorderName20, (BYTE*)"\x8D\x91\x56\x01\x00\x00", 6, handlGame);
	DWORD BorderName21 = 0x004B7B4A;
	PatchEx((BYTE*)BorderName21, (BYTE*)"\x8D\x91\x56\x01\x00\x00", 6, handlGame);
	DWORD BorderName22 = 0x004B7B6B;
	PatchEx((BYTE*)BorderName22, (BYTE*)"\x83\xC1\x03", 3, handlGame);

	DWORD HienThiNenTenAdr = 0x004B8286;
    DWORD ChinhSuaSizeTenAdr = 0x004B8236;
    extHook HienThiNenTenFun(handlGame, (DWORD)HienThiNenTen, (DWORD)HienThiNenTenAdr, 6);
    extHook ChinhSuaSizeTenFun(handlGame, (DWORD)ChinhSuaSizeTen, (DWORD)ChinhSuaSizeTenAdr, 6);
	HienThiNenTenFun.ToggleHook2(NickIcon);

	ChinhSuaSizeTenFun.ToggleHook();
	DWORD BorderName23 = 0x004B7A39;
	PatchEx((BYTE*)BorderName23, (BYTE*)"\xEB\x4D\x90\x90\x90\x90", 6, handlGame);
	DWORD BorderName24 = 0x004B7A8E;
	PatchEx((BYTE*)BorderName24, (BYTE*)"\x90\x90\x90", 3, handlGame);
	DWORD ChinhPozPhanNoAdr = 0x004B85B0;
	DWORD ChinhPozKhiAdr = 0x004B8618;
	extHook ChinhPozPhanNoFun(handlGame, (DWORD)ChinhPozPhanNo, (DWORD)ChinhPozPhanNoAdr, 5);
	extHook ChinhPozKhiFun(handlGame, (DWORD)ChinhPozKhi, (DWORD)ChinhPozKhiAdr, 5);
	ChinhPozPhanNoFun.ToggleHook();
    ChinhPozKhiFun.ToggleHook();
	DWORD BorderName25 = 0x004B859F;
	PatchEx((BYTE*)BorderName25, (BYTE*)"\x05\x62\x01\x00\x00", 5, handlGame);
	DWORD BorderName26 = 0x004B8607;
	PatchEx((BYTE*)BorderName26, (BYTE*)"\x05\x74\x01\x00\x00", 5, handlGame);
	DWORD HienThiAmDuongThanHonAdr = 0x004B8554;
    extHook HienThiAmDuongThanHonFun(handlGame, (DWORD)HienThiAmDuongThanHon, (DWORD)HienThiAmDuongThanHonAdr, 5);
    HienThiAmDuongThanHonFun.ToggleHook();
	DWORD BorderName27 = 0x004B996E;
	//PatchEx((BYTE*)BorderName27, (BYTE*)"\xE9\xCA\x03\x00\x00", 5, handlGame);
	DWORD BorderName28 = 0x004B755F;
	PatchEx((BYTE*)BorderName28, (BYTE*)"\x0E", 1, handlGame);
	DWORD ChinhPhanNoPozAdr = 0x004B659A;
	extHook ChinhPhanNoPozFun(handlGame, (DWORD)ChinhPhanNoPoz, (DWORD)ChinhPhanNoPozAdr, 5);
	ChinhPhanNoPozFun.ToggleHook();
    DWORD ChinhPhanNoPoz3Adr = 0x004B67EF;
	DWORD ChinhPhanNoPoz4Adr = 0x004B685A;
	DWORD ChinhPhanNoPoz2Adr = 0x004B6605;
	DWORD ChinhPhanNoPoz6Adr = 0x004B66D5;
	DWORD ChinhPhanNoPoz5Adr = 0x004B6444;
	DWORD ChinhPhanNoPoz8Adr = 0x004B6662;
	DWORD ChinhPhanNoPoz7Adr = 0x004B63FD;
    DWORD ChinhPhanNoPoz10Adr = 0x004B6748;
	DWORD ChinhPhanNoPoz9Adr = 0x004B64F3;
	DWORD ChinhSuaViTriDiemPhanNoAdr = 0x004B802C;
	DWORD ChinhBorderNickPozAdr = 0x004B6099;
    DWORD ChinhBorderNickPoz2Adr = 0x004B6A71;
	extHook ChinhPhanNoPoz3Fun(handlGame, (DWORD)ChinhPhanNoPoz3, (DWORD)ChinhPhanNoPoz3Adr, 5);
	extHook ChinhPhanNoPoz4Fun(handlGame, (DWORD)ChinhPhanNoPoz4, (DWORD)ChinhPhanNoPoz4Adr, 5);
	extHook ChinhPhanNoPoz2Fun(handlGame, (DWORD)ChinhPhanNoPoz2, (DWORD)ChinhPhanNoPoz2Adr, 5);
	extHook ChinhPhanNoPoz6Fun(handlGame, (DWORD)ChinhPhanNoPoz6, (DWORD)ChinhPhanNoPoz6Adr, 8);
	extHook ChinhPhanNoPoz5Fun(handlGame, (DWORD)ChinhPhanNoPoz5, (DWORD)ChinhPhanNoPoz5Adr, 8);
	extHook ChinhPhanNoPoz8Fun(handlGame, (DWORD)ChinhPhanNoPoz8, (DWORD)ChinhPhanNoPoz8Adr, 8);
	extHook ChinhPhanNoPoz7Fun(handlGame, (DWORD)ChinhPhanNoPoz7, (DWORD)ChinhPhanNoPoz7Adr, 8);
	extHook ChinhPhanNoPoz10Fun(handlGame, (DWORD)ChinhPhanNoPoz10, (DWORD)ChinhPhanNoPoz10Adr, 7);
	extHook ChinhPhanNoPoz9Fun(handlGame, (DWORD)ChinhPhanNoPoz9, (DWORD)ChinhPhanNoPoz9Adr, 7);
	extHook ChinhSuaViTriDiemPhanNoFun(handlGame, (DWORD)ChinhSuaViTriDiemPhanNo, (DWORD)ChinhSuaViTriDiemPhanNoAdr, 6);
    extHook ChinhBorderNickPozFun(handlGame, (DWORD)ChinhBorderNickPoz, (DWORD)ChinhBorderNickPozAdr, 7);
    extHook ChinhBorderNickPoz2Fun(handlGame, (DWORD)ChinhBorderNickPoz2, (DWORD)ChinhBorderNickPoz2Adr, 8);
	ChinhPhanNoPoz3Fun.ToggleHook();
	ChinhPhanNoPoz4Fun.ToggleHook();
	ChinhPhanNoPoz2Fun.ToggleHook();
	ChinhPhanNoPoz6Fun.ToggleHook();
	ChinhPhanNoPoz5Fun.ToggleHook();
	ChinhPhanNoPoz8Fun.ToggleHook();
	ChinhPhanNoPoz7Fun.ToggleHook();
	ChinhPhanNoPoz10Fun.ToggleHook();
	ChinhPhanNoPoz9Fun.ToggleHook();
	ChinhSuaViTriDiemPhanNoFun.ToggleHook();
	ChinhBorderNickPozFun.ToggleHook();
	ChinhBorderNickPoz2Fun.ToggleHook();
    DWORD ChangePozThongTin = 0x004B9DA6;
	PatchEx((BYTE*)ChangePozThongTin, (BYTE*)"\xBA", 1, handlGame);
	DWORD ChangePozThongTin1 = 0x004B9E89;
	PatchEx((BYTE*)ChangePozThongTin1, (BYTE*)"\xBA", 1, handlGame);
	DWORD ChangePozThongTin2 = 0x004B9F1F;
	PatchEx((BYTE*)ChangePozThongTin2, (BYTE*)"\xBA", 1, handlGame);
	DWORD ChangePozThongTin3 = 0x004B9FB6;
	PatchEx((BYTE*)ChangePozThongTin3, (BYTE*)"\xBA", 1, handlGame);
	DWORD ChangePozThongTin4 = 0x004BA04C;
	PatchEx((BYTE*)ChangePozThongTin4, (BYTE*)"\xBA", 1, handlGame);
	DWORD ChangePozThongTin5 = 0x004BA0EC;
	PatchEx((BYTE*)ChangePozThongTin5, (BYTE*)"\xBA", 1, handlGame);
	DWORD ChangePozThongTin6 = 0x004BA161;
	PatchEx((BYTE*)ChangePozThongTin6, (BYTE*)"\xBA", 1, handlGame);
	DWORD ChangePozThongTin7 = 0x004BA241;
	PatchEx((BYTE*)ChangePozThongTin7, (BYTE*)"\xBA", 1, handlGame);
	DWORD ChangePozThongTin8 = 0x004BA2D5;
	PatchEx((BYTE*)ChangePozThongTin8, (BYTE*)"\xBA", 1, handlGame);
	DWORD ChangePozThongTin9 = 0x004BA369;
	PatchEx((BYTE*)ChangePozThongTin9, (BYTE*)"\xBA", 1, handlGame);
	DWORD ChangePozThongTin10 = 0x004BA3FD;
	PatchEx((BYTE*)ChangePozThongTin10, (BYTE*)"\xBA", 1, handlGame);
	DWORD ChangePozThongTin11 = 0x004BA450;
	PatchEx((BYTE*)ChangePozThongTin11, (BYTE*)"\xBA", 1, handlGame);
	DWORD ChangePozThongTin12 = 0x004BA490;
	PatchEx((BYTE*)ChangePozThongTin12, (BYTE*)"\xBA", 1, handlGame);
	//HIen thi toc do di chuyen
	DWORD HienThiTocDoDiChuyenAdr = 0x00660AD9;
	extHook HienThiTocDoDiChuyenFun(handlGame, (DWORD)HienThiTocDoDiChuyen, (DWORD)HienThiTocDoDiChuyenAdr, 6);
	//HienThiTocDoDiChuyenFun.ToggleHook2(ShowHealthEventHBDC);

	//Lien Dau
	DWORD DrawLienDauAdr = 0x0046775A;
	DWORD PozLienDauAdr = 0x00467781;
	DWORD GetPackageLienDauAdr = 0x006AF978;
	LPVOID LienDauMemory = (LPVOID)VirtualAllocEx(handlGame, NULL, 2200, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
	VirtualProtectEx(handlGame, (LPVOID)LienDauMemory, 2200, PAGE_EXECUTE_READWRITE, &oldProtect1);
	extHook DrawLienDauFun(handlGame, (DWORD)DrawLienDau, (DWORD)DrawLienDauAdr, 5);
    extHook PozLienDauFun(handlGame, (DWORD)PozLienDau, (DWORD)PozLienDauAdr, 6);
	extHook GetPackageLienDauFun(handlGame, (DWORD)GetPackageLienDau, (DWORD)GetPackageLienDauAdr, 5);
   /*	DrawLienDauFun.ToggleHook2(LienDauMemory);
	PozLienDauFun.ToggleHook2(LienDauMemory);
	GetPackageLienDauFun.ToggleHook2(LienDauMemory);*/
	//Sat Thuong Boss
	/*DWORD DrawSatThuongAdr = 0x00550A9F;
    extHook DrawSatThuongFun(handlGame, (DWORD)DrawSatThuong, (DWORD)DrawSatThuongAdr, 5);
	DrawSatThuongFun.ToggleHook2(LienDauMemory);  */

	//Hien Thi Event
	DWORD DrawEventFormAdr = 0x004DFFC3;
	DWORD PozEventFormAdr = 0x004E047C;
    DWORD ScrollEventFormAdr = 0x005AF1B4;
	extHook DrawEventFormFun(handlGame, (DWORD)DrawEventForm, (DWORD)DrawEventFormAdr, 5);
	extHook PozEventFormFun(handlGame, (DWORD)PozEventForm, (DWORD)PozEventFormAdr, 6);
    extHook ScrollEventFormFun(handlGame, (DWORD)ScrollEventForm, (DWORD)ScrollEventFormAdr, 6);
   /*	DrawEventFormFun.ToggleHook2(LienDauMemory);
	PozEventFormFun.ToggleHook2(LienDauMemory);
	ScrollEventFormFun.ToggleHook2(LienDauMemory);  */

	//BlockCancelSkill
	DWORD BlockDelayCancelSkillAdr = 0x0063B064;
    DWORD BlockDelayCancelSkill2Adr = 0x00641A4A;
	extHook BlockDelayCancelSkillFun(handlGame, (DWORD)BlockDelayCancelSkill, (DWORD)BlockDelayCancelSkillAdr, 5);
	extHook BlockDelayCancelSkill2Fun(handlGame, (DWORD)BlockDelayCancelSkill2, (DWORD)BlockDelayCancelSkill2Adr, 6);
	//BlockDelayCancelSkillFun.ToggleHook();
	//BlockDelayCancelSkill2Fun.ToggleHook();

    //Su Kien Thiet Tru
	LPVOID SuKienThietTru = (LPVOID)VirtualAllocEx(handlGame, NULL, 250, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
	VirtualProtectEx(handlGame, (LPVOID)SuKienThietTru, 250, PAGE_EXECUTE_READWRITE, &oldProtect1);
	DWORD DrawSuKienThietTruAdr = 0x00594849;
	extHook DrawSuKienThietTruFun(handlGame, (DWORD)DrawSuKienThietTru, (DWORD)DrawSuKienThietTruAdr, 5);
	//DrawSuKienThietTruFun.ToggleHook2(SuKienThietTru);

	//Sk Chien Truong
	DWORD DrawSuKienChienTruongFormAdr = 0x00521604;
	DWORD DrawNutMoFormCTAdr = 0x005961CD;
	DWORD PozChienTruongFormAdr = 0x004E0538;
	DWORD PozMoFormChienTruongAdr = 0x005961E0;
	DWORD GetPackageChienTruongAdr = 0x006ADD7F;
	DWORD DisableMoveFormCTAdr = 0x00622FAE;
	LPVOID SuKienChienTruong = (LPVOID)VirtualAllocEx(handlGame, NULL, 320, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
	VirtualProtectEx(handlGame, (LPVOID)SuKienChienTruong, 320, PAGE_EXECUTE_READWRITE, &oldProtect1);
    extHook DrawSuKienChienTruongFormFun(handlGame, (DWORD)DrawSuKienChienTruongForm, (DWORD)DrawSuKienChienTruongFormAdr, 5);
	extHook DrawNutMoFormCTFun(handlGame, (DWORD)DrawNutMoFormCT, (DWORD)DrawNutMoFormCTAdr, 7);
	extHook PozChienTruongFormFun(handlGame, (DWORD)PozChienTruongForm, (DWORD)PozChienTruongFormAdr, 6);
	extHook PozMoFormChienTruongFun(handlGame, (DWORD)PozMoFormChienTruong, (DWORD)PozMoFormChienTruongAdr, 10);
    extHook GetPackageChienTruongFun(handlGame, (DWORD)GetPackageChienTruong, (DWORD)GetPackageChienTruongAdr, 5);
	extHook DisableMoveFormCTFun(handlGame, (DWORD)DisableMoveFormCT, (DWORD)DisableMoveFormCTAdr, 6);
	/*DrawSuKienChienTruongFormFun.ToggleHook2(SuKienChienTruong);
	DrawNutMoFormCTFun.ToggleHook2(SuKienChienTruong);
	PozChienTruongFormFun.ToggleHook2(SuKienChienTruong);
	PozMoFormChienTruongFun.ToggleHook2(SuKienChienTruong);
	GetPackageChienTruongFun.ToggleHook2(SuKienChienTruong);
	DisableMoveFormCTFun.ToggleHook2(SuKienChienTruong);  */

	//Nang Cap Trang Bi
	DWORD DrawFormNangCapTBAdr = 0x00524586;
	DWORD GetPozFormNangCapTBAdr = 0x00524D9E;
	DWORD DisableMoveFormNangCapTBAdr = 0x00622ED9;
	DWORD GetPackageInchantOptionNewAdr = 0x006B0F0F;
	DWORD AcceptClothInChantAdr = 0x0048C11D;
	DWORD AcceptLifeInChantAdr = 0x0048D24F;
	DWORD AcceptResourceInChantAdr = 0x0048CAA6;
    DWORD AcceptAccessoryInChantAdr = 0x0048C346;
    LPVOID ShowInfoNangCapTB = (LPVOID)VirtualAllocEx(handlGame, NULL, 320, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
	VirtualProtectEx(handlGame, (LPVOID)ShowInfoNangCapTB, 320, PAGE_EXECUTE_READWRITE, &oldProtect1);
	extHook DrawFormNangCapTBFun(handlGame, (DWORD)DrawFormNangCapTB, (DWORD)DrawFormNangCapTBAdr, 5);
    extHook DisableMoveFormNangCapTBFun(handlGame, (DWORD)DisableMoveFormNangCapTB, (DWORD)DisableMoveFormNangCapTBAdr, 6);
    extHook GetPozFormNangCapTBFun(handlGame, (DWORD)GetPozFormNangCapTB, (DWORD)GetPozFormNangCapTBAdr, 7);
	extHook GetPackageInchantOptionNewFun(handlGame, (DWORD)GetPackageInchantOptionNew, (DWORD)GetPackageInchantOptionNewAdr, 5);
	extHook AcceptClothInChantFun(handlGame, (DWORD)AcceptClothInChant, (DWORD)AcceptClothInChantAdr, 10);
	extHook AcceptLifeInChantFun(handlGame, (DWORD)AcceptLifeInChant, (DWORD)AcceptLifeInChantAdr, 9);
	extHook AcceptResourceInChantFun(handlGame, (DWORD)AcceptResourceInChant, (DWORD)AcceptResourceInChantAdr, 6);
    extHook AcceptAccessoryInChantFun(handlGame, (DWORD)AcceptAccessoryInChant, (DWORD)AcceptAccessoryInChantAdr, 6);
   /*	DrawFormNangCapTBFun.ToggleHook2(ShowInfoNangCapTB);
	GetPozFormNangCapTBFun.ToggleHook2(ShowInfoNangCapTB);
	DisableMoveFormNangCapTBFun.ToggleHook2(ShowInfoNangCapTB);
	//MoFormPhongAnFun.ToggleHook2(ShowInfoNangCapTB);
	GetPackageInchantOptionNewFun.ToggleHook2(ShowInfoNangCapTB);
	AcceptClothInChantFun.ToggleHook2(ShowInfoNangCapTB);
	AcceptLifeInChantFun.ToggleHook2(ShowInfoNangCapTB);
	AcceptResourceInChantFun.ToggleHook2(ShowInfoNangCapTB);
	AcceptAccessoryInChantFun.ToggleHook2(ShowInfoNangCapTB);  */

	//
	DWORD KiemTraCoHienThiNgoaiHieuKhongAdr = 0x004B8404;
	DWORD ResizeAcDanh = 0x004B99A0;
	PatchEx((BYTE*)ResizeAcDanh, (BYTE*)"\x81\xC2\xEA\x00\x00\x00", 6, handlGame);
    DWORD ResizeAcDanh2 = 0x004BA47F;
	PatchEx((BYTE*)ResizeAcDanh2, (BYTE*)"\x81\xC2\xEA\x00\x00\x00", 6, handlGame);
	DWORD ResizeAcDanh3 = 0x004BA48E;
	PatchEx((BYTE*)ResizeAcDanh3, (BYTE*)"\x81\xC2\xBA\x00\x00\x00", 6, handlGame);
	DWORD ResizeAcDanh4 = 0x004BA09B;
	PatchEx((BYTE*)ResizeAcDanh4, (BYTE*)"\x81\xC1\x2A\x01\x00\x00", 6, handlGame);
	DWORD ResizeAcDanh5 = 0x004B98E4;
	PatchEx((BYTE*)ResizeAcDanh5, (BYTE*)"\x05\x3A\x01\x00\x00", 5, handlGame);
	extHook KiemTraCoHienThiNgoaiHieuKhongFun(handlGame, (DWORD)KiemTraCoHienThiNgoaiHieuKhong, (DWORD)KiemTraCoHienThiNgoaiHieuKhongAdr, 6);
    KiemTraCoHienThiNgoaiHieuKhongFun.ToggleHook();

	//AcceptItemVPrequestFun.ToggleHook2(ShowInfoNangCapTB);

	//Fix Hien Thi Vu Khi
    //DWORD TestModelAdr = 0x00716636;
	LPVOID X3DWeapon = (LPVOID)VirtualAllocEx(handlGame, NULL, 15000, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
	VirtualProtectEx(handlGame, (LPVOID)X3DWeapon, 15000, PAGE_EXECUTE_READWRITE, &oldProtect1);
    DWORD FixX3DWeaponAdr = 0x0071D5C8;
	DWORD FixX3DWeapon011Adr = 0x004BEBE1;
	DWORD FixX3DWeapon012Adr = 0x004BEC18;
	DWORD FixX3DWeapon013Adr = 0x004BECF5;
	DWORD FixX3DWeapon014Adr = 0x004E66E3;
	DWORD FixX3DWeapon015Adr = 0x00549A09;
	DWORD FixX3DWeapon016Adr = 0x00549A3E;
	DWORD FixX3DWeapon017Adr = 0x00549B1B;
	DWORD FixX3DWeapon018Adr = 0x00575955;
	DWORD FixX3DWeapon019Adr = 0x00575A1A;
	DWORD FixX3DWeapon0110Adr = 0x00575AE2;
	DWORD FixX3DWeapon0111Adr = 0x00578BA2;
	DWORD FixX3DWeapon0112Adr = 0x00578BD3;
	DWORD FixX3DWeapon0113Adr = 0x00578CB7;
	DWORD FixX3DWeapon0114Adr = 0x0057C4E2;
	DWORD FixX3DWeapon0115Adr = 0x0057C513;
	DWORD FixX3DWeapon0116Adr = 0x0057C5F7;
	DWORD FixX3DWeapon0117Adr = 0x0057ED7B;
	DWORD FixX3DWeapon0118Adr = 0x0057EDAC;
	DWORD FixX3DWeapon0119Adr = 0x0057EE91;
	DWORD FixX3DWeapon0120Adr = 0x005F609D;
	DWORD FixX3DWeapon0121Adr = 0x005F66E0;
	DWORD FixX3DWeapon0122Adr = 0x0062EA6E;
	DWORD FixX3DWeapon0123Adr = 0x00657C42;
	DWORD FixX3DWeapon0124Adr = 0x0065E64F;
	DWORD FixX3DWeapon0125Adr = 0x006E1362;
	DWORD FixX3DWeapon0126Adr = 0x006E35F1;
	DWORD FixX3DWeapon0127Adr = 0x00716639;
	DWORD FixX3DWeapon021Adr = 0x004068CB;
	DWORD FixX3DWeapon022Adr = 0x004068D5;
	DWORD FixX3DWeapon023Adr = 0x004068E5;
	DWORD FixX3DWeapon024Adr = 0x00408E62;
	DWORD FixX3DWeapon025Adr = 0x00408E67;
	DWORD FixX3DWeapon026Adr = 0x00408E77;
	DWORD FixX3DWeapon027Adr = 0x00408E8E;
	DWORD FixX3DWeapon028Adr = 0x005AFD72;
	DWORD FixX3DWeapon029Adr = 0x005AFD77;
	DWORD FixX3DWeapon0210Adr = 0x005AFD8C;
	extHook FixX3DWeaponFun(handlGame, (DWORD)FixX3DWeapon, (DWORD)FixX3DWeaponAdr, 7);
	extHook FixX3DWeapon011Fun(handlGame, (DWORD)FixX3DWeapon011, (DWORD)FixX3DWeapon011Adr, 7);
	extHook FixX3DWeapon012Fun(handlGame, (DWORD)FixX3DWeapon012, (DWORD)FixX3DWeapon012Adr, 7);
	extHook FixX3DWeapon013Fun(handlGame, (DWORD)FixX3DWeapon013, (DWORD)FixX3DWeapon013Adr, 7);
	extHook FixX3DWeapon014Fun(handlGame, (DWORD)FixX3DWeapon014, (DWORD)FixX3DWeapon014Adr, 7);
	extHook FixX3DWeapon015Fun(handlGame, (DWORD)FixX3DWeapon015, (DWORD)FixX3DWeapon015Adr, 7);
	extHook FixX3DWeapon016Fun(handlGame, (DWORD)FixX3DWeapon016, (DWORD)FixX3DWeapon016Adr, 7);
	extHook FixX3DWeapon017Fun(handlGame, (DWORD)FixX3DWeapon017, (DWORD)FixX3DWeapon017Adr, 7);
	extHook FixX3DWeapon018Fun(handlGame, (DWORD)FixX3DWeapon018, (DWORD)FixX3DWeapon018Adr, 7);
	extHook FixX3DWeapon019Fun(handlGame, (DWORD)FixX3DWeapon019, (DWORD)FixX3DWeapon019Adr, 7);
	extHook FixX3DWeapon0110Fun(handlGame, (DWORD)FixX3DWeapon0110, (DWORD)FixX3DWeapon0110Adr, 7);
	extHook FixX3DWeapon0111Fun(handlGame, (DWORD)FixX3DWeapon0111, (DWORD)FixX3DWeapon0111Adr, 7);
	extHook FixX3DWeapon0112Fun(handlGame, (DWORD)FixX3DWeapon0112, (DWORD)FixX3DWeapon0112Adr, 7);
	extHook FixX3DWeapon0113Fun(handlGame, (DWORD)FixX3DWeapon0113, (DWORD)FixX3DWeapon0113Adr, 7);
	extHook FixX3DWeapon0114Fun(handlGame, (DWORD)FixX3DWeapon0114, (DWORD)FixX3DWeapon0114Adr, 7);
	extHook FixX3DWeapon0115Fun(handlGame, (DWORD)FixX3DWeapon0115, (DWORD)FixX3DWeapon0115Adr, 7);
	extHook FixX3DWeapon0116Fun(handlGame, (DWORD)FixX3DWeapon0116, (DWORD)FixX3DWeapon0116Adr, 7);
	extHook FixX3DWeapon0117Fun(handlGame, (DWORD)FixX3DWeapon0117, (DWORD)FixX3DWeapon0117Adr, 7);
	extHook FixX3DWeapon0118Fun(handlGame, (DWORD)FixX3DWeapon0118, (DWORD)FixX3DWeapon0118Adr, 7);
	extHook FixX3DWeapon0119Fun(handlGame, (DWORD)FixX3DWeapon0119, (DWORD)FixX3DWeapon0119Adr, 7);
	extHook FixX3DWeapon0120Fun(handlGame, (DWORD)FixX3DWeapon0120, (DWORD)FixX3DWeapon0120Adr, 7);
	extHook FixX3DWeapon0121Fun(handlGame, (DWORD)FixX3DWeapon0121, (DWORD)FixX3DWeapon0121Adr, 7);
	extHook FixX3DWeapon0122Fun(handlGame, (DWORD)FixX3DWeapon0122, (DWORD)FixX3DWeapon0122Adr, 7);
	extHook FixX3DWeapon0123Fun(handlGame, (DWORD)FixX3DWeapon0123, (DWORD)FixX3DWeapon0123Adr, 7);
	extHook FixX3DWeapon0124Fun(handlGame, (DWORD)FixX3DWeapon0124, (DWORD)FixX3DWeapon0124Adr, 7);
	extHook FixX3DWeapon0125Fun(handlGame, (DWORD)FixX3DWeapon0125, (DWORD)FixX3DWeapon0125Adr, 7);
	extHook FixX3DWeapon0126Fun(handlGame, (DWORD)FixX3DWeapon0126, (DWORD)FixX3DWeapon0126Adr, 7);
	extHook FixX3DWeapon0127Fun(handlGame, (DWORD)FixX3DWeapon0127, (DWORD)FixX3DWeapon0127Adr, 7);
	extHook FixX3DWeapon021Fun(handlGame, (DWORD)FixX3DWeapon021, (DWORD)FixX3DWeapon021Adr, 5);
	extHook FixX3DWeapon022Fun(handlGame, (DWORD)FixX3DWeapon022, (DWORD)FixX3DWeapon022Adr, 6);
	extHook FixX3DWeapon023Fun(handlGame, (DWORD)FixX3DWeapon023, (DWORD)FixX3DWeapon023Adr, 6);
	extHook FixX3DWeapon024Fun(handlGame, (DWORD)FixX3DWeapon024, (DWORD)FixX3DWeapon024Adr, 5);
	extHook FixX3DWeapon025Fun(handlGame, (DWORD)FixX3DWeapon025, (DWORD)FixX3DWeapon025Adr, 6);
	extHook FixX3DWeapon026Fun(handlGame, (DWORD)FixX3DWeapon026, (DWORD)FixX3DWeapon026Adr, 6);
	extHook FixX3DWeapon027Fun(handlGame, (DWORD)FixX3DWeapon027, (DWORD)FixX3DWeapon027Adr, 6);
	extHook FixX3DWeapon028Fun(handlGame, (DWORD)FixX3DWeapon028, (DWORD)FixX3DWeapon028Adr, 5);
	extHook FixX3DWeapon029Fun(handlGame, (DWORD)FixX3DWeapon029, (DWORD)FixX3DWeapon029Adr, 6);
	extHook FixX3DWeapon0210Fun(handlGame, (DWORD)FixX3DWeapon0210, (DWORD)FixX3DWeapon0210Adr, 6);
	FixX3DWeaponFun.ToggleHook2(X3DWeapon);
	FixX3DWeapon011Fun.ToggleHook2(X3DWeapon);
	FixX3DWeapon012Fun.ToggleHook2(X3DWeapon);
	FixX3DWeapon013Fun.ToggleHook2(X3DWeapon);
	FixX3DWeapon014Fun.ToggleHook2(X3DWeapon);
	FixX3DWeapon015Fun.ToggleHook2(X3DWeapon);
	FixX3DWeapon016Fun.ToggleHook2(X3DWeapon);
	FixX3DWeapon017Fun.ToggleHook2(X3DWeapon);
	FixX3DWeapon018Fun.ToggleHook2(X3DWeapon);
	FixX3DWeapon019Fun.ToggleHook2(X3DWeapon);
	FixX3DWeapon0110Fun.ToggleHook2(X3DWeapon);
	FixX3DWeapon0111Fun.ToggleHook2(X3DWeapon);
	FixX3DWeapon0112Fun.ToggleHook2(X3DWeapon);
	FixX3DWeapon0113Fun.ToggleHook2(X3DWeapon);
	FixX3DWeapon0114Fun.ToggleHook2(X3DWeapon);
	FixX3DWeapon0115Fun.ToggleHook2(X3DWeapon);
	FixX3DWeapon0116Fun.ToggleHook2(X3DWeapon);
	FixX3DWeapon0117Fun.ToggleHook2(X3DWeapon);
	FixX3DWeapon0118Fun.ToggleHook2(X3DWeapon);
	FixX3DWeapon0119Fun.ToggleHook2(X3DWeapon);
	FixX3DWeapon0120Fun.ToggleHook2(X3DWeapon);
	FixX3DWeapon0121Fun.ToggleHook2(X3DWeapon);
	FixX3DWeapon0122Fun.ToggleHook2(X3DWeapon);
	FixX3DWeapon0123Fun.ToggleHook2(X3DWeapon);
	FixX3DWeapon0124Fun.ToggleHook2(X3DWeapon);
	FixX3DWeapon0125Fun.ToggleHook6(X3DWeapon);
	FixX3DWeapon0126Fun.ToggleHook6(X3DWeapon);
	FixX3DWeapon0127Fun.ToggleHook2(X3DWeapon);
	FixX3DWeapon021Fun.ToggleHook2(X3DWeapon);
	FixX3DWeapon022Fun.ToggleHook();
	FixX3DWeapon023Fun.ToggleHook2(X3DWeapon);
	FixX3DWeapon024Fun.ToggleHook2(X3DWeapon);
	FixX3DWeapon025Fun.ToggleHook();
	FixX3DWeapon026Fun.ToggleHook();
	FixX3DWeapon027Fun.ToggleHook2(X3DWeapon);
	FixX3DWeapon028Fun.ToggleHook2(X3DWeapon);
	FixX3DWeapon029Fun.ToggleHook();
	FixX3DWeapon0210Fun.ToggleHook2(X3DWeapon);
    DWORD FixX3DSize = 0x00716638;
	PatchEx((BYTE*)FixX3DSize, (BYTE*)"\xC1", 1, handlGame);
	DWORD FixX3DSize1 = 0x0062EA6D;
	PatchEx((BYTE*)FixX3DSize1, (BYTE*)"\xD0", 1, handlGame);
	DWORD FixX3DSize2 = 0x00657C41;
	PatchEx((BYTE*)FixX3DSize2, (BYTE*)"\xC1", 1, handlGame);
	DWORD FixX3DSize3 = 0x0065E64E;
	PatchEx((BYTE*)FixX3DSize3, (BYTE*)"\xD0", 1, handlGame);
	//Fix Hover AcDanh
	DWORD HoverAcDanh1 = 0x004BB3AA;
	PatchEx((BYTE*)HoverAcDanh1, (BYTE*)"\x05\xB5\x00\x00\x00", 5, handlGame);
	DWORD HoverAcDanh2 = 0x004BB3BB;
	PatchEx((BYTE*)HoverAcDanh2, (BYTE*)"\x8D\xB1\xEB\x00\x00\x00", 6, handlGame);
	DWORD HoverAcDanh3 = 0x004BB3C5;
	PatchEx((BYTE*)HoverAcDanh3, (BYTE*)"\x8D\xB1\xFB\x00\x00\x00", 6, handlGame);
	DWORD HoverAcDanh4 = 0x004BB3DB;
	PatchEx((BYTE*)HoverAcDanh4, (BYTE*)"\x8D\xB1\x00\x01\x00\x00", 6, handlGame);
    DWORD HoverAcDanh5 = 0x004BB3E5;
	PatchEx((BYTE*)HoverAcDanh5, (BYTE*)"\x81\xC1\x10\x01\x00\x00", 6, handlGame);
	DWORD HoverAcDanh6 = 0x004BB3D7;
	PatchEx((BYTE*)HoverAcDanh6, (BYTE*)"\x6A\x01", 2, handlGame);
	DWORD HoverAcDanh7 = 0x004BB3F7;
	PatchEx((BYTE*)HoverAcDanh7, (BYTE*)"\x6A\x00", 2, handlGame);

    //Fix Auto

	//
   /*	DWORD FixAmPhongThuAdr = 0x00601138;
	PatchEx((BYTE*)FixAmPhongThuAdr, (BYTE*)"\x8B\xD0\x90", 3, handlGame);
	DWORD FixAmPhongThu2Adr = 0x0060114D;
	PatchEx((BYTE*)FixAmPhongThu2Adr, (BYTE*)"\x8B\xCD\x90", 3, handlGame);
	DWORD FixAmPhongThu3Adr = 0x00601240;
	PatchEx((BYTE*)FixAmPhongThu3Adr, (BYTE*)"\x8B\xD0\x90", 3, handlGame);
	DWORD FixAmPhongThu4Adr = 0x00601295;
	PatchEx((BYTE*)FixAmPhongThu4Adr, (BYTE*)"\x8B\xC0\x90", 3, handlGame);
	DWORD FixAmPhongThu5Adr = 0x005FF308;
	PatchEx((BYTE*)FixAmPhongThu5Adr, (BYTE*)"\x8B\xC8\x90", 3, handlGame);
	DWORD FixAmPhongThu6Adr = 0x005FF385;
	PatchEx((BYTE*)FixAmPhongThu6Adr, (BYTE*)"\x8B\xD0\x90", 3, handlGame);
	DWORD FixAmPhongThu7Adr = 0x005FF40D;
	PatchEx((BYTE*)FixAmPhongThu7Adr, (BYTE*)"\x8B\xC0\x90", 3, handlGame);
	DWORD FixAmPhongThu8Adr = 0x005FF48E;
	PatchEx((BYTE*)FixAmPhongThu8Adr, (BYTE*)"\x8B\xC8\x90", 3, handlGame);
	DWORD FixAmPhongThu9Adr = 0x005FF50B;
	PatchEx((BYTE*)FixAmPhongThu9Adr, (BYTE*)"\x8B\xD0\x90", 3, handlGame);
	DWORD FixAmPhongThu10Adr = 0x005FF86B;
	PatchEx((BYTE*)FixAmPhongThu10Adr, (BYTE*)"\x8B\xC0\x90", 3, handlGame);
    DWORD FixAmPhongThu11Adr = 0x006011E2;
	PatchEx((BYTE*)FixAmPhongThu11Adr, (BYTE*)"\x8B\xC0\x90", 3, handlGame);
	DWORD FixAmPhongThu12Adr = 0x00600FE8;
	PatchEx((BYTE*)FixAmPhongThu12Adr, (BYTE*)"\x8B\xD0\x90", 3, handlGame);
	DWORD ClearDataOldAdr = 0x006282EE;
	extHook ClearDataOldFun(handlGame, (DWORD)ClearDataOld, (DWORD)ClearDataOldAdr, 7);
	ClearDataOldFun.ToggleHook();   */
	//Fix hien thi diem NK ko Buff
    DWORD CanLucSizeNoBuffAdr = 0x004BA90A;
	PatchEx((BYTE*)CanLucSizeNoBuffAdr, (BYTE*)"\x81\xC2\x14\x01\x00\x00", 6, handlGame);
	DWORD CanLucSizeNoBuff1Adr = 0x004BA919;
	PatchEx((BYTE*)CanLucSizeNoBuff1Adr, (BYTE*)"\x83\xC2\x50\x90\x90\x90", 6, handlGame);
	DWORD ChanKhiSizeNoBuffAdr = 0x004BAAB6;
	PatchEx((BYTE*)ChanKhiSizeNoBuffAdr, (BYTE*)"\x81\xC2\x24\x01\x00\x00", 6, handlGame);
	DWORD ChanKhiSizeNoBuff1Adr = 0x004BAAC5;
	PatchEx((BYTE*)ChanKhiSizeNoBuff1Adr, (BYTE*)"\x83\xC2\x50\x90\x90\x90", 6, handlGame);
	DWORD TriTueSizeNoBuffAdr = 0x004BAC62;
	PatchEx((BYTE*)TriTueSizeNoBuffAdr, (BYTE*)"\x81\xC2\x34\x01\x00\x00", 6, handlGame);
	DWORD TriTueSizeNoBuff1Adr = 0x004BAC71;
	PatchEx((BYTE*)TriTueSizeNoBuff1Adr, (BYTE*)"\x83\xC2\x50\x90\x90\x90", 6, handlGame);
    DWORD SinhLucSizeNoBuffAdr = 0x004BAE0E;
	PatchEx((BYTE*)SinhLucSizeNoBuffAdr, (BYTE*)"\x81\xC2\x44\x01\x00\x00", 6, handlGame);
	DWORD SinhLucSizeNoBuff1Adr = 0x004BAE1D;
	PatchEx((BYTE*)SinhLucSizeNoBuff1Adr, (BYTE*)"\x83\xC2\x50\x90\x90\x90", 6, handlGame);
	DWORD ManTiepSizeNoBuffAdr = 0x004BAFBA;
	PatchEx((BYTE*)ManTiepSizeNoBuffAdr, (BYTE*)"\x81\xC2\x54\x01\x00\x00", 6, handlGame);
	DWORD ManTiepSizeNoBuff1Adr = 0x004BAFC9;
	PatchEx((BYTE*)ManTiepSizeNoBuff1Adr, (BYTE*)"\x83\xC2\x50\x90\x90\x90", 6, handlGame);
	//
    //Bo qua Load Web
    DWORD LoadWeb01Adr = 0x00892707;
	PatchEx((BYTE*)LoadWeb01Adr, (BYTE*)"\x67\x6F\x6F\x67\x6C\x65\x2E\x63\x6F\x6D\x00\x00", 12, handlGame);
	DWORD LoadWeb02Adr = 0x0089265B;
	PatchEx((BYTE*)LoadWeb02Adr, (BYTE*)"\x67\x6F\x6F\x67\x6C\x65\x2E\x63\x6F\x6D\x00\x00", 12, handlGame);

    DWORD ShowDmgPvePhiKick10112022Adr = 0x0063B613;
	extHook ShowDmgPvePhiKick10112022Fun(handlGame, (DWORD)ShowDmgPvePhiKick10112022, (DWORD)ShowDmgPvePhiKick10112022Adr, 7);
	ShowDmgPvePhiKick10112022Fun.ToggleHook2(ShwDamage);

	//Fix Opt Hanh Nang
	DWORD AddOptionNewOtherHangNangAdr = 0x00616B47;
	extHook AddOptionNewOtherHangNangFun(handlGame, (DWORD)AddOptionNewOtherHangNang, (DWORD)AddOptionNewOtherHangNangAdr, 5);
	AddOptionNewOtherHangNangFun.ToggleHook();

    DWORD DrawFormCheTaoAdr = 0x004FC440;
    DWORD GetItemRequestFormCheTaoAdr = 0x0048C100;
	DWORD GetPackageCheTaoFromServerAdr = 0x006ABB4E;
	DWORD GetPozJoinEventMapAdr = 0x004FDC67;
	LPVOID MemoryFormCheTao = (LPVOID)VirtualAllocEx(handlGame, NULL, 6000, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
	VirtualProtectEx(handlGame, (LPVOID)MemoryFormCheTao, 6000, PAGE_EXECUTE_READWRITE, &oldProtect1);
	extHook DrawFormCheTaoFun(handlGame, (DWORD)DrawFormCheTao, (DWORD)DrawFormCheTaoAdr, 6);
	extHook GetPackageCheTaoFromServerFun(handlGame, (DWORD)GetPackageCheTaoFromServer, (DWORD)GetPackageCheTaoFromServerAdr, 5);
	extHook GetPozJoinEventMapFun(handlGame, (DWORD)GetPozJoinEventMap, (DWORD)GetPozJoinEventMapAdr, 6);
	extHook GetItemRequestFormCheTaoFun(handlGame, (DWORD)GetItemRequestFormCheTao, (DWORD)GetItemRequestFormCheTaoAdr, 6);
	DrawFormCheTaoFun.ToggleHook2(MemoryFormCheTao);
    GetPackageCheTaoFromServerFun.ToggleHook2(MemoryFormCheTao);
	GetPozJoinEventMapFun.ToggleHook2(MemoryFormCheTao);
	GetItemRequestFormCheTaoFun.ToggleHook2(MemoryFormCheTao);

    // Hien Thi Thoi Gian Giam
	DWORD HienThiHoverCastAdr = 0x0050F12B;
	DWORD HienThiHoverCast2Adr = 0x004C8C46;
	DWORD HienThiHoverCoolDownAdr = 0x0050F233;
	DWORD HienThiHoverCoolDown2Adr = 0x004C8D75;
	extHook HienThiHoverCastFun(handlGame, (DWORD)HienThiHoverCast, (DWORD)HienThiHoverCastAdr, 5);
	extHook HienThiHoverCast2Fun(handlGame, (DWORD)HienThiHoverCast2, (DWORD)HienThiHoverCast2Adr, 7);
	extHook HienThiHoverCoolDownFun(handlGame, (DWORD)HienThiHoverCoolDown, (DWORD)HienThiHoverCoolDownAdr, 5);
	extHook HienThiHoverCoolDown2Fun(handlGame, (DWORD)HienThiHoverCoolDown2, (DWORD)HienThiHoverCoolDown2Adr, 7);
	HienThiHoverCastFun.ToggleHook2(InfoOptionMoi);
	HienThiHoverCast2Fun.ToggleHook2(InfoOptionMoi);
	HienThiHoverCoolDownFun.ToggleHook2(InfoOptionMoi);
	HienThiHoverCoolDown2Fun.ToggleHook2(InfoOptionMoi);
    DWORD ChangeGetValueShow = 0x0050F1C7;
	PatchEx((BYTE*)ChangeGetValueShow, (BYTE*)"\x14", 1, handlGame);
	DWORD ChangeGetValueShow1 = 0x0050F18D;
	PatchEx((BYTE*)ChangeGetValueShow1, (BYTE*)"\x14", 1, handlGame);
	DWORD ChangeGetValueShow3 = 0x0050F2C2;
	PatchEx((BYTE*)ChangeGetValueShow3, (BYTE*)"\x14", 1, handlGame);
	DWORD ChangeGetValueShow4 = 0x004C8CB0;
	PatchEx((BYTE*)ChangeGetValueShow4, (BYTE*)"\x14", 1, handlGame);
	DWORD ChangeGetValueShow5 = 0x004C8CEE;
	PatchEx((BYTE*)ChangeGetValueShow5, (BYTE*)"\x14", 1, handlGame);
    DWORD ChangeGetValueShow6 = 0x004C8E2B;
	PatchEx((BYTE*)ChangeGetValueShow6, (BYTE*)"\x14", 1, handlGame);
	DWORD ChangeGetValueShow7 = 0x004C8DE9;
	PatchEx((BYTE*)ChangeGetValueShow7, (BYTE*)"\x10", 1, handlGame);
	DWORD HienThiColorInfoCastAdr = 0x0050A497;
	DWORD HienThiColorInfoCast2Adr = 0x0050A4C9;
	DWORD HienThiColorInfoCast3Adr = 0x0050A4DD;
	DWORD HienThiColorInfoCast4Adr = 0x0050A548;
	extHook HienThiColorInfoCastFun(handlGame, (DWORD)HienThiColorInfoCast, (DWORD)HienThiColorInfoCastAdr, 5);
	extHook HienThiColorInfoCast2Fun(handlGame, (DWORD)HienThiColorInfoCast2, (DWORD)HienThiColorInfoCast2Adr, 6);
	extHook HienThiColorInfoCast3Fun(handlGame, (DWORD)HienThiColorInfoCast3, (DWORD)HienThiColorInfoCast3Adr, 6);
	extHook HienThiColorInfoCast4Fun(handlGame, (DWORD)HienThiColorInfoCast4, (DWORD)HienThiColorInfoCast4Adr, 6);
	HienThiColorInfoCastFun.ToggleHook2(InfoOptionMoi);
	HienThiColorInfoCast2Fun.ToggleHook();
	HienThiColorInfoCast3Fun.ToggleHook2(InfoOptionMoi);
	HienThiColorInfoCast4Fun.ToggleHook();
	DWORD DecreaseCoolDownSkill1Adr = 0x0069E9F0;
	DWORD DecreaseCoolDownSkill12Adr = 0x0069E9E8;
	DWORD DecreaseCastSkill1Adr = 0x0069E850;
	DWORD DecreaseCastSkill12Adr = 0x0069E848;
	extHook DecreaseCoolDownSkill1Fun(handlGame, (DWORD)DecreaseCoolDownSkill1, (DWORD)DecreaseCoolDownSkill1Adr, 7);
	extHook DecreaseCoolDownSkill12Fun(handlGame, (DWORD)DecreaseCoolDownSkill12, (DWORD)DecreaseCoolDownSkill12Adr, 7);
	extHook DecreaseCastSkill1Fun(handlGame, (DWORD)DecreaseCastSkill1, (DWORD)DecreaseCastSkill1Adr, 7);
	extHook DecreaseCastSkill12Fun(handlGame, (DWORD)DecreaseCastSkill12, (DWORD)DecreaseCastSkill12Adr, 7);
	DecreaseCoolDownSkill1Fun.ToggleHook6(InfoOptionMoi);
	DecreaseCoolDownSkill12Fun.ToggleHook6(InfoOptionMoi);
	DecreaseCastSkill1Fun.ToggleHook6(InfoOptionMoi);
	DecreaseCastSkill12Fun.ToggleHook6(InfoOptionMoi);
    TestAttactSpeedFun.ToggleHook6(InfoOptionMoi);
	TestAttactSpeed2Fun.ToggleHook6(InfoOptionMoi);
	TestAttactSpeed3Fun.ToggleHook6(InfoOptionMoi);
	GetAttackSpeedAnotherUserFun.ToggleHook6(InfoOptionMoi);

	NewIncClothItemFun.ToggleHook2(nHuyetLong);
	ShowTextIncCloCuongDoFun.ToggleHook2(nHuyetLong);
	RemoveHuyetLongRequestFun.ToggleHook2(nHuyetLong);
	ShowHuyetLongRequestFun.ToggleHook2(nHuyetLong);
	ResizeShowIncClothFun.ToggleHook();
	AddOptionPhongAnTinVatFun.ToggleHook();
	ResizeShowItemFun.ToggleHook();
	DrawMoreInforRelicFun.ToggleHook2(ShowOptionString);
	ReceivePackagePhongAnFun.ToggleHook2(nPhongAnn);
	MoFormPhongAnFun.ToggleHook2(nPhongAnn);
	ChangePhongAnRequestFun.ToggleHook2(nPhongAnn);
	DisableClickPhongAnFun.ToggleHook2(nPhongAnn);
	MoPhongAnTinVatFun.ToggleHook2(nPhongAnn);
	AcceptItemVPrequestFun.ToggleHook2(nPhongAnn);
	GetPackSvRelicsFun.ToggleHook();
	ChangeSizePackFun.ToggleHook();
	ChangeSizePack1Fun.ToggleHook();
	ChangeInforPhongAn1910Fun.ToggleHook2(nPhongAnn);
	LoadInfoPhongAnFun.ToggleHook2(nPhongAnn);
	NhanPackageInforFun.ToggleHook();
	ChangeInforPhongAn3Fun.ToggleHook();
	ChangeInforPhongAn2Fun.ToggleHook();
	ChangeInforPhongAn1Fun.ToggleHook();
	ChangeInforPhongAnFun.ToggleHook();
	ShowAnotherRequestItemIncFun.ToggleHook();
	ChangeModeInchantFun.ToggleHook6(CheckBoxOptTinhLuyen);
	RequestCorrectItemFun.ToggleHook2(CheckBoxOptTinhLuyen);
	ShowCheckBoxTinhLuyenFun.ToggleHook2(CheckBoxOptTinhLuyen);
	ChangeColorAndTypeFun.ToggleHook6(CheckBoxOptTinhLuyen);
	GetValueCheckBoxFun.ToggleHook2(CheckBoxOptTinhLuyen);
	/*ByPassTextureErrorFun.ToggleHook();
	ByPassTextureError1Fun.ToggleHook();
	ByPassTextureError2Fun.ToggleHook();
	ByPassTextureError3Fun.ToggleHook();
	ByPassTextureError4Fun.ToggleHook(); */
	BypassErrorDriverFun.ToggleHook();
	EncryptTwoByteFun.ToggleHook();
	EncryptTwoByte2Fun.ToggleHook();
	DWORD RemoveBackSlot8 = 0x0049416D;
	PatchEx((BYTE*)RemoveBackSlot8, (BYTE*)"\x8C", 1, handlGame);
    DWORD RemoveBackSlot8C = 0x00497AFC;
	PatchEx((BYTE*)RemoveBackSlot8C, (BYTE*)"\x8C", 1, handlGame);
	AcceptUpradeOptFun.ToggleHook();

	LoadFastMapFun.ToggleHook();
	GetPacketFromCombineFun.ToggleHook();
	TestFuncOpenBoxFun.ToggleHook();
	ChoDucSlotVkTinhLuyenFun.ToggleHook();
	GetMaxSlotFun.ToggleHook();
	AddMoreSlot3Fun.ToggleHook2(SlotDefine);
	AddMoreSlotFun.ToggleHook();
	AddMoreSlot4Fun.ToggleHook2(SlotDefine);
	AddMoreSlot101Fun.ToggleHook2(SlotDefine);
	ShowInforHoverFun.ToggleHook6(SlotDefine);
	ShowInforHover3Fun.ToggleHook6(SlotDefine);
	ShowInforHover2Fun.ToggleHook();
	EquipItemRelicFun.ToggleHook();
	EquipItemRelic2Fun.ToggleHook();
	AddBonusNewSlotFun.ToggleHook();
	GetBaseBonusFromItemNewSlotFun.ToggleHook();
	DisableViewPetFun.ToggleHook();
	DisableViewPet2Fun.ToggleHook();
	DisableViewPet3Fun.ToggleHook();
	DisableViewPet4Fun.ToggleHook();
	GetGradeNewColorFun.ToggleHook();
	TestNewNguKhiFun.ToggleHook();
	TestNewNguKhiTriTueFun.ToggleHook();
	TestNewNguKhiChanKhiFun.ToggleHook();
	TestNewNguKhiSinhLucFun.ToggleHook();

	DisableStackRelicFun.ToggleHook();
	ReloadLumpFun.ToggleHook();
	HienThiSetFun.ToggleHook();
	AddOptionSetFun.ToggleHook();
	InforPhy6Fun.ToggleHook();
	RemoveOldSlotFun.ToggleHook();
	ByPassOverIndex3DxFun.ToggleHook();
	ByPassOverIndex3Dx1Fun.ToggleHook();
	ByPassOverIndex3Dx2Fun.ToggleHook();
	BoQuaThongBaoLienMinhFun.ToggleHook();
	FixHienThiDamgeFun.ToggleHook();
	AddInfoItemFun.ToggleHook();
	insertValueLevelFun.ToggleHook5(LevelUp);
	insert16A098CFun.ToggleHook5(LevelUp);
	insert16A098C1Fun.ToggleHook5(LevelUp);
	insert16A098C2Fun.ToggleHook6(LevelUp);
	insert16A098C3Fun.ToggleHook6(LevelUp);
	insert16A098C4Fun.ToggleHook5(LevelUp);    //Error
	insert16A098C5Fun.ToggleHook5(LevelUp);
	insert16A098C6Fun.ToggleHook5(LevelUp);
	insert16A098C61Fun.ToggleHook5(LevelUp);
	insert16A098C62Fun.ToggleHook5(LevelUp);
	insert16A098C7Fun.ToggleHook5(LevelUp);
	insert16A098C8Fun.ToggleHook6(LevelUp);
	insert16A098C9Fun.ToggleHook5(LevelUp);
	insert16A098C10Fun.ToggleHook5(LevelUp);
	insert16A098C101Fun.ToggleHook5(LevelUp);
	insert16A098C11Fun.ToggleHook5(LevelUp);
	insert16A098C111Fun.ToggleHook5(LevelUp);
	insert16A09ACFun.ToggleHook5(LevelUp);
	insert16A09AC1Fun.ToggleHook5(LevelUp);
	insert16A09AC2Fun.ToggleHook5(LevelUp);
	insert16A09AC21Fun.ToggleHook5(LevelUp);
	insert16A09AC3Fun.ToggleHook5(LevelUp);
	insert16A09AC4Fun.ToggleHook5(LevelUp);
	insert16A09AC41Fun.ToggleHook5(LevelUp);
	insert16A09AC5Fun.ToggleHook5(LevelUp);
	insert16A09AC6Fun.ToggleHook5(LevelUp);
	insert16A09AC7Fun.ToggleHook5(LevelUp);
	insert16A09AC8Fun.ToggleHook6(LevelUp);
	insert16A09C4Fun.ToggleHook5(LevelUp);
	insert16A09C41Fun.ToggleHook5(LevelUp);
	insert16A09C42Fun.ToggleHook5(LevelUp);
	insert16A09C43Fun.ToggleHook5(LevelUp);
	insert1stringdtnameFun.ToggleHook();
	insertValueLevel2Fun.ToggleHook();
	insertValueLevel3Fun.ToggleHook();
	AllowLLanWeaponFun.ToggleHook();
	  LoadDamage6.ToggleHook();
	  AddmoreNumber2Fun.ToggleHook2(LoadDamage241);
	  DWORD *LoadDamage2412Inc =(DWORD*)(&LoadDamage2412);
	  DWORD Change14to18 = 0x77E7D4;
	  DWORD Change99k = 0x0077C197;
	  DWORD Change100k = 0x0077C1A2;
      DWORD ChangeLoadNumberric = 0x00783C97;
	  DWORD LoadGiaTriNumericParticleAdr = 0x00783C89;
      extHook LoadGiaTriNumericParticleFun(handlGame, (DWORD)LoadGiaTriNumericParticle, (DWORD)LoadGiaTriNumericParticleAdr, 6);
      LoadGiaTriNumericParticleFun.ToggleHook2(LoadDamage2412);
	  GetDamageCkFun.ToggleHook2(ShwDamage);
	  PushAddressFun.ToggleHook2(LoadDamage2412);
	  PatchEx((BYTE*)ChangeLoadNumberric, (BYTE*)"\x83\xFD\x07", 3, handlGame);
      PatchEx((BYTE*)Change14to18, (BYTE*)"0x1C", 1, handlGame);
	  PatchEx((BYTE*)Change99k, (BYTE*)"\x3D\x3F\x4B\x4C\x00", 5, handlGame);
	  PatchEx((BYTE*)Change100k, (BYTE*)"\xB9\x40\x4B\x4C\x00", 5, handlGame);
	  ShowDamageFunc.ToggleHook2(ShwDamage);
	  GetDamageFun.ToggleHook2(ShwDamage);
	  ShowDamageSkillFun.ToggleHook2(ShwDamage);
	  GetDamageFun22.ToggleHook2(ShwDamage);
	  GetDamageFun2.ToggleHook2(ShwDamage);
	  GetDamageThucKyFun.ToggleHook2(ShwDamage);
	  GetDamageCk2Fun.ToggleHook2(ShwDamage);
	  ShowDamageCk1Fun.ToggleHook2(ShwDamage);
	  ShowDamageCk2Fun.ToggleHook2(ShwDamage);
	  ShowDamageCk3Fun.ToggleHook2(ShwDamage);
	  ShowDamageCk4Fun.ToggleHook2(ShwDamage);
	  GetDieOrLieTankerFun.ToggleHook();
	  GetTargetAnotherNukerFun.ToggleHook();
	  GetTargetAnotherTankerFun.ToggleHook();
	  GetTargetAnotherNuker2Fun.ToggleHook();

      DWORD GetDmgNhatKichKyAdr = 0x006C4D8C;
	  DWORD ShowDmgPvpNhatKichAdr = 0x00640310;
	  DWORD ShowDmgPvpChieuThucKyAdr = 0x00632FF3;
	  DWORD GetDmgChieuThucKyAdr = 0x006C56FC;
	  DWORD ShowDmgNhatKhiChuongPKAdr = 0x006377FA;
	  DWORD	ShowDmgHoaKhiChuongPKAdr = 0x006448DD;
	  DWORD	GetDmgNhatKhiPKAdr = 0x006C6C68;
	  DWORD	GetDmgHoaKhiChuongPKAdr = 0x006C614C;
	  DWORD ShowDmgPvpChieuNhatKichHienThiAdr = 0x0064015D;
	  DWORD ShowDmgPvpChieuPhiKichHienThiAdr = 0x006C6878;
	  DWORD ShowDmgPvpChieuPhiKickHienThi2Adr = 0x0063C5BE;
	  DWORD ShowDmgPvpChieuThucKyHienThiAdr = 0x00632F3A;
	  DWORD ShowDmgPveChieuPhiKichHienThi2Adr = 0x0063B731;
	  DWORD ShowDmgPveChieuPhiKichHienThiAdr = 0x006C6648;
	  extHook GetDmgNhatKichKyFun(handlGame, (DWORD)GetDmgNhatKichKy, (DWORD)GetDmgNhatKichKyAdr, 7);
	  extHook ShowDmgPvpNhatKichFun(handlGame, (DWORD)ShowDmgPvpNhatKich, (DWORD)ShowDmgPvpNhatKichAdr, 7);
	  extHook ShowDmgPvpChieuThucKyFun(handlGame, (DWORD)ShowDmgPvpChieuThucKy, (DWORD)ShowDmgPvpChieuThucKyAdr, 8);
	  extHook GetDmgChieuThucKyFun(handlGame, (DWORD)GetDmgChieuThucKy, (DWORD)GetDmgChieuThucKyAdr, 7);
	  extHook ShowDmgNhatKhiChuongPKFun(handlGame, (DWORD)ShowDmgNhatKhiChuongPK, (DWORD)ShowDmgNhatKhiChuongPKAdr, 7);
	  extHook ShowDmgHoaKhiChuongPKFun(handlGame, (DWORD)ShowDmgHoaKhiChuongPK, (DWORD)ShowDmgHoaKhiChuongPKAdr, 7);
	  extHook GetDmgNhatKhiPKFun(handlGame, (DWORD)GetDmgNhatKhiPK, (DWORD)GetDmgNhatKhiPKAdr, 7);
	  extHook GetDmgHoaKhiChuongPKFun(handlGame, (DWORD)GetDmgHoaKhiChuongPK, (DWORD)GetDmgHoaKhiChuongPKAdr, 7);
	  extHook ShowDmgPvpChieuNhatKichHienThiFun(handlGame, (DWORD)ShowDmgPvpChieuNhatKichHienThi, (DWORD)ShowDmgPvpChieuNhatKichHienThiAdr, 7);
	  extHook ShowDmgPvpChieuPhiKichHienThiFun(handlGame, (DWORD)ShowDmgPvpChieuPhiKichHienThi, (DWORD)ShowDmgPvpChieuPhiKichHienThiAdr, 7);
	  extHook ShowDmgPvpChieuPhiKickHienThi2Fun(handlGame, (DWORD)ShowDmgPvpChieuPhiKickHienThi2, (DWORD)ShowDmgPvpChieuPhiKickHienThi2Adr, 7);
	  extHook ShowDmgPvpChieuThucKyHienThiFun(handlGame, (DWORD)ShowDmgPvpChieuThucKyHienThi, (DWORD)ShowDmgPvpChieuThucKyHienThiAdr, 8);
	  extHook ShowDmgPveChieuPhiKichHienThi2Fun(handlGame, (DWORD)ShowDmgPveChieuPhiKichHienThi2, (DWORD)ShowDmgPveChieuPhiKichHienThi2Adr, 7);
	  extHook ShowDmgPveChieuPhiKichHienThiFun(handlGame, (DWORD)ShowDmgPveChieuPhiKichHienThi, (DWORD)ShowDmgPveChieuPhiKichHienThiAdr, 7);
	  GetDmgNhatKichKyFun.ToggleHook2(ShwDamage);
	  ShowDmgPvpNhatKichFun.ToggleHook2(ShwDamage);
	  GetDmgChieuThucKyFun.ToggleHook2(ShwDamage);
	  ShowDmgPvpChieuThucKyFun.ToggleHook2(ShwDamage);
	  GetDmgHoaKhiChuongPKFun.ToggleHook2(ShwDamage);
	  GetDmgNhatKhiPKFun.ToggleHook2(ShwDamage);
	  ShowDmgHoaKhiChuongPKFun.ToggleHook2(ShwDamage);
	  ShowDmgNhatKhiChuongPKFun.ToggleHook2(ShwDamage);
	  ShowDmgPvpChieuNhatKichHienThiFun.ToggleHook2(ShwDamage);
	  ShowDmgPvpChieuPhiKichHienThiFun.ToggleHook2(ShwDamage);
	  ShowDmgPvpChieuPhiKickHienThi2Fun.ToggleHook2(ShwDamage);
	  ShowDmgPvpChieuThucKyHienThiFun.ToggleHook2(ShwDamage);
	  ShowDmgPveChieuPhiKichHienThi2Fun.ToggleHook2(ShwDamage);
	  ShowDmgPveChieuPhiKichHienThiFun.ToggleHook2(ShwDamage);
	  DWORD ShowDmgPveDmgNuker2110Adr = 0x006447FA;
	  DWORD ShowDmgPveDmgNuker211001Adr = 0x00637717;
	  extHook ShowDmgPveDmgNuker2110Fun(handlGame, (DWORD)ShowDmgPveDmgNuker2110, (DWORD)ShowDmgPveDmgNuker2110Adr, 7);
	  extHook ShowDmgPveDmgNuker211001Fun(handlGame, (DWORD)ShowDmgPveDmgNuker211001, (DWORD)ShowDmgPveDmgNuker211001Adr, 7);
	  ShowDmgPveDmgNuker2110Fun.ToggleHook2(ShwDamage);
	  ShowDmgPveDmgNuker211001Fun.ToggleHook2(ShwDamage);
	AcceptInchantClothFun.ToggleHook2(nHuyetLong);
	EffectCloth.ToggleHook();
	GetEffectLoadGameFun.ToggleHook();
	EffectCloth1.ToggleHook();
	GetInforSortFun.ToggleHook();
	AcceptInchantClothType8Fun.ToggleHook();
	ShowOptionClothFunc.ToggleHook2(ShowOptionString);
	InchtClt.ToggleHook();      // Hien thi Inchant sau khi Inchant
	GetInforIncFun.ToggleHook();
	GetInchaSv.ToggleHook();    //Hien thi Inchant Cloth sau khi relog
	GetInchaSv2.ToggleHook();    //Hien thi Inchant Cloth sau khi relog
	SeteffectAnotherUserFun.ToggleHook2(ListEffect);
	BlockShowResourceFun.ToggleHook();
	ShowResetFunc.ToggleHook();
	AcceptItemnewFun.ToggleHook();
	combineCloth.ToggleHook();
	LoadInfor2.ToggleHook2(NickIcon);
	ChangeProcessFun.ToggleHook();
	LockChangeWP.ToggleHook();
	ShowIconSkill.ToggleHook();

	//CheckHeader.ToggleHook();
	LoadIconGame.ToggleHook2(NickIcon);
	LoadIcon.ToggleHook2(NickIcon);
	CPatchGame.ToggleHook();
	hook.ToggleHook();
	/*TestModelFun.ToggleHook();
	TestModel2Fun.ToggleHook();
	TestModel3Fun.ToggleHook();
	TestModel4Fun.ToggleHook();  */
	Effect1.ToggleHook();
	Effect2.ToggleHook();
	Effect3.ToggleHook();
	Effect4.ToggleHook();
	Effect5.ToggleHook();
	Effect6.ToggleHook();
		//
	//GM
	// Hien Thi Form Mod MOi
    /*AddNewUIModFun.ToggleHook2(FormModHealth);
	DrawNewFormFun.ToggleHook();
	BoQuaHienThiLevelFun.ToggleHook();
	BoQuaHienThiLevel2Fun.ToggleHook();
	HienThiTenModFun.ToggleHook();
	DoiHienThiMauBossMoiFun.ToggleHook();
	HienThiIconBossFun.ToggleHook();  */

	DWORD DrawGuideInfomationAdr = 0x00447FCD;
	DWORD GetPoZFormGuideInformationAdr = 0x00447FF4;
	DWORD IncreaseFormGuideAdr = 0x0059487B;
	DWORD IncreaseFormGuide2Adr = 0x00596717;
	DWORD AcceptItemQuestAdr = 0x0048C106;
    DWORD DrawNhiemVuFastAdr = 0x0055D98C;
	LPVOID GuideGameAdd = (LPVOID)VirtualAllocEx(handlGame, NULL, 2000, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
	VirtualProtectEx(handlGame, (LPVOID)GuideGameAdd, 2000, PAGE_EXECUTE_READWRITE, &oldProtect1);
	extHook DrawGuideInfomationFun(handlGame, (DWORD)DrawGuideInfomation, (DWORD)DrawGuideInfomationAdr, 6);
	extHook IncreaseFormGuideFun(handlGame, (DWORD)IncreaseFormGuide, (DWORD)IncreaseFormGuideAdr, 6);
	extHook IncreaseFormGuide2Fun(handlGame, (DWORD)IncreaseFormGuide2, (DWORD)IncreaseFormGuide2Adr, 6);
    extHook DrawNhiemVuFastFun(handlGame, (DWORD)DrawNhiemVuFast, (DWORD)DrawNhiemVuFastAdr, 6);
	extHook AcceptItemQuestFun(handlGame, (DWORD)AcceptItemQuest, (DWORD)AcceptItemQuestAdr, 7);
    extHook GetPoZFormGuideInformationFun(handlGame, (DWORD)GetPoZFormGuideInformation, (DWORD)GetPoZFormGuideInformationAdr, 7);
	DrawGuideInfomationFun.ToggleHook2(GuideGameAdd);
	GetPoZFormGuideInformationFun.ToggleHook2(GuideGameAdd);
	//GetPackageNhiemVuAnCuFun.ToggleHook2(GuideGameAdd);
	IncreaseFormGuideFun.ToggleHook();
	IncreaseFormGuide2Fun.ToggleHook();
    AcceptItemQuestFun.ToggleHook2(GuideGameAdd);
	DrawNhiemVuFastFun.ToggleHook2(GuideGameAdd);

	DWORD VerifyXCodeAdr = 0x0040CFB0;
	DWORD ChangeTypeExodeAdr = 0x006B3AD0;
	extHook ChangeTypeExodeFun(handlGame, (DWORD)ChangeTypeExode, (DWORD)ChangeTypeExodeAdr, 5);
	extHook VerifyXCodeFun(handlGame, (DWORD)VerifyXCode, (DWORD)VerifyXCodeAdr, 5);
	VerifyXCodeFun.ToggleHook();
	//ChangeTypeExodeFun.ToggleHook();

	DWORD GetClassUser2Adr = 0x006BB3F6;
	DWORD GetClassUserAdr = 0x006BA779;
	DWORD ShowClassIconAnotherUserAdr = 0x00660D16;
    DWORD ShowClassLocalUserAdr = 0x0065FDBE;
	extHook GetClassUser2Fun(handlGame, (DWORD)GetClassUser2, (DWORD)GetClassUser2Adr, 5);
	extHook GetClassUserFun(handlGame, (DWORD)GetClassUser, (DWORD)GetClassUserAdr, 5);
	extHook ShowClassIconAnotherUserFun(handlGame, (DWORD)ShowClassIconAnotherUser, (DWORD)ShowClassIconAnotherUserAdr, 6);
	extHook ShowClassLocalUserFun(handlGame, (DWORD)ShowClassLocalUser, (DWORD)ShowClassLocalUserAdr, 5);
	GetClassUser2Fun.ToggleHook();
	GetClassUserFun.ToggleHook();
	LPVOID ShowClassAnotherUser = (LPVOID)VirtualAllocEx(handlGame, NULL, 736, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
	VirtualProtectEx(handlGame, (LPVOID)ShowClassAnotherUser, 736, PAGE_EXECUTE_READWRITE, &oldProtect1);
	ShowClassIconAnotherUserFun.ToggleHook2(ShowClassAnotherUser);
	ShowClassLocalUserFun.ToggleHook2(ShowClassAnotherUser);

	//Fix Health Am
	DWORD ConvertShortToUShortHealthAdr = 0x00602A84;
	DWORD ConvertShortToUShortHealth1Adr = 0x00602A97;
	DWORD ConvertShortToUShortHealth2Adr = 0x00602AB4;
	DWORD ConvertShortToUShortHealth3Adr = 0x00602AC7;
	DWORD ConvertShortToUShortManaAdr = 0x00602BC4;
	DWORD ConvertShortToUShortMana1Adr = 0x00602BD7;
	DWORD ConvertShortToUShortMana2Adr = 0x00602BF4;
	DWORD ConvertShortToUShortMana3Adr = 0x00602C07;
	extHook ConvertShortToUShortHealthFun(handlGame, (DWORD)ConvertShortToUShortHealth, (DWORD)ConvertShortToUShortHealthAdr, 5);
	extHook ConvertShortToUShortHealth1Fun(handlGame, (DWORD)ConvertShortToUShortHealth1, (DWORD)ConvertShortToUShortHealth1Adr, 5);
	extHook ConvertShortToUShortHealth2Fun(handlGame, (DWORD)ConvertShortToUShortHealth2, (DWORD)ConvertShortToUShortHealth2Adr, 5);
	extHook ConvertShortToUShortHealth3Fun(handlGame, (DWORD)ConvertShortToUShortHealth3, (DWORD)ConvertShortToUShortHealth3Adr, 5);
	extHook ConvertShortToUShortManaFun(handlGame, (DWORD)ConvertShortToUShortMana, (DWORD)ConvertShortToUShortManaAdr, 5);
	extHook ConvertShortToUShortMana1Fun(handlGame, (DWORD)ConvertShortToUShortMana1, (DWORD)ConvertShortToUShortMana1Adr, 5);
	extHook ConvertShortToUShortMana2Fun(handlGame, (DWORD)ConvertShortToUShortMana2, (DWORD)ConvertShortToUShortMana2Adr, 5);
	extHook ConvertShortToUShortMana3Fun(handlGame, (DWORD)ConvertShortToUShortMana3, (DWORD)ConvertShortToUShortMana3Adr, 5);
	ConvertShortToUShortHealthFun.ToggleHook();
	ConvertShortToUShortHealth1Fun.ToggleHook();
	ConvertShortToUShortHealth2Fun.ToggleHook();
	ConvertShortToUShortHealth3Fun.ToggleHook();
	ConvertShortToUShortManaFun.ToggleHook();
	ConvertShortToUShortMana1Fun.ToggleHook();
	ConvertShortToUShortMana2Fun.ToggleHook();
	ConvertShortToUShortMana3Fun.ToggleHook();

	DWORD ThongBaoFailInchantAdr = 0x006EA334;
	extHook ThongBaoFailInchantFun(handlGame, (DWORD)ThongBaoFailInchant, (DWORD)ThongBaoFailInchantAdr, 6);
	ThongBaoFailInchantFun.ToggleHook();

    DWORD DisableDrawbtCheckQAdr = 0x005032FB;
	extHook DisableDrawbtCheckQFun(handlGame, (DWORD)DisableDrawbtCheckQ, (DWORD)DisableDrawbtCheckQAdr, 8);
	DisableDrawbtCheckQFun.ToggleHook();

    DWORD DisabledDrawListQuest = 0x005332BA;
	PatchEx((BYTE*)DisabledDrawListQuest, (BYTE*)"\xEB\x07\x90", 3, handlGame);

    DWORD ShowPageKinhMachAdr = 0x00506819;
	DWORD GetPozKichMachPageAdr = 0x00506824;
	DWORD GetPackageKinhMachUserAdr = 0x006AD758;
	DWORD ClearInfoKinhMachAdr = 0x004DFFB8;
	DWORD AcceptItemResourceKinhMachAdr = 0x0048CAAC;
	LPVOID GameKinhMach = (LPVOID)VirtualAllocEx(handlGame, NULL, 1000, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
	VirtualProtectEx(handlGame, (LPVOID)GameKinhMach, 1000, PAGE_EXECUTE_READWRITE, &oldProtect1);
	extHook ShowPageKinhMachFun(handlGame, (DWORD)ShowPageKinhMach, (DWORD)ShowPageKinhMachAdr, 5);
	extHook AcceptItemResourceKinhMachFun(handlGame, (DWORD)AcceptItemResourceKinhMach, (DWORD)AcceptItemResourceKinhMachAdr, 6);
	extHook ClearInfoKinhMachFun(handlGame, (DWORD)ClearInfoKinhMach, (DWORD)ClearInfoKinhMachAdr, 5);
	extHook GetPozKichMachPageFun(handlGame, (DWORD)GetPozKichMachPage, (DWORD)GetPozKichMachPageAdr, 6);
	extHook GetPackageKinhMachUserFun(handlGame, (DWORD)GetPackageKinhMachUser, (DWORD)GetPackageKinhMachUserAdr, 5);
	ShowPageKinhMachFun.ToggleHook2(GameKinhMach);
	GetPozKichMachPageFun.ToggleHook2(GameKinhMach);
	GetPackageKinhMachUserFun.ToggleHook2(GameKinhMach);
	ClearInfoKinhMachFun.ToggleHook2(GameKinhMach);
	AcceptItemResourceKinhMachFun.ToggleHook6(GameKinhMach);

	AddOptionRelicsItemFun.ToggleHook2(GameKinhMach);

	// Shop AD
    DWORD ShopAcDanhAdr = 0x0054DBE4;
	DWORD GetPozFormShopADAdr = 0x0054F183;
	DWORD SendRequestToGSFirstTimeAdr = 0x0054CC7E;
    DWORD GetPackageShopADAdr = 0x006AB003;
	LPVOID ShopEventAcDanh = (LPVOID)VirtualAllocEx(handlGame, NULL, 1000, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
	VirtualProtectEx(handlGame, (LPVOID)ShopEventAcDanh, 1000, PAGE_EXECUTE_READWRITE, &oldProtect1);
	extHook ShopAcDanhFun(handlGame, (DWORD)ShopAcDanh, (DWORD)ShopAcDanhAdr, 6);
	extHook GetPackageShopADFun(handlGame, (DWORD)GetPackageShopAD, (DWORD)GetPackageShopADAdr, 5);
	extHook GetPozFormShopADFun(handlGame, (DWORD)GetPozFormShopAD, (DWORD)GetPozFormShopADAdr, 7);
    extHook SendRequestToGSFirstTimeFun(handlGame, (DWORD)SendRequestToGSFirstTime, (DWORD)SendRequestToGSFirstTimeAdr, 7);
	ShopAcDanhFun.ToggleHook2(ShopEventAcDanh);
	GetPozFormShopADFun.ToggleHook2(ShopEventAcDanh);
	SendRequestToGSFirstTimeFun.ToggleHook2(ShopEventAcDanh);
	GetPackageShopADFun.ToggleHook2(ShopEventAcDanh);

    DWORD ByBassCreateMailQ = 0x005A6995;
	PatchEx((BYTE*)ByBassCreateMailQ,  (BYTE*)"\xE9\x83\x01\x00\x00\x90", 6, handlGame);

	//
	CheckIPConnectFun.ToggleHook2(IpCheckConnect);
	//
    DWORD ByPassCheckSlot = 0x004881DA;
	PatchEx((BYTE*)ByPassCheckSlot, (BYTE*)"\x83\xC0\x73", 3, handlGame);
    //
	DWORD ByPassRequestFullDLH = 0x00538A41;
	PatchEx((BYTE*)ByPassRequestFullDLH, (BYTE*)"\xEB\x6F", 2, handlGame);

	//
	DWORD ByPassRequest5pt = 0x00538AD3;
	PatchEx((BYTE*)ByPassRequest5pt, (BYTE*)"\x02", 1, handlGame);
	// Nhiem Vu
	DWORD DrawGuideQuyetAdr = 0x004DB5A4;
	LPVOID GuideQuestAdd = (LPVOID)VirtualAllocEx(handlGame, NULL, 1000, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
	VirtualProtectEx(handlGame, (LPVOID)GuideQuestAdd, 1000, PAGE_EXECUTE_READWRITE, &oldProtect1);
	extHook DrawGuideQuyetFun(handlGame, (DWORD)DrawGuideQuyet, (DWORD)DrawGuideQuyetAdr, 5);
	//DrawGuideQuyetFun.ToggleHook2(GuideQuestAdd);
}

//---------------------------------------------------------------------------



void __fastcall TForm1::FormShow(TObject *Sender)
{
	LoadProcessGame();
    Application->Terminate();
}
//---------------------------------------------------------------------------

